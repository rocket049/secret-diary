// +build !minimal

#define protected public
#define private public

#include "gui.h"
#include "_cgo_export.h"

#include <QAbstractItemModel>
#include <QAbstractTextDocumentLayout>
#include <QAccessible>
#include <QAccessibleActionInterface>
#include <QAccessibleEditableTextInterface>
#include <QAccessibleEvent>
#include <QAccessibleInterface>
#include <QAccessibleObject>
#include <QAccessiblePlugin>
#include <QAccessibleStateChangeEvent>
#include <QAccessibleTableCellInterface>
#include <QAccessibleTableInterface>
#include <QAccessibleTableModelChangeEvent>
#include <QAccessibleTextCursorEvent>
#include <QAccessibleTextInsertEvent>
#include <QAccessibleTextInterface>
#include <QAccessibleTextRemoveEvent>
#include <QAccessibleTextSelectionEvent>
#include <QAccessibleTextUpdateEvent>
#include <QAccessibleValueChangeEvent>
#include <QAccessibleValueInterface>
#include <QAccessibleWidget>
#include <QAction>
#include <QActionEvent>
#include <QApplicationStateChangeEvent>
#include <QBackingStore>
#include <QBitmap>
#include <QBrush>
#include <QByteArray>
#include <QCameraImageCapture>
#include <QChar>
#include <QChildEvent>
#include <QClipboard>
#include <QCloseEvent>
#include <QColor>
#include <QColorSpace>
#include <QColorTransform>
#include <QConicalGradient>
#include <QContextMenuEvent>
#include <QCursor>
#include <QDBusPendingCallWatcher>
#include <QDataStream>
#include <QDesktopServices>
#include <QDoubleValidator>
#include <QDrag>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QDragMoveEvent>
#include <QDropEvent>
#include <QEnterEvent>
#include <QEvent>
#include <QExposeEvent>
#include <QExtensionFactory>
#include <QExtensionManager>
#include <QFile>
#include <QFileOpenEvent>
#include <QFocusEvent>
#include <QFont>
#include <QFontDatabase>
#include <QFontInfo>
#include <QFontMetrics>
#include <QFontMetricsF>
#include <QGenericPlugin>
#include <QGenericPluginFactory>
#include <QGlyphRun>
#include <QGradient>
#include <QGraphicsObject>
#include <QGraphicsWidget>
#include <QGuiApplication>
#include <QHash>
#include <QHelpEvent>
#include <QHideEvent>
#include <QHoverEvent>
#include <QIODevice>
#include <QIcon>
#include <QIconDragEvent>
#include <QIconEngine>
#include <QIconEnginePlugin>
#include <QImage>
#include <QImageIOHandler>
#include <QImageIOPlugin>
#include <QImageReader>
#include <QImageWriter>
#include <QInputEvent>
#include <QInputMethod>
#include <QInputMethodEvent>
#include <QInputMethodQueryEvent>
#include <QIntValidator>
#include <QKeyEvent>
#include <QKeySequence>
#include <QLatin1String>
#include <QLayout>
#include <QLine>
#include <QLineF>
#include <QLinearGradient>
#include <QLocale>
#include <QMap>
#include <QMargins>
#include <QMarginsF>
#include <QMatrix>
#include <QMatrix4x4>
#include <QMediaPlaylist>
#include <QMediaRecorder>
#include <QMetaMethod>
#include <QMetaObject>
#include <QMimeData>
#include <QModelIndex>
#include <QMouseEvent>
#include <QMoveEvent>
#include <QMovie>
#include <QNativeGestureEvent>
#include <QObject>
#include <QOffscreenSurface>
#include <QOpenGLBuffer>
#include <QOpenGLContext>
#include <QOpenGLContextGroup>
#include <QOpenGLDebugLogger>
#include <QOpenGLDebugMessage>
#include <QOpenGLExtraFunctions>
#include <QOpenGLFramebufferObject>
#include <QOpenGLFramebufferObjectFormat>
#include <QOpenGLFunctions>
#include <QOpenGLPaintDevice>
#include <QOpenGLPixelTransferOptions>
#include <QOpenGLShader>
#include <QOpenGLShaderProgram>
#include <QOpenGLTexture>
#include <QOpenGLTextureBlitter>
#include <QOpenGLTimeMonitor>
#include <QOpenGLTimerQuery>
#include <QOpenGLVersionProfile>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLWindow>
#include <QPageLayout>
#include <QPageSize>
#include <QPagedPaintDevice>
#include <QPaintDevice>
#include <QPaintDeviceWindow>
#include <QPaintEngine>
#include <QPaintEngineState>
#include <QPaintEvent>
#include <QPainter>
#include <QPainterPath>
#include <QPainterPathStroker>
#include <QPalette>
#include <QPdfWriter>
#include <QPen>
#include <QPersistentModelIndex>
#include <QPicture>
#include <QPictureFormatPlugin>
#include <QPictureIO>
#include <QPixelFormat>
#include <QPixmap>
#include <QPixmapCache>
#include <QPlatformSurfaceEvent>
#include <QPoint>
#include <QPointF>
#include <QPointingDeviceUniqueId>
#include <QPolygon>
#include <QPolygonF>
#include <QQuaternion>
#include <QQuickItem>
#include <QRadialGradient>
#include <QRadioData>
#include <QRasterWindow>
#include <QRawFont>
#include <QRect>
#include <QRectF>
#include <QRegExp>
#include <QRegExpValidator>
#include <QRegion>
#include <QRegularExpression>
#include <QRegularExpressionValidator>
#include <QRemoteObjectPendingCallWatcher>
#include <QResizeEvent>
#include <QRgba64>
#include <QScreen>
#include <QScreenOrientationChangeEvent>
#include <QScrollEvent>
#include <QScrollPrepareEvent>
#include <QSessionManager>
#include <QShortcutEvent>
#include <QShowEvent>
#include <QSize>
#include <QSizeF>
#include <QStandardItem>
#include <QStandardItemModel>
#include <QStaticText>
#include <QStatusTipEvent>
#include <QString>
#include <QStyleHints>
#include <QSurface>
#include <QSurfaceFormat>
#include <QSyntaxHighlighter>
#include <QTabletEvent>
#include <QTextBlock>
#include <QTextBlockFormat>
#include <QTextBlockGroup>
#include <QTextBlockUserData>
#include <QTextCharFormat>
#include <QTextCodec>
#include <QTextCursor>
#include <QTextDocument>
#include <QTextDocumentFragment>
#include <QTextDocumentWriter>
#include <QTextFormat>
#include <QTextFragment>
#include <QTextFrame>
#include <QTextFrameFormat>
#include <QTextImageFormat>
#include <QTextInlineObject>
#include <QTextItem>
#include <QTextLayout>
#include <QTextLength>
#include <QTextLine>
#include <QTextList>
#include <QTextListFormat>
#include <QTextObject>
#include <QTextObjectInterface>
#include <QTextOption>
#include <QTextTable>
#include <QTextTableCell>
#include <QTextTableCellFormat>
#include <QTextTableFormat>
#include <QTimerEvent>
#include <QTouchDevice>
#include <QTouchEvent>
#include <QTransform>
#include <QUrl>
#include <QValidator>
#include <QVariant>
#include <QVector>
#include <QVector2D>
#include <QVector3D>
#include <QVector4D>
#include <QWhatsThisClickedEvent>
#include <QWheelEvent>
#include <QWidget>
#include <QWindow>
#include <QWindowStateChangeEvent>

class MyQAbstractTextDocumentLayout: public QAbstractTextDocumentLayout
{
public:
	QRectF blockBoundingRect(const QTextBlock & block) const { return *static_cast<QRectF*>(callbackQAbstractTextDocumentLayout_BlockBoundingRect(const_cast<void*>(static_cast<const void*>(this)), const_cast<QTextBlock*>(&block))); };
	void documentChanged(int position, int charsRemoved, int charsAdded) { callbackQAbstractTextDocumentLayout_DocumentChanged(this, position, charsRemoved, charsAdded); };
	QSizeF documentSize() const { return *static_cast<QSizeF*>(callbackQAbstractTextDocumentLayout_DocumentSize(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_DocumentSizeChanged(const QSizeF & newSize) { callbackQAbstractTextDocumentLayout_DocumentSizeChanged(this, const_cast<QSizeF*>(&newSize)); };
	QRectF frameBoundingRect(QTextFrame * frame) const { return *static_cast<QRectF*>(callbackQAbstractTextDocumentLayout_FrameBoundingRect(const_cast<void*>(static_cast<const void*>(this)), frame)); };
	int hitTest(const QPointF & point, Qt::HitTestAccuracy accuracy) const { return callbackQAbstractTextDocumentLayout_HitTest(const_cast<void*>(static_cast<const void*>(this)), const_cast<QPointF*>(&point), accuracy); };
	int pageCount() const { return callbackQAbstractTextDocumentLayout_PageCount(const_cast<void*>(static_cast<const void*>(this))); };
	void Signal_PageCountChanged(int newPages) { callbackQAbstractTextDocumentLayout_PageCountChanged(this, newPages); };
	void Signal_Update(const QRectF & rect) { callbackQAbstractTextDocumentLayout_Update(this, const_cast<QRectF*>(&rect)); };
	void Signal_UpdateBlock(const QTextBlock & block) { callbackQAbstractTextDocumentLayout_UpdateBlock(this, const_cast<QTextBlock*>(&block)); };
	void childEvent(QChildEvent * event) { callbackQAbstractTextDocumentLayout_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQAbstractTextDocumentLayout_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQAbstractTextDocumentLayout_CustomEvent(this, event); };
	void deleteLater() { callbackQAbstractTextDocumentLayout_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQAbstractTextDocumentLayout_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQAbstractTextDocumentLayout_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQAbstractTextDocumentLayout_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQAbstractTextDocumentLayout_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQAbstractTextDocumentLayout_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQAbstractTextDocumentLayout_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQAbstractTextDocumentLayout_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QAbstractTextDocumentLayout*)
Q_DECLARE_METATYPE(MyQAbstractTextDocumentLayout*)

int QAbstractTextDocumentLayout_QAbstractTextDocumentLayout_QRegisterMetaType(){qRegisterMetaType<QAbstractTextDocumentLayout*>(); return qRegisterMetaType<MyQAbstractTextDocumentLayout*>();}

struct QtGui_PackedString QAbstractTextDocumentLayout_AnchorAt(void* ptr, void* position)
{
	return ({ QByteArray* t81dfdf = new QByteArray(static_cast<QAbstractTextDocumentLayout*>(ptr)->anchorAt(*static_cast<QPointF*>(position)).toUtf8()); QtGui_PackedString { const_cast<char*>(t81dfdf->prepend("WHITESPACE").constData()+10), t81dfdf->size()-10, t81dfdf }; });
}

void* QAbstractTextDocumentLayout_BlockBoundingRect(void* ptr, void* block)
{
	return ({ QRectF tmpValue = static_cast<QAbstractTextDocumentLayout*>(ptr)->blockBoundingRect(*static_cast<QTextBlock*>(block)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QAbstractTextDocumentLayout_BlockWithMarkerAt(void* ptr, void* pos)
{
	return new QTextBlock(static_cast<QAbstractTextDocumentLayout*>(ptr)->blockWithMarkerAt(*static_cast<QPointF*>(pos)));
}

void* QAbstractTextDocumentLayout_Document(void* ptr)
{
	return static_cast<QAbstractTextDocumentLayout*>(ptr)->document();
}

void QAbstractTextDocumentLayout_DocumentChanged(void* ptr, int position, int charsRemoved, int charsAdded)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->documentChanged(position, charsRemoved, charsAdded);
}

void* QAbstractTextDocumentLayout_DocumentSize(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QAbstractTextDocumentLayout*>(ptr)->documentSize(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QSizeF &)>(&QAbstractTextDocumentLayout::documentSizeChanged), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QSizeF &)>(&MyQAbstractTextDocumentLayout::Signal_DocumentSizeChanged), static_cast<Qt::ConnectionType>(t));
}

void QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(void* ptr)
{
	QObject::disconnect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QSizeF &)>(&QAbstractTextDocumentLayout::documentSizeChanged), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QSizeF &)>(&MyQAbstractTextDocumentLayout::Signal_DocumentSizeChanged));
}

void QAbstractTextDocumentLayout_DocumentSizeChanged(void* ptr, void* newSize)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->documentSizeChanged(*static_cast<QSizeF*>(newSize));
}

void QAbstractTextDocumentLayout_DrawInlineObject(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->drawInlineObject(static_cast<QPainter*>(painter), *static_cast<QRectF*>(rect), *static_cast<QTextInlineObject*>(object), posInDocument, *static_cast<QTextFormat*>(format));
}

void QAbstractTextDocumentLayout_DrawInlineObjectDefault(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::drawInlineObject(static_cast<QPainter*>(painter), *static_cast<QRectF*>(rect), *static_cast<QTextInlineObject*>(object), posInDocument, *static_cast<QTextFormat*>(format));
}

void* QAbstractTextDocumentLayout_Format(void* ptr, int position)
{
	return new QTextCharFormat(static_cast<QAbstractTextDocumentLayout*>(ptr)->format(position));
}

void* QAbstractTextDocumentLayout_FormatAt(void* ptr, void* pos)
{
	return new QTextFormat(static_cast<QAbstractTextDocumentLayout*>(ptr)->formatAt(*static_cast<QPointF*>(pos)));
}

void* QAbstractTextDocumentLayout_FrameBoundingRect(void* ptr, void* frame)
{
	return ({ QRectF tmpValue = static_cast<QAbstractTextDocumentLayout*>(ptr)->frameBoundingRect(static_cast<QTextFrame*>(frame)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QAbstractTextDocumentLayout_HandlerForObject(void* ptr, int objectType)
{
	return static_cast<QAbstractTextDocumentLayout*>(ptr)->handlerForObject(objectType);
}

int QAbstractTextDocumentLayout_HitTest(void* ptr, void* point, long long accuracy)
{
	return static_cast<QAbstractTextDocumentLayout*>(ptr)->hitTest(*static_cast<QPointF*>(point), static_cast<Qt::HitTestAccuracy>(accuracy));
}

struct QtGui_PackedString QAbstractTextDocumentLayout_ImageAt(void* ptr, void* pos)
{
	return ({ QByteArray* t0eaa79 = new QByteArray(static_cast<QAbstractTextDocumentLayout*>(ptr)->imageAt(*static_cast<QPointF*>(pos)).toUtf8()); QtGui_PackedString { const_cast<char*>(t0eaa79->prepend("WHITESPACE").constData()+10), t0eaa79->size()-10, t0eaa79 }; });
}

int QAbstractTextDocumentLayout_PageCount(void* ptr)
{
	return static_cast<QAbstractTextDocumentLayout*>(ptr)->pageCount();
}

void QAbstractTextDocumentLayout_ConnectPageCountChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(int)>(&QAbstractTextDocumentLayout::pageCountChanged), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(int)>(&MyQAbstractTextDocumentLayout::Signal_PageCountChanged), static_cast<Qt::ConnectionType>(t));
}

void QAbstractTextDocumentLayout_DisconnectPageCountChanged(void* ptr)
{
	QObject::disconnect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(int)>(&QAbstractTextDocumentLayout::pageCountChanged), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(int)>(&MyQAbstractTextDocumentLayout::Signal_PageCountChanged));
}

void QAbstractTextDocumentLayout_PageCountChanged(void* ptr, int newPages)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->pageCountChanged(newPages);
}

void* QAbstractTextDocumentLayout_PaintDevice(void* ptr)
{
	return static_cast<QAbstractTextDocumentLayout*>(ptr)->paintDevice();
}

void QAbstractTextDocumentLayout_PositionInlineObject(void* ptr, void* item, int posInDocument, void* format)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->positionInlineObject(*static_cast<QTextInlineObject*>(item), posInDocument, *static_cast<QTextFormat*>(format));
}

void QAbstractTextDocumentLayout_PositionInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::positionInlineObject(*static_cast<QTextInlineObject*>(item), posInDocument, *static_cast<QTextFormat*>(format));
}

void QAbstractTextDocumentLayout_RegisterHandler(void* ptr, int objectType, void* component)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->registerHandler(objectType, static_cast<QOffscreenSurface*>(component));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->registerHandler(objectType, static_cast<QPaintDeviceWindow*>(component));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->registerHandler(objectType, static_cast<QPdfWriter*>(component));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->registerHandler(objectType, static_cast<QWindow*>(component));
	} else {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->registerHandler(objectType, static_cast<QObject*>(component));
	}
}

void QAbstractTextDocumentLayout_ResizeInlineObject(void* ptr, void* item, int posInDocument, void* format)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->resizeInlineObject(*static_cast<QTextInlineObject*>(item), posInDocument, *static_cast<QTextFormat*>(format));
}

void QAbstractTextDocumentLayout_ResizeInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::resizeInlineObject(*static_cast<QTextInlineObject*>(item), posInDocument, *static_cast<QTextFormat*>(format));
}

void QAbstractTextDocumentLayout_SetPaintDevice(void* ptr, void* device)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(device))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->setPaintDevice(static_cast<QPaintDeviceWindow*>(device));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(device))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->setPaintDevice(static_cast<QPdfWriter*>(device));
	} else {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->setPaintDevice(static_cast<QPaintDevice*>(device));
	}
}

void QAbstractTextDocumentLayout_UnregisterHandler(void* ptr, int objectType, void* component)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->unregisterHandler(objectType, static_cast<QOffscreenSurface*>(component));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->unregisterHandler(objectType, static_cast<QPaintDeviceWindow*>(component));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->unregisterHandler(objectType, static_cast<QPdfWriter*>(component));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(component))) {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->unregisterHandler(objectType, static_cast<QWindow*>(component));
	} else {
		static_cast<QAbstractTextDocumentLayout*>(ptr)->unregisterHandler(objectType, static_cast<QObject*>(component));
	}
}

void QAbstractTextDocumentLayout_ConnectUpdate(void* ptr, long long t)
{
	QObject::connect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QRectF &)>(&QAbstractTextDocumentLayout::update), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QRectF &)>(&MyQAbstractTextDocumentLayout::Signal_Update), static_cast<Qt::ConnectionType>(t));
}

void QAbstractTextDocumentLayout_DisconnectUpdate(void* ptr)
{
	QObject::disconnect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QRectF &)>(&QAbstractTextDocumentLayout::update), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QRectF &)>(&MyQAbstractTextDocumentLayout::Signal_Update));
}

void QAbstractTextDocumentLayout_Update(void* ptr, void* rect)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->update(*static_cast<QRectF*>(rect));
}

void QAbstractTextDocumentLayout_ConnectUpdateBlock(void* ptr, long long t)
{
	QObject::connect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QTextBlock &)>(&QAbstractTextDocumentLayout::updateBlock), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QTextBlock &)>(&MyQAbstractTextDocumentLayout::Signal_UpdateBlock), static_cast<Qt::ConnectionType>(t));
}

void QAbstractTextDocumentLayout_DisconnectUpdateBlock(void* ptr)
{
	QObject::disconnect(static_cast<QAbstractTextDocumentLayout*>(ptr), static_cast<void (QAbstractTextDocumentLayout::*)(const QTextBlock &)>(&QAbstractTextDocumentLayout::updateBlock), static_cast<MyQAbstractTextDocumentLayout*>(ptr), static_cast<void (MyQAbstractTextDocumentLayout::*)(const QTextBlock &)>(&MyQAbstractTextDocumentLayout::Signal_UpdateBlock));
}

void QAbstractTextDocumentLayout_UpdateBlock(void* ptr, void* block)
{
	static_cast<QAbstractTextDocumentLayout*>(ptr)->updateBlock(*static_cast<QTextBlock*>(block));
}

void* QAbstractTextDocumentLayout___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAbstractTextDocumentLayout___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAbstractTextDocumentLayout___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QAbstractTextDocumentLayout___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QAbstractTextDocumentLayout___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QAbstractTextDocumentLayout___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QAbstractTextDocumentLayout___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAbstractTextDocumentLayout___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAbstractTextDocumentLayout___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QAbstractTextDocumentLayout___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAbstractTextDocumentLayout___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAbstractTextDocumentLayout___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QAbstractTextDocumentLayout_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::childEvent(static_cast<QChildEvent*>(event));
}

void QAbstractTextDocumentLayout_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QAbstractTextDocumentLayout_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::customEvent(static_cast<QEvent*>(event));
}

void QAbstractTextDocumentLayout_DeleteLaterDefault(void* ptr)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::deleteLater();
}

void QAbstractTextDocumentLayout_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QAbstractTextDocumentLayout_EventDefault(void* ptr, void* e)
{
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::event(static_cast<QEvent*>(e));
}

char QAbstractTextDocumentLayout_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QAbstractTextDocumentLayout_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::metaObject());
}

void QAbstractTextDocumentLayout_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QAbstractTextDocumentLayout*>(ptr)->QAbstractTextDocumentLayout::timerEvent(static_cast<QTimerEvent*>(event));
}

char QAccessible_QAccessible_IsActive()
{
	return QAccessible::isActive();
}

void* QAccessible_QAccessible_QueryAccessibleInterface(void* object)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return QAccessible::queryAccessibleInterface(static_cast<QOffscreenSurface*>(object));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return QAccessible::queryAccessibleInterface(static_cast<QPaintDeviceWindow*>(object));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return QAccessible::queryAccessibleInterface(static_cast<QPdfWriter*>(object));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return QAccessible::queryAccessibleInterface(static_cast<QWindow*>(object));
	} else {
		return QAccessible::queryAccessibleInterface(static_cast<QObject*>(object));
	}
}

void QAccessible_QAccessible_SetRootObject(void* object)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		QAccessible::setRootObject(static_cast<QOffscreenSurface*>(object));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		QAccessible::setRootObject(static_cast<QPaintDeviceWindow*>(object));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		QAccessible::setRootObject(static_cast<QPdfWriter*>(object));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		QAccessible::setRootObject(static_cast<QWindow*>(object));
	} else {
		QAccessible::setRootObject(static_cast<QObject*>(object));
	}
}

void QAccessible_QAccessible_UpdateAccessibility2(void* event)
{
	QAccessible::updateAccessibility(static_cast<QAccessibleEvent*>(event));
}

class MyQAccessibleActionInterface: public QAccessibleActionInterface
{
public:
	QStringList actionNames() const { return ({ QtGui_PackedString tempVal = callbackQAccessibleActionInterface_ActionNames(const_cast<void*>(static_cast<const void*>(this))); QStringList ret = QString::fromUtf8(tempVal.data, tempVal.len).split("¡¦!", QString::SkipEmptyParts); free(tempVal.data); ret; }); };
	void doAction(const QString & actionName) { QByteArray* tcd1a8c = new QByteArray(actionName.toUtf8()); QtGui_PackedString actionNamePacked = { const_cast<char*>(tcd1a8c->prepend("WHITESPACE").constData()+10), tcd1a8c->size()-10, tcd1a8c };callbackQAccessibleActionInterface_DoAction(this, actionNamePacked); };
	QStringList keyBindingsForAction(const QString & actionName) const { QByteArray* tcd1a8c = new QByteArray(actionName.toUtf8()); QtGui_PackedString actionNamePacked = { const_cast<char*>(tcd1a8c->prepend("WHITESPACE").constData()+10), tcd1a8c->size()-10, tcd1a8c };return ({ QtGui_PackedString tempVal = callbackQAccessibleActionInterface_KeyBindingsForAction(const_cast<void*>(static_cast<const void*>(this)), actionNamePacked); QStringList ret = QString::fromUtf8(tempVal.data, tempVal.len).split("¡¦!", QString::SkipEmptyParts); free(tempVal.data); ret; }); };
	QString localizedActionDescription(const QString & actionName) const { QByteArray* tcd1a8c = new QByteArray(actionName.toUtf8()); QtGui_PackedString actionNamePacked = { const_cast<char*>(tcd1a8c->prepend("WHITESPACE").constData()+10), tcd1a8c->size()-10, tcd1a8c };return ({ QtGui_PackedString tempVal = callbackQAccessibleActionInterface_LocalizedActionDescription(const_cast<void*>(static_cast<const void*>(this)), actionNamePacked); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QString localizedActionName(const QString & actionName) const { QByteArray* tcd1a8c = new QByteArray(actionName.toUtf8()); QtGui_PackedString actionNamePacked = { const_cast<char*>(tcd1a8c->prepend("WHITESPACE").constData()+10), tcd1a8c->size()-10, tcd1a8c };return ({ QtGui_PackedString tempVal = callbackQAccessibleActionInterface_LocalizedActionName(const_cast<void*>(static_cast<const void*>(this)), actionNamePacked); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	 ~MyQAccessibleActionInterface() { callbackQAccessibleActionInterface_DestroyQAccessibleActionInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleActionInterface*)
Q_DECLARE_METATYPE(MyQAccessibleActionInterface*)

int QAccessibleActionInterface_QAccessibleActionInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleActionInterface*>(); return qRegisterMetaType<MyQAccessibleActionInterface*>();}

struct QtGui_PackedString QAccessibleActionInterface_ActionNames(void* ptr)
{
	return ({ QByteArray* t71e118 = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->actionNames().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t71e118->prepend("WHITESPACE").constData()+10), t71e118->size()-10, t71e118 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction()
{
	return ({ QByteArray* t572cdb = new QByteArray(QAccessibleActionInterface::decreaseAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t572cdb->prepend("WHITESPACE").constData()+10), t572cdb->size()-10, t572cdb }; });
}

void QAccessibleActionInterface_DoAction(void* ptr, struct QtGui_PackedString actionName)
{
	static_cast<QAccessibleActionInterface*>(ptr)->doAction(QString::fromUtf8(actionName.data, actionName.len));
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction()
{
	return ({ QByteArray* tf61c5c = new QByteArray(QAccessibleActionInterface::increaseAction().toUtf8()); QtGui_PackedString { const_cast<char*>(tf61c5c->prepend("WHITESPACE").constData()+10), tf61c5c->size()-10, tf61c5c }; });
}

struct QtGui_PackedString QAccessibleActionInterface_KeyBindingsForAction(void* ptr, struct QtGui_PackedString actionName)
{
	return ({ QByteArray* te37e4d = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->keyBindingsForAction(QString::fromUtf8(actionName.data, actionName.len)).join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(te37e4d->prepend("WHITESPACE").constData()+10), te37e4d->size()-10, te37e4d }; });
}

struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescription(void* ptr, struct QtGui_PackedString actionName)
{
	return ({ QByteArray* tbea3be = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->localizedActionDescription(QString::fromUtf8(actionName.data, actionName.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(tbea3be->prepend("WHITESPACE").constData()+10), tbea3be->size()-10, tbea3be }; });
}

struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescriptionDefault(void* ptr, struct QtGui_PackedString actionName)
{
		return ({ QByteArray* t62e182 = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->QAccessibleActionInterface::localizedActionDescription(QString::fromUtf8(actionName.data, actionName.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(t62e182->prepend("WHITESPACE").constData()+10), t62e182->size()-10, t62e182 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionName(void* ptr, struct QtGui_PackedString actionName)
{
	return ({ QByteArray* t0ed8e5 = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->localizedActionName(QString::fromUtf8(actionName.data, actionName.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(t0ed8e5->prepend("WHITESPACE").constData()+10), t0ed8e5->size()-10, t0ed8e5 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionNameDefault(void* ptr, struct QtGui_PackedString actionName)
{
		return ({ QByteArray* t96c424 = new QByteArray(static_cast<QAccessibleActionInterface*>(ptr)->QAccessibleActionInterface::localizedActionName(QString::fromUtf8(actionName.data, actionName.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(t96c424->prepend("WHITESPACE").constData()+10), t96c424->size()-10, t96c424 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction()
{
	return ({ QByteArray* t1ad988 = new QByteArray(QAccessibleActionInterface::nextPageAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t1ad988->prepend("WHITESPACE").constData()+10), t1ad988->size()-10, t1ad988 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PressAction()
{
	return ({ QByteArray* t899f7e = new QByteArray(QAccessibleActionInterface::pressAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t899f7e->prepend("WHITESPACE").constData()+10), t899f7e->size()-10, t899f7e }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction()
{
	return ({ QByteArray* t44741f = new QByteArray(QAccessibleActionInterface::previousPageAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t44741f->prepend("WHITESPACE").constData()+10), t44741f->size()-10, t44741f }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction()
{
	return ({ QByteArray* tf765c1 = new QByteArray(QAccessibleActionInterface::scrollDownAction().toUtf8()); QtGui_PackedString { const_cast<char*>(tf765c1->prepend("WHITESPACE").constData()+10), tf765c1->size()-10, tf765c1 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction()
{
	return ({ QByteArray* t35286b = new QByteArray(QAccessibleActionInterface::scrollLeftAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t35286b->prepend("WHITESPACE").constData()+10), t35286b->size()-10, t35286b }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction()
{
	return ({ QByteArray* taa7ac9 = new QByteArray(QAccessibleActionInterface::scrollRightAction().toUtf8()); QtGui_PackedString { const_cast<char*>(taa7ac9->prepend("WHITESPACE").constData()+10), taa7ac9->size()-10, taa7ac9 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction()
{
	return ({ QByteArray* t6e10e7 = new QByteArray(QAccessibleActionInterface::scrollUpAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t6e10e7->prepend("WHITESPACE").constData()+10), t6e10e7->size()-10, t6e10e7 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction()
{
	return ({ QByteArray* t8516d1 = new QByteArray(QAccessibleActionInterface::setFocusAction().toUtf8()); QtGui_PackedString { const_cast<char*>(t8516d1->prepend("WHITESPACE").constData()+10), t8516d1->size()-10, t8516d1 }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction()
{
	return ({ QByteArray* tfc8b6a = new QByteArray(QAccessibleActionInterface::showMenuAction().toUtf8()); QtGui_PackedString { const_cast<char*>(tfc8b6a->prepend("WHITESPACE").constData()+10), tfc8b6a->size()-10, tfc8b6a }; });
}

struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction()
{
	return ({ QByteArray* tc0e2c4 = new QByteArray(QAccessibleActionInterface::toggleAction().toUtf8()); QtGui_PackedString { const_cast<char*>(tc0e2c4->prepend("WHITESPACE").constData()+10), tc0e2c4->size()-10, tc0e2c4 }; });
}

void QAccessibleActionInterface_DestroyQAccessibleActionInterface(void* ptr)
{
	static_cast<QAccessibleActionInterface*>(ptr)->~QAccessibleActionInterface();
}

void QAccessibleActionInterface_DestroyQAccessibleActionInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQAccessibleEditableTextInterface: public QAccessibleEditableTextInterface
{
public:
	void deleteText(int startOffset, int endOffset) { callbackQAccessibleEditableTextInterface_DeleteText(this, startOffset, endOffset); };
	void insertText(int offset, const QString & text) { QByteArray* t372ea0 = new QByteArray(text.toUtf8()); QtGui_PackedString textPacked = { const_cast<char*>(t372ea0->prepend("WHITESPACE").constData()+10), t372ea0->size()-10, t372ea0 };callbackQAccessibleEditableTextInterface_InsertText(this, offset, textPacked); };
	void replaceText(int startOffset, int endOffset, const QString & text) { QByteArray* t372ea0 = new QByteArray(text.toUtf8()); QtGui_PackedString textPacked = { const_cast<char*>(t372ea0->prepend("WHITESPACE").constData()+10), t372ea0->size()-10, t372ea0 };callbackQAccessibleEditableTextInterface_ReplaceText(this, startOffset, endOffset, textPacked); };
	 ~MyQAccessibleEditableTextInterface() { callbackQAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleEditableTextInterface*)
Q_DECLARE_METATYPE(MyQAccessibleEditableTextInterface*)

int QAccessibleEditableTextInterface_QAccessibleEditableTextInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleEditableTextInterface*>(); return qRegisterMetaType<MyQAccessibleEditableTextInterface*>();}

void QAccessibleEditableTextInterface_DeleteText(void* ptr, int startOffset, int endOffset)
{
	static_cast<QAccessibleEditableTextInterface*>(ptr)->deleteText(startOffset, endOffset);
}

void QAccessibleEditableTextInterface_InsertText(void* ptr, int offset, struct QtGui_PackedString text)
{
	static_cast<QAccessibleEditableTextInterface*>(ptr)->insertText(offset, QString::fromUtf8(text.data, text.len));
}

void QAccessibleEditableTextInterface_ReplaceText(void* ptr, int startOffset, int endOffset, struct QtGui_PackedString text)
{
	static_cast<QAccessibleEditableTextInterface*>(ptr)->replaceText(startOffset, endOffset, QString::fromUtf8(text.data, text.len));
}

void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(void* ptr)
{
	static_cast<QAccessibleEditableTextInterface*>(ptr)->~QAccessibleEditableTextInterface();
}

void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQAccessibleEvent: public QAccessibleEvent
{
public:
	MyQAccessibleEvent(QObject *object, QAccessible::Event ty) : QAccessibleEvent(object, ty) {QAccessibleEvent_QAccessibleEvent_QRegisterMetaType();};
	MyQAccessibleEvent(QAccessibleInterface *interfa, QAccessible::Event ty) : QAccessibleEvent(interfa, ty) {QAccessibleEvent_QAccessibleEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQAccessibleEvent() { callbackQAccessibleEvent_DestroyQAccessibleEvent(this); };
};

Q_DECLARE_METATYPE(QAccessibleEvent*)
Q_DECLARE_METATYPE(MyQAccessibleEvent*)

int QAccessibleEvent_QAccessibleEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleEvent*>(); return qRegisterMetaType<MyQAccessibleEvent*>();}

void* QAccessibleEvent_NewQAccessibleEvent2(void* object, long long ty)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QCameraImageCapture*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QDBusPendingCallWatcher*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QExtensionFactory*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QExtensionManager*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QGraphicsObject*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QGraphicsWidget*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QLayout*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QMediaPlaylist*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QMediaRecorder*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QOffscreenSurface*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QPaintDeviceWindow*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QPdfWriter*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QQuickItem*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QRadioData*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QWidget*>(object), static_cast<QAccessible::Event>(ty));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleEvent(static_cast<QWindow*>(object), static_cast<QAccessible::Event>(ty));
	} else {
		return new MyQAccessibleEvent(static_cast<QObject*>(object), static_cast<QAccessible::Event>(ty));
	}
}

void* QAccessibleEvent_NewQAccessibleEvent3(void* interfa, long long ty)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(interfa))) {
		return new MyQAccessibleEvent(static_cast<QAccessibleWidget*>(interfa), static_cast<QAccessible::Event>(ty));
	} else {
		return new MyQAccessibleEvent(static_cast<QAccessibleInterface*>(interfa), static_cast<QAccessible::Event>(ty));
	}
}

void* QAccessibleEvent_AccessibleInterface(void* ptr)
{
	return static_cast<QAccessibleEvent*>(ptr)->accessibleInterface();
}

void* QAccessibleEvent_AccessibleInterfaceDefault(void* ptr)
{
	if (dynamic_cast<QAccessibleValueChangeEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleValueChangeEvent*>(ptr)->QAccessibleValueChangeEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTextUpdateEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTextUpdateEvent*>(ptr)->QAccessibleTextUpdateEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTextSelectionEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTextSelectionEvent*>(ptr)->QAccessibleTextSelectionEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTextRemoveEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTextRemoveEvent*>(ptr)->QAccessibleTextRemoveEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTextInsertEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTextInsertEvent*>(ptr)->QAccessibleTextInsertEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTextCursorEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTextCursorEvent*>(ptr)->QAccessibleTextCursorEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleTableModelChangeEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->QAccessibleTableModelChangeEvent::accessibleInterface();
	} else if (dynamic_cast<QAccessibleStateChangeEvent*>(static_cast<QAccessibleEvent*>(ptr))) {
		return static_cast<QAccessibleStateChangeEvent*>(ptr)->QAccessibleStateChangeEvent::accessibleInterface();
	} else {
		return static_cast<QAccessibleEvent*>(ptr)->QAccessibleEvent::accessibleInterface();
	}
}

int QAccessibleEvent_Child(void* ptr)
{
	return static_cast<QAccessibleEvent*>(ptr)->child();
}

void* QAccessibleEvent_Object(void* ptr)
{
	return static_cast<QAccessibleEvent*>(ptr)->object();
}

void QAccessibleEvent_SetChild(void* ptr, int child)
{
	static_cast<QAccessibleEvent*>(ptr)->setChild(child);
}

long long QAccessibleEvent_Type(void* ptr)
{
	return static_cast<QAccessibleEvent*>(ptr)->type();
}

void QAccessibleEvent_DestroyQAccessibleEvent(void* ptr)
{
	static_cast<QAccessibleEvent*>(ptr)->~QAccessibleEvent();
}

void QAccessibleEvent_DestroyQAccessibleEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQAccessibleInterface: public QAccessibleInterface
{
public:
	QColor backgroundColor() const { return *static_cast<QColor*>(callbackQAccessibleInterface_BackgroundColor(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessibleInterface * child(int index) const { return static_cast<QAccessibleInterface*>(callbackQAccessibleInterface_Child(const_cast<void*>(static_cast<const void*>(this)), index)); };
	QAccessibleInterface * childAt(int x, int y) const { return static_cast<QAccessibleInterface*>(callbackQAccessibleInterface_ChildAt(const_cast<void*>(static_cast<const void*>(this)), x, y)); };
	int childCount() const { return callbackQAccessibleInterface_ChildCount(const_cast<void*>(static_cast<const void*>(this))); };
	QAccessibleInterface * focusChild() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleInterface_FocusChild(const_cast<void*>(static_cast<const void*>(this)))); };
	QColor foregroundColor() const { return *static_cast<QColor*>(callbackQAccessibleInterface_ForegroundColor(const_cast<void*>(static_cast<const void*>(this)))); };
	int indexOfChild(const QAccessibleInterface * child) const { return callbackQAccessibleInterface_IndexOfChild(const_cast<void*>(static_cast<const void*>(this)), const_cast<QAccessibleInterface*>(child)); };
	void * interface_cast(QAccessible::InterfaceType ty) { return callbackQAccessibleInterface_Interface_cast(this, ty); };
	bool isValid() const { return callbackQAccessibleInterface_IsValid(const_cast<void*>(static_cast<const void*>(this))) != 0; };
	QObject * object() const { return static_cast<QObject*>(callbackQAccessibleInterface_Object(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessibleInterface * parent() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleInterface_Parent(const_cast<void*>(static_cast<const void*>(this)))); };
	QRect rect() const { return *static_cast<QRect*>(callbackQAccessibleInterface_Rect(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessible::Role role() const { return static_cast<QAccessible::Role>(callbackQAccessibleInterface_Role(const_cast<void*>(static_cast<const void*>(this)))); };
	void setText(QAccessible::Text t, const QString & text) { QByteArray* t372ea0 = new QByteArray(text.toUtf8()); QtGui_PackedString textPacked = { const_cast<char*>(t372ea0->prepend("WHITESPACE").constData()+10), t372ea0->size()-10, t372ea0 };callbackQAccessibleInterface_SetText(this, t, textPacked); };
	QString text(QAccessible::Text t) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleInterface_Text(const_cast<void*>(static_cast<const void*>(this)), t); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QWindow * window() const { return static_cast<QWindow*>(callbackQAccessibleInterface_Window(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQAccessibleInterface() { callbackQAccessibleInterface_DestroyQAccessibleInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleInterface*)
Q_DECLARE_METATYPE(MyQAccessibleInterface*)

int QAccessibleInterface_QAccessibleInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleInterface*>(); return qRegisterMetaType<MyQAccessibleInterface*>();}

void* QAccessibleInterface_ActionInterface(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->actionInterface();
}

void* QAccessibleInterface_BackgroundColor(void* ptr)
{
	return new QColor(static_cast<QAccessibleInterface*>(ptr)->backgroundColor());
}

void* QAccessibleInterface_BackgroundColorDefault(void* ptr)
{
	if (dynamic_cast<QAccessibleObject*>(static_cast<QAccessibleInterface*>(ptr))) {
		return new QColor(static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::backgroundColor());
	} else {
		return new QColor(static_cast<QAccessibleInterface*>(ptr)->QAccessibleInterface::backgroundColor());
	}
}

void* QAccessibleInterface_Child(void* ptr, int index)
{
	return static_cast<QAccessibleInterface*>(ptr)->child(index);
}

void* QAccessibleInterface_ChildAt(void* ptr, int x, int y)
{
	return static_cast<QAccessibleInterface*>(ptr)->childAt(x, y);
}

int QAccessibleInterface_ChildCount(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->childCount();
}

void* QAccessibleInterface_FocusChild(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->focusChild();
}

void* QAccessibleInterface_FocusChildDefault(void* ptr)
{
	if (dynamic_cast<QAccessibleObject*>(static_cast<QAccessibleInterface*>(ptr))) {
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::focusChild();
	} else {
		return static_cast<QAccessibleInterface*>(ptr)->QAccessibleInterface::focusChild();
	}
}

void* QAccessibleInterface_ForegroundColor(void* ptr)
{
	return new QColor(static_cast<QAccessibleInterface*>(ptr)->foregroundColor());
}

void* QAccessibleInterface_ForegroundColorDefault(void* ptr)
{
	if (dynamic_cast<QAccessibleObject*>(static_cast<QAccessibleInterface*>(ptr))) {
		return new QColor(static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::foregroundColor());
	} else {
		return new QColor(static_cast<QAccessibleInterface*>(ptr)->QAccessibleInterface::foregroundColor());
	}
}

int QAccessibleInterface_IndexOfChild(void* ptr, void* child)
{
	return static_cast<QAccessibleInterface*>(ptr)->indexOfChild(static_cast<QAccessibleInterface*>(child));
}

void* QAccessibleInterface_Interface_cast(void* ptr, long long ty)
{
	return static_cast<QAccessibleInterface*>(ptr)->interface_cast(static_cast<QAccessible::InterfaceType>(ty));
}

void* QAccessibleInterface_Interface_castDefault(void* ptr, long long ty)
{
	if (dynamic_cast<QAccessibleObject*>(static_cast<QAccessibleInterface*>(ptr))) {
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::interface_cast(static_cast<QAccessible::InterfaceType>(ty));
	} else {
		return static_cast<QAccessibleInterface*>(ptr)->QAccessibleInterface::interface_cast(static_cast<QAccessible::InterfaceType>(ty));
	}
}

char QAccessibleInterface_IsValid(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->isValid();
}

void* QAccessibleInterface_Object(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->object();
}

void* QAccessibleInterface_Parent(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->parent();
}

void* QAccessibleInterface_Rect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QAccessibleInterface*>(ptr)->rect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

long long QAccessibleInterface_Role(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->role();
}

void QAccessibleInterface_SetText(void* ptr, long long t, struct QtGui_PackedString text)
{
	static_cast<QAccessibleInterface*>(ptr)->setText(static_cast<QAccessible::Text>(t), QString::fromUtf8(text.data, text.len));
}

void* QAccessibleInterface_TableCellInterface(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->tableCellInterface();
}

void* QAccessibleInterface_TableInterface(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->tableInterface();
}

struct QtGui_PackedString QAccessibleInterface_Text(void* ptr, long long t)
{
	return ({ QByteArray* t0d7711 = new QByteArray(static_cast<QAccessibleInterface*>(ptr)->text(static_cast<QAccessible::Text>(t)).toUtf8()); QtGui_PackedString { const_cast<char*>(t0d7711->prepend("WHITESPACE").constData()+10), t0d7711->size()-10, t0d7711 }; });
}

void* QAccessibleInterface_TextInterface(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->textInterface();
}

void* QAccessibleInterface_ValueInterface(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->valueInterface();
}

void* QAccessibleInterface_Window(void* ptr)
{
	return static_cast<QAccessibleInterface*>(ptr)->window();
}

void* QAccessibleInterface_WindowDefault(void* ptr)
{
	if (dynamic_cast<QAccessibleObject*>(static_cast<QAccessibleInterface*>(ptr))) {
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::window();
	} else {
		return static_cast<QAccessibleInterface*>(ptr)->QAccessibleInterface::window();
	}
}

void QAccessibleInterface_DestroyQAccessibleInterface(void* ptr)
{
	static_cast<QAccessibleInterface*>(ptr)->~QAccessibleInterface();
}

void QAccessibleInterface_DestroyQAccessibleInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQAccessibleObject: public QAccessibleObject
{
public:
	QAccessibleInterface * childAt(int x, int y) const { return static_cast<QAccessibleInterface*>(callbackQAccessibleObject_ChildAt(const_cast<void*>(static_cast<const void*>(this)), x, y)); };
	bool isValid() const { return callbackQAccessibleObject_IsValid(const_cast<void*>(static_cast<const void*>(this))) != 0; };
	QObject * object() const { return static_cast<QObject*>(callbackQAccessibleObject_Object(const_cast<void*>(static_cast<const void*>(this)))); };
	QRect rect() const { return *static_cast<QRect*>(callbackQAccessibleObject_Rect(const_cast<void*>(static_cast<const void*>(this)))); };
	void setText(QAccessible::Text t, const QString & text) { QByteArray* t372ea0 = new QByteArray(text.toUtf8()); QtGui_PackedString textPacked = { const_cast<char*>(t372ea0->prepend("WHITESPACE").constData()+10), t372ea0->size()-10, t372ea0 };callbackQAccessibleObject_SetText(this, t, textPacked); };
	 ~MyQAccessibleObject() { callbackQAccessibleObject_DestroyQAccessibleObject(this); };
	QColor backgroundColor() const { return *static_cast<QColor*>(callbackQAccessibleInterface_BackgroundColor(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessibleInterface * child(int index) const { return static_cast<QAccessibleInterface*>(callbackQAccessibleObject_Child(const_cast<void*>(static_cast<const void*>(this)), index)); };
	int childCount() const { return callbackQAccessibleObject_ChildCount(const_cast<void*>(static_cast<const void*>(this))); };
	QAccessibleInterface * focusChild() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleInterface_FocusChild(const_cast<void*>(static_cast<const void*>(this)))); };
	QColor foregroundColor() const { return *static_cast<QColor*>(callbackQAccessibleInterface_ForegroundColor(const_cast<void*>(static_cast<const void*>(this)))); };
	int indexOfChild(const QAccessibleInterface * child) const { return callbackQAccessibleObject_IndexOfChild(const_cast<void*>(static_cast<const void*>(this)), const_cast<QAccessibleInterface*>(child)); };
	void * interface_cast(QAccessible::InterfaceType ty) { return callbackQAccessibleInterface_Interface_cast(this, ty); };
	QAccessibleInterface * parent() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleObject_Parent(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessible::Role role() const { return static_cast<QAccessible::Role>(callbackQAccessibleObject_Role(const_cast<void*>(static_cast<const void*>(this)))); };
	QString text(QAccessible::Text t) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleObject_Text(const_cast<void*>(static_cast<const void*>(this)), t); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QWindow * window() const { return static_cast<QWindow*>(callbackQAccessibleInterface_Window(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleObject*)
Q_DECLARE_METATYPE(MyQAccessibleObject*)

int QAccessibleObject_QAccessibleObject_QRegisterMetaType(){qRegisterMetaType<QAccessibleObject*>(); return qRegisterMetaType<MyQAccessibleObject*>();}

void* QAccessibleObject_ChildAt(void* ptr, int x, int y)
{
	return static_cast<QAccessibleObject*>(ptr)->childAt(x, y);
}

void* QAccessibleObject_ChildAtDefault(void* ptr, int x, int y)
{
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::childAt(x, y);
}

char QAccessibleObject_IsValid(void* ptr)
{
	return static_cast<QAccessibleObject*>(ptr)->isValid();
}

char QAccessibleObject_IsValidDefault(void* ptr)
{
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::isValid();
}

void* QAccessibleObject_Object(void* ptr)
{
	return static_cast<QAccessibleObject*>(ptr)->object();
}

void* QAccessibleObject_ObjectDefault(void* ptr)
{
		return static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::object();
}

void* QAccessibleObject_Rect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QAccessibleObject*>(ptr)->rect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QAccessibleObject_RectDefault(void* ptr)
{
		return ({ QRect tmpValue = static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::rect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QAccessibleObject_SetText(void* ptr, long long t, struct QtGui_PackedString text)
{
	static_cast<QAccessibleObject*>(ptr)->setText(static_cast<QAccessible::Text>(t), QString::fromUtf8(text.data, text.len));
}

void QAccessibleObject_SetTextDefault(void* ptr, long long t, struct QtGui_PackedString text)
{
		static_cast<QAccessibleObject*>(ptr)->QAccessibleObject::setText(static_cast<QAccessible::Text>(t), QString::fromUtf8(text.data, text.len));
}

void QAccessibleObject_DestroyQAccessibleObject(void* ptr)
{
	static_cast<QAccessibleObject*>(ptr)->~QAccessibleObject();
}

void QAccessibleObject_DestroyQAccessibleObjectDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QAccessibleObject_Child(void* ptr, int index)
{
	return static_cast<QAccessibleObject*>(ptr)->child(index);
}

void* QAccessibleObject_ChildDefault(void* ptr, int index)
{
	Q_UNUSED(ptr);
	Q_UNUSED(index);
	
}

int QAccessibleObject_ChildCount(void* ptr)
{
	return static_cast<QAccessibleObject*>(ptr)->childCount();
}

int QAccessibleObject_ChildCountDefault(void* ptr)
{
	Q_UNUSED(ptr);
	
}

int QAccessibleObject_IndexOfChild(void* ptr, void* child)
{
	return static_cast<QAccessibleObject*>(ptr)->indexOfChild(static_cast<QAccessibleInterface*>(child));
}

int QAccessibleObject_IndexOfChildDefault(void* ptr, void* child)
{
	Q_UNUSED(ptr);
	Q_UNUSED(child);
	
}

void* QAccessibleObject_Parent(void* ptr)
{
	return static_cast<QAccessibleObject*>(ptr)->parent();
}

void* QAccessibleObject_ParentDefault(void* ptr)
{
	Q_UNUSED(ptr);
	
}

long long QAccessibleObject_Role(void* ptr)
{
	return static_cast<QAccessibleObject*>(ptr)->role();
}

long long QAccessibleObject_RoleDefault(void* ptr)
{
	Q_UNUSED(ptr);
	
}

struct QtGui_PackedString QAccessibleObject_Text(void* ptr, long long t)
{
	return ({ QByteArray* td7ef98 = new QByteArray(static_cast<QAccessibleObject*>(ptr)->text(static_cast<QAccessible::Text>(t)).toUtf8()); QtGui_PackedString { const_cast<char*>(td7ef98->prepend("WHITESPACE").constData()+10), td7ef98->size()-10, td7ef98 }; });
}

struct QtGui_PackedString QAccessibleObject_TextDefault(void* ptr, long long t)
{
	Q_UNUSED(ptr);
	Q_UNUSED(t);
	
}

class MyQAccessiblePlugin: public QAccessiblePlugin
{
public:
	MyQAccessiblePlugin(QObject *parent = Q_NULLPTR) : QAccessiblePlugin(parent) {QAccessiblePlugin_QAccessiblePlugin_QRegisterMetaType();};
	QAccessibleInterface * create(const QString & key, QObject * object) { QByteArray* ta62f22 = new QByteArray(key.toUtf8()); QtGui_PackedString keyPacked = { const_cast<char*>(ta62f22->prepend("WHITESPACE").constData()+10), ta62f22->size()-10, ta62f22 };return static_cast<QAccessibleInterface*>(callbackQAccessiblePlugin_Create(this, keyPacked, object)); };
	 ~MyQAccessiblePlugin() { callbackQAccessiblePlugin_DestroyQAccessiblePlugin(this); };
	void childEvent(QChildEvent * event) { callbackQAccessiblePlugin_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQAccessiblePlugin_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQAccessiblePlugin_CustomEvent(this, event); };
	void deleteLater() { callbackQAccessiblePlugin_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQAccessiblePlugin_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQAccessiblePlugin_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQAccessiblePlugin_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQAccessiblePlugin_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQAccessiblePlugin_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQAccessiblePlugin_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQAccessiblePlugin_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QAccessiblePlugin*)
Q_DECLARE_METATYPE(MyQAccessiblePlugin*)

int QAccessiblePlugin_QAccessiblePlugin_QRegisterMetaType(){qRegisterMetaType<QAccessiblePlugin*>(); return qRegisterMetaType<MyQAccessiblePlugin*>();}

void* QAccessiblePlugin_NewQAccessiblePlugin(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQAccessiblePlugin(static_cast<QWindow*>(parent));
	} else {
		return new MyQAccessiblePlugin(static_cast<QObject*>(parent));
	}
}

void* QAccessiblePlugin_Create(void* ptr, struct QtGui_PackedString key, void* object)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return static_cast<QAccessiblePlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), static_cast<QOffscreenSurface*>(object));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return static_cast<QAccessiblePlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), static_cast<QPaintDeviceWindow*>(object));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return static_cast<QAccessiblePlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), static_cast<QPdfWriter*>(object));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return static_cast<QAccessiblePlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), static_cast<QWindow*>(object));
	} else {
		return static_cast<QAccessiblePlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), static_cast<QObject*>(object));
	}
}

void QAccessiblePlugin_DestroyQAccessiblePlugin(void* ptr)
{
	static_cast<QAccessiblePlugin*>(ptr)->~QAccessiblePlugin();
}

void QAccessiblePlugin_DestroyQAccessiblePluginDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QAccessiblePlugin___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessiblePlugin___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAccessiblePlugin___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QAccessiblePlugin___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QAccessiblePlugin___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QAccessiblePlugin___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QAccessiblePlugin___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessiblePlugin___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAccessiblePlugin___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QAccessiblePlugin___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessiblePlugin___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QAccessiblePlugin___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QAccessiblePlugin_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QAccessiblePlugin_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QAccessiblePlugin_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::customEvent(static_cast<QEvent*>(event));
}

void QAccessiblePlugin_DeleteLaterDefault(void* ptr)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::deleteLater();
}

void QAccessiblePlugin_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QAccessiblePlugin_EventDefault(void* ptr, void* e)
{
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::event(static_cast<QEvent*>(e));
}

char QAccessiblePlugin_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QAccessiblePlugin_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::metaObject());
}

void QAccessiblePlugin_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QAccessiblePlugin*>(ptr)->QAccessiblePlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQAccessibleStateChangeEvent: public QAccessibleStateChangeEvent
{
public:
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleStateChangeEvent*)
Q_DECLARE_METATYPE(MyQAccessibleStateChangeEvent*)

int QAccessibleStateChangeEvent_QAccessibleStateChangeEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleStateChangeEvent*>(); return qRegisterMetaType<MyQAccessibleStateChangeEvent*>();}

class MyQAccessibleTableCellInterface: public QAccessibleTableCellInterface
{
public:
	int columnExtent() const { return callbackQAccessibleTableCellInterface_ColumnExtent(const_cast<void*>(static_cast<const void*>(this))); };
	QList<QAccessibleInterface *> columnHeaderCells() const { return ({ QList<QAccessibleInterface *>* tmpP = static_cast<QList<QAccessibleInterface *>*>(callbackQAccessibleTableCellInterface_ColumnHeaderCells(const_cast<void*>(static_cast<const void*>(this)))); QList<QAccessibleInterface *> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	int columnIndex() const { return callbackQAccessibleTableCellInterface_ColumnIndex(const_cast<void*>(static_cast<const void*>(this))); };
	bool isSelected() const { return callbackQAccessibleTableCellInterface_IsSelected(const_cast<void*>(static_cast<const void*>(this))) != 0; };
	int rowExtent() const { return callbackQAccessibleTableCellInterface_RowExtent(const_cast<void*>(static_cast<const void*>(this))); };
	QList<QAccessibleInterface *> rowHeaderCells() const { return ({ QList<QAccessibleInterface *>* tmpP = static_cast<QList<QAccessibleInterface *>*>(callbackQAccessibleTableCellInterface_RowHeaderCells(const_cast<void*>(static_cast<const void*>(this)))); QList<QAccessibleInterface *> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	int rowIndex() const { return callbackQAccessibleTableCellInterface_RowIndex(const_cast<void*>(static_cast<const void*>(this))); };
	QAccessibleInterface * table() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleTableCellInterface_Table(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQAccessibleTableCellInterface() { callbackQAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleTableCellInterface*)
Q_DECLARE_METATYPE(MyQAccessibleTableCellInterface*)

int QAccessibleTableCellInterface_QAccessibleTableCellInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleTableCellInterface*>(); return qRegisterMetaType<MyQAccessibleTableCellInterface*>();}

int QAccessibleTableCellInterface_ColumnExtent(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->columnExtent();
}

struct QtGui_PackedList QAccessibleTableCellInterface_ColumnHeaderCells(void* ptr)
{
	return ({ QList<QAccessibleInterface *>* tmpValue68eb1f = new QList<QAccessibleInterface *>(static_cast<QAccessibleTableCellInterface*>(ptr)->columnHeaderCells()); QtGui_PackedList { tmpValue68eb1f, tmpValue68eb1f->size() }; });
}

int QAccessibleTableCellInterface_ColumnIndex(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->columnIndex();
}

char QAccessibleTableCellInterface_IsSelected(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->isSelected();
}

int QAccessibleTableCellInterface_RowExtent(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->rowExtent();
}

struct QtGui_PackedList QAccessibleTableCellInterface_RowHeaderCells(void* ptr)
{
	return ({ QList<QAccessibleInterface *>* tmpValueab8f05 = new QList<QAccessibleInterface *>(static_cast<QAccessibleTableCellInterface*>(ptr)->rowHeaderCells()); QtGui_PackedList { tmpValueab8f05, tmpValueab8f05->size() }; });
}

int QAccessibleTableCellInterface_RowIndex(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->rowIndex();
}

void* QAccessibleTableCellInterface_Table(void* ptr)
{
	return static_cast<QAccessibleTableCellInterface*>(ptr)->table();
}

void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(void* ptr)
{
	static_cast<QAccessibleTableCellInterface*>(ptr)->~QAccessibleTableCellInterface();
}

void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QAccessibleTableCellInterface___columnHeaderCells_atList(void* ptr, int i)
{
	return ({QAccessibleInterface * tmp = static_cast<QList<QAccessibleInterface *>*>(ptr)->at(i); if (i == static_cast<QList<QAccessibleInterface *>*>(ptr)->size()-1) { static_cast<QList<QAccessibleInterface *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessibleTableCellInterface___columnHeaderCells_setList(void* ptr, void* i)
{
	static_cast<QList<QAccessibleInterface *>*>(ptr)->append(static_cast<QAccessibleInterface*>(i));
}

void* QAccessibleTableCellInterface___columnHeaderCells_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QAccessibleInterface *>();
}

void* QAccessibleTableCellInterface___rowHeaderCells_atList(void* ptr, int i)
{
	return ({QAccessibleInterface * tmp = static_cast<QList<QAccessibleInterface *>*>(ptr)->at(i); if (i == static_cast<QList<QAccessibleInterface *>*>(ptr)->size()-1) { static_cast<QList<QAccessibleInterface *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessibleTableCellInterface___rowHeaderCells_setList(void* ptr, void* i)
{
	static_cast<QList<QAccessibleInterface *>*>(ptr)->append(static_cast<QAccessibleInterface*>(i));
}

void* QAccessibleTableCellInterface___rowHeaderCells_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QAccessibleInterface *>();
}

class MyQAccessibleTableInterface: public QAccessibleTableInterface
{
public:
	QAccessibleInterface * caption() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleTableInterface_Caption(const_cast<void*>(static_cast<const void*>(this)))); };
	QAccessibleInterface * cellAt(int row, int column) const { return static_cast<QAccessibleInterface*>(callbackQAccessibleTableInterface_CellAt(const_cast<void*>(static_cast<const void*>(this)), row, column)); };
	int columnCount() const { return callbackQAccessibleTableInterface_ColumnCount(const_cast<void*>(static_cast<const void*>(this))); };
	QString columnDescription(int column) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTableInterface_ColumnDescription(const_cast<void*>(static_cast<const void*>(this)), column); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	bool isColumnSelected(int column) const { return callbackQAccessibleTableInterface_IsColumnSelected(const_cast<void*>(static_cast<const void*>(this)), column) != 0; };
	bool isRowSelected(int row) const { return callbackQAccessibleTableInterface_IsRowSelected(const_cast<void*>(static_cast<const void*>(this)), row) != 0; };
	void modelChange(QAccessibleTableModelChangeEvent * event) { callbackQAccessibleTableInterface_ModelChange(this, event); };
	int rowCount() const { return callbackQAccessibleTableInterface_RowCount(const_cast<void*>(static_cast<const void*>(this))); };
	QString rowDescription(int row) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTableInterface_RowDescription(const_cast<void*>(static_cast<const void*>(this)), row); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	bool selectColumn(int column) { return callbackQAccessibleTableInterface_SelectColumn(this, column) != 0; };
	bool selectRow(int row) { return callbackQAccessibleTableInterface_SelectRow(this, row) != 0; };
	int selectedCellCount() const { return callbackQAccessibleTableInterface_SelectedCellCount(const_cast<void*>(static_cast<const void*>(this))); };
	QList<QAccessibleInterface *> selectedCells() const { return ({ QList<QAccessibleInterface *>* tmpP = static_cast<QList<QAccessibleInterface *>*>(callbackQAccessibleTableInterface_SelectedCells(const_cast<void*>(static_cast<const void*>(this)))); QList<QAccessibleInterface *> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	int selectedColumnCount() const { return callbackQAccessibleTableInterface_SelectedColumnCount(const_cast<void*>(static_cast<const void*>(this))); };
	QList<int> selectedColumns() const { return ({ QList<int>* tmpP = static_cast<QList<int>*>(callbackQAccessibleTableInterface_SelectedColumns(const_cast<void*>(static_cast<const void*>(this)))); QList<int> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	int selectedRowCount() const { return callbackQAccessibleTableInterface_SelectedRowCount(const_cast<void*>(static_cast<const void*>(this))); };
	QList<int> selectedRows() const { return ({ QList<int>* tmpP = static_cast<QList<int>*>(callbackQAccessibleTableInterface_SelectedRows(const_cast<void*>(static_cast<const void*>(this)))); QList<int> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	QAccessibleInterface * summary() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleTableInterface_Summary(const_cast<void*>(static_cast<const void*>(this)))); };
	bool unselectColumn(int column) { return callbackQAccessibleTableInterface_UnselectColumn(this, column) != 0; };
	bool unselectRow(int row) { return callbackQAccessibleTableInterface_UnselectRow(this, row) != 0; };
	 ~MyQAccessibleTableInterface() { callbackQAccessibleTableInterface_DestroyQAccessibleTableInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleTableInterface*)
Q_DECLARE_METATYPE(MyQAccessibleTableInterface*)

int QAccessibleTableInterface_QAccessibleTableInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleTableInterface*>(); return qRegisterMetaType<MyQAccessibleTableInterface*>();}

void* QAccessibleTableInterface_Caption(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->caption();
}

void* QAccessibleTableInterface_CellAt(void* ptr, int row, int column)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->cellAt(row, column);
}

int QAccessibleTableInterface_ColumnCount(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->columnCount();
}

struct QtGui_PackedString QAccessibleTableInterface_ColumnDescription(void* ptr, int column)
{
	return ({ QByteArray* t31bac7 = new QByteArray(static_cast<QAccessibleTableInterface*>(ptr)->columnDescription(column).toUtf8()); QtGui_PackedString { const_cast<char*>(t31bac7->prepend("WHITESPACE").constData()+10), t31bac7->size()-10, t31bac7 }; });
}

char QAccessibleTableInterface_IsColumnSelected(void* ptr, int column)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->isColumnSelected(column);
}

char QAccessibleTableInterface_IsRowSelected(void* ptr, int row)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->isRowSelected(row);
}

void QAccessibleTableInterface_ModelChange(void* ptr, void* event)
{
	static_cast<QAccessibleTableInterface*>(ptr)->modelChange(static_cast<QAccessibleTableModelChangeEvent*>(event));
}

int QAccessibleTableInterface_RowCount(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->rowCount();
}

struct QtGui_PackedString QAccessibleTableInterface_RowDescription(void* ptr, int row)
{
	return ({ QByteArray* t5db49c = new QByteArray(static_cast<QAccessibleTableInterface*>(ptr)->rowDescription(row).toUtf8()); QtGui_PackedString { const_cast<char*>(t5db49c->prepend("WHITESPACE").constData()+10), t5db49c->size()-10, t5db49c }; });
}

char QAccessibleTableInterface_SelectColumn(void* ptr, int column)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->selectColumn(column);
}

char QAccessibleTableInterface_SelectRow(void* ptr, int row)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->selectRow(row);
}

int QAccessibleTableInterface_SelectedCellCount(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->selectedCellCount();
}

struct QtGui_PackedList QAccessibleTableInterface_SelectedCells(void* ptr)
{
	return ({ QList<QAccessibleInterface *>* tmpValuebc7554 = new QList<QAccessibleInterface *>(static_cast<QAccessibleTableInterface*>(ptr)->selectedCells()); QtGui_PackedList { tmpValuebc7554, tmpValuebc7554->size() }; });
}

int QAccessibleTableInterface_SelectedColumnCount(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->selectedColumnCount();
}

struct QtGui_PackedList QAccessibleTableInterface_SelectedColumns(void* ptr)
{
	return ({ QList<int>* tmpValue8dbd0b = new QList<int>(static_cast<QAccessibleTableInterface*>(ptr)->selectedColumns()); QtGui_PackedList { tmpValue8dbd0b, tmpValue8dbd0b->size() }; });
}

int QAccessibleTableInterface_SelectedRowCount(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->selectedRowCount();
}

struct QtGui_PackedList QAccessibleTableInterface_SelectedRows(void* ptr)
{
	return ({ QList<int>* tmpValue094a24 = new QList<int>(static_cast<QAccessibleTableInterface*>(ptr)->selectedRows()); QtGui_PackedList { tmpValue094a24, tmpValue094a24->size() }; });
}

void* QAccessibleTableInterface_Summary(void* ptr)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->summary();
}

char QAccessibleTableInterface_UnselectColumn(void* ptr, int column)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->unselectColumn(column);
}

char QAccessibleTableInterface_UnselectRow(void* ptr, int row)
{
	return static_cast<QAccessibleTableInterface*>(ptr)->unselectRow(row);
}

void QAccessibleTableInterface_DestroyQAccessibleTableInterface(void* ptr)
{
	static_cast<QAccessibleTableInterface*>(ptr)->~QAccessibleTableInterface();
}

void QAccessibleTableInterface_DestroyQAccessibleTableInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QAccessibleTableInterface___selectedCells_atList(void* ptr, int i)
{
	return ({QAccessibleInterface * tmp = static_cast<QList<QAccessibleInterface *>*>(ptr)->at(i); if (i == static_cast<QList<QAccessibleInterface *>*>(ptr)->size()-1) { static_cast<QList<QAccessibleInterface *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessibleTableInterface___selectedCells_setList(void* ptr, void* i)
{
	static_cast<QList<QAccessibleInterface *>*>(ptr)->append(static_cast<QAccessibleInterface*>(i));
}

void* QAccessibleTableInterface___selectedCells_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QAccessibleInterface *>();
}

int QAccessibleTableInterface___selectedColumns_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessibleTableInterface___selectedColumns_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QAccessibleTableInterface___selectedColumns_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QAccessibleTableInterface___selectedRows_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QAccessibleTableInterface___selectedRows_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QAccessibleTableInterface___selectedRows_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

class MyQAccessibleTableModelChangeEvent: public QAccessibleTableModelChangeEvent
{
public:
	MyQAccessibleTableModelChangeEvent(QObject *object, QAccessibleTableModelChangeEvent::ModelChangeType changeType) : QAccessibleTableModelChangeEvent(object, changeType) {QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent_QRegisterMetaType();};
	MyQAccessibleTableModelChangeEvent(QAccessibleInterface *iface, QAccessibleTableModelChangeEvent::ModelChangeType changeType) : QAccessibleTableModelChangeEvent(iface, changeType) {QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTableModelChangeEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTableModelChangeEvent*)

int QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTableModelChangeEvent*>(); return qRegisterMetaType<MyQAccessibleTableModelChangeEvent*>();}

void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(void* object, long long changeType)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QCameraImageCapture*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QDBusPendingCallWatcher*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QExtensionFactory*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QExtensionManager*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QGraphicsObject*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QGraphicsWidget*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QLayout*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QMediaPlaylist*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QMediaRecorder*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QOffscreenSurface*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QPaintDeviceWindow*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QPdfWriter*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QQuickItem*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QRadioData*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QWidget*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QWindow*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QObject*>(object), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	}
}

void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(void* iface, long long changeType)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QAccessibleWidget*>(iface), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	} else {
		return new MyQAccessibleTableModelChangeEvent(static_cast<QAccessibleInterface*>(iface), static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
	}
}

int QAccessibleTableModelChangeEvent_FirstColumn(void* ptr)
{
	return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->firstColumn();
}

int QAccessibleTableModelChangeEvent_FirstRow(void* ptr)
{
	return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->firstRow();
}

int QAccessibleTableModelChangeEvent_LastColumn(void* ptr)
{
	return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->lastColumn();
}

int QAccessibleTableModelChangeEvent_LastRow(void* ptr)
{
	return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->lastRow();
}

long long QAccessibleTableModelChangeEvent_ModelChangeType(void* ptr)
{
	return static_cast<QAccessibleTableModelChangeEvent*>(ptr)->modelChangeType();
}

void QAccessibleTableModelChangeEvent_SetFirstColumn(void* ptr, int column)
{
	static_cast<QAccessibleTableModelChangeEvent*>(ptr)->setFirstColumn(column);
}

void QAccessibleTableModelChangeEvent_SetFirstRow(void* ptr, int row)
{
	static_cast<QAccessibleTableModelChangeEvent*>(ptr)->setFirstRow(row);
}

void QAccessibleTableModelChangeEvent_SetLastColumn(void* ptr, int column)
{
	static_cast<QAccessibleTableModelChangeEvent*>(ptr)->setLastColumn(column);
}

void QAccessibleTableModelChangeEvent_SetLastRow(void* ptr, int row)
{
	static_cast<QAccessibleTableModelChangeEvent*>(ptr)->setLastRow(row);
}

void QAccessibleTableModelChangeEvent_SetModelChangeType(void* ptr, long long changeType)
{
	static_cast<QAccessibleTableModelChangeEvent*>(ptr)->setModelChangeType(static_cast<QAccessibleTableModelChangeEvent::ModelChangeType>(changeType));
}

class MyQAccessibleTextCursorEvent: public QAccessibleTextCursorEvent
{
public:
	MyQAccessibleTextCursorEvent(QObject *object, int cursorPos) : QAccessibleTextCursorEvent(object, cursorPos) {QAccessibleTextCursorEvent_QAccessibleTextCursorEvent_QRegisterMetaType();};
	MyQAccessibleTextCursorEvent(QAccessibleInterface *iface, int cursorPos) : QAccessibleTextCursorEvent(iface, cursorPos) {QAccessibleTextCursorEvent_QAccessibleTextCursorEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTextCursorEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTextCursorEvent*)

int QAccessibleTextCursorEvent_QAccessibleTextCursorEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextCursorEvent*>(); return qRegisterMetaType<MyQAccessibleTextCursorEvent*>();}

void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(void* object, int cursorPos)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QCameraImageCapture*>(object), cursorPos);
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QDBusPendingCallWatcher*>(object), cursorPos);
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QExtensionFactory*>(object), cursorPos);
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QExtensionManager*>(object), cursorPos);
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QGraphicsObject*>(object), cursorPos);
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QGraphicsWidget*>(object), cursorPos);
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QLayout*>(object), cursorPos);
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QMediaPlaylist*>(object), cursorPos);
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QMediaRecorder*>(object), cursorPos);
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QOffscreenSurface*>(object), cursorPos);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QPaintDeviceWindow*>(object), cursorPos);
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QPdfWriter*>(object), cursorPos);
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QQuickItem*>(object), cursorPos);
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QRadioData*>(object), cursorPos);
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), cursorPos);
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QWidget*>(object), cursorPos);
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QWindow*>(object), cursorPos);
	} else {
		return new MyQAccessibleTextCursorEvent(static_cast<QObject*>(object), cursorPos);
	}
}

void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(void* iface, int cursorPos)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTextCursorEvent(static_cast<QAccessibleWidget*>(iface), cursorPos);
	} else {
		return new MyQAccessibleTextCursorEvent(static_cast<QAccessibleInterface*>(iface), cursorPos);
	}
}

int QAccessibleTextCursorEvent_CursorPosition(void* ptr)
{
	return static_cast<QAccessibleTextCursorEvent*>(ptr)->cursorPosition();
}

void QAccessibleTextCursorEvent_SetCursorPosition(void* ptr, int position)
{
	static_cast<QAccessibleTextCursorEvent*>(ptr)->setCursorPosition(position);
}

class MyQAccessibleTextInsertEvent: public QAccessibleTextInsertEvent
{
public:
	MyQAccessibleTextInsertEvent(QObject *object, int position, const QString &text) : QAccessibleTextInsertEvent(object, position, text) {QAccessibleTextInsertEvent_QAccessibleTextInsertEvent_QRegisterMetaType();};
	MyQAccessibleTextInsertEvent(QAccessibleInterface *iface, int position, const QString &text) : QAccessibleTextInsertEvent(iface, position, text) {QAccessibleTextInsertEvent_QAccessibleTextInsertEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTextInsertEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTextInsertEvent*)

int QAccessibleTextInsertEvent_QAccessibleTextInsertEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextInsertEvent*>(); return qRegisterMetaType<MyQAccessibleTextInsertEvent*>();}

void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(void* object, int position, struct QtGui_PackedString text)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QCameraImageCapture*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QDBusPendingCallWatcher*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QExtensionFactory*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QExtensionManager*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QGraphicsObject*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QGraphicsWidget*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QLayout*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QMediaPlaylist*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QMediaRecorder*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QOffscreenSurface*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QPaintDeviceWindow*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QPdfWriter*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QQuickItem*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QRadioData*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QWidget*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QWindow*>(object), position, QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextInsertEvent(static_cast<QObject*>(object), position, QString::fromUtf8(text.data, text.len));
	}
}

void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(void* iface, int position, struct QtGui_PackedString text)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTextInsertEvent(static_cast<QAccessibleWidget*>(iface), position, QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextInsertEvent(static_cast<QAccessibleInterface*>(iface), position, QString::fromUtf8(text.data, text.len));
	}
}

int QAccessibleTextInsertEvent_ChangePosition(void* ptr)
{
	return static_cast<QAccessibleTextInsertEvent*>(ptr)->changePosition();
}

struct QtGui_PackedString QAccessibleTextInsertEvent_TextInserted(void* ptr)
{
	return ({ QByteArray* te79f7b = new QByteArray(static_cast<QAccessibleTextInsertEvent*>(ptr)->textInserted().toUtf8()); QtGui_PackedString { const_cast<char*>(te79f7b->prepend("WHITESPACE").constData()+10), te79f7b->size()-10, te79f7b }; });
}

class MyQAccessibleTextInterface: public QAccessibleTextInterface
{
public:
	void addSelection(int startOffset, int endOffset) { callbackQAccessibleTextInterface_AddSelection(this, startOffset, endOffset); };
	int characterCount() const { return callbackQAccessibleTextInterface_CharacterCount(const_cast<void*>(static_cast<const void*>(this))); };
	QRect characterRect(int offset) const { return *static_cast<QRect*>(callbackQAccessibleTextInterface_CharacterRect(const_cast<void*>(static_cast<const void*>(this)), offset)); };
	int cursorPosition() const { return callbackQAccessibleTextInterface_CursorPosition(const_cast<void*>(static_cast<const void*>(this))); };
	int offsetAtPoint(const QPoint & point) const { return callbackQAccessibleTextInterface_OffsetAtPoint(const_cast<void*>(static_cast<const void*>(this)), const_cast<QPoint*>(&point)); };
	void removeSelection(int selectionIndex) { callbackQAccessibleTextInterface_RemoveSelection(this, selectionIndex); };
	void scrollToSubstring(int startIndex, int endIndex) { callbackQAccessibleTextInterface_ScrollToSubstring(this, startIndex, endIndex); };
	void selection(int selectionIndex, int * startOffset, int * endOffset) const { callbackQAccessibleTextInterface_Selection(const_cast<void*>(static_cast<const void*>(this)), selectionIndex, *startOffset, *endOffset); };
	int selectionCount() const { return callbackQAccessibleTextInterface_SelectionCount(const_cast<void*>(static_cast<const void*>(this))); };
	void setCursorPosition(int position) { callbackQAccessibleTextInterface_SetCursorPosition(this, position); };
	void setSelection(int selectionIndex, int startOffset, int endOffset) { callbackQAccessibleTextInterface_SetSelection(this, selectionIndex, startOffset, endOffset); };
	QString text(int startOffset, int endOffset) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTextInterface_Text(const_cast<void*>(static_cast<const void*>(this)), startOffset, endOffset); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QString textAfterOffset(int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTextInterface_TextAfterOffset(const_cast<void*>(static_cast<const void*>(this)), offset, boundaryType, *startOffset, *endOffset); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QString textAtOffset(int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTextInterface_TextAtOffset(const_cast<void*>(static_cast<const void*>(this)), offset, boundaryType, *startOffset, *endOffset); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QString textBeforeOffset(int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) const { return ({ QtGui_PackedString tempVal = callbackQAccessibleTextInterface_TextBeforeOffset(const_cast<void*>(static_cast<const void*>(this)), offset, boundaryType, *startOffset, *endOffset); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	 ~MyQAccessibleTextInterface() { callbackQAccessibleTextInterface_DestroyQAccessibleTextInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleTextInterface*)
Q_DECLARE_METATYPE(MyQAccessibleTextInterface*)

int QAccessibleTextInterface_QAccessibleTextInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextInterface*>(); return qRegisterMetaType<MyQAccessibleTextInterface*>();}

void QAccessibleTextInterface_AddSelection(void* ptr, int startOffset, int endOffset)
{
	static_cast<QAccessibleTextInterface*>(ptr)->addSelection(startOffset, endOffset);
}

int QAccessibleTextInterface_CharacterCount(void* ptr)
{
	return static_cast<QAccessibleTextInterface*>(ptr)->characterCount();
}

void* QAccessibleTextInterface_CharacterRect(void* ptr, int offset)
{
	return ({ QRect tmpValue = static_cast<QAccessibleTextInterface*>(ptr)->characterRect(offset); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

int QAccessibleTextInterface_CursorPosition(void* ptr)
{
	return static_cast<QAccessibleTextInterface*>(ptr)->cursorPosition();
}

int QAccessibleTextInterface_OffsetAtPoint(void* ptr, void* point)
{
	return static_cast<QAccessibleTextInterface*>(ptr)->offsetAtPoint(*static_cast<QPoint*>(point));
}

void QAccessibleTextInterface_RemoveSelection(void* ptr, int selectionIndex)
{
	static_cast<QAccessibleTextInterface*>(ptr)->removeSelection(selectionIndex);
}

void QAccessibleTextInterface_ScrollToSubstring(void* ptr, int startIndex, int endIndex)
{
	static_cast<QAccessibleTextInterface*>(ptr)->scrollToSubstring(startIndex, endIndex);
}

void QAccessibleTextInterface_Selection(void* ptr, int selectionIndex, int startOffset, int endOffset)
{
	static_cast<QAccessibleTextInterface*>(ptr)->selection(selectionIndex, &startOffset, &endOffset);
}

int QAccessibleTextInterface_SelectionCount(void* ptr)
{
	return static_cast<QAccessibleTextInterface*>(ptr)->selectionCount();
}

void QAccessibleTextInterface_SetCursorPosition(void* ptr, int position)
{
	static_cast<QAccessibleTextInterface*>(ptr)->setCursorPosition(position);
}

void QAccessibleTextInterface_SetSelection(void* ptr, int selectionIndex, int startOffset, int endOffset)
{
	static_cast<QAccessibleTextInterface*>(ptr)->setSelection(selectionIndex, startOffset, endOffset);
}

struct QtGui_PackedString QAccessibleTextInterface_Text(void* ptr, int startOffset, int endOffset)
{
	return ({ QByteArray* td7097f = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->text(startOffset, endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(td7097f->prepend("WHITESPACE").constData()+10), td7097f->size()-10, td7097f }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
	return ({ QByteArray* t56e464 = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->textAfterOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(t56e464->prepend("WHITESPACE").constData()+10), t56e464->size()-10, t56e464 }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
		return ({ QByteArray* t495d09 = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->QAccessibleTextInterface::textAfterOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(t495d09->prepend("WHITESPACE").constData()+10), t495d09->size()-10, t495d09 }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextAtOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
	return ({ QByteArray* t01d82d = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->textAtOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(t01d82d->prepend("WHITESPACE").constData()+10), t01d82d->size()-10, t01d82d }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextAtOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
		return ({ QByteArray* tb855b8 = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->QAccessibleTextInterface::textAtOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(tb855b8->prepend("WHITESPACE").constData()+10), tb855b8->size()-10, tb855b8 }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
	return ({ QByteArray* tde81ca = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->textBeforeOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(tde81ca->prepend("WHITESPACE").constData()+10), tde81ca->size()-10, tde81ca }; });
}

struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset)
{
		return ({ QByteArray* tb76866 = new QByteArray(static_cast<QAccessibleTextInterface*>(ptr)->QAccessibleTextInterface::textBeforeOffset(offset, static_cast<QAccessible::TextBoundaryType>(boundaryType), &startOffset, &endOffset).toUtf8()); QtGui_PackedString { const_cast<char*>(tb76866->prepend("WHITESPACE").constData()+10), tb76866->size()-10, tb76866 }; });
}

void QAccessibleTextInterface_DestroyQAccessibleTextInterface(void* ptr)
{
	static_cast<QAccessibleTextInterface*>(ptr)->~QAccessibleTextInterface();
}

void QAccessibleTextInterface_DestroyQAccessibleTextInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQAccessibleTextRemoveEvent: public QAccessibleTextRemoveEvent
{
public:
	MyQAccessibleTextRemoveEvent(QObject *object, int position, const QString &text) : QAccessibleTextRemoveEvent(object, position, text) {QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent_QRegisterMetaType();};
	MyQAccessibleTextRemoveEvent(QAccessibleInterface *iface, int position, const QString &text) : QAccessibleTextRemoveEvent(iface, position, text) {QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTextRemoveEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTextRemoveEvent*)

int QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextRemoveEvent*>(); return qRegisterMetaType<MyQAccessibleTextRemoveEvent*>();}

void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(void* object, int position, struct QtGui_PackedString text)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QCameraImageCapture*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QDBusPendingCallWatcher*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QExtensionFactory*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QExtensionManager*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QGraphicsObject*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QGraphicsWidget*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QLayout*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QMediaPlaylist*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QMediaRecorder*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QOffscreenSurface*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QPaintDeviceWindow*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QPdfWriter*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QQuickItem*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QRadioData*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QWidget*>(object), position, QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QWindow*>(object), position, QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextRemoveEvent(static_cast<QObject*>(object), position, QString::fromUtf8(text.data, text.len));
	}
}

void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(void* iface, int position, struct QtGui_PackedString text)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTextRemoveEvent(static_cast<QAccessibleWidget*>(iface), position, QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextRemoveEvent(static_cast<QAccessibleInterface*>(iface), position, QString::fromUtf8(text.data, text.len));
	}
}

int QAccessibleTextRemoveEvent_ChangePosition(void* ptr)
{
	return static_cast<QAccessibleTextRemoveEvent*>(ptr)->changePosition();
}

struct QtGui_PackedString QAccessibleTextRemoveEvent_TextRemoved(void* ptr)
{
	return ({ QByteArray* t7bb24c = new QByteArray(static_cast<QAccessibleTextRemoveEvent*>(ptr)->textRemoved().toUtf8()); QtGui_PackedString { const_cast<char*>(t7bb24c->prepend("WHITESPACE").constData()+10), t7bb24c->size()-10, t7bb24c }; });
}

class MyQAccessibleTextSelectionEvent: public QAccessibleTextSelectionEvent
{
public:
	MyQAccessibleTextSelectionEvent(QObject *object, int start, int end) : QAccessibleTextSelectionEvent(object, start, end) {QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent_QRegisterMetaType();};
	MyQAccessibleTextSelectionEvent(QAccessibleInterface *iface, int start, int end) : QAccessibleTextSelectionEvent(iface, start, end) {QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTextSelectionEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTextSelectionEvent*)

int QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextSelectionEvent*>(); return qRegisterMetaType<MyQAccessibleTextSelectionEvent*>();}

void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(void* object, int start, int end)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QCameraImageCapture*>(object), start, end);
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QDBusPendingCallWatcher*>(object), start, end);
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QExtensionFactory*>(object), start, end);
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QExtensionManager*>(object), start, end);
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QGraphicsObject*>(object), start, end);
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QGraphicsWidget*>(object), start, end);
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QLayout*>(object), start, end);
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QMediaPlaylist*>(object), start, end);
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QMediaRecorder*>(object), start, end);
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QOffscreenSurface*>(object), start, end);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QPaintDeviceWindow*>(object), start, end);
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QPdfWriter*>(object), start, end);
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QQuickItem*>(object), start, end);
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QRadioData*>(object), start, end);
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), start, end);
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QWidget*>(object), start, end);
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QWindow*>(object), start, end);
	} else {
		return new MyQAccessibleTextSelectionEvent(static_cast<QObject*>(object), start, end);
	}
}

void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(void* iface, int start, int end)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTextSelectionEvent(static_cast<QAccessibleWidget*>(iface), start, end);
	} else {
		return new MyQAccessibleTextSelectionEvent(static_cast<QAccessibleInterface*>(iface), start, end);
	}
}

int QAccessibleTextSelectionEvent_SelectionEnd(void* ptr)
{
	return static_cast<QAccessibleTextSelectionEvent*>(ptr)->selectionEnd();
}

int QAccessibleTextSelectionEvent_SelectionStart(void* ptr)
{
	return static_cast<QAccessibleTextSelectionEvent*>(ptr)->selectionStart();
}

void QAccessibleTextSelectionEvent_SetSelection(void* ptr, int start, int end)
{
	static_cast<QAccessibleTextSelectionEvent*>(ptr)->setSelection(start, end);
}

class MyQAccessibleTextUpdateEvent: public QAccessibleTextUpdateEvent
{
public:
	MyQAccessibleTextUpdateEvent(QObject *object, int position, const QString &oldText, const QString &text) : QAccessibleTextUpdateEvent(object, position, oldText, text) {QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent_QRegisterMetaType();};
	MyQAccessibleTextUpdateEvent(QAccessibleInterface *iface, int position, const QString &oldText, const QString &text) : QAccessibleTextUpdateEvent(iface, position, oldText, text) {QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleTextUpdateEvent*)
Q_DECLARE_METATYPE(MyQAccessibleTextUpdateEvent*)

int QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleTextUpdateEvent*>(); return qRegisterMetaType<MyQAccessibleTextUpdateEvent*>();}

void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(void* object, int position, struct QtGui_PackedString oldText, struct QtGui_PackedString text)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QCameraImageCapture*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QDBusPendingCallWatcher*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QExtensionFactory*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QExtensionManager*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QGraphicsObject*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QGraphicsWidget*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QLayout*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QMediaPlaylist*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QMediaRecorder*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QOffscreenSurface*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QPaintDeviceWindow*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QPdfWriter*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QQuickItem*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QRadioData*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QWidget*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QWindow*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextUpdateEvent(static_cast<QObject*>(object), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	}
}

void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(void* iface, int position, struct QtGui_PackedString oldText, struct QtGui_PackedString text)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleTextUpdateEvent(static_cast<QAccessibleWidget*>(iface), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	} else {
		return new MyQAccessibleTextUpdateEvent(static_cast<QAccessibleInterface*>(iface), position, QString::fromUtf8(oldText.data, oldText.len), QString::fromUtf8(text.data, text.len));
	}
}

int QAccessibleTextUpdateEvent_ChangePosition(void* ptr)
{
	return static_cast<QAccessibleTextUpdateEvent*>(ptr)->changePosition();
}

struct QtGui_PackedString QAccessibleTextUpdateEvent_TextInserted(void* ptr)
{
	return ({ QByteArray* t055e50 = new QByteArray(static_cast<QAccessibleTextUpdateEvent*>(ptr)->textInserted().toUtf8()); QtGui_PackedString { const_cast<char*>(t055e50->prepend("WHITESPACE").constData()+10), t055e50->size()-10, t055e50 }; });
}

struct QtGui_PackedString QAccessibleTextUpdateEvent_TextRemoved(void* ptr)
{
	return ({ QByteArray* t313b9a = new QByteArray(static_cast<QAccessibleTextUpdateEvent*>(ptr)->textRemoved().toUtf8()); QtGui_PackedString { const_cast<char*>(t313b9a->prepend("WHITESPACE").constData()+10), t313b9a->size()-10, t313b9a }; });
}

class MyQAccessibleValueChangeEvent: public QAccessibleValueChangeEvent
{
public:
	MyQAccessibleValueChangeEvent(QObject *object, const QVariant &value) : QAccessibleValueChangeEvent(object, value) {QAccessibleValueChangeEvent_QAccessibleValueChangeEvent_QRegisterMetaType();};
	MyQAccessibleValueChangeEvent(QAccessibleInterface *iface, const QVariant &val) : QAccessibleValueChangeEvent(iface, val) {QAccessibleValueChangeEvent_QAccessibleValueChangeEvent_QRegisterMetaType();};
	QAccessibleInterface * accessibleInterface() const { return static_cast<QAccessibleInterface*>(callbackQAccessibleEvent_AccessibleInterface(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QAccessibleValueChangeEvent*)
Q_DECLARE_METATYPE(MyQAccessibleValueChangeEvent*)

int QAccessibleValueChangeEvent_QAccessibleValueChangeEvent_QRegisterMetaType(){qRegisterMetaType<QAccessibleValueChangeEvent*>(); return qRegisterMetaType<MyQAccessibleValueChangeEvent*>();}

void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(void* object, void* value)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QCameraImageCapture*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QDBusPendingCallWatcher*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QExtensionFactory*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QExtensionManager*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QGraphicsObject*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QGraphicsWidget*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QLayout*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QMediaPlaylist*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QMediaRecorder*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QOffscreenSurface*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QPaintDeviceWindow*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QPdfWriter*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QQuickItem*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QRadioData*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QRemoteObjectPendingCallWatcher*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QWidget*>(object), *static_cast<QVariant*>(value));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QWindow*>(object), *static_cast<QVariant*>(value));
	} else {
		return new MyQAccessibleValueChangeEvent(static_cast<QObject*>(object), *static_cast<QVariant*>(value));
	}
}

void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(void* iface, void* val)
{
	if (dynamic_cast<QAccessibleWidget*>(static_cast<QAccessibleInterface*>(iface))) {
		return new MyQAccessibleValueChangeEvent(static_cast<QAccessibleWidget*>(iface), *static_cast<QVariant*>(val));
	} else {
		return new MyQAccessibleValueChangeEvent(static_cast<QAccessibleInterface*>(iface), *static_cast<QVariant*>(val));
	}
}

void QAccessibleValueChangeEvent_SetValue(void* ptr, void* value)
{
	static_cast<QAccessibleValueChangeEvent*>(ptr)->setValue(*static_cast<QVariant*>(value));
}

void* QAccessibleValueChangeEvent_Value(void* ptr)
{
	return new QVariant(static_cast<QAccessibleValueChangeEvent*>(ptr)->value());
}

class MyQAccessibleValueInterface: public QAccessibleValueInterface
{
public:
	QVariant currentValue() const { return *static_cast<QVariant*>(callbackQAccessibleValueInterface_CurrentValue(const_cast<void*>(static_cast<const void*>(this)))); };
	QVariant maximumValue() const { return *static_cast<QVariant*>(callbackQAccessibleValueInterface_MaximumValue(const_cast<void*>(static_cast<const void*>(this)))); };
	QVariant minimumStepSize() const { return *static_cast<QVariant*>(callbackQAccessibleValueInterface_MinimumStepSize(const_cast<void*>(static_cast<const void*>(this)))); };
	QVariant minimumValue() const { return *static_cast<QVariant*>(callbackQAccessibleValueInterface_MinimumValue(const_cast<void*>(static_cast<const void*>(this)))); };
	void setCurrentValue(const QVariant & value) { callbackQAccessibleValueInterface_SetCurrentValue(this, const_cast<QVariant*>(&value)); };
	 ~MyQAccessibleValueInterface() { callbackQAccessibleValueInterface_DestroyQAccessibleValueInterface(this); };
};

Q_DECLARE_METATYPE(QAccessibleValueInterface*)
Q_DECLARE_METATYPE(MyQAccessibleValueInterface*)

int QAccessibleValueInterface_QAccessibleValueInterface_QRegisterMetaType(){qRegisterMetaType<QAccessibleValueInterface*>(); return qRegisterMetaType<MyQAccessibleValueInterface*>();}

void* QAccessibleValueInterface_CurrentValue(void* ptr)
{
	return new QVariant(static_cast<QAccessibleValueInterface*>(ptr)->currentValue());
}

void* QAccessibleValueInterface_MaximumValue(void* ptr)
{
	return new QVariant(static_cast<QAccessibleValueInterface*>(ptr)->maximumValue());
}

void* QAccessibleValueInterface_MinimumStepSize(void* ptr)
{
	return new QVariant(static_cast<QAccessibleValueInterface*>(ptr)->minimumStepSize());
}

void* QAccessibleValueInterface_MinimumValue(void* ptr)
{
	return new QVariant(static_cast<QAccessibleValueInterface*>(ptr)->minimumValue());
}

void QAccessibleValueInterface_SetCurrentValue(void* ptr, void* value)
{
	static_cast<QAccessibleValueInterface*>(ptr)->setCurrentValue(*static_cast<QVariant*>(value));
}

void QAccessibleValueInterface_DestroyQAccessibleValueInterface(void* ptr)
{
	static_cast<QAccessibleValueInterface*>(ptr)->~QAccessibleValueInterface();
}

void QAccessibleValueInterface_DestroyQAccessibleValueInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQActionEvent: public QActionEvent
{
public:
	MyQActionEvent(int ty, QAction *action, QAction *before = Q_NULLPTR) : QActionEvent(ty, action, before) {QActionEvent_QActionEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QActionEvent*)
Q_DECLARE_METATYPE(MyQActionEvent*)

int QActionEvent_QActionEvent_QRegisterMetaType(){qRegisterMetaType<QActionEvent*>(); return qRegisterMetaType<MyQActionEvent*>();}

void* QActionEvent_NewQActionEvent(int ty, void* action, void* before)
{
	return new MyQActionEvent(ty, static_cast<QAction*>(action), static_cast<QAction*>(before));
}

void* QActionEvent_Action(void* ptr)
{
	return static_cast<QActionEvent*>(ptr)->action();
}

void* QActionEvent_Before(void* ptr)
{
	return static_cast<QActionEvent*>(ptr)->before();
}

class MyQApplicationStateChangeEvent: public QApplicationStateChangeEvent
{
public:
	MyQApplicationStateChangeEvent(Qt::ApplicationState applicationState) : QApplicationStateChangeEvent(applicationState) {QApplicationStateChangeEvent_QApplicationStateChangeEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QApplicationStateChangeEvent*)
Q_DECLARE_METATYPE(MyQApplicationStateChangeEvent*)

int QApplicationStateChangeEvent_QApplicationStateChangeEvent_QRegisterMetaType(){qRegisterMetaType<QApplicationStateChangeEvent*>(); return qRegisterMetaType<MyQApplicationStateChangeEvent*>();}

void* QApplicationStateChangeEvent_NewQApplicationStateChangeEvent(long long applicationState)
{
	return new MyQApplicationStateChangeEvent(static_cast<Qt::ApplicationState>(applicationState));
}

long long QApplicationStateChangeEvent_ApplicationState(void* ptr)
{
	return static_cast<QApplicationStateChangeEvent*>(ptr)->applicationState();
}

Q_DECLARE_METATYPE(QBackingStore*)
void* QBackingStore_NewQBackingStore(void* window)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(window))) {
		return new QBackingStore(static_cast<QPaintDeviceWindow*>(window));
	} else {
		return new QBackingStore(static_cast<QWindow*>(window));
	}
}

void QBackingStore_BeginPaint(void* ptr, void* region)
{
	static_cast<QBackingStore*>(ptr)->beginPaint(*static_cast<QRegion*>(region));
}

void QBackingStore_EndPaint(void* ptr)
{
	static_cast<QBackingStore*>(ptr)->endPaint();
}

void QBackingStore_Flush(void* ptr, void* region, void* window, void* offset)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(window))) {
		static_cast<QBackingStore*>(ptr)->flush(*static_cast<QRegion*>(region), static_cast<QPaintDeviceWindow*>(window), *static_cast<QPoint*>(offset));
	} else {
		static_cast<QBackingStore*>(ptr)->flush(*static_cast<QRegion*>(region), static_cast<QWindow*>(window), *static_cast<QPoint*>(offset));
	}
}

char QBackingStore_HasStaticContents(void* ptr)
{
	return static_cast<QBackingStore*>(ptr)->hasStaticContents();
}

void* QBackingStore_PaintDevice(void* ptr)
{
	return static_cast<QBackingStore*>(ptr)->paintDevice();
}

void QBackingStore_Resize(void* ptr, void* size)
{
	static_cast<QBackingStore*>(ptr)->resize(*static_cast<QSize*>(size));
}

char QBackingStore_Scroll(void* ptr, void* area, int dx, int dy)
{
	return static_cast<QBackingStore*>(ptr)->scroll(*static_cast<QRegion*>(area), dx, dy);
}

void QBackingStore_SetStaticContents(void* ptr, void* region)
{
	static_cast<QBackingStore*>(ptr)->setStaticContents(*static_cast<QRegion*>(region));
}

void* QBackingStore_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QBackingStore*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QBackingStore_StaticContents(void* ptr)
{
	return new QRegion(static_cast<QBackingStore*>(ptr)->staticContents());
}

void* QBackingStore_Window(void* ptr)
{
	return static_cast<QBackingStore*>(ptr)->window();
}

void QBackingStore_DestroyQBackingStore(void* ptr)
{
	static_cast<QBackingStore*>(ptr)->~QBackingStore();
}

class MyQBitmap: public QBitmap
{
public:
	MyQBitmap() : QBitmap() {QBitmap_QBitmap_QRegisterMetaType();};
	MyQBitmap(const QPixmap &pixmap) : QBitmap(pixmap) {QBitmap_QBitmap_QRegisterMetaType();};
	MyQBitmap(int width, int height) : QBitmap(width, height) {QBitmap_QBitmap_QRegisterMetaType();};
	MyQBitmap(const QSize &size) : QBitmap(size) {QBitmap_QBitmap_QRegisterMetaType();};
	MyQBitmap(const QString &fileName, const char *format = Q_NULLPTR) : QBitmap(fileName, format) {QBitmap_QBitmap_QRegisterMetaType();};
	 ~MyQBitmap() { callbackQBitmap_DestroyQBitmap(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPixmap_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QBitmap*)
Q_DECLARE_METATYPE(MyQBitmap*)

int QBitmap_QBitmap_QRegisterMetaType(){qRegisterMetaType<QBitmap*>(); return qRegisterMetaType<MyQBitmap*>();}

void* QBitmap_NewQBitmap()
{
	return new MyQBitmap();
}

void* QBitmap_NewQBitmap2(void* pixmap)
{
	return new MyQBitmap(*static_cast<QPixmap*>(pixmap));
}

void* QBitmap_NewQBitmap3(int width, int height)
{
	return new MyQBitmap(width, height);
}

void* QBitmap_NewQBitmap4(void* size)
{
	return new MyQBitmap(*static_cast<QSize*>(size));
}

void* QBitmap_NewQBitmap5(struct QtGui_PackedString fileName, char* format)
{
	return new MyQBitmap(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

void QBitmap_Clear(void* ptr)
{
	static_cast<QBitmap*>(ptr)->clear();
}

void* QBitmap_QBitmap_FromData(void* size, char* bits, long long monoFormat)
{
	return new QBitmap(QBitmap::fromData(*static_cast<QSize*>(size), const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(bits))), static_cast<QImage::Format>(monoFormat)));
}

void* QBitmap_QBitmap_FromImage(void* image, long long flags)
{
	return new QBitmap(QBitmap::fromImage(*static_cast<QImage*>(image), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QBitmap_QBitmap_FromImage2(void* image, long long flags)
{
	return new QBitmap(QBitmap::fromImage(*static_cast<QImage*>(image), static_cast<Qt::ImageConversionFlag>(flags)));
}

void QBitmap_Swap(void* ptr, void* other)
{
	static_cast<QBitmap*>(ptr)->swap(*static_cast<QBitmap*>(other));
}

void* QBitmap_Transformed(void* ptr, void* matrix)
{
	return new QBitmap(static_cast<QBitmap*>(ptr)->transformed(*static_cast<QTransform*>(matrix)));
}

void QBitmap_DestroyQBitmap(void* ptr)
{
	static_cast<QBitmap*>(ptr)->~QBitmap();
}

void QBitmap_DestroyQBitmapDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QBrush)
Q_DECLARE_METATYPE(QBrush*)
void* QBrush_NewQBrush()
{
	return new QBrush();
}

void* QBrush_NewQBrush2(long long style)
{
	return new QBrush(static_cast<Qt::BrushStyle>(style));
}

void* QBrush_NewQBrush3(void* color, long long style)
{
	return new QBrush(*static_cast<QColor*>(color), static_cast<Qt::BrushStyle>(style));
}

void* QBrush_NewQBrush4(long long color, long long style)
{
	return new QBrush(static_cast<Qt::GlobalColor>(color), static_cast<Qt::BrushStyle>(style));
}

void* QBrush_NewQBrush5(void* color, void* pixmap)
{
	return new QBrush(*static_cast<QColor*>(color), *static_cast<QPixmap*>(pixmap));
}

void* QBrush_NewQBrush6(long long color, void* pixmap)
{
	return new QBrush(static_cast<Qt::GlobalColor>(color), *static_cast<QPixmap*>(pixmap));
}

void* QBrush_NewQBrush7(void* pixmap)
{
	return new QBrush(*static_cast<QPixmap*>(pixmap));
}

void* QBrush_NewQBrush8(void* image)
{
	return new QBrush(*static_cast<QImage*>(image));
}

void* QBrush_NewQBrush9(void* other)
{
	return new QBrush(*static_cast<QBrush*>(other));
}

void* QBrush_NewQBrush10(void* gradient)
{
	return new QBrush(*static_cast<QGradient*>(gradient));
}

void* QBrush_Color(void* ptr)
{
	return const_cast<QColor*>(&static_cast<QBrush*>(ptr)->color());
}

void* QBrush_Gradient(void* ptr)
{
	return const_cast<QGradient*>(static_cast<QBrush*>(ptr)->gradient());
}

char QBrush_IsOpaque(void* ptr)
{
	return static_cast<QBrush*>(ptr)->isOpaque();
}

void QBrush_SetColor(void* ptr, void* color)
{
	static_cast<QBrush*>(ptr)->setColor(*static_cast<QColor*>(color));
}

void QBrush_SetColor2(void* ptr, long long color)
{
	static_cast<QBrush*>(ptr)->setColor(static_cast<Qt::GlobalColor>(color));
}

void QBrush_SetStyle(void* ptr, long long style)
{
	static_cast<QBrush*>(ptr)->setStyle(static_cast<Qt::BrushStyle>(style));
}

void QBrush_SetTexture(void* ptr, void* pixmap)
{
	static_cast<QBrush*>(ptr)->setTexture(*static_cast<QPixmap*>(pixmap));
}

void QBrush_SetTextureImage(void* ptr, void* image)
{
	static_cast<QBrush*>(ptr)->setTextureImage(*static_cast<QImage*>(image));
}

void QBrush_SetTransform(void* ptr, void* matrix)
{
	static_cast<QBrush*>(ptr)->setTransform(*static_cast<QTransform*>(matrix));
}

long long QBrush_Style(void* ptr)
{
	return static_cast<QBrush*>(ptr)->style();
}

void QBrush_Swap(void* ptr, void* other)
{
	static_cast<QBrush*>(ptr)->swap(*static_cast<QBrush*>(other));
}

void* QBrush_Texture(void* ptr)
{
	return new QPixmap(static_cast<QBrush*>(ptr)->texture());
}

void* QBrush_TextureImage(void* ptr)
{
	return new QImage(static_cast<QBrush*>(ptr)->textureImage());
}

void* QBrush_Transform(void* ptr)
{
	return new QTransform(static_cast<QBrush*>(ptr)->transform());
}

void QBrush_DestroyQBrush(void* ptr)
{
	static_cast<QBrush*>(ptr)->~QBrush();
}

void* QBrush_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QBrush*>(ptr));
}

class MyQClipboard: public QClipboard
{
public:
	void Signal_Changed(QClipboard::Mode mode) { callbackQClipboard_Changed(this, mode); };
	void Signal_DataChanged() { callbackQClipboard_DataChanged(this); };
	void Signal_FindBufferChanged() { callbackQClipboard_FindBufferChanged(this); };
	void Signal_SelectionChanged() { callbackQClipboard_SelectionChanged(this); };
	void childEvent(QChildEvent * event) { callbackQClipboard_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQClipboard_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQClipboard_CustomEvent(this, event); };
	void deleteLater() { callbackQClipboard_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQClipboard_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQClipboard_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQClipboard_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQClipboard_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQClipboard_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQClipboard_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQClipboard_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QClipboard*)
Q_DECLARE_METATYPE(MyQClipboard*)

int QClipboard_QClipboard_QRegisterMetaType(){qRegisterMetaType<QClipboard*>(); return qRegisterMetaType<MyQClipboard*>();}

void QClipboard_ConnectChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)(QClipboard::Mode)>(&QClipboard::changed), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)(QClipboard::Mode)>(&MyQClipboard::Signal_Changed), static_cast<Qt::ConnectionType>(t));
}

void QClipboard_DisconnectChanged(void* ptr)
{
	QObject::disconnect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)(QClipboard::Mode)>(&QClipboard::changed), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)(QClipboard::Mode)>(&MyQClipboard::Signal_Changed));
}

void QClipboard_Changed(void* ptr, long long mode)
{
	static_cast<QClipboard*>(ptr)->changed(static_cast<QClipboard::Mode>(mode));
}

void QClipboard_Clear(void* ptr, long long mode)
{
	static_cast<QClipboard*>(ptr)->clear(static_cast<QClipboard::Mode>(mode));
}

void QClipboard_ConnectDataChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::dataChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_DataChanged), static_cast<Qt::ConnectionType>(t));
}

void QClipboard_DisconnectDataChanged(void* ptr)
{
	QObject::disconnect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::dataChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_DataChanged));
}

void QClipboard_DataChanged(void* ptr)
{
	static_cast<QClipboard*>(ptr)->dataChanged();
}

void QClipboard_ConnectFindBufferChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::findBufferChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_FindBufferChanged), static_cast<Qt::ConnectionType>(t));
}

void QClipboard_DisconnectFindBufferChanged(void* ptr)
{
	QObject::disconnect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::findBufferChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_FindBufferChanged));
}

void QClipboard_FindBufferChanged(void* ptr)
{
	static_cast<QClipboard*>(ptr)->findBufferChanged();
}

void* QClipboard_Image(void* ptr, long long mode)
{
	return new QImage(static_cast<QClipboard*>(ptr)->image(static_cast<QClipboard::Mode>(mode)));
}

void* QClipboard_MimeData(void* ptr, long long mode)
{
	return const_cast<QMimeData*>(static_cast<QClipboard*>(ptr)->mimeData(static_cast<QClipboard::Mode>(mode)));
}

char QClipboard_OwnsClipboard(void* ptr)
{
	return static_cast<QClipboard*>(ptr)->ownsClipboard();
}

char QClipboard_OwnsFindBuffer(void* ptr)
{
	return static_cast<QClipboard*>(ptr)->ownsFindBuffer();
}

char QClipboard_OwnsSelection(void* ptr)
{
	return static_cast<QClipboard*>(ptr)->ownsSelection();
}

void* QClipboard_Pixmap(void* ptr, long long mode)
{
	return new QPixmap(static_cast<QClipboard*>(ptr)->pixmap(static_cast<QClipboard::Mode>(mode)));
}

void QClipboard_ConnectSelectionChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::selectionChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_SelectionChanged), static_cast<Qt::ConnectionType>(t));
}

void QClipboard_DisconnectSelectionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QClipboard*>(ptr), static_cast<void (QClipboard::*)()>(&QClipboard::selectionChanged), static_cast<MyQClipboard*>(ptr), static_cast<void (MyQClipboard::*)()>(&MyQClipboard::Signal_SelectionChanged));
}

void QClipboard_SelectionChanged(void* ptr)
{
	static_cast<QClipboard*>(ptr)->selectionChanged();
}

void QClipboard_SetImage(void* ptr, void* image, long long mode)
{
	static_cast<QClipboard*>(ptr)->setImage(*static_cast<QImage*>(image), static_cast<QClipboard::Mode>(mode));
}

void QClipboard_SetMimeData(void* ptr, void* src, long long mode)
{
	static_cast<QClipboard*>(ptr)->setMimeData(static_cast<QMimeData*>(src), static_cast<QClipboard::Mode>(mode));
}

void QClipboard_SetPixmap(void* ptr, void* pixmap, long long mode)
{
	static_cast<QClipboard*>(ptr)->setPixmap(*static_cast<QPixmap*>(pixmap), static_cast<QClipboard::Mode>(mode));
}

void QClipboard_SetText(void* ptr, struct QtGui_PackedString text, long long mode)
{
	static_cast<QClipboard*>(ptr)->setText(QString::fromUtf8(text.data, text.len), static_cast<QClipboard::Mode>(mode));
}

char QClipboard_SupportsFindBuffer(void* ptr)
{
	return static_cast<QClipboard*>(ptr)->supportsFindBuffer();
}

char QClipboard_SupportsSelection(void* ptr)
{
	return static_cast<QClipboard*>(ptr)->supportsSelection();
}

struct QtGui_PackedString QClipboard_Text(void* ptr, long long mode)
{
	return ({ QByteArray* tc36a83 = new QByteArray(static_cast<QClipboard*>(ptr)->text(static_cast<QClipboard::Mode>(mode)).toUtf8()); QtGui_PackedString { const_cast<char*>(tc36a83->prepend("WHITESPACE").constData()+10), tc36a83->size()-10, tc36a83 }; });
}

struct QtGui_PackedString QClipboard_Text2(void* ptr, struct QtGui_PackedString subtype, long long mode)
{
	return ({ QByteArray* tde8270 = new QByteArray(static_cast<QClipboard*>(ptr)->text(*(new QString(QString::fromUtf8(subtype.data, subtype.len))), static_cast<QClipboard::Mode>(mode)).toUtf8()); QtGui_PackedString { const_cast<char*>(tde8270->prepend("WHITESPACE").constData()+10), tde8270->size()-10, tde8270 }; });
}

void* QClipboard___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QClipboard___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QClipboard___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QClipboard___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QClipboard___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QClipboard___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QClipboard___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QClipboard___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QClipboard___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QClipboard___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QClipboard___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QClipboard___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QClipboard_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QClipboard*>(ptr)->QClipboard::childEvent(static_cast<QChildEvent*>(event));
}

void QClipboard_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QClipboard*>(ptr)->QClipboard::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QClipboard_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QClipboard*>(ptr)->QClipboard::customEvent(static_cast<QEvent*>(event));
}

void QClipboard_DeleteLaterDefault(void* ptr)
{
		static_cast<QClipboard*>(ptr)->QClipboard::deleteLater();
}

void QClipboard_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QClipboard*>(ptr)->QClipboard::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QClipboard_EventDefault(void* ptr, void* e)
{
		return static_cast<QClipboard*>(ptr)->QClipboard::event(static_cast<QEvent*>(e));
}

char QClipboard_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QClipboard*>(ptr)->QClipboard::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QClipboard*>(ptr)->QClipboard::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QClipboard*>(ptr)->QClipboard::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QClipboard*>(ptr)->QClipboard::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QClipboard*>(ptr)->QClipboard::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QClipboard_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QClipboard*>(ptr)->QClipboard::metaObject());
}

void QClipboard_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QClipboard*>(ptr)->QClipboard::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQCloseEvent: public QCloseEvent
{
public:
	MyQCloseEvent() : QCloseEvent() {QCloseEvent_QCloseEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QCloseEvent*)
Q_DECLARE_METATYPE(MyQCloseEvent*)

int QCloseEvent_QCloseEvent_QRegisterMetaType(){qRegisterMetaType<QCloseEvent*>(); return qRegisterMetaType<MyQCloseEvent*>();}

void* QCloseEvent_NewQCloseEvent()
{
	return new MyQCloseEvent();
}

Q_DECLARE_METATYPE(QColor)
Q_DECLARE_METATYPE(QColor*)
void* QColor_NewQColor()
{
	return new QColor();
}

void* QColor_NewQColor2(long long color)
{
	return new QColor(static_cast<Qt::GlobalColor>(color));
}

void* QColor_NewQColor3(int r, int g, int b, int a)
{
	return new QColor(r, g, b, a);
}

void* QColor_NewQColor4(unsigned int color)
{
	return new QColor(color);
}

void* QColor_NewQColor5(void* rgba64)
{
	return new QColor(*static_cast<QRgba64*>(rgba64));
}

void* QColor_NewQColor6(struct QtGui_PackedString name)
{
	return new QColor(QString::fromUtf8(name.data, name.len));
}

void* QColor_NewQColor8(char* name)
{
	return new QColor(const_cast<const char*>(name));
}

void* QColor_NewQColor9(void* name)
{
	return new QColor(*static_cast<QLatin1String*>(name));
}

int QColor_Alpha(void* ptr)
{
	return static_cast<QColor*>(ptr)->alpha();
}

double QColor_AlphaF(void* ptr)
{
	return static_cast<QColor*>(ptr)->alphaF();
}

int QColor_Black(void* ptr)
{
	return static_cast<QColor*>(ptr)->black();
}

double QColor_BlackF(void* ptr)
{
	return static_cast<QColor*>(ptr)->blackF();
}

int QColor_Blue(void* ptr)
{
	return static_cast<QColor*>(ptr)->blue();
}

double QColor_BlueF(void* ptr)
{
	return static_cast<QColor*>(ptr)->blueF();
}

struct QtGui_PackedString QColor_QColor_ColorNames()
{
	return ({ QByteArray* t1b28c6 = new QByteArray(QColor::colorNames().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t1b28c6->prepend("WHITESPACE").constData()+10), t1b28c6->size()-10, t1b28c6 }; });
}

void* QColor_ConvertTo(void* ptr, long long colorSpec)
{
	return new QColor(static_cast<QColor*>(ptr)->convertTo(static_cast<QColor::Spec>(colorSpec)));
}

int QColor_Cyan(void* ptr)
{
	return static_cast<QColor*>(ptr)->cyan();
}

double QColor_CyanF(void* ptr)
{
	return static_cast<QColor*>(ptr)->cyanF();
}

void* QColor_Darker(void* ptr, int factor)
{
	return new QColor(static_cast<QColor*>(ptr)->darker(factor));
}

void* QColor_QColor_FromCmyk(int c, int m, int y, int k, int a)
{
	return new QColor(QColor::fromCmyk(c, m, y, k, a));
}

void* QColor_QColor_FromCmykF(double c, double m, double y, double k, double a)
{
	return new QColor(QColor::fromCmykF(c, m, y, k, a));
}

void* QColor_QColor_FromHsl(int h, int s, int l, int a)
{
	return new QColor(QColor::fromHsl(h, s, l, a));
}

void* QColor_QColor_FromHslF(double h, double s, double l, double a)
{
	return new QColor(QColor::fromHslF(h, s, l, a));
}

void* QColor_QColor_FromHsv(int h, int s, int v, int a)
{
	return new QColor(QColor::fromHsv(h, s, v, a));
}

void* QColor_QColor_FromHsvF(double h, double s, double v, double a)
{
	return new QColor(QColor::fromHsvF(h, s, v, a));
}

void* QColor_QColor_FromRgb(unsigned int rgb)
{
	return new QColor(QColor::fromRgb(rgb));
}

void* QColor_QColor_FromRgb2(int r, int g, int b, int a)
{
	return new QColor(QColor::fromRgb(r, g, b, a));
}

void* QColor_QColor_FromRgbF(double r, double g, double b, double a)
{
	return new QColor(QColor::fromRgbF(r, g, b, a));
}

void* QColor_QColor_FromRgba(unsigned int rgba)
{
	return new QColor(QColor::fromRgba(rgba));
}

void* QColor_QColor_FromRgba64(unsigned short r, unsigned short g, unsigned short b, unsigned short a)
{
	return new QColor(QColor::fromRgba64(r, g, b, a));
}

void* QColor_QColor_FromRgba642(void* rgba64)
{
	return new QColor(QColor::fromRgba64(*static_cast<QRgba64*>(rgba64)));
}

void QColor_GetCmyk2(void* ptr, int c, int m, int y, int k, int a)
{
	static_cast<QColor*>(ptr)->getCmyk(&c, &m, &y, &k, &a);
}

void QColor_GetCmykF2(void* ptr, double c, double m, double y, double k, double a)
{
	static_cast<QColor*>(ptr)->getCmykF(&c, &m, &y, &k, &a);
}

void QColor_GetHsl(void* ptr, int h, int s, int l, int a)
{
	static_cast<QColor*>(ptr)->getHsl(&h, &s, &l, &a);
}

void QColor_GetHslF(void* ptr, double h, double s, double l, double a)
{
	static_cast<QColor*>(ptr)->getHslF(&h, &s, &l, &a);
}

void QColor_GetHsv(void* ptr, int h, int s, int v, int a)
{
	static_cast<QColor*>(ptr)->getHsv(&h, &s, &v, &a);
}

void QColor_GetHsvF(void* ptr, double h, double s, double v, double a)
{
	static_cast<QColor*>(ptr)->getHsvF(&h, &s, &v, &a);
}

void QColor_GetRgb(void* ptr, int r, int g, int b, int a)
{
	static_cast<QColor*>(ptr)->getRgb(&r, &g, &b, &a);
}

void QColor_GetRgbF(void* ptr, double r, double g, double b, double a)
{
	static_cast<QColor*>(ptr)->getRgbF(&r, &g, &b, &a);
}

int QColor_Green(void* ptr)
{
	return static_cast<QColor*>(ptr)->green();
}

double QColor_GreenF(void* ptr)
{
	return static_cast<QColor*>(ptr)->greenF();
}

int QColor_HslHue(void* ptr)
{
	return static_cast<QColor*>(ptr)->hslHue();
}

double QColor_HslHueF(void* ptr)
{
	return static_cast<QColor*>(ptr)->hslHueF();
}

int QColor_HslSaturation(void* ptr)
{
	return static_cast<QColor*>(ptr)->hslSaturation();
}

double QColor_HslSaturationF(void* ptr)
{
	return static_cast<QColor*>(ptr)->hslSaturationF();
}

int QColor_HsvHue(void* ptr)
{
	return static_cast<QColor*>(ptr)->hsvHue();
}

double QColor_HsvHueF(void* ptr)
{
	return static_cast<QColor*>(ptr)->hsvHueF();
}

int QColor_HsvSaturation(void* ptr)
{
	return static_cast<QColor*>(ptr)->hsvSaturation();
}

double QColor_HsvSaturationF(void* ptr)
{
	return static_cast<QColor*>(ptr)->hsvSaturationF();
}

int QColor_Hue(void* ptr)
{
	return static_cast<QColor*>(ptr)->hue();
}

double QColor_HueF(void* ptr)
{
	return static_cast<QColor*>(ptr)->hueF();
}

char QColor_IsValid(void* ptr)
{
	return static_cast<QColor*>(ptr)->isValid();
}

char QColor_QColor_IsValidColor(struct QtGui_PackedString name)
{
	return QColor::isValidColor(QString::fromUtf8(name.data, name.len));
}

char QColor_QColor_IsValidColor2(void* name)
{
	return QColor::isValidColor(*static_cast<QStringView*>(name));
}

char QColor_QColor_IsValidColor3(void* name)
{
	return QColor::isValidColor(*static_cast<QLatin1String*>(name));
}

void* QColor_Lighter(void* ptr, int factor)
{
	return new QColor(static_cast<QColor*>(ptr)->lighter(factor));
}

int QColor_Lightness(void* ptr)
{
	return static_cast<QColor*>(ptr)->lightness();
}

double QColor_LightnessF(void* ptr)
{
	return static_cast<QColor*>(ptr)->lightnessF();
}

int QColor_Magenta(void* ptr)
{
	return static_cast<QColor*>(ptr)->magenta();
}

double QColor_MagentaF(void* ptr)
{
	return static_cast<QColor*>(ptr)->magentaF();
}

struct QtGui_PackedString QColor_Name(void* ptr)
{
	return ({ QByteArray* t9b3be4 = new QByteArray(static_cast<QColor*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(t9b3be4->prepend("WHITESPACE").constData()+10), t9b3be4->size()-10, t9b3be4 }; });
}

struct QtGui_PackedString QColor_Name2(void* ptr, long long format)
{
	return ({ QByteArray* t4331f3 = new QByteArray(static_cast<QColor*>(ptr)->name(static_cast<QColor::NameFormat>(format)).toUtf8()); QtGui_PackedString { const_cast<char*>(t4331f3->prepend("WHITESPACE").constData()+10), t4331f3->size()-10, t4331f3 }; });
}

int QColor_Red(void* ptr)
{
	return static_cast<QColor*>(ptr)->red();
}

double QColor_RedF(void* ptr)
{
	return static_cast<QColor*>(ptr)->redF();
}

unsigned int QColor_Rgb(void* ptr)
{
	return static_cast<QColor*>(ptr)->rgb();
}

unsigned int QColor_Rgba(void* ptr)
{
	return static_cast<QColor*>(ptr)->rgba();
}

int QColor_Saturation(void* ptr)
{
	return static_cast<QColor*>(ptr)->saturation();
}

double QColor_SaturationF(void* ptr)
{
	return static_cast<QColor*>(ptr)->saturationF();
}

void QColor_SetAlpha(void* ptr, int alpha)
{
	static_cast<QColor*>(ptr)->setAlpha(alpha);
}

void QColor_SetAlphaF(void* ptr, double alpha)
{
	static_cast<QColor*>(ptr)->setAlphaF(alpha);
}

void QColor_SetBlue(void* ptr, int blue)
{
	static_cast<QColor*>(ptr)->setBlue(blue);
}

void QColor_SetBlueF(void* ptr, double blue)
{
	static_cast<QColor*>(ptr)->setBlueF(blue);
}

void QColor_SetCmyk(void* ptr, int c, int m, int y, int k, int a)
{
	static_cast<QColor*>(ptr)->setCmyk(c, m, y, k, a);
}

void QColor_SetCmykF(void* ptr, double c, double m, double y, double k, double a)
{
	static_cast<QColor*>(ptr)->setCmykF(c, m, y, k, a);
}

void QColor_SetGreen(void* ptr, int green)
{
	static_cast<QColor*>(ptr)->setGreen(green);
}

void QColor_SetGreenF(void* ptr, double green)
{
	static_cast<QColor*>(ptr)->setGreenF(green);
}

void QColor_SetHsl(void* ptr, int h, int s, int l, int a)
{
	static_cast<QColor*>(ptr)->setHsl(h, s, l, a);
}

void QColor_SetHslF(void* ptr, double h, double s, double l, double a)
{
	static_cast<QColor*>(ptr)->setHslF(h, s, l, a);
}

void QColor_SetHsv(void* ptr, int h, int s, int v, int a)
{
	static_cast<QColor*>(ptr)->setHsv(h, s, v, a);
}

void QColor_SetHsvF(void* ptr, double h, double s, double v, double a)
{
	static_cast<QColor*>(ptr)->setHsvF(h, s, v, a);
}

void QColor_SetNamedColor(void* ptr, struct QtGui_PackedString name)
{
	static_cast<QColor*>(ptr)->setNamedColor(QString::fromUtf8(name.data, name.len));
}

void QColor_SetNamedColor2(void* ptr, void* name)
{
	static_cast<QColor*>(ptr)->setNamedColor(*static_cast<QStringView*>(name));
}

void QColor_SetNamedColor3(void* ptr, void* name)
{
	static_cast<QColor*>(ptr)->setNamedColor(*static_cast<QLatin1String*>(name));
}

void QColor_SetRed(void* ptr, int red)
{
	static_cast<QColor*>(ptr)->setRed(red);
}

void QColor_SetRedF(void* ptr, double red)
{
	static_cast<QColor*>(ptr)->setRedF(red);
}

void QColor_SetRgb(void* ptr, int r, int g, int b, int a)
{
	static_cast<QColor*>(ptr)->setRgb(r, g, b, a);
}

void QColor_SetRgb2(void* ptr, unsigned int rgb)
{
	static_cast<QColor*>(ptr)->setRgb(rgb);
}

void QColor_SetRgbF(void* ptr, double r, double g, double b, double a)
{
	static_cast<QColor*>(ptr)->setRgbF(r, g, b, a);
}

void QColor_SetRgba(void* ptr, unsigned int rgba)
{
	static_cast<QColor*>(ptr)->setRgba(rgba);
}

void QColor_SetRgba64(void* ptr, void* rgba)
{
	static_cast<QColor*>(ptr)->setRgba64(*static_cast<QRgba64*>(rgba));
}

long long QColor_Spec(void* ptr)
{
	return static_cast<QColor*>(ptr)->spec();
}

void* QColor_ToCmyk(void* ptr)
{
	return new QColor(static_cast<QColor*>(ptr)->toCmyk());
}

void* QColor_ToExtendedRgb(void* ptr)
{
	return new QColor(static_cast<QColor*>(ptr)->toExtendedRgb());
}

void* QColor_ToHsl(void* ptr)
{
	return new QColor(static_cast<QColor*>(ptr)->toHsl());
}

void* QColor_ToHsv(void* ptr)
{
	return new QColor(static_cast<QColor*>(ptr)->toHsv());
}

void* QColor_ToRgb(void* ptr)
{
	return new QColor(static_cast<QColor*>(ptr)->toRgb());
}

int QColor_Value(void* ptr)
{
	return static_cast<QColor*>(ptr)->value();
}

double QColor_ValueF(void* ptr)
{
	return static_cast<QColor*>(ptr)->valueF();
}

int QColor_Yellow(void* ptr)
{
	return static_cast<QColor*>(ptr)->yellow();
}

double QColor_YellowF(void* ptr)
{
	return static_cast<QColor*>(ptr)->yellowF();
}

void* QColor_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QColor*>(ptr));
}

Q_DECLARE_METATYPE(QColorSpace)
Q_DECLARE_METATYPE(QColorSpace*)
void* QColorSpace_NewQColorSpace()
{
	return new QColorSpace();
}

void* QColorSpace_NewQColorSpace2(long long namedColorSpace)
{
	return new QColorSpace(static_cast<QColorSpace::NamedColorSpace>(namedColorSpace));
}

void* QColorSpace_NewQColorSpace3(long long primaries, long long transferFunction, float gamma)
{
	return new QColorSpace(static_cast<QColorSpace::Primaries>(primaries), static_cast<QColorSpace::TransferFunction>(transferFunction), gamma);
}

void* QColorSpace_NewQColorSpace4(long long primaries, float gamma)
{
	return new QColorSpace(static_cast<QColorSpace::Primaries>(primaries), gamma);
}

void* QColorSpace_NewQColorSpace5(void* whitePoint, void* redPoint, void* greenPoint, void* bluePoint, long long transferFunction, float gamma)
{
	return new QColorSpace(*static_cast<QPointF*>(whitePoint), *static_cast<QPointF*>(redPoint), *static_cast<QPointF*>(greenPoint), *static_cast<QPointF*>(bluePoint), static_cast<QColorSpace::TransferFunction>(transferFunction), gamma);
}

void* QColorSpace_QColorSpace_FromIccProfile(void* iccProfile)
{
	return new QColorSpace(QColorSpace::fromIccProfile(*static_cast<QByteArray*>(iccProfile)));
}

float QColorSpace_Gamma(void* ptr)
{
	return static_cast<QColorSpace*>(ptr)->gamma();
}

void* QColorSpace_IccProfile(void* ptr)
{
	return new QByteArray(static_cast<QColorSpace*>(ptr)->iccProfile());
}

char QColorSpace_IsValid(void* ptr)
{
	return static_cast<QColorSpace*>(ptr)->isValid();
}

long long QColorSpace_Primaries(void* ptr)
{
	return static_cast<qint64>(static_cast<QColorSpace*>(ptr)->primaries());
}

void QColorSpace_SetPrimaries(void* ptr, long long primariesId)
{
	static_cast<QColorSpace*>(ptr)->setPrimaries(static_cast<QColorSpace::Primaries>(primariesId));
}

void QColorSpace_SetPrimaries2(void* ptr, void* whitePoint, void* redPoint, void* greenPoint, void* bluePoint)
{
	static_cast<QColorSpace*>(ptr)->setPrimaries(*static_cast<QPointF*>(whitePoint), *static_cast<QPointF*>(redPoint), *static_cast<QPointF*>(greenPoint), *static_cast<QPointF*>(bluePoint));
}

void QColorSpace_SetTransferFunction(void* ptr, long long transferFunction, float gamma)
{
	static_cast<QColorSpace*>(ptr)->setTransferFunction(static_cast<QColorSpace::TransferFunction>(transferFunction), gamma);
}

void QColorSpace_Swap(void* ptr, void* other)
{
	static_cast<QColorSpace*>(ptr)->swap(*static_cast<QColorSpace*>(other));
}

long long QColorSpace_TransferFunction(void* ptr)
{
	return static_cast<qint64>(static_cast<QColorSpace*>(ptr)->transferFunction());
}

void* QColorSpace_WithTransferFunction(void* ptr, long long transferFunction, float gamma)
{
	return new QColorSpace(static_cast<QColorSpace*>(ptr)->withTransferFunction(static_cast<QColorSpace::TransferFunction>(transferFunction), gamma));
}

unsigned int QColorTransform_Map(void* ptr, unsigned int argb)
{
	return static_cast<QColorTransform*>(ptr)->map(argb);
}

void* QColorTransform_Map3(void* ptr, void* color)
{
	return new QColor(static_cast<QColorTransform*>(ptr)->map(*static_cast<QColor*>(color)));
}

Q_DECLARE_METATYPE(QConicalGradient)
Q_DECLARE_METATYPE(QConicalGradient*)
void* QConicalGradient_NewQConicalGradient()
{
	return new QConicalGradient();
}

void* QConicalGradient_NewQConicalGradient2(void* center, double angle)
{
	return new QConicalGradient(*static_cast<QPointF*>(center), angle);
}

void* QConicalGradient_NewQConicalGradient3(double cx, double cy, double angle)
{
	return new QConicalGradient(cx, cy, angle);
}

double QConicalGradient_Angle(void* ptr)
{
	return static_cast<QConicalGradient*>(ptr)->angle();
}

void* QConicalGradient_Center(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QConicalGradient*>(ptr)->center(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QConicalGradient_SetAngle(void* ptr, double angle)
{
	static_cast<QConicalGradient*>(ptr)->setAngle(angle);
}

void QConicalGradient_SetCenter(void* ptr, void* center)
{
	static_cast<QConicalGradient*>(ptr)->setCenter(*static_cast<QPointF*>(center));
}

void QConicalGradient_SetCenter2(void* ptr, double x, double y)
{
	static_cast<QConicalGradient*>(ptr)->setCenter(x, y);
}

class MyQContextMenuEvent: public QContextMenuEvent
{
public:
	MyQContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos, const QPoint &globalPos, Qt::KeyboardModifiers modifiers) : QContextMenuEvent(reason, pos, globalPos, modifiers) {QContextMenuEvent_QContextMenuEvent_QRegisterMetaType();};
	MyQContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos, const QPoint &globalPos) : QContextMenuEvent(reason, pos, globalPos) {QContextMenuEvent_QContextMenuEvent_QRegisterMetaType();};
	MyQContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos) : QContextMenuEvent(reason, pos) {QContextMenuEvent_QContextMenuEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QContextMenuEvent*)
Q_DECLARE_METATYPE(MyQContextMenuEvent*)

int QContextMenuEvent_QContextMenuEvent_QRegisterMetaType(){qRegisterMetaType<QContextMenuEvent*>(); return qRegisterMetaType<MyQContextMenuEvent*>();}

void* QContextMenuEvent_NewQContextMenuEvent(long long reason, void* pos, void* globalPos, long long modifiers)
{
	return new MyQContextMenuEvent(static_cast<QContextMenuEvent::Reason>(reason), *static_cast<QPoint*>(pos), *static_cast<QPoint*>(globalPos), static_cast<Qt::KeyboardModifier>(modifiers));
}

void* QContextMenuEvent_NewQContextMenuEvent2(long long reason, void* pos, void* globalPos)
{
	return new MyQContextMenuEvent(static_cast<QContextMenuEvent::Reason>(reason), *static_cast<QPoint*>(pos), *static_cast<QPoint*>(globalPos));
}

void* QContextMenuEvent_NewQContextMenuEvent3(long long reason, void* pos)
{
	return new MyQContextMenuEvent(static_cast<QContextMenuEvent::Reason>(reason), *static_cast<QPoint*>(pos));
}

void* QContextMenuEvent_GlobalPos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QContextMenuEvent*>(ptr)->globalPos());
}

int QContextMenuEvent_GlobalX(void* ptr)
{
	return static_cast<QContextMenuEvent*>(ptr)->globalX();
}

int QContextMenuEvent_GlobalY(void* ptr)
{
	return static_cast<QContextMenuEvent*>(ptr)->globalY();
}

void* QContextMenuEvent_Pos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QContextMenuEvent*>(ptr)->pos());
}

long long QContextMenuEvent_Reason(void* ptr)
{
	return static_cast<QContextMenuEvent*>(ptr)->reason();
}

int QContextMenuEvent_X(void* ptr)
{
	return static_cast<QContextMenuEvent*>(ptr)->x();
}

int QContextMenuEvent_Y(void* ptr)
{
	return static_cast<QContextMenuEvent*>(ptr)->y();
}

Q_DECLARE_METATYPE(QCursor)
Q_DECLARE_METATYPE(QCursor*)
void* QCursor_NewQCursor()
{
	return new QCursor();
}

void* QCursor_NewQCursor2(long long shape)
{
	return new QCursor(static_cast<Qt::CursorShape>(shape));
}

void* QCursor_NewQCursor3(void* bitmap, void* mask, int hotX, int hotY)
{
	return new QCursor(*static_cast<QBitmap*>(bitmap), *static_cast<QBitmap*>(mask), hotX, hotY);
}

void* QCursor_NewQCursor4(void* pixmap, int hotX, int hotY)
{
	return new QCursor(*static_cast<QPixmap*>(pixmap), hotX, hotY);
}

void* QCursor_NewQCursor5(void* c)
{
	return new QCursor(*static_cast<QCursor*>(c));
}

void* QCursor_NewQCursor6(void* other)
{
	return new QCursor(*static_cast<QCursor*>(other));
}

void* QCursor_Bitmap2(void* ptr, long long vqt)
{
	return new QBitmap(static_cast<QCursor*>(ptr)->bitmap(static_cast<Qt::ReturnByValueConstant>(vqt)));
}

void* QCursor_HotSpot(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QCursor*>(ptr)->hotSpot(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QCursor_Mask2(void* ptr, long long vqt)
{
	return new QBitmap(static_cast<QCursor*>(ptr)->mask(static_cast<Qt::ReturnByValueConstant>(vqt)));
}

void* QCursor_Pixmap(void* ptr)
{
	return new QPixmap(static_cast<QCursor*>(ptr)->pixmap());
}

void* QCursor_QCursor_Pos()
{
	return ({ QPoint tmpValue = QCursor::pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QCursor_QCursor_Pos2(void* screen)
{
	return ({ QPoint tmpValue = QCursor::pos(static_cast<QScreen*>(screen)); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void QCursor_QCursor_SetPos(int x, int y)
{
	QCursor::setPos(x, y);
}

void QCursor_QCursor_SetPos2(void* screen, int x, int y)
{
	QCursor::setPos(static_cast<QScreen*>(screen), x, y);
}

void QCursor_QCursor_SetPos3(void* p)
{
	QCursor::setPos(*static_cast<QPoint*>(p));
}

void QCursor_QCursor_SetPos4(void* screen, void* p)
{
	QCursor::setPos(static_cast<QScreen*>(screen), *static_cast<QPoint*>(p));
}

void QCursor_SetShape(void* ptr, long long shape)
{
	static_cast<QCursor*>(ptr)->setShape(static_cast<Qt::CursorShape>(shape));
}

long long QCursor_Shape(void* ptr)
{
	return static_cast<QCursor*>(ptr)->shape();
}

void QCursor_Swap(void* ptr, void* other)
{
	static_cast<QCursor*>(ptr)->swap(*static_cast<QCursor*>(other));
}

void QCursor_DestroyQCursor(void* ptr)
{
	static_cast<QCursor*>(ptr)->~QCursor();
}

char QDesktopServices_QDesktopServices_OpenUrl(void* url)
{
	return QDesktopServices::openUrl(*static_cast<QUrl*>(url));
}

void QDesktopServices_QDesktopServices_SetUrlHandler(struct QtGui_PackedString scheme, void* receiver, char* method)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(receiver))) {
		QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.data, scheme.len), static_cast<QOffscreenSurface*>(receiver), const_cast<const char*>(method));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(receiver))) {
		QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.data, scheme.len), static_cast<QPaintDeviceWindow*>(receiver), const_cast<const char*>(method));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(receiver))) {
		QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.data, scheme.len), static_cast<QPdfWriter*>(receiver), const_cast<const char*>(method));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(receiver))) {
		QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.data, scheme.len), static_cast<QWindow*>(receiver), const_cast<const char*>(method));
	} else {
		QDesktopServices::setUrlHandler(QString::fromUtf8(scheme.data, scheme.len), static_cast<QObject*>(receiver), const_cast<const char*>(method));
	}
}

void QDesktopServices_QDesktopServices_UnsetUrlHandler(struct QtGui_PackedString scheme)
{
	QDesktopServices::unsetUrlHandler(QString::fromUtf8(scheme.data, scheme.len));
}

class MyQDoubleValidator: public QDoubleValidator
{
public:
	MyQDoubleValidator(QObject *parent = Q_NULLPTR) : QDoubleValidator(parent) {QDoubleValidator_QDoubleValidator_QRegisterMetaType();};
	MyQDoubleValidator(double bottom, double top, int decimals, QObject *parent = Q_NULLPTR) : QDoubleValidator(bottom, top, decimals, parent) {QDoubleValidator_QDoubleValidator_QRegisterMetaType();};
	void Signal_BottomChanged(double bottom) { callbackQDoubleValidator_BottomChanged(this, bottom); };
	void Signal_DecimalsChanged(int decimals) { callbackQDoubleValidator_DecimalsChanged(this, decimals); };
	void Signal_NotationChanged(QDoubleValidator::Notation notation) { callbackQDoubleValidator_NotationChanged(this, notation); };
	void setRange(double minimum, double maximum, int decimals) { callbackQDoubleValidator_SetRange(this, minimum, maximum, decimals); };
	void Signal_TopChanged(double top) { callbackQDoubleValidator_TopChanged(this, top); };
	QValidator::State validate(QString & input, int & pos) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };return static_cast<QValidator::State>(callbackQDoubleValidator_Validate(const_cast<void*>(static_cast<const void*>(this)), inputPacked, pos)); };
	 ~MyQDoubleValidator() { callbackQDoubleValidator_DestroyQDoubleValidator(this); };
	void Signal_Changed() { callbackQValidator_Changed(this); };
	void fixup(QString & input) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };callbackQValidator_Fixup(const_cast<void*>(static_cast<const void*>(this)), inputPacked); };
	void childEvent(QChildEvent * event) { callbackQValidator_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQValidator_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQValidator_CustomEvent(this, event); };
	void deleteLater() { callbackQValidator_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQValidator_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQValidator_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQValidator_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQValidator_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQValidator_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQValidator_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQValidator_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QDoubleValidator*)
Q_DECLARE_METATYPE(MyQDoubleValidator*)

int QDoubleValidator_QDoubleValidator_QRegisterMetaType(){qRegisterMetaType<QDoubleValidator*>(); return qRegisterMetaType<MyQDoubleValidator*>();}

void* QDoubleValidator_NewQDoubleValidator(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(static_cast<QWindow*>(parent));
	} else {
		return new MyQDoubleValidator(static_cast<QObject*>(parent));
	}
}

void* QDoubleValidator_NewQDoubleValidator2(double bottom, double top, int decimals, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QWindow*>(parent));
	} else {
		return new MyQDoubleValidator(bottom, top, decimals, static_cast<QObject*>(parent));
	}
}

double QDoubleValidator_Bottom(void* ptr)
{
	return static_cast<QDoubleValidator*>(ptr)->bottom();
}

void QDoubleValidator_ConnectBottomChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(double)>(&QDoubleValidator::bottomChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(double)>(&MyQDoubleValidator::Signal_BottomChanged), static_cast<Qt::ConnectionType>(t));
}

void QDoubleValidator_DisconnectBottomChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(double)>(&QDoubleValidator::bottomChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(double)>(&MyQDoubleValidator::Signal_BottomChanged));
}

void QDoubleValidator_BottomChanged(void* ptr, double bottom)
{
	static_cast<QDoubleValidator*>(ptr)->bottomChanged(bottom);
}

int QDoubleValidator_Decimals(void* ptr)
{
	return static_cast<QDoubleValidator*>(ptr)->decimals();
}

void QDoubleValidator_ConnectDecimalsChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(int)>(&QDoubleValidator::decimalsChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(int)>(&MyQDoubleValidator::Signal_DecimalsChanged), static_cast<Qt::ConnectionType>(t));
}

void QDoubleValidator_DisconnectDecimalsChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(int)>(&QDoubleValidator::decimalsChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(int)>(&MyQDoubleValidator::Signal_DecimalsChanged));
}

void QDoubleValidator_DecimalsChanged(void* ptr, int decimals)
{
	static_cast<QDoubleValidator*>(ptr)->decimalsChanged(decimals);
}

long long QDoubleValidator_Notation(void* ptr)
{
	return static_cast<QDoubleValidator*>(ptr)->notation();
}

void QDoubleValidator_ConnectNotationChanged(void* ptr, long long t)
{
	qRegisterMetaType<QDoubleValidator::Notation>();
	QObject::connect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(QDoubleValidator::Notation)>(&QDoubleValidator::notationChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(QDoubleValidator::Notation)>(&MyQDoubleValidator::Signal_NotationChanged), static_cast<Qt::ConnectionType>(t));
}

void QDoubleValidator_DisconnectNotationChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(QDoubleValidator::Notation)>(&QDoubleValidator::notationChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(QDoubleValidator::Notation)>(&MyQDoubleValidator::Signal_NotationChanged));
}

void QDoubleValidator_NotationChanged(void* ptr, long long notation)
{
	static_cast<QDoubleValidator*>(ptr)->notationChanged(static_cast<QDoubleValidator::Notation>(notation));
}

void QDoubleValidator_SetBottom(void* ptr, double vdo)
{
	static_cast<QDoubleValidator*>(ptr)->setBottom(vdo);
}

void QDoubleValidator_SetDecimals(void* ptr, int vin)
{
	static_cast<QDoubleValidator*>(ptr)->setDecimals(vin);
}

void QDoubleValidator_SetNotation(void* ptr, long long vqd)
{
	static_cast<QDoubleValidator*>(ptr)->setNotation(static_cast<QDoubleValidator::Notation>(vqd));
}

void QDoubleValidator_SetRange(void* ptr, double minimum, double maximum, int decimals)
{
	static_cast<QDoubleValidator*>(ptr)->setRange(minimum, maximum, decimals);
}

void QDoubleValidator_SetRangeDefault(void* ptr, double minimum, double maximum, int decimals)
{
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::setRange(minimum, maximum, decimals);
}

void QDoubleValidator_SetTop(void* ptr, double vdo)
{
	static_cast<QDoubleValidator*>(ptr)->setTop(vdo);
}

double QDoubleValidator_Top(void* ptr)
{
	return static_cast<QDoubleValidator*>(ptr)->top();
}

void QDoubleValidator_ConnectTopChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(double)>(&QDoubleValidator::topChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(double)>(&MyQDoubleValidator::Signal_TopChanged), static_cast<Qt::ConnectionType>(t));
}

void QDoubleValidator_DisconnectTopChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDoubleValidator*>(ptr), static_cast<void (QDoubleValidator::*)(double)>(&QDoubleValidator::topChanged), static_cast<MyQDoubleValidator*>(ptr), static_cast<void (MyQDoubleValidator::*)(double)>(&MyQDoubleValidator::Signal_TopChanged));
}

void QDoubleValidator_TopChanged(void* ptr, double top)
{
	static_cast<QDoubleValidator*>(ptr)->topChanged(top);
}

long long QDoubleValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos)
{
	return static_cast<QDoubleValidator*>(ptr)->validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

long long QDoubleValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos)
{
		return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

void QDoubleValidator_DestroyQDoubleValidator(void* ptr)
{
	static_cast<QDoubleValidator*>(ptr)->~QDoubleValidator();
}

void QDoubleValidator_DestroyQDoubleValidatorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQDrag: public QDrag
{
public:
	MyQDrag(QObject *dragSource) : QDrag(dragSource) {QDrag_QDrag_QRegisterMetaType();};
	void Signal_ActionChanged(Qt::DropAction action) { callbackQDrag_ActionChanged(this, action); };
	void Signal_TargetChanged(QObject * newTarget) { callbackQDrag_TargetChanged(this, newTarget); };
	 ~MyQDrag() { callbackQDrag_DestroyQDrag(this); };
	void childEvent(QChildEvent * event) { callbackQDrag_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQDrag_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQDrag_CustomEvent(this, event); };
	void deleteLater() { callbackQDrag_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQDrag_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQDrag_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQDrag_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQDrag_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQDrag_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQDrag_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQDrag_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QDrag*)
Q_DECLARE_METATYPE(MyQDrag*)

int QDrag_QDrag_QRegisterMetaType(){qRegisterMetaType<QDrag*>(); return qRegisterMetaType<MyQDrag*>();}

void* QDrag_NewQDrag(void* dragSource)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QCameraImageCapture*>(dragSource));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QDBusPendingCallWatcher*>(dragSource));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QExtensionFactory*>(dragSource));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QExtensionManager*>(dragSource));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QGraphicsObject*>(dragSource));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QGraphicsWidget*>(dragSource));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QLayout*>(dragSource));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QMediaPlaylist*>(dragSource));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QMediaRecorder*>(dragSource));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QOffscreenSurface*>(dragSource));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QPaintDeviceWindow*>(dragSource));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QPdfWriter*>(dragSource));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QQuickItem*>(dragSource));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QRadioData*>(dragSource));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QRemoteObjectPendingCallWatcher*>(dragSource));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QWidget*>(dragSource));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(dragSource))) {
		return new MyQDrag(static_cast<QWindow*>(dragSource));
	} else {
		return new MyQDrag(static_cast<QObject*>(dragSource));
	}
}

void QDrag_ConnectActionChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::DropAction>();
	QObject::connect(static_cast<QDrag*>(ptr), static_cast<void (QDrag::*)(Qt::DropAction)>(&QDrag::actionChanged), static_cast<MyQDrag*>(ptr), static_cast<void (MyQDrag::*)(Qt::DropAction)>(&MyQDrag::Signal_ActionChanged), static_cast<Qt::ConnectionType>(t));
}

void QDrag_DisconnectActionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDrag*>(ptr), static_cast<void (QDrag::*)(Qt::DropAction)>(&QDrag::actionChanged), static_cast<MyQDrag*>(ptr), static_cast<void (MyQDrag::*)(Qt::DropAction)>(&MyQDrag::Signal_ActionChanged));
}

void QDrag_ActionChanged(void* ptr, long long action)
{
	static_cast<QDrag*>(ptr)->actionChanged(static_cast<Qt::DropAction>(action));
}

void QDrag_QDrag_Cancel()
{
	QDrag::cancel();
}

long long QDrag_DefaultAction(void* ptr)
{
	return static_cast<QDrag*>(ptr)->defaultAction();
}

void* QDrag_DragCursor(void* ptr, long long action)
{
	return new QPixmap(static_cast<QDrag*>(ptr)->dragCursor(static_cast<Qt::DropAction>(action)));
}

long long QDrag_Exec(void* ptr, long long supportedActions)
{
	return static_cast<QDrag*>(ptr)->exec(static_cast<Qt::DropAction>(supportedActions));
}

long long QDrag_Exec2(void* ptr, long long supportedActions, long long defaultDropAction)
{
	return static_cast<QDrag*>(ptr)->exec(static_cast<Qt::DropAction>(supportedActions), static_cast<Qt::DropAction>(defaultDropAction));
}

void* QDrag_HotSpot(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QDrag*>(ptr)->hotSpot(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QDrag_MimeData(void* ptr)
{
	return static_cast<QDrag*>(ptr)->mimeData();
}

void* QDrag_Pixmap(void* ptr)
{
	return new QPixmap(static_cast<QDrag*>(ptr)->pixmap());
}

void QDrag_SetDragCursor(void* ptr, void* cursor, long long action)
{
	static_cast<QDrag*>(ptr)->setDragCursor(*static_cast<QPixmap*>(cursor), static_cast<Qt::DropAction>(action));
}

void QDrag_SetHotSpot(void* ptr, void* hotspot)
{
	static_cast<QDrag*>(ptr)->setHotSpot(*static_cast<QPoint*>(hotspot));
}

void QDrag_SetMimeData(void* ptr, void* data)
{
	static_cast<QDrag*>(ptr)->setMimeData(static_cast<QMimeData*>(data));
}

void QDrag_SetPixmap(void* ptr, void* pixmap)
{
	static_cast<QDrag*>(ptr)->setPixmap(*static_cast<QPixmap*>(pixmap));
}

void* QDrag_Source(void* ptr)
{
	return static_cast<QDrag*>(ptr)->source();
}

long long QDrag_SupportedActions(void* ptr)
{
	return static_cast<QDrag*>(ptr)->supportedActions();
}

void* QDrag_Target(void* ptr)
{
	return static_cast<QDrag*>(ptr)->target();
}

void QDrag_ConnectTargetChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QDrag*>(ptr), static_cast<void (QDrag::*)(QObject *)>(&QDrag::targetChanged), static_cast<MyQDrag*>(ptr), static_cast<void (MyQDrag::*)(QObject *)>(&MyQDrag::Signal_TargetChanged), static_cast<Qt::ConnectionType>(t));
}

void QDrag_DisconnectTargetChanged(void* ptr)
{
	QObject::disconnect(static_cast<QDrag*>(ptr), static_cast<void (QDrag::*)(QObject *)>(&QDrag::targetChanged), static_cast<MyQDrag*>(ptr), static_cast<void (MyQDrag::*)(QObject *)>(&MyQDrag::Signal_TargetChanged));
}

void QDrag_TargetChanged(void* ptr, void* newTarget)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(newTarget))) {
		static_cast<QDrag*>(ptr)->targetChanged(static_cast<QOffscreenSurface*>(newTarget));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(newTarget))) {
		static_cast<QDrag*>(ptr)->targetChanged(static_cast<QPaintDeviceWindow*>(newTarget));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(newTarget))) {
		static_cast<QDrag*>(ptr)->targetChanged(static_cast<QPdfWriter*>(newTarget));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(newTarget))) {
		static_cast<QDrag*>(ptr)->targetChanged(static_cast<QWindow*>(newTarget));
	} else {
		static_cast<QDrag*>(ptr)->targetChanged(static_cast<QObject*>(newTarget));
	}
}

void QDrag_DestroyQDrag(void* ptr)
{
	static_cast<QDrag*>(ptr)->~QDrag();
}

void QDrag_DestroyQDragDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QDrag___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QDrag___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QDrag___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QDrag___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QDrag___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QDrag___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QDrag___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QDrag___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QDrag___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QDrag___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QDrag___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QDrag___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QDrag_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QDrag*>(ptr)->QDrag::childEvent(static_cast<QChildEvent*>(event));
}

void QDrag_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QDrag*>(ptr)->QDrag::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QDrag_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QDrag*>(ptr)->QDrag::customEvent(static_cast<QEvent*>(event));
}

void QDrag_DeleteLaterDefault(void* ptr)
{
		static_cast<QDrag*>(ptr)->QDrag::deleteLater();
}

void QDrag_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QDrag*>(ptr)->QDrag::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QDrag_EventDefault(void* ptr, void* e)
{
		return static_cast<QDrag*>(ptr)->QDrag::event(static_cast<QEvent*>(e));
}

char QDrag_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QDrag*>(ptr)->QDrag::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QDrag*>(ptr)->QDrag::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QDrag*>(ptr)->QDrag::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QDrag*>(ptr)->QDrag::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QDrag*>(ptr)->QDrag::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QDrag_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QDrag*>(ptr)->QDrag::metaObject());
}

void QDrag_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QDrag*>(ptr)->QDrag::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQDragEnterEvent: public QDragEnterEvent
{
public:
	MyQDragEnterEvent(const QPoint &point, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) : QDragEnterEvent(point, actions, data, buttons, modifiers) {QDragEnterEvent_QDragEnterEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QDragEnterEvent*)
Q_DECLARE_METATYPE(MyQDragEnterEvent*)

int QDragEnterEvent_QDragEnterEvent_QRegisterMetaType(){qRegisterMetaType<QDragEnterEvent*>(); return qRegisterMetaType<MyQDragEnterEvent*>();}

void* QDragEnterEvent_NewQDragEnterEvent(void* point, long long actions, void* data, long long buttons, long long modifiers)
{
	return new MyQDragEnterEvent(*static_cast<QPoint*>(point), static_cast<Qt::DropAction>(actions), static_cast<QMimeData*>(data), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers));
}

class MyQDragLeaveEvent: public QDragLeaveEvent
{
public:
	MyQDragLeaveEvent() : QDragLeaveEvent() {QDragLeaveEvent_QDragLeaveEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QDragLeaveEvent*)
Q_DECLARE_METATYPE(MyQDragLeaveEvent*)

int QDragLeaveEvent_QDragLeaveEvent_QRegisterMetaType(){qRegisterMetaType<QDragLeaveEvent*>(); return qRegisterMetaType<MyQDragLeaveEvent*>();}

void* QDragLeaveEvent_NewQDragLeaveEvent()
{
	return new MyQDragLeaveEvent();
}

class MyQDragMoveEvent: public QDragMoveEvent
{
public:
	MyQDragMoveEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type ty = DragMove) : QDragMoveEvent(pos, actions, data, buttons, modifiers, ty) {QDragMoveEvent_QDragMoveEvent_QRegisterMetaType();};
	 ~MyQDragMoveEvent() { callbackQDragMoveEvent_DestroyQDragMoveEvent(this); };
};

Q_DECLARE_METATYPE(QDragMoveEvent*)
Q_DECLARE_METATYPE(MyQDragMoveEvent*)

int QDragMoveEvent_QDragMoveEvent_QRegisterMetaType(){qRegisterMetaType<QDragMoveEvent*>(); return qRegisterMetaType<MyQDragMoveEvent*>();}

void* QDragMoveEvent_NewQDragMoveEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty)
{
	return new MyQDragMoveEvent(*static_cast<QPoint*>(pos), static_cast<Qt::DropAction>(actions), static_cast<QMimeData*>(data), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers), static_cast<QEvent::Type>(ty));
}

void QDragMoveEvent_Accept(void* ptr, void* rectangle)
{
	static_cast<QDragMoveEvent*>(ptr)->accept(*static_cast<QRect*>(rectangle));
}

void* QDragMoveEvent_AnswerRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QDragMoveEvent*>(ptr)->answerRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QDragMoveEvent_Ignore(void* ptr, void* rectangle)
{
	static_cast<QDragMoveEvent*>(ptr)->ignore(*static_cast<QRect*>(rectangle));
}

void QDragMoveEvent_DestroyQDragMoveEvent(void* ptr)
{
	static_cast<QDragMoveEvent*>(ptr)->~QDragMoveEvent();
}

void QDragMoveEvent_DestroyQDragMoveEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQDropEvent: public QDropEvent
{
public:
	MyQDropEvent(const QPointF &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type ty = Drop) : QDropEvent(pos, actions, data, buttons, modifiers, ty) {QDropEvent_QDropEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QDropEvent*)
Q_DECLARE_METATYPE(MyQDropEvent*)

int QDropEvent_QDropEvent_QRegisterMetaType(){qRegisterMetaType<QDropEvent*>(); return qRegisterMetaType<MyQDropEvent*>();}

void* QDropEvent_NewQDropEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty)
{
	return new MyQDropEvent(*static_cast<QPointF*>(pos), static_cast<Qt::DropAction>(actions), static_cast<QMimeData*>(data), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers), static_cast<QEvent::Type>(ty));
}

void QDropEvent_AcceptProposedAction(void* ptr)
{
	static_cast<QDropEvent*>(ptr)->acceptProposedAction();
}

long long QDropEvent_DropAction(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->dropAction();
}

long long QDropEvent_KeyboardModifiers(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->keyboardModifiers();
}

void* QDropEvent_MimeData(void* ptr)
{
	return const_cast<QMimeData*>(static_cast<QDropEvent*>(ptr)->mimeData());
}

long long QDropEvent_MouseButtons(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->mouseButtons();
}

void* QDropEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QDropEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QDropEvent_PosF(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QDropEvent*>(ptr)->posF());
}

long long QDropEvent_PossibleActions(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->possibleActions();
}

long long QDropEvent_ProposedAction(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->proposedAction();
}

void QDropEvent_SetDropAction(void* ptr, long long action)
{
	static_cast<QDropEvent*>(ptr)->setDropAction(static_cast<Qt::DropAction>(action));
}

void* QDropEvent_Source(void* ptr)
{
	return static_cast<QDropEvent*>(ptr)->source();
}

class MyQEnterEvent: public QEnterEvent
{
public:
	MyQEnterEvent(const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos) : QEnterEvent(localPos, windowPos, screenPos) {QEnterEvent_QEnterEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QEnterEvent*)
Q_DECLARE_METATYPE(MyQEnterEvent*)

int QEnterEvent_QEnterEvent_QRegisterMetaType(){qRegisterMetaType<QEnterEvent*>(); return qRegisterMetaType<MyQEnterEvent*>();}

void* QEnterEvent_NewQEnterEvent(void* localPos, void* windowPos, void* screenPos)
{
	return new MyQEnterEvent(*static_cast<QPointF*>(localPos), *static_cast<QPointF*>(windowPos), *static_cast<QPointF*>(screenPos));
}

void* QEnterEvent_GlobalPos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QEnterEvent*>(ptr)->globalPos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

int QEnterEvent_GlobalX(void* ptr)
{
	return static_cast<QEnterEvent*>(ptr)->globalX();
}

int QEnterEvent_GlobalY(void* ptr)
{
	return static_cast<QEnterEvent*>(ptr)->globalY();
}

void* QEnterEvent_LocalPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QEnterEvent*>(ptr)->localPos());
}

void* QEnterEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QEnterEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QEnterEvent_ScreenPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QEnterEvent*>(ptr)->screenPos());
}

void* QEnterEvent_WindowPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QEnterEvent*>(ptr)->windowPos());
}

int QEnterEvent_X(void* ptr)
{
	return static_cast<QEnterEvent*>(ptr)->x();
}

int QEnterEvent_Y(void* ptr)
{
	return static_cast<QEnterEvent*>(ptr)->y();
}

class MyQExposeEvent: public QExposeEvent
{
public:
	MyQExposeEvent(const QRegion &exposeRegion) : QExposeEvent(exposeRegion) {QExposeEvent_QExposeEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QExposeEvent*)
Q_DECLARE_METATYPE(MyQExposeEvent*)

int QExposeEvent_QExposeEvent_QRegisterMetaType(){qRegisterMetaType<QExposeEvent*>(); return qRegisterMetaType<MyQExposeEvent*>();}

void* QExposeEvent_NewQExposeEvent(void* exposeRegion)
{
	return new MyQExposeEvent(*static_cast<QRegion*>(exposeRegion));
}

void* QExposeEvent_Region(void* ptr)
{
	return const_cast<QRegion*>(&static_cast<QExposeEvent*>(ptr)->region());
}

class MyQFileOpenEvent: public QFileOpenEvent
{
public:
};

Q_DECLARE_METATYPE(QFileOpenEvent*)
Q_DECLARE_METATYPE(MyQFileOpenEvent*)

int QFileOpenEvent_QFileOpenEvent_QRegisterMetaType(){qRegisterMetaType<QFileOpenEvent*>(); return qRegisterMetaType<MyQFileOpenEvent*>();}

struct QtGui_PackedString QFileOpenEvent_File(void* ptr)
{
	return ({ QByteArray* t25f76f = new QByteArray(static_cast<QFileOpenEvent*>(ptr)->file().toUtf8()); QtGui_PackedString { const_cast<char*>(t25f76f->prepend("WHITESPACE").constData()+10), t25f76f->size()-10, t25f76f }; });
}

char QFileOpenEvent_OpenFile(void* ptr, void* file, long long flags)
{
	return static_cast<QFileOpenEvent*>(ptr)->openFile(*static_cast<QFile*>(file), static_cast<QIODevice::OpenModeFlag>(flags));
}

void* QFileOpenEvent_Url(void* ptr)
{
	return new QUrl(static_cast<QFileOpenEvent*>(ptr)->url());
}

class MyQFocusEvent: public QFocusEvent
{
public:
	MyQFocusEvent(QEvent::Type ty, Qt::FocusReason reason = Qt::OtherFocusReason) : QFocusEvent(ty, reason) {QFocusEvent_QFocusEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QFocusEvent*)
Q_DECLARE_METATYPE(MyQFocusEvent*)

int QFocusEvent_QFocusEvent_QRegisterMetaType(){qRegisterMetaType<QFocusEvent*>(); return qRegisterMetaType<MyQFocusEvent*>();}

void* QFocusEvent_NewQFocusEvent(long long ty, long long reason)
{
	return new MyQFocusEvent(static_cast<QEvent::Type>(ty), static_cast<Qt::FocusReason>(reason));
}

char QFocusEvent_GotFocus(void* ptr)
{
	return static_cast<QFocusEvent*>(ptr)->gotFocus();
}

char QFocusEvent_LostFocus(void* ptr)
{
	return static_cast<QFocusEvent*>(ptr)->lostFocus();
}

long long QFocusEvent_Reason(void* ptr)
{
	return static_cast<QFocusEvent*>(ptr)->reason();
}

Q_DECLARE_METATYPE(QFont)
Q_DECLARE_METATYPE(QFont*)
void* QFont_NewQFont()
{
	return new QFont();
}

void* QFont_NewQFont2(struct QtGui_PackedString family, int pointSize, int weight, char italic)
{
	return new QFont(QString::fromUtf8(family.data, family.len), pointSize, weight, italic != 0);
}

void* QFont_NewQFont4(void* font, void* pd)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(pd))) {
		return new QFont(*static_cast<QFont*>(font), static_cast<QPaintDeviceWindow*>(pd));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(pd))) {
		return new QFont(*static_cast<QFont*>(font), static_cast<QPdfWriter*>(pd));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(pd))) {
		return new QFont(*static_cast<QFont*>(font), static_cast<QWidget*>(pd));
	} else {
		return new QFont(*static_cast<QFont*>(font), static_cast<QPaintDevice*>(pd));
	}
}

void* QFont_NewQFont5(void* font)
{
	return new QFont(*static_cast<QFont*>(font));
}

char QFont_Bold(void* ptr)
{
	return static_cast<QFont*>(ptr)->bold();
}

long long QFont_Capitalization(void* ptr)
{
	return static_cast<QFont*>(ptr)->capitalization();
}

struct QtGui_PackedString QFont_DefaultFamily(void* ptr)
{
	return ({ QByteArray* t141ea0 = new QByteArray(static_cast<QFont*>(ptr)->defaultFamily().toUtf8()); QtGui_PackedString { const_cast<char*>(t141ea0->prepend("WHITESPACE").constData()+10), t141ea0->size()-10, t141ea0 }; });
}

char QFont_ExactMatch(void* ptr)
{
	return static_cast<QFont*>(ptr)->exactMatch();
}

struct QtGui_PackedString QFont_Families(void* ptr)
{
	return ({ QByteArray* tb16a9c = new QByteArray(static_cast<QFont*>(ptr)->families().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(tb16a9c->prepend("WHITESPACE").constData()+10), tb16a9c->size()-10, tb16a9c }; });
}

struct QtGui_PackedString QFont_Family(void* ptr)
{
	return ({ QByteArray* t52247e = new QByteArray(static_cast<QFont*>(ptr)->family().toUtf8()); QtGui_PackedString { const_cast<char*>(t52247e->prepend("WHITESPACE").constData()+10), t52247e->size()-10, t52247e }; });
}

char QFont_FixedPitch(void* ptr)
{
	return static_cast<QFont*>(ptr)->fixedPitch();
}

char QFont_FromString(void* ptr, struct QtGui_PackedString descrip)
{
	return static_cast<QFont*>(ptr)->fromString(QString::fromUtf8(descrip.data, descrip.len));
}

long long QFont_HintingPreference(void* ptr)
{
	return static_cast<QFont*>(ptr)->hintingPreference();
}

void QFont_QFont_InsertSubstitution(struct QtGui_PackedString familyName, struct QtGui_PackedString substituteName)
{
	QFont::insertSubstitution(QString::fromUtf8(familyName.data, familyName.len), QString::fromUtf8(substituteName.data, substituteName.len));
}

void QFont_QFont_InsertSubstitutions(struct QtGui_PackedString familyName, struct QtGui_PackedString substituteNames)
{
	QFont::insertSubstitutions(QString::fromUtf8(familyName.data, familyName.len), QString::fromUtf8(substituteNames.data, substituteNames.len).split("¡¦!", QString::SkipEmptyParts));
}

char QFont_IsCopyOf(void* ptr, void* ff)
{
	return static_cast<QFont*>(ptr)->isCopyOf(*static_cast<QFont*>(ff));
}

char QFont_Italic(void* ptr)
{
	return static_cast<QFont*>(ptr)->italic();
}

char QFont_Kerning(void* ptr)
{
	return static_cast<QFont*>(ptr)->kerning();
}

struct QtGui_PackedString QFont_Key(void* ptr)
{
	return ({ QByteArray* t9324a4 = new QByteArray(static_cast<QFont*>(ptr)->key().toUtf8()); QtGui_PackedString { const_cast<char*>(t9324a4->prepend("WHITESPACE").constData()+10), t9324a4->size()-10, t9324a4 }; });
}

double QFont_LetterSpacing(void* ptr)
{
	return static_cast<QFont*>(ptr)->letterSpacing();
}

long long QFont_LetterSpacingType(void* ptr)
{
	return static_cast<QFont*>(ptr)->letterSpacingType();
}

char QFont_Overline(void* ptr)
{
	return static_cast<QFont*>(ptr)->overline();
}

int QFont_PixelSize(void* ptr)
{
	return static_cast<QFont*>(ptr)->pixelSize();
}

int QFont_PointSize(void* ptr)
{
	return static_cast<QFont*>(ptr)->pointSize();
}

double QFont_PointSizeF(void* ptr)
{
	return static_cast<QFont*>(ptr)->pointSizeF();
}

void QFont_QFont_RemoveSubstitutions(struct QtGui_PackedString familyName)
{
	QFont::removeSubstitutions(QString::fromUtf8(familyName.data, familyName.len));
}

void* QFont_Resolve(void* ptr, void* other)
{
	return new QFont(static_cast<QFont*>(ptr)->resolve(*static_cast<QFont*>(other)));
}

void QFont_SetBold(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setBold(enable != 0);
}

void QFont_SetCapitalization(void* ptr, long long caps)
{
	static_cast<QFont*>(ptr)->setCapitalization(static_cast<QFont::Capitalization>(caps));
}

void QFont_SetFamilies(void* ptr, struct QtGui_PackedString families)
{
	static_cast<QFont*>(ptr)->setFamilies(QString::fromUtf8(families.data, families.len).split("¡¦!", QString::SkipEmptyParts));
}

void QFont_SetFamily(void* ptr, struct QtGui_PackedString family)
{
	static_cast<QFont*>(ptr)->setFamily(QString::fromUtf8(family.data, family.len));
}

void QFont_SetFixedPitch(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setFixedPitch(enable != 0);
}

void QFont_SetHintingPreference(void* ptr, long long hintingPreference)
{
	static_cast<QFont*>(ptr)->setHintingPreference(static_cast<QFont::HintingPreference>(hintingPreference));
}

void QFont_SetItalic(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setItalic(enable != 0);
}

void QFont_SetKerning(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setKerning(enable != 0);
}

void QFont_SetLetterSpacing(void* ptr, long long ty, double spacing)
{
	static_cast<QFont*>(ptr)->setLetterSpacing(static_cast<QFont::SpacingType>(ty), spacing);
}

void QFont_SetOverline(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setOverline(enable != 0);
}

void QFont_SetPixelSize(void* ptr, int pixelSize)
{
	static_cast<QFont*>(ptr)->setPixelSize(pixelSize);
}

void QFont_SetPointSize(void* ptr, int pointSize)
{
	static_cast<QFont*>(ptr)->setPointSize(pointSize);
}

void QFont_SetPointSizeF(void* ptr, double pointSize)
{
	static_cast<QFont*>(ptr)->setPointSizeF(pointSize);
}

void QFont_SetStretch(void* ptr, int factor)
{
	static_cast<QFont*>(ptr)->setStretch(factor);
}

void QFont_SetStrikeOut(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setStrikeOut(enable != 0);
}

void QFont_SetStyle(void* ptr, long long style)
{
	static_cast<QFont*>(ptr)->setStyle(static_cast<QFont::Style>(style));
}

void QFont_SetStyleHint(void* ptr, long long hint, long long strategy)
{
	static_cast<QFont*>(ptr)->setStyleHint(static_cast<QFont::StyleHint>(hint), static_cast<QFont::StyleStrategy>(strategy));
}

void QFont_SetStyleName(void* ptr, struct QtGui_PackedString styleName)
{
	static_cast<QFont*>(ptr)->setStyleName(QString::fromUtf8(styleName.data, styleName.len));
}

void QFont_SetStyleStrategy(void* ptr, long long s)
{
	static_cast<QFont*>(ptr)->setStyleStrategy(static_cast<QFont::StyleStrategy>(s));
}

void QFont_SetUnderline(void* ptr, char enable)
{
	static_cast<QFont*>(ptr)->setUnderline(enable != 0);
}

void QFont_SetWeight(void* ptr, int weight)
{
	static_cast<QFont*>(ptr)->setWeight(weight);
}

void QFont_SetWordSpacing(void* ptr, double spacing)
{
	static_cast<QFont*>(ptr)->setWordSpacing(spacing);
}

int QFont_Stretch(void* ptr)
{
	return static_cast<QFont*>(ptr)->stretch();
}

char QFont_StrikeOut(void* ptr)
{
	return static_cast<QFont*>(ptr)->strikeOut();
}

long long QFont_Style(void* ptr)
{
	return static_cast<QFont*>(ptr)->style();
}

long long QFont_StyleHint(void* ptr)
{
	return static_cast<QFont*>(ptr)->styleHint();
}

struct QtGui_PackedString QFont_StyleName(void* ptr)
{
	return ({ QByteArray* t8d3474 = new QByteArray(static_cast<QFont*>(ptr)->styleName().toUtf8()); QtGui_PackedString { const_cast<char*>(t8d3474->prepend("WHITESPACE").constData()+10), t8d3474->size()-10, t8d3474 }; });
}

long long QFont_StyleStrategy(void* ptr)
{
	return static_cast<QFont*>(ptr)->styleStrategy();
}

struct QtGui_PackedString QFont_QFont_Substitute(struct QtGui_PackedString familyName)
{
	return ({ QByteArray* tf3cb14 = new QByteArray(QFont::substitute(QString::fromUtf8(familyName.data, familyName.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(tf3cb14->prepend("WHITESPACE").constData()+10), tf3cb14->size()-10, tf3cb14 }; });
}

struct QtGui_PackedString QFont_QFont_Substitutes(struct QtGui_PackedString familyName)
{
	return ({ QByteArray* t1934ac = new QByteArray(QFont::substitutes(QString::fromUtf8(familyName.data, familyName.len)).join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t1934ac->prepend("WHITESPACE").constData()+10), t1934ac->size()-10, t1934ac }; });
}

struct QtGui_PackedString QFont_QFont_Substitutions()
{
	return ({ QByteArray* t300c5a = new QByteArray(QFont::substitutions().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t300c5a->prepend("WHITESPACE").constData()+10), t300c5a->size()-10, t300c5a }; });
}

void QFont_Swap(void* ptr, void* other)
{
	static_cast<QFont*>(ptr)->swap(*static_cast<QFont*>(other));
}

struct QtGui_PackedString QFont_ToString(void* ptr)
{
	return ({ QByteArray* t32ab86 = new QByteArray(static_cast<QFont*>(ptr)->toString().toUtf8()); QtGui_PackedString { const_cast<char*>(t32ab86->prepend("WHITESPACE").constData()+10), t32ab86->size()-10, t32ab86 }; });
}

char QFont_Underline(void* ptr)
{
	return static_cast<QFont*>(ptr)->underline();
}

int QFont_Weight(void* ptr)
{
	return static_cast<QFont*>(ptr)->weight();
}

double QFont_WordSpacing(void* ptr)
{
	return static_cast<QFont*>(ptr)->wordSpacing();
}

void QFont_DestroyQFont(void* ptr)
{
	static_cast<QFont*>(ptr)->~QFont();
}

void* QFont_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QFont*>(ptr));
}

Q_DECLARE_METATYPE(QFontDatabase)
Q_DECLARE_METATYPE(QFontDatabase*)
void* QFontDatabase_NewQFontDatabase()
{
	return new QFontDatabase();
}

int QFontDatabase_QFontDatabase_AddApplicationFont(struct QtGui_PackedString fileName)
{
	return QFontDatabase::addApplicationFont(QString::fromUtf8(fileName.data, fileName.len));
}

int QFontDatabase_QFontDatabase_AddApplicationFontFromData(void* fontData)
{
	return QFontDatabase::addApplicationFontFromData(*static_cast<QByteArray*>(fontData));
}

struct QtGui_PackedString QFontDatabase_QFontDatabase_ApplicationFontFamilies(int id)
{
	return ({ QByteArray* tf75c72 = new QByteArray(QFontDatabase::applicationFontFamilies(id).join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(tf75c72->prepend("WHITESPACE").constData()+10), tf75c72->size()-10, tf75c72 }; });
}

char QFontDatabase_Bold(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->bold(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

struct QtGui_PackedString QFontDatabase_Families(void* ptr, long long writingSystem)
{
	return ({ QByteArray* t8f80b0 = new QByteArray(static_cast<QFontDatabase*>(ptr)->families(static_cast<QFontDatabase::WritingSystem>(writingSystem)).join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t8f80b0->prepend("WHITESPACE").constData()+10), t8f80b0->size()-10, t8f80b0 }; });
}

void* QFontDatabase_Font(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style, int pointSize)
{
	return new QFont(static_cast<QFontDatabase*>(ptr)->font(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len), pointSize));
}

char QFontDatabase_IsBitmapScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->isBitmapScalable(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

char QFontDatabase_IsFixedPitch(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->isFixedPitch(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

char QFontDatabase_IsPrivateFamily(void* ptr, struct QtGui_PackedString family)
{
	return static_cast<QFontDatabase*>(ptr)->isPrivateFamily(QString::fromUtf8(family.data, family.len));
}

char QFontDatabase_IsScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->isScalable(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

char QFontDatabase_IsSmoothlyScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->isSmoothlyScalable(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

char QFontDatabase_Italic(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->italic(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

struct QtGui_PackedList QFontDatabase_PointSizes(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString styleName)
{
	return ({ QList<int>* tmpValue27d093 = new QList<int>(static_cast<QFontDatabase*>(ptr)->pointSizes(QString::fromUtf8(family.data, family.len), QString::fromUtf8(styleName.data, styleName.len))); QtGui_PackedList { tmpValue27d093, tmpValue27d093->size() }; });
}

char QFontDatabase_QFontDatabase_RemoveAllApplicationFonts()
{
	return QFontDatabase::removeAllApplicationFonts();
}

char QFontDatabase_QFontDatabase_RemoveApplicationFont(int id)
{
	return QFontDatabase::removeApplicationFont(id);
}

struct QtGui_PackedList QFontDatabase_SmoothSizes(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString styleName)
{
	return ({ QList<int>* tmpValueab12a8 = new QList<int>(static_cast<QFontDatabase*>(ptr)->smoothSizes(QString::fromUtf8(family.data, family.len), QString::fromUtf8(styleName.data, styleName.len))); QtGui_PackedList { tmpValueab12a8, tmpValueab12a8->size() }; });
}

struct QtGui_PackedList QFontDatabase_QFontDatabase_StandardSizes()
{
	return ({ QList<int>* tmpValue70838a = new QList<int>(QFontDatabase::standardSizes()); QtGui_PackedList { tmpValue70838a, tmpValue70838a->size() }; });
}

struct QtGui_PackedString QFontDatabase_StyleString(void* ptr, void* font)
{
	return ({ QByteArray* tdc7da2 = new QByteArray(static_cast<QFontDatabase*>(ptr)->styleString(*static_cast<QFont*>(font)).toUtf8()); QtGui_PackedString { const_cast<char*>(tdc7da2->prepend("WHITESPACE").constData()+10), tdc7da2->size()-10, tdc7da2 }; });
}

struct QtGui_PackedString QFontDatabase_StyleString2(void* ptr, void* fontInfo)
{
	return ({ QByteArray* t17e039 = new QByteArray(static_cast<QFontDatabase*>(ptr)->styleString(*static_cast<QFontInfo*>(fontInfo)).toUtf8()); QtGui_PackedString { const_cast<char*>(t17e039->prepend("WHITESPACE").constData()+10), t17e039->size()-10, t17e039 }; });
}

struct QtGui_PackedString QFontDatabase_Styles(void* ptr, struct QtGui_PackedString family)
{
	return ({ QByteArray* ta1e1bf = new QByteArray(static_cast<QFontDatabase*>(ptr)->styles(QString::fromUtf8(family.data, family.len)).join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(ta1e1bf->prepend("WHITESPACE").constData()+10), ta1e1bf->size()-10, ta1e1bf }; });
}

void* QFontDatabase_QFontDatabase_SystemFont(long long ty)
{
	return new QFont(QFontDatabase::systemFont(static_cast<QFontDatabase::SystemFont>(ty)));
}

int QFontDatabase_Weight(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style)
{
	return static_cast<QFontDatabase*>(ptr)->weight(QString::fromUtf8(family.data, family.len), QString::fromUtf8(style.data, style.len));
}

int QFontDatabase___pointSizes_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QFontDatabase___pointSizes_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QFontDatabase___pointSizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QFontDatabase___smoothSizes_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QFontDatabase___smoothSizes_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QFontDatabase___smoothSizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QFontDatabase___standardSizes_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QFontDatabase___standardSizes_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QFontDatabase___standardSizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

Q_DECLARE_METATYPE(QFontInfo*)
void* QFontInfo_NewQFontInfo(void* font)
{
	return new QFontInfo(*static_cast<QFont*>(font));
}

void* QFontInfo_NewQFontInfo2(void* fi)
{
	return new QFontInfo(*static_cast<QFontInfo*>(fi));
}

char QFontInfo_Bold(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->bold();
}

char QFontInfo_ExactMatch(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->exactMatch();
}

struct QtGui_PackedString QFontInfo_Family(void* ptr)
{
	return ({ QByteArray* t7b458f = new QByteArray(static_cast<QFontInfo*>(ptr)->family().toUtf8()); QtGui_PackedString { const_cast<char*>(t7b458f->prepend("WHITESPACE").constData()+10), t7b458f->size()-10, t7b458f }; });
}

char QFontInfo_FixedPitch(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->fixedPitch();
}

char QFontInfo_Italic(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->italic();
}

int QFontInfo_PixelSize(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->pixelSize();
}

int QFontInfo_PointSize(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->pointSize();
}

double QFontInfo_PointSizeF(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->pointSizeF();
}

long long QFontInfo_Style(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->style();
}

long long QFontInfo_StyleHint(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->styleHint();
}

struct QtGui_PackedString QFontInfo_StyleName(void* ptr)
{
	return ({ QByteArray* t231b30 = new QByteArray(static_cast<QFontInfo*>(ptr)->styleName().toUtf8()); QtGui_PackedString { const_cast<char*>(t231b30->prepend("WHITESPACE").constData()+10), t231b30->size()-10, t231b30 }; });
}

void QFontInfo_Swap(void* ptr, void* other)
{
	static_cast<QFontInfo*>(ptr)->swap(*static_cast<QFontInfo*>(other));
}

int QFontInfo_Weight(void* ptr)
{
	return static_cast<QFontInfo*>(ptr)->weight();
}

void QFontInfo_DestroyQFontInfo(void* ptr)
{
	static_cast<QFontInfo*>(ptr)->~QFontInfo();
}

Q_DECLARE_METATYPE(QFontMetrics*)
void* QFontMetrics_NewQFontMetrics(void* font)
{
	return new QFontMetrics(*static_cast<QFont*>(font));
}

void* QFontMetrics_NewQFontMetrics3(void* font, void* paintdevice)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetrics(*static_cast<QFont*>(font), static_cast<QPaintDeviceWindow*>(paintdevice));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetrics(*static_cast<QFont*>(font), static_cast<QPdfWriter*>(paintdevice));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetrics(*static_cast<QFont*>(font), static_cast<QWidget*>(paintdevice));
	} else {
		return new QFontMetrics(*static_cast<QFont*>(font), static_cast<QPaintDevice*>(paintdevice));
	}
}

void* QFontMetrics_NewQFontMetrics4(void* fm)
{
	return new QFontMetrics(*static_cast<QFontMetrics*>(fm));
}

int QFontMetrics_Ascent(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->ascent();
}

int QFontMetrics_AverageCharWidth(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->averageCharWidth();
}

void* QFontMetrics_BoundingRect(void* ptr, void* ch)
{
	return ({ QRect tmpValue = static_cast<QFontMetrics*>(ptr)->boundingRect(*static_cast<QChar*>(ch)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QFontMetrics_BoundingRect2(void* ptr, struct QtGui_PackedString text)
{
	return ({ QRect tmpValue = static_cast<QFontMetrics*>(ptr)->boundingRect(QString::fromUtf8(text.data, text.len)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QFontMetrics_BoundingRect3(void* ptr, void* rect, int flags, struct QtGui_PackedString text, int tabStops, int tabArray)
{
	return ({ QRect tmpValue = static_cast<QFontMetrics*>(ptr)->boundingRect(*static_cast<QRect*>(rect), flags, QString::fromUtf8(text.data, text.len), tabStops, &tabArray); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QFontMetrics_BoundingRect4(void* ptr, int x, int y, int width, int height, int flags, struct QtGui_PackedString text, int tabStops, int tabArray)
{
	return ({ QRect tmpValue = static_cast<QFontMetrics*>(ptr)->boundingRect(x, y, width, height, flags, QString::fromUtf8(text.data, text.len), tabStops, &tabArray); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

int QFontMetrics_CapHeight(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->capHeight();
}

int QFontMetrics_Descent(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->descent();
}

struct QtGui_PackedString QFontMetrics_ElidedText(void* ptr, struct QtGui_PackedString text, long long mode, int width, int flags)
{
	return ({ QByteArray* tff5810 = new QByteArray(static_cast<QFontMetrics*>(ptr)->elidedText(QString::fromUtf8(text.data, text.len), static_cast<Qt::TextElideMode>(mode), width, flags).toUtf8()); QtGui_PackedString { const_cast<char*>(tff5810->prepend("WHITESPACE").constData()+10), tff5810->size()-10, tff5810 }; });
}

double QFontMetrics_FontDpi(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->fontDpi();
}

int QFontMetrics_Height(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->height();
}

int QFontMetrics_HorizontalAdvance(void* ptr, struct QtGui_PackedString text, int l)
{
	return static_cast<QFontMetrics*>(ptr)->horizontalAdvance(QString::fromUtf8(text.data, text.len), l);
}

int QFontMetrics_HorizontalAdvance2(void* ptr, void* ch)
{
	return static_cast<QFontMetrics*>(ptr)->horizontalAdvance(*static_cast<QChar*>(ch));
}

char QFontMetrics_InFont(void* ptr, void* ch)
{
	return static_cast<QFontMetrics*>(ptr)->inFont(*static_cast<QChar*>(ch));
}

char QFontMetrics_InFontUcs4(void* ptr, unsigned int ucs4)
{
	return static_cast<QFontMetrics*>(ptr)->inFontUcs4(ucs4);
}

int QFontMetrics_Leading(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->leading();
}

int QFontMetrics_LeftBearing(void* ptr, void* ch)
{
	return static_cast<QFontMetrics*>(ptr)->leftBearing(*static_cast<QChar*>(ch));
}

int QFontMetrics_LineSpacing(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->lineSpacing();
}

int QFontMetrics_LineWidth(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->lineWidth();
}

int QFontMetrics_MaxWidth(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->maxWidth();
}

int QFontMetrics_MinLeftBearing(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->minLeftBearing();
}

int QFontMetrics_MinRightBearing(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->minRightBearing();
}

int QFontMetrics_OverlinePos(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->overlinePos();
}

int QFontMetrics_RightBearing(void* ptr, void* ch)
{
	return static_cast<QFontMetrics*>(ptr)->rightBearing(*static_cast<QChar*>(ch));
}

void* QFontMetrics_Size(void* ptr, int flags, struct QtGui_PackedString text, int tabStops, int tabArray)
{
	return ({ QSize tmpValue = static_cast<QFontMetrics*>(ptr)->size(flags, QString::fromUtf8(text.data, text.len), tabStops, &tabArray); new QSize(tmpValue.width(), tmpValue.height()); });
}

int QFontMetrics_StrikeOutPos(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->strikeOutPos();
}

void QFontMetrics_Swap(void* ptr, void* other)
{
	static_cast<QFontMetrics*>(ptr)->swap(*static_cast<QFontMetrics*>(other));
}

void* QFontMetrics_TightBoundingRect(void* ptr, struct QtGui_PackedString text)
{
	return ({ QRect tmpValue = static_cast<QFontMetrics*>(ptr)->tightBoundingRect(QString::fromUtf8(text.data, text.len)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

int QFontMetrics_UnderlinePos(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->underlinePos();
}

int QFontMetrics_XHeight(void* ptr)
{
	return static_cast<QFontMetrics*>(ptr)->xHeight();
}

void QFontMetrics_DestroyQFontMetrics(void* ptr)
{
	static_cast<QFontMetrics*>(ptr)->~QFontMetrics();
}

Q_DECLARE_METATYPE(QFontMetricsF*)
void* QFontMetricsF_NewQFontMetricsF(void* font)
{
	return new QFontMetricsF(*static_cast<QFont*>(font));
}

void* QFontMetricsF_NewQFontMetricsF3(void* font, void* paintdevice)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetricsF(*static_cast<QFont*>(font), static_cast<QPaintDeviceWindow*>(paintdevice));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetricsF(*static_cast<QFont*>(font), static_cast<QPdfWriter*>(paintdevice));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(paintdevice))) {
		return new QFontMetricsF(*static_cast<QFont*>(font), static_cast<QWidget*>(paintdevice));
	} else {
		return new QFontMetricsF(*static_cast<QFont*>(font), static_cast<QPaintDevice*>(paintdevice));
	}
}

void* QFontMetricsF_NewQFontMetricsF4(void* fontMetrics)
{
	return new QFontMetricsF(*static_cast<QFontMetrics*>(fontMetrics));
}

void* QFontMetricsF_NewQFontMetricsF5(void* fm)
{
	return new QFontMetricsF(*static_cast<QFontMetricsF*>(fm));
}

double QFontMetricsF_Ascent(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->ascent();
}

double QFontMetricsF_AverageCharWidth(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->averageCharWidth();
}

void* QFontMetricsF_BoundingRect(void* ptr, struct QtGui_PackedString text)
{
	return ({ QRectF tmpValue = static_cast<QFontMetricsF*>(ptr)->boundingRect(QString::fromUtf8(text.data, text.len)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QFontMetricsF_BoundingRect2(void* ptr, void* ch)
{
	return ({ QRectF tmpValue = static_cast<QFontMetricsF*>(ptr)->boundingRect(*static_cast<QChar*>(ch)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QFontMetricsF_BoundingRect3(void* ptr, void* rect, int flags, struct QtGui_PackedString text, int tabStops, int tabArray)
{
	return ({ QRectF tmpValue = static_cast<QFontMetricsF*>(ptr)->boundingRect(*static_cast<QRectF*>(rect), flags, QString::fromUtf8(text.data, text.len), tabStops, &tabArray); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

double QFontMetricsF_CapHeight(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->capHeight();
}

double QFontMetricsF_Descent(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->descent();
}

struct QtGui_PackedString QFontMetricsF_ElidedText(void* ptr, struct QtGui_PackedString text, long long mode, double width, int flags)
{
	return ({ QByteArray* teb7a10 = new QByteArray(static_cast<QFontMetricsF*>(ptr)->elidedText(QString::fromUtf8(text.data, text.len), static_cast<Qt::TextElideMode>(mode), width, flags).toUtf8()); QtGui_PackedString { const_cast<char*>(teb7a10->prepend("WHITESPACE").constData()+10), teb7a10->size()-10, teb7a10 }; });
}

double QFontMetricsF_FontDpi(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->fontDpi();
}

double QFontMetricsF_Height(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->height();
}

double QFontMetricsF_HorizontalAdvance(void* ptr, struct QtGui_PackedString text, int length)
{
	return static_cast<QFontMetricsF*>(ptr)->horizontalAdvance(QString::fromUtf8(text.data, text.len), length);
}

double QFontMetricsF_HorizontalAdvance2(void* ptr, void* ch)
{
	return static_cast<QFontMetricsF*>(ptr)->horizontalAdvance(*static_cast<QChar*>(ch));
}

char QFontMetricsF_InFont(void* ptr, void* ch)
{
	return static_cast<QFontMetricsF*>(ptr)->inFont(*static_cast<QChar*>(ch));
}

char QFontMetricsF_InFontUcs4(void* ptr, unsigned int ch)
{
	return static_cast<QFontMetricsF*>(ptr)->inFontUcs4(ch);
}

double QFontMetricsF_Leading(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->leading();
}

double QFontMetricsF_LeftBearing(void* ptr, void* ch)
{
	return static_cast<QFontMetricsF*>(ptr)->leftBearing(*static_cast<QChar*>(ch));
}

double QFontMetricsF_LineSpacing(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->lineSpacing();
}

double QFontMetricsF_LineWidth(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->lineWidth();
}

double QFontMetricsF_MaxWidth(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->maxWidth();
}

double QFontMetricsF_MinLeftBearing(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->minLeftBearing();
}

double QFontMetricsF_MinRightBearing(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->minRightBearing();
}

double QFontMetricsF_OverlinePos(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->overlinePos();
}

double QFontMetricsF_RightBearing(void* ptr, void* ch)
{
	return static_cast<QFontMetricsF*>(ptr)->rightBearing(*static_cast<QChar*>(ch));
}

void* QFontMetricsF_Size(void* ptr, int flags, struct QtGui_PackedString text, int tabStops, int tabArray)
{
	return ({ QSizeF tmpValue = static_cast<QFontMetricsF*>(ptr)->size(flags, QString::fromUtf8(text.data, text.len), tabStops, &tabArray); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

double QFontMetricsF_StrikeOutPos(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->strikeOutPos();
}

void QFontMetricsF_Swap(void* ptr, void* other)
{
	static_cast<QFontMetricsF*>(ptr)->swap(*static_cast<QFontMetricsF*>(other));
}

void* QFontMetricsF_TightBoundingRect(void* ptr, struct QtGui_PackedString text)
{
	return ({ QRectF tmpValue = static_cast<QFontMetricsF*>(ptr)->tightBoundingRect(QString::fromUtf8(text.data, text.len)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

double QFontMetricsF_UnderlinePos(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->underlinePos();
}

double QFontMetricsF_XHeight(void* ptr)
{
	return static_cast<QFontMetricsF*>(ptr)->xHeight();
}

void QFontMetricsF_DestroyQFontMetricsF(void* ptr)
{
	static_cast<QFontMetricsF*>(ptr)->~QFontMetricsF();
}

class MyQGenericPlugin: public QGenericPlugin
{
public:
	MyQGenericPlugin(QObject *parent = Q_NULLPTR) : QGenericPlugin(parent) {QGenericPlugin_QGenericPlugin_QRegisterMetaType();};
	QObject * create(const QString & key, const QString & specification) { QByteArray* ta62f22 = new QByteArray(key.toUtf8()); QtGui_PackedString keyPacked = { const_cast<char*>(ta62f22->prepend("WHITESPACE").constData()+10), ta62f22->size()-10, ta62f22 };QByteArray* t03d6a1 = new QByteArray(specification.toUtf8()); QtGui_PackedString specificationPacked = { const_cast<char*>(t03d6a1->prepend("WHITESPACE").constData()+10), t03d6a1->size()-10, t03d6a1 };return static_cast<QObject*>(callbackQGenericPlugin_Create(this, keyPacked, specificationPacked)); };
	 ~MyQGenericPlugin() { callbackQGenericPlugin_DestroyQGenericPlugin(this); };
	void childEvent(QChildEvent * event) { callbackQGenericPlugin_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQGenericPlugin_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQGenericPlugin_CustomEvent(this, event); };
	void deleteLater() { callbackQGenericPlugin_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQGenericPlugin_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQGenericPlugin_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQGenericPlugin_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQGenericPlugin_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQGenericPlugin_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQGenericPlugin_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQGenericPlugin_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QGenericPlugin*)
Q_DECLARE_METATYPE(MyQGenericPlugin*)

int QGenericPlugin_QGenericPlugin_QRegisterMetaType(){qRegisterMetaType<QGenericPlugin*>(); return qRegisterMetaType<MyQGenericPlugin*>();}

void* QGenericPlugin_NewQGenericPlugin(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQGenericPlugin(static_cast<QWindow*>(parent));
	} else {
		return new MyQGenericPlugin(static_cast<QObject*>(parent));
	}
}

void* QGenericPlugin_Create(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString specification)
{
	return static_cast<QGenericPlugin*>(ptr)->create(QString::fromUtf8(key.data, key.len), QString::fromUtf8(specification.data, specification.len));
}

void QGenericPlugin_DestroyQGenericPlugin(void* ptr)
{
	static_cast<QGenericPlugin*>(ptr)->~QGenericPlugin();
}

void QGenericPlugin_DestroyQGenericPluginDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QGenericPlugin___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGenericPlugin___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGenericPlugin___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QGenericPlugin___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QGenericPlugin___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QGenericPlugin___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QGenericPlugin___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGenericPlugin___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGenericPlugin___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QGenericPlugin___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGenericPlugin___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGenericPlugin___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QGenericPlugin_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QGenericPlugin_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QGenericPlugin_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::customEvent(static_cast<QEvent*>(event));
}

void QGenericPlugin_DeleteLaterDefault(void* ptr)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::deleteLater();
}

void QGenericPlugin_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QGenericPlugin_EventDefault(void* ptr, void* e)
{
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::event(static_cast<QEvent*>(e));
}

char QGenericPlugin_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QGenericPlugin_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::metaObject());
}

void QGenericPlugin_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QGenericPlugin*>(ptr)->QGenericPlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

void* QGenericPluginFactory_QGenericPluginFactory_Create(struct QtGui_PackedString key, struct QtGui_PackedString specification)
{
	return QGenericPluginFactory::create(QString::fromUtf8(key.data, key.len), QString::fromUtf8(specification.data, specification.len));
}

struct QtGui_PackedString QGenericPluginFactory_QGenericPluginFactory_Keys()
{
	return ({ QByteArray* t692cb7 = new QByteArray(QGenericPluginFactory::keys().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t692cb7->prepend("WHITESPACE").constData()+10), t692cb7->size()-10, t692cb7 }; });
}

Q_DECLARE_METATYPE(QGlyphRun)
Q_DECLARE_METATYPE(QGlyphRun*)
void* QGlyphRun_NewQGlyphRun()
{
	return new QGlyphRun();
}

void* QGlyphRun_NewQGlyphRun2(void* other)
{
	return new QGlyphRun(*static_cast<QGlyphRun*>(other));
}

void* QGlyphRun_BoundingRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QGlyphRun*>(ptr)->boundingRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QGlyphRun_Clear(void* ptr)
{
	static_cast<QGlyphRun*>(ptr)->clear();
}

long long QGlyphRun_Flags(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->flags();
}

struct QtGui_PackedList QGlyphRun_GlyphIndexes(void* ptr)
{
	return ({ QVector<quint32>* tmpValuec798fb = new QVector<quint32>(static_cast<QGlyphRun*>(ptr)->glyphIndexes()); QtGui_PackedList { tmpValuec798fb, tmpValuec798fb->size() }; });
}

char QGlyphRun_IsEmpty(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->isEmpty();
}

char QGlyphRun_IsRightToLeft(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->isRightToLeft();
}

char QGlyphRun_Overline(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->overline();
}

struct QtGui_PackedList QGlyphRun_Positions(void* ptr)
{
	return ({ QVector<QPointF>* tmpValuefabb88 = new QVector<QPointF>(static_cast<QGlyphRun*>(ptr)->positions()); QtGui_PackedList { tmpValuefabb88, tmpValuefabb88->size() }; });
}

void* QGlyphRun_RawFont(void* ptr)
{
	return new QRawFont(static_cast<QGlyphRun*>(ptr)->rawFont());
}

void QGlyphRun_SetBoundingRect(void* ptr, void* boundingRect)
{
	static_cast<QGlyphRun*>(ptr)->setBoundingRect(*static_cast<QRectF*>(boundingRect));
}

void QGlyphRun_SetFlag(void* ptr, long long flag, char enabled)
{
	static_cast<QGlyphRun*>(ptr)->setFlag(static_cast<QGlyphRun::GlyphRunFlag>(flag), enabled != 0);
}

void QGlyphRun_SetFlags(void* ptr, long long flags)
{
	static_cast<QGlyphRun*>(ptr)->setFlags(static_cast<QGlyphRun::GlyphRunFlag>(flags));
}

void QGlyphRun_SetGlyphIndexes(void* ptr, void* glyphIndexes)
{
	static_cast<QGlyphRun*>(ptr)->setGlyphIndexes(*static_cast<QVector<quint32>*>(glyphIndexes));
}

void QGlyphRun_SetOverline(void* ptr, char overline)
{
	static_cast<QGlyphRun*>(ptr)->setOverline(overline != 0);
}

void QGlyphRun_SetPositions(void* ptr, void* positions)
{
	static_cast<QGlyphRun*>(ptr)->setPositions(*static_cast<QVector<QPointF>*>(positions));
}

void QGlyphRun_SetRawData(void* ptr, unsigned int glyphIndexArray, void* glyphPositionArray, int size)
{
	static_cast<QGlyphRun*>(ptr)->setRawData(const_cast<const quint32*>(&glyphIndexArray), static_cast<QPointF*>(glyphPositionArray), size);
}

void QGlyphRun_SetRawFont(void* ptr, void* rawFont)
{
	static_cast<QGlyphRun*>(ptr)->setRawFont(*static_cast<QRawFont*>(rawFont));
}

void QGlyphRun_SetRightToLeft(void* ptr, char rightToLeft)
{
	static_cast<QGlyphRun*>(ptr)->setRightToLeft(rightToLeft != 0);
}

void QGlyphRun_SetStrikeOut(void* ptr, char strikeOut)
{
	static_cast<QGlyphRun*>(ptr)->setStrikeOut(strikeOut != 0);
}

void QGlyphRun_SetUnderline(void* ptr, char underline)
{
	static_cast<QGlyphRun*>(ptr)->setUnderline(underline != 0);
}

char QGlyphRun_StrikeOut(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->strikeOut();
}

void QGlyphRun_Swap(void* ptr, void* other)
{
	static_cast<QGlyphRun*>(ptr)->swap(*static_cast<QGlyphRun*>(other));
}

char QGlyphRun_Underline(void* ptr)
{
	return static_cast<QGlyphRun*>(ptr)->underline();
}

void QGlyphRun_DestroyQGlyphRun(void* ptr)
{
	static_cast<QGlyphRun*>(ptr)->~QGlyphRun();
}

unsigned int QGlyphRun___glyphIndexes_atList(void* ptr, int i)
{
	return ({quint32 tmp = static_cast<QVector<quint32>*>(ptr)->at(i); if (i == static_cast<QVector<quint32>*>(ptr)->size()-1) { static_cast<QVector<quint32>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QGlyphRun___glyphIndexes_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<quint32>*>(ptr)->append(i);
}

void* QGlyphRun___glyphIndexes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<quint32>();
}

void* QGlyphRun___positions_atList(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QGlyphRun___positions_setList(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QGlyphRun___positions_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

unsigned int QGlyphRun___setGlyphIndexes_glyphIndexes_atList(void* ptr, int i)
{
	return ({quint32 tmp = static_cast<QVector<quint32>*>(ptr)->at(i); if (i == static_cast<QVector<quint32>*>(ptr)->size()-1) { static_cast<QVector<quint32>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QGlyphRun___setGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<quint32>*>(ptr)->append(i);
}

void* QGlyphRun___setGlyphIndexes_glyphIndexes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<quint32>();
}

void* QGlyphRun___setPositions_positions_atList(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QGlyphRun___setPositions_positions_setList(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QGlyphRun___setPositions_positions_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

Q_DECLARE_METATYPE(QGradient*)
void* QGradient_NewQGradient2(long long preset)
{
	return new QGradient(static_cast<QGradient::Preset>(preset));
}

long long QGradient_CoordinateMode(void* ptr)
{
	return static_cast<QGradient*>(ptr)->coordinateMode();
}

void QGradient_SetColorAt(void* ptr, double position, void* color)
{
	static_cast<QGradient*>(ptr)->setColorAt(position, *static_cast<QColor*>(color));
}

void QGradient_SetCoordinateMode(void* ptr, long long mode)
{
	static_cast<QGradient*>(ptr)->setCoordinateMode(static_cast<QGradient::CoordinateMode>(mode));
}

void QGradient_SetSpread(void* ptr, long long method)
{
	static_cast<QGradient*>(ptr)->setSpread(static_cast<QGradient::Spread>(method));
}

long long QGradient_Spread(void* ptr)
{
	return static_cast<QGradient*>(ptr)->spread();
}

long long QGradient_Type(void* ptr)
{
	return static_cast<QGradient*>(ptr)->type();
}

class MyQGuiApplication: public QGuiApplication
{
public:
	MyQGuiApplication(int &argc, char **argv) : QGuiApplication(argc, argv) {QGuiApplication_QGuiApplication_QRegisterMetaType();};
	void Signal_ApplicationDisplayNameChanged() { callbackQGuiApplication_ApplicationDisplayNameChanged(this); };
	void Signal_ApplicationStateChanged(Qt::ApplicationState state) { callbackQGuiApplication_ApplicationStateChanged(this, state); };
	void Signal_CommitDataRequest(QSessionManager & manager) { callbackQGuiApplication_CommitDataRequest(this, static_cast<QSessionManager*>(&manager)); };
	bool event(QEvent * e) { return callbackQGuiApplication_Event(this, e) != 0; };
	void Signal_FocusObjectChanged(QObject * focusObject) { callbackQGuiApplication_FocusObjectChanged(this, focusObject); };
	void Signal_FocusWindowChanged(QWindow * focusWindow) { callbackQGuiApplication_FocusWindowChanged(this, focusWindow); };
	void Signal_FontChanged(const QFont & font) { callbackQGuiApplication_FontChanged(this, const_cast<QFont*>(&font)); };
	void Signal_FontDatabaseChanged() { callbackQGuiApplication_FontDatabaseChanged(this); };
	void Signal_LastWindowClosed() { callbackQGuiApplication_LastWindowClosed(this); };
	void Signal_LayoutDirectionChanged(Qt::LayoutDirection direction) { callbackQGuiApplication_LayoutDirectionChanged(this, direction); };
	void Signal_PaletteChanged(const QPalette & palette) { callbackQGuiApplication_PaletteChanged(this, const_cast<QPalette*>(&palette)); };
	void Signal_PrimaryScreenChanged(QScreen * screen) { callbackQGuiApplication_PrimaryScreenChanged(this, screen); };
	void Signal_SaveStateRequest(QSessionManager & manager) { callbackQGuiApplication_SaveStateRequest(this, static_cast<QSessionManager*>(&manager)); };
	void Signal_ScreenAdded(QScreen * screen) { callbackQGuiApplication_ScreenAdded(this, screen); };
	void Signal_ScreenRemoved(QScreen * screen) { callbackQGuiApplication_ScreenRemoved(this, screen); };
	 ~MyQGuiApplication() { callbackQGuiApplication_DestroyQGuiApplication(this); };
	void Signal_AboutToQuit() { callbackQGuiApplication_AboutToQuit(this); };
	void Signal_ApplicationNameChanged() { callbackQGuiApplication_ApplicationNameChanged(this); };
	void Signal_ApplicationVersionChanged() { callbackQGuiApplication_ApplicationVersionChanged(this); };
	void Signal_OrganizationDomainChanged() { callbackQGuiApplication_OrganizationDomainChanged(this); };
	void Signal_OrganizationNameChanged() { callbackQGuiApplication_OrganizationNameChanged(this); };
	void quit() { callbackQGuiApplication_Quit(this); };
	void childEvent(QChildEvent * event) { callbackQGuiApplication_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQGuiApplication_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQGuiApplication_CustomEvent(this, event); };
	void deleteLater() { callbackQGuiApplication_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQGuiApplication_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQGuiApplication_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQGuiApplication_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQGuiApplication_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQGuiApplication_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQGuiApplication_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QGuiApplication*)
Q_DECLARE_METATYPE(MyQGuiApplication*)

int QGuiApplication_QGuiApplication_QRegisterMetaType(){qRegisterMetaType<QGuiApplication*>(); return qRegisterMetaType<MyQGuiApplication*>();}

void* QGuiApplication_NewQGuiApplication(int argc, char* argv)
{
	static int argcs = argc;
	static char** argvs = static_cast<char**>(malloc(argcs * sizeof(char*)));

	QList<QByteArray> aList = QByteArray(argv).split('|');
	for (int i = 0; i < argcs; i++)
		argvs[i] = (new QByteArray(aList.at(i)))->data();

	return new MyQGuiApplication(argcs, argvs);
}

struct QtGui_PackedString QGuiApplication_QGuiApplication_ApplicationDisplayName()
{
	return ({ QByteArray* tb2b492 = new QByteArray(QGuiApplication::applicationDisplayName().toUtf8()); QtGui_PackedString { const_cast<char*>(tb2b492->prepend("WHITESPACE").constData()+10), tb2b492->size()-10, tb2b492 }; });
}

void QGuiApplication_ConnectApplicationDisplayNameChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::applicationDisplayNameChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_ApplicationDisplayNameChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectApplicationDisplayNameChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::applicationDisplayNameChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_ApplicationDisplayNameChanged));
}

void QGuiApplication_ApplicationDisplayNameChanged(void* ptr)
{
	static_cast<QGuiApplication*>(ptr)->applicationDisplayNameChanged();
}

long long QGuiApplication_QGuiApplication_ApplicationState()
{
	return QGuiApplication::applicationState();
}

void QGuiApplication_ConnectApplicationStateChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::ApplicationState>();
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(Qt::ApplicationState)>(&QGuiApplication::applicationStateChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(Qt::ApplicationState)>(&MyQGuiApplication::Signal_ApplicationStateChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectApplicationStateChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(Qt::ApplicationState)>(&QGuiApplication::applicationStateChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(Qt::ApplicationState)>(&MyQGuiApplication::Signal_ApplicationStateChanged));
}

void QGuiApplication_ApplicationStateChanged(void* ptr, long long state)
{
	static_cast<QGuiApplication*>(ptr)->applicationStateChanged(static_cast<Qt::ApplicationState>(state));
}

void QGuiApplication_QGuiApplication_ChangeOverrideCursor(void* cursor)
{
	QGuiApplication::changeOverrideCursor(*static_cast<QCursor*>(cursor));
}

void* QGuiApplication_QGuiApplication_Clipboard()
{
	return QGuiApplication::clipboard();
}

void QGuiApplication_ConnectCommitDataRequest(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QSessionManager &)>(&QGuiApplication::commitDataRequest), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QSessionManager &)>(&MyQGuiApplication::Signal_CommitDataRequest), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectCommitDataRequest(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QSessionManager &)>(&QGuiApplication::commitDataRequest), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QSessionManager &)>(&MyQGuiApplication::Signal_CommitDataRequest));
}

void QGuiApplication_CommitDataRequest(void* ptr, void* manager)
{
	static_cast<QGuiApplication*>(ptr)->commitDataRequest(*static_cast<QSessionManager*>(manager));
}

struct QtGui_PackedString QGuiApplication_QGuiApplication_DesktopFileName()
{
	return ({ QByteArray* t174649 = new QByteArray(QGuiApplication::desktopFileName().toUtf8()); QtGui_PackedString { const_cast<char*>(t174649->prepend("WHITESPACE").constData()+10), t174649->size()-10, t174649 }; });
}

char QGuiApplication_QGuiApplication_DesktopSettingsAware()
{
	return QGuiApplication::desktopSettingsAware();
}

double QGuiApplication_DevicePixelRatio(void* ptr)
{
	return static_cast<QGuiApplication*>(ptr)->devicePixelRatio();
}

char QGuiApplication_EventDefault(void* ptr, void* e)
{
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::event(static_cast<QEvent*>(e));
}

int QGuiApplication_QGuiApplication_Exec()
{
	return QGuiApplication::exec();
}

void* QGuiApplication_QGuiApplication_FocusObject()
{
	return QGuiApplication::focusObject();
}

void QGuiApplication_ConnectFocusObjectChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QObject *)>(&QGuiApplication::focusObjectChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QObject *)>(&MyQGuiApplication::Signal_FocusObjectChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectFocusObjectChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QObject *)>(&QGuiApplication::focusObjectChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QObject *)>(&MyQGuiApplication::Signal_FocusObjectChanged));
}

void QGuiApplication_FocusObjectChanged(void* ptr, void* focusObject)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(focusObject))) {
		static_cast<QGuiApplication*>(ptr)->focusObjectChanged(static_cast<QOffscreenSurface*>(focusObject));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(focusObject))) {
		static_cast<QGuiApplication*>(ptr)->focusObjectChanged(static_cast<QPaintDeviceWindow*>(focusObject));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(focusObject))) {
		static_cast<QGuiApplication*>(ptr)->focusObjectChanged(static_cast<QPdfWriter*>(focusObject));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(focusObject))) {
		static_cast<QGuiApplication*>(ptr)->focusObjectChanged(static_cast<QWindow*>(focusObject));
	} else {
		static_cast<QGuiApplication*>(ptr)->focusObjectChanged(static_cast<QObject*>(focusObject));
	}
}

void* QGuiApplication_QGuiApplication_FocusWindow()
{
	return QGuiApplication::focusWindow();
}

void QGuiApplication_ConnectFocusWindowChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QWindow *)>(&QGuiApplication::focusWindowChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QWindow *)>(&MyQGuiApplication::Signal_FocusWindowChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectFocusWindowChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QWindow *)>(&QGuiApplication::focusWindowChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QWindow *)>(&MyQGuiApplication::Signal_FocusWindowChanged));
}

void QGuiApplication_FocusWindowChanged(void* ptr, void* focusWindow)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(focusWindow))) {
		static_cast<QGuiApplication*>(ptr)->focusWindowChanged(static_cast<QPaintDeviceWindow*>(focusWindow));
	} else {
		static_cast<QGuiApplication*>(ptr)->focusWindowChanged(static_cast<QWindow*>(focusWindow));
	}
}

void* QGuiApplication_QGuiApplication_Font()
{
	return new QFont(QGuiApplication::font());
}

void QGuiApplication_ConnectFontChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(const QFont &)>(&QGuiApplication::fontChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(const QFont &)>(&MyQGuiApplication::Signal_FontChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectFontChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(const QFont &)>(&QGuiApplication::fontChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(const QFont &)>(&MyQGuiApplication::Signal_FontChanged));
}

void QGuiApplication_FontChanged(void* ptr, void* font)
{
	static_cast<QGuiApplication*>(ptr)->fontChanged(*static_cast<QFont*>(font));
}

void QGuiApplication_ConnectFontDatabaseChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::fontDatabaseChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_FontDatabaseChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectFontDatabaseChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::fontDatabaseChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_FontDatabaseChanged));
}

void QGuiApplication_FontDatabaseChanged(void* ptr)
{
	static_cast<QGuiApplication*>(ptr)->fontDatabaseChanged();
}

long long QGuiApplication_QGuiApplication_HighDpiScaleFactorRoundingPolicy()
{
	return static_cast<qint64>(QGuiApplication::highDpiScaleFactorRoundingPolicy());
}

void* QGuiApplication_QGuiApplication_InputMethod()
{
	return QGuiApplication::inputMethod();
}

char QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled()
{
	return QGuiApplication::isFallbackSessionManagementEnabled();
}

char QGuiApplication_QGuiApplication_IsLeftToRight()
{
	return QGuiApplication::isLeftToRight();
}

char QGuiApplication_QGuiApplication_IsRightToLeft()
{
	return QGuiApplication::isRightToLeft();
}

char QGuiApplication_IsSavingSession(void* ptr)
{
	return static_cast<QGuiApplication*>(ptr)->isSavingSession();
}

char QGuiApplication_IsSessionRestored(void* ptr)
{
	return static_cast<QGuiApplication*>(ptr)->isSessionRestored();
}

long long QGuiApplication_QGuiApplication_KeyboardModifiers()
{
	return QGuiApplication::keyboardModifiers();
}

void QGuiApplication_ConnectLastWindowClosed(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::lastWindowClosed), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_LastWindowClosed), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectLastWindowClosed(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)()>(&QGuiApplication::lastWindowClosed), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)()>(&MyQGuiApplication::Signal_LastWindowClosed));
}

void QGuiApplication_LastWindowClosed(void* ptr)
{
	static_cast<QGuiApplication*>(ptr)->lastWindowClosed();
}

long long QGuiApplication_QGuiApplication_LayoutDirection()
{
	return QGuiApplication::layoutDirection();
}

void QGuiApplication_ConnectLayoutDirectionChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::LayoutDirection>();
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(Qt::LayoutDirection)>(&QGuiApplication::layoutDirectionChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(Qt::LayoutDirection)>(&MyQGuiApplication::Signal_LayoutDirectionChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectLayoutDirectionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(Qt::LayoutDirection)>(&QGuiApplication::layoutDirectionChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(Qt::LayoutDirection)>(&MyQGuiApplication::Signal_LayoutDirectionChanged));
}

void QGuiApplication_LayoutDirectionChanged(void* ptr, long long direction)
{
	static_cast<QGuiApplication*>(ptr)->layoutDirectionChanged(static_cast<Qt::LayoutDirection>(direction));
}

void* QGuiApplication_QGuiApplication_ModalWindow()
{
	return QGuiApplication::modalWindow();
}

long long QGuiApplication_QGuiApplication_MouseButtons()
{
	return QGuiApplication::mouseButtons();
}

void* QGuiApplication_QGuiApplication_OverrideCursor()
{
	return QGuiApplication::overrideCursor();
}

void* QGuiApplication_QGuiApplication_Palette()
{
	return new QPalette(QGuiApplication::palette());
}

void QGuiApplication_ConnectPaletteChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(const QPalette &)>(&QGuiApplication::paletteChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(const QPalette &)>(&MyQGuiApplication::Signal_PaletteChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectPaletteChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(const QPalette &)>(&QGuiApplication::paletteChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(const QPalette &)>(&MyQGuiApplication::Signal_PaletteChanged));
}

void QGuiApplication_PaletteChanged(void* ptr, void* palette)
{
	static_cast<QGuiApplication*>(ptr)->paletteChanged(*static_cast<QPalette*>(palette));
}

void* QGuiApplication_QGuiApplication_PlatformFunction(void* function)
{
	return reinterpret_cast<void*>(QGuiApplication::platformFunction(*static_cast<QByteArray*>(function)));
}

struct QtGui_PackedString QGuiApplication_QGuiApplication_PlatformName()
{
	return ({ QByteArray* t498934 = new QByteArray(QGuiApplication::platformName().toUtf8()); QtGui_PackedString { const_cast<char*>(t498934->prepend("WHITESPACE").constData()+10), t498934->size()-10, t498934 }; });
}

void* QGuiApplication_QGuiApplication_PrimaryScreen()
{
	return QGuiApplication::primaryScreen();
}

void QGuiApplication_ConnectPrimaryScreenChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::primaryScreenChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_PrimaryScreenChanged), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectPrimaryScreenChanged(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::primaryScreenChanged), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_PrimaryScreenChanged));
}

void QGuiApplication_PrimaryScreenChanged(void* ptr, void* screen)
{
	static_cast<QGuiApplication*>(ptr)->primaryScreenChanged(static_cast<QScreen*>(screen));
}

long long QGuiApplication_QGuiApplication_QueryKeyboardModifiers()
{
	return QGuiApplication::queryKeyboardModifiers();
}

char QGuiApplication_QGuiApplication_QuitOnLastWindowClosed()
{
	return QGuiApplication::quitOnLastWindowClosed();
}

void QGuiApplication_QGuiApplication_RestoreOverrideCursor()
{
	QGuiApplication::restoreOverrideCursor();
}

void QGuiApplication_ConnectSaveStateRequest(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QSessionManager &)>(&QGuiApplication::saveStateRequest), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QSessionManager &)>(&MyQGuiApplication::Signal_SaveStateRequest), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectSaveStateRequest(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QSessionManager &)>(&QGuiApplication::saveStateRequest), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QSessionManager &)>(&MyQGuiApplication::Signal_SaveStateRequest));
}

void QGuiApplication_SaveStateRequest(void* ptr, void* manager)
{
	static_cast<QGuiApplication*>(ptr)->saveStateRequest(*static_cast<QSessionManager*>(manager));
}

void QGuiApplication_ConnectScreenAdded(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::screenAdded), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_ScreenAdded), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectScreenAdded(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::screenAdded), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_ScreenAdded));
}

void QGuiApplication_ScreenAdded(void* ptr, void* screen)
{
	static_cast<QGuiApplication*>(ptr)->screenAdded(static_cast<QScreen*>(screen));
}

void* QGuiApplication_QGuiApplication_ScreenAt(void* point)
{
	return QGuiApplication::screenAt(*static_cast<QPoint*>(point));
}

void QGuiApplication_ConnectScreenRemoved(void* ptr, long long t)
{
	QObject::connect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::screenRemoved), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_ScreenRemoved), static_cast<Qt::ConnectionType>(t));
}

void QGuiApplication_DisconnectScreenRemoved(void* ptr)
{
	QObject::disconnect(static_cast<QGuiApplication*>(ptr), static_cast<void (QGuiApplication::*)(QScreen *)>(&QGuiApplication::screenRemoved), static_cast<MyQGuiApplication*>(ptr), static_cast<void (MyQGuiApplication::*)(QScreen *)>(&MyQGuiApplication::Signal_ScreenRemoved));
}

void QGuiApplication_ScreenRemoved(void* ptr, void* screen)
{
	static_cast<QGuiApplication*>(ptr)->screenRemoved(static_cast<QScreen*>(screen));
}

struct QtGui_PackedList QGuiApplication_QGuiApplication_Screens()
{
	return ({ QList<QScreen *>* tmpValuea63f6f = new QList<QScreen *>(QGuiApplication::screens()); QtGui_PackedList { tmpValuea63f6f, tmpValuea63f6f->size() }; });
}

struct QtGui_PackedString QGuiApplication_SessionId(void* ptr)
{
	return ({ QByteArray* td2baef = new QByteArray(static_cast<QGuiApplication*>(ptr)->sessionId().toUtf8()); QtGui_PackedString { const_cast<char*>(td2baef->prepend("WHITESPACE").constData()+10), td2baef->size()-10, td2baef }; });
}

struct QtGui_PackedString QGuiApplication_SessionKey(void* ptr)
{
	return ({ QByteArray* t076332 = new QByteArray(static_cast<QGuiApplication*>(ptr)->sessionKey().toUtf8()); QtGui_PackedString { const_cast<char*>(t076332->prepend("WHITESPACE").constData()+10), t076332->size()-10, t076332 }; });
}

void QGuiApplication_QGuiApplication_SetApplicationDisplayName(struct QtGui_PackedString name)
{
	QGuiApplication::setApplicationDisplayName(QString::fromUtf8(name.data, name.len));
}

void QGuiApplication_QGuiApplication_SetDesktopFileName(struct QtGui_PackedString name)
{
	QGuiApplication::setDesktopFileName(QString::fromUtf8(name.data, name.len));
}

void QGuiApplication_QGuiApplication_SetDesktopSettingsAware(char on)
{
	QGuiApplication::setDesktopSettingsAware(on != 0);
}

void QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(char enabled)
{
	QGuiApplication::setFallbackSessionManagementEnabled(enabled != 0);
}

void QGuiApplication_QGuiApplication_SetFont(void* font)
{
	QGuiApplication::setFont(*static_cast<QFont*>(font));
}

void QGuiApplication_QGuiApplication_SetHighDpiScaleFactorRoundingPolicy(long long policy)
{
	QGuiApplication::setHighDpiScaleFactorRoundingPolicy(static_cast<Qt::HighDpiScaleFactorRoundingPolicy>(policy));
}

void QGuiApplication_QGuiApplication_SetLayoutDirection(long long direction)
{
	QGuiApplication::setLayoutDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QGuiApplication_QGuiApplication_SetOverrideCursor(void* cursor)
{
	QGuiApplication::setOverrideCursor(*static_cast<QCursor*>(cursor));
}

void QGuiApplication_QGuiApplication_SetPalette(void* pal)
{
	QGuiApplication::setPalette(*static_cast<QPalette*>(pal));
}

void QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(char quit)
{
	QGuiApplication::setQuitOnLastWindowClosed(quit != 0);
}

void QGuiApplication_QGuiApplication_SetWindowIcon(void* icon)
{
	QGuiApplication::setWindowIcon(*static_cast<QIcon*>(icon));
}

void* QGuiApplication_QGuiApplication_StyleHints()
{
	return QGuiApplication::styleHints();
}

void QGuiApplication_QGuiApplication_Sync()
{
	QGuiApplication::sync();
}

void* QGuiApplication_QGuiApplication_TopLevelAt(void* pos)
{
	return QGuiApplication::topLevelAt(*static_cast<QPoint*>(pos));
}

void* QGuiApplication_QGuiApplication_WindowIcon()
{
	return new QIcon(QGuiApplication::windowIcon());
}

void QGuiApplication_DestroyQGuiApplication(void* ptr)
{
	static_cast<QGuiApplication*>(ptr)->~QGuiApplication();
}

void QGuiApplication_DestroyQGuiApplicationDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QGuiApplication___screens_atList(void* ptr, int i)
{
	return ({QScreen * tmp = static_cast<QList<QScreen *>*>(ptr)->at(i); if (i == static_cast<QList<QScreen *>*>(ptr)->size()-1) { static_cast<QList<QScreen *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGuiApplication___screens_setList(void* ptr, void* i)
{
	static_cast<QList<QScreen *>*>(ptr)->append(static_cast<QScreen*>(i));
}

void* QGuiApplication___screens_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QScreen *>();
}

void* QGuiApplication___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGuiApplication___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGuiApplication___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QGuiApplication___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QGuiApplication___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QGuiApplication___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QGuiApplication___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGuiApplication___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGuiApplication___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QGuiApplication___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QGuiApplication___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QGuiApplication___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QGuiApplication_QuitDefault(void* ptr)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::quit();
}

void QGuiApplication_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::childEvent(static_cast<QChildEvent*>(event));
}

void QGuiApplication_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QGuiApplication_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::customEvent(static_cast<QEvent*>(event));
}

void QGuiApplication_DeleteLaterDefault(void* ptr)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::deleteLater();
}

void QGuiApplication_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QGuiApplication_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QGuiApplication*>(ptr)->QGuiApplication::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QGuiApplication_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QGuiApplication*>(ptr)->QGuiApplication::metaObject());
}

void QGuiApplication_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QGuiApplication*>(ptr)->QGuiApplication::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQHelpEvent: public QHelpEvent
{
public:
	MyQHelpEvent(QEvent::Type ty, const QPoint &pos, const QPoint &globalPos) : QHelpEvent(ty, pos, globalPos) {QHelpEvent_QHelpEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QHelpEvent*)
Q_DECLARE_METATYPE(MyQHelpEvent*)

int QHelpEvent_QHelpEvent_QRegisterMetaType(){qRegisterMetaType<QHelpEvent*>(); return qRegisterMetaType<MyQHelpEvent*>();}

void* QHelpEvent_NewQHelpEvent(long long ty, void* pos, void* globalPos)
{
	return new MyQHelpEvent(static_cast<QEvent::Type>(ty), *static_cast<QPoint*>(pos), *static_cast<QPoint*>(globalPos));
}

void* QHelpEvent_GlobalPos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QHelpEvent*>(ptr)->globalPos());
}

int QHelpEvent_GlobalX(void* ptr)
{
	return static_cast<QHelpEvent*>(ptr)->globalX();
}

int QHelpEvent_GlobalY(void* ptr)
{
	return static_cast<QHelpEvent*>(ptr)->globalY();
}

void* QHelpEvent_Pos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QHelpEvent*>(ptr)->pos());
}

int QHelpEvent_X(void* ptr)
{
	return static_cast<QHelpEvent*>(ptr)->x();
}

int QHelpEvent_Y(void* ptr)
{
	return static_cast<QHelpEvent*>(ptr)->y();
}

class MyQHideEvent: public QHideEvent
{
public:
	MyQHideEvent() : QHideEvent() {QHideEvent_QHideEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QHideEvent*)
Q_DECLARE_METATYPE(MyQHideEvent*)

int QHideEvent_QHideEvent_QRegisterMetaType(){qRegisterMetaType<QHideEvent*>(); return qRegisterMetaType<MyQHideEvent*>();}

void* QHideEvent_NewQHideEvent()
{
	return new MyQHideEvent();
}

class MyQHoverEvent: public QHoverEvent
{
public:
	MyQHoverEvent(QEvent::Type ty, const QPointF &pos, const QPointF &oldPos, Qt::KeyboardModifiers modifiers = Qt::NoModifier) : QHoverEvent(ty, pos, oldPos, modifiers) {QHoverEvent_QHoverEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QHoverEvent*)
Q_DECLARE_METATYPE(MyQHoverEvent*)

int QHoverEvent_QHoverEvent_QRegisterMetaType(){qRegisterMetaType<QHoverEvent*>(); return qRegisterMetaType<MyQHoverEvent*>();}

void* QHoverEvent_NewQHoverEvent(long long ty, void* pos, void* oldPos, long long modifiers)
{
	return new MyQHoverEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(pos), *static_cast<QPointF*>(oldPos), static_cast<Qt::KeyboardModifier>(modifiers));
}

void* QHoverEvent_OldPos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QHoverEvent*>(ptr)->oldPos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QHoverEvent_OldPosF(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QHoverEvent*>(ptr)->oldPosF());
}

void* QHoverEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QHoverEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QHoverEvent_PosF(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QHoverEvent*>(ptr)->posF());
}

Q_DECLARE_METATYPE(QIcon)
Q_DECLARE_METATYPE(QIcon*)
void* QIcon_NewQIcon()
{
	return new QIcon();
}

void* QIcon_NewQIcon2(void* pixmap)
{
	return new QIcon(*static_cast<QPixmap*>(pixmap));
}

void* QIcon_NewQIcon3(void* other)
{
	return new QIcon(*static_cast<QIcon*>(other));
}

void* QIcon_NewQIcon4(void* other)
{
	return new QIcon(*static_cast<QIcon*>(other));
}

void* QIcon_NewQIcon5(struct QtGui_PackedString fileName)
{
	return new QIcon(QString::fromUtf8(fileName.data, fileName.len));
}

void* QIcon_NewQIcon6(void* engine)
{
	return new QIcon(static_cast<QIconEngine*>(engine));
}

void* QIcon_ActualSize(void* ptr, void* size, long long mode, long long state)
{
	return ({ QSize tmpValue = static_cast<QIcon*>(ptr)->actualSize(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QIcon_ActualSize2(void* ptr, void* window, void* size, long long mode, long long state)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(window))) {
		return ({ QSize tmpValue = static_cast<QIcon*>(ptr)->actualSize(static_cast<QPaintDeviceWindow*>(window), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QIcon*>(ptr)->actualSize(static_cast<QWindow*>(window), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

void QIcon_AddFile(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state)
{
	static_cast<QIcon*>(ptr)->addFile(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void QIcon_AddPixmap(void* ptr, void* pixmap, long long mode, long long state)
{
	static_cast<QIcon*>(ptr)->addPixmap(*static_cast<QPixmap*>(pixmap), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

struct QtGui_PackedList QIcon_AvailableSizes(void* ptr, long long mode, long long state)
{
	return ({ QList<QSize>* tmpValue9573b1 = new QList<QSize>(static_cast<QIcon*>(ptr)->availableSizes(static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state))); QtGui_PackedList { tmpValue9573b1, tmpValue9573b1->size() }; });
}

long long QIcon_CacheKey(void* ptr)
{
	return static_cast<QIcon*>(ptr)->cacheKey();
}

struct QtGui_PackedString QIcon_QIcon_FallbackSearchPaths()
{
	return ({ QByteArray* t74e953 = new QByteArray(QIcon::fallbackSearchPaths().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t74e953->prepend("WHITESPACE").constData()+10), t74e953->size()-10, t74e953 }; });
}

struct QtGui_PackedString QIcon_QIcon_FallbackThemeName()
{
	return ({ QByteArray* tbb461c = new QByteArray(QIcon::fallbackThemeName().toUtf8()); QtGui_PackedString { const_cast<char*>(tbb461c->prepend("WHITESPACE").constData()+10), tbb461c->size()-10, tbb461c }; });
}

void* QIcon_QIcon_FromTheme(struct QtGui_PackedString name)
{
	return new QIcon(QIcon::fromTheme(QString::fromUtf8(name.data, name.len)));
}

void* QIcon_QIcon_FromTheme2(struct QtGui_PackedString name, void* fallback)
{
	return new QIcon(QIcon::fromTheme(QString::fromUtf8(name.data, name.len), *static_cast<QIcon*>(fallback)));
}

char QIcon_QIcon_HasThemeIcon(struct QtGui_PackedString name)
{
	return QIcon::hasThemeIcon(QString::fromUtf8(name.data, name.len));
}

char QIcon_IsMask(void* ptr)
{
	return static_cast<QIcon*>(ptr)->isMask();
}

char QIcon_IsNull(void* ptr)
{
	return static_cast<QIcon*>(ptr)->isNull();
}

struct QtGui_PackedString QIcon_Name(void* ptr)
{
	return ({ QByteArray* t03700a = new QByteArray(static_cast<QIcon*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(t03700a->prepend("WHITESPACE").constData()+10), t03700a->size()-10, t03700a }; });
}

void QIcon_Paint(void* ptr, void* painter, void* rect, long long alignment, long long mode, long long state)
{
	static_cast<QIcon*>(ptr)->paint(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), static_cast<Qt::AlignmentFlag>(alignment), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void QIcon_Paint2(void* ptr, void* painter, int x, int y, int w, int h, long long alignment, long long mode, long long state)
{
	static_cast<QIcon*>(ptr)->paint(static_cast<QPainter*>(painter), x, y, w, h, static_cast<Qt::AlignmentFlag>(alignment), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void* QIcon_Pixmap(void* ptr, void* size, long long mode, long long state)
{
	return new QPixmap(static_cast<QIcon*>(ptr)->pixmap(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
}

void* QIcon_Pixmap2(void* ptr, int w, int h, long long mode, long long state)
{
	return new QPixmap(static_cast<QIcon*>(ptr)->pixmap(w, h, static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
}

void* QIcon_Pixmap3(void* ptr, int extent, long long mode, long long state)
{
	return new QPixmap(static_cast<QIcon*>(ptr)->pixmap(extent, static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
}

void* QIcon_Pixmap4(void* ptr, void* window, void* size, long long mode, long long state)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(window))) {
		return new QPixmap(static_cast<QIcon*>(ptr)->pixmap(static_cast<QPaintDeviceWindow*>(window), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
	} else {
		return new QPixmap(static_cast<QIcon*>(ptr)->pixmap(static_cast<QWindow*>(window), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
	}
}

void QIcon_QIcon_SetFallbackSearchPaths(struct QtGui_PackedString paths)
{
	QIcon::setFallbackSearchPaths(QString::fromUtf8(paths.data, paths.len).split("¡¦!", QString::SkipEmptyParts));
}

void QIcon_QIcon_SetFallbackThemeName(struct QtGui_PackedString name)
{
	QIcon::setFallbackThemeName(QString::fromUtf8(name.data, name.len));
}

void QIcon_SetIsMask(void* ptr, char isMask)
{
	static_cast<QIcon*>(ptr)->setIsMask(isMask != 0);
}

void QIcon_QIcon_SetThemeName(struct QtGui_PackedString name)
{
	QIcon::setThemeName(QString::fromUtf8(name.data, name.len));
}

void QIcon_QIcon_SetThemeSearchPaths(struct QtGui_PackedString paths)
{
	QIcon::setThemeSearchPaths(QString::fromUtf8(paths.data, paths.len).split("¡¦!", QString::SkipEmptyParts));
}

void QIcon_Swap(void* ptr, void* other)
{
	static_cast<QIcon*>(ptr)->swap(*static_cast<QIcon*>(other));
}

struct QtGui_PackedString QIcon_QIcon_ThemeName()
{
	return ({ QByteArray* tf4fe63 = new QByteArray(QIcon::themeName().toUtf8()); QtGui_PackedString { const_cast<char*>(tf4fe63->prepend("WHITESPACE").constData()+10), tf4fe63->size()-10, tf4fe63 }; });
}

struct QtGui_PackedString QIcon_QIcon_ThemeSearchPaths()
{
	return ({ QByteArray* t9c13b7 = new QByteArray(QIcon::themeSearchPaths().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t9c13b7->prepend("WHITESPACE").constData()+10), t9c13b7->size()-10, t9c13b7 }; });
}

void QIcon_DestroyQIcon(void* ptr)
{
	static_cast<QIcon*>(ptr)->~QIcon();
}

void* QIcon_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QIcon*>(ptr));
}

void* QIcon___availableSizes_atList(void* ptr, int i)
{
	return ({ QSize tmpValue = ({QSize tmp = static_cast<QList<QSize>*>(ptr)->at(i); if (i == static_cast<QList<QSize>*>(ptr)->size()-1) { static_cast<QList<QSize>*>(ptr)->~QList(); free(ptr); }; tmp; }); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QIcon___availableSizes_setList(void* ptr, void* i)
{
	static_cast<QList<QSize>*>(ptr)->append(*static_cast<QSize*>(i));
}

void* QIcon___availableSizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QSize>();
}

class MyQIconDragEvent: public QIconDragEvent
{
public:
	MyQIconDragEvent() : QIconDragEvent() {QIconDragEvent_QIconDragEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QIconDragEvent*)
Q_DECLARE_METATYPE(MyQIconDragEvent*)

int QIconDragEvent_QIconDragEvent_QRegisterMetaType(){qRegisterMetaType<QIconDragEvent*>(); return qRegisterMetaType<MyQIconDragEvent*>();}

void* QIconDragEvent_NewQIconDragEvent()
{
	return new MyQIconDragEvent();
}

class MyQIconEngine: public QIconEngine
{
public:
	MyQIconEngine() : QIconEngine() {QIconEngine_QIconEngine_QRegisterMetaType();};
	QSize actualSize(const QSize & size, QIcon::Mode mode, QIcon::State state) { return *static_cast<QSize*>(callbackQIconEngine_ActualSize(this, const_cast<QSize*>(&size), mode, state)); };
	void addFile(const QString & fileName, const QSize & size, QIcon::Mode mode, QIcon::State state) { QByteArray* td83e09 = new QByteArray(fileName.toUtf8()); QtGui_PackedString fileNamePacked = { const_cast<char*>(td83e09->prepend("WHITESPACE").constData()+10), td83e09->size()-10, td83e09 };callbackQIconEngine_AddFile(this, fileNamePacked, const_cast<QSize*>(&size), mode, state); };
	void addPixmap(const QPixmap & pixmap, QIcon::Mode mode, QIcon::State state) { callbackQIconEngine_AddPixmap(this, const_cast<QPixmap*>(&pixmap), mode, state); };
	QList<QSize> availableSizes(QIcon::Mode mode, QIcon::State state) const { return ({ QList<QSize>* tmpP = static_cast<QList<QSize>*>(callbackQIconEngine_AvailableSizes(const_cast<void*>(static_cast<const void*>(this)), mode, state)); QList<QSize> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	QIconEngine * clone() const { return static_cast<QIconEngine*>(callbackQIconEngine_Clone(const_cast<void*>(static_cast<const void*>(this)))); };
	QString iconName() const { return ({ QtGui_PackedString tempVal = callbackQIconEngine_IconName(const_cast<void*>(static_cast<const void*>(this))); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	QString key() const { return ({ QtGui_PackedString tempVal = callbackQIconEngine_Key(const_cast<void*>(static_cast<const void*>(this))); QString ret = QString::fromUtf8(tempVal.data, tempVal.len); free(tempVal.data); ret; }); };
	void paint(QPainter * painter, const QRect & rect, QIcon::Mode mode, QIcon::State state) { callbackQIconEngine_Paint(this, painter, const_cast<QRect*>(&rect), mode, state); };
	QPixmap pixmap(const QSize & size, QIcon::Mode mode, QIcon::State state) { return *static_cast<QPixmap*>(callbackQIconEngine_Pixmap(this, const_cast<QSize*>(&size), mode, state)); };
	bool read(QDataStream & in) { return callbackQIconEngine_Read(this, static_cast<QDataStream*>(&in)) != 0; };
	void virtual_hook(int id, void * data) { callbackQIconEngine_Virtual_hook(this, id, data); };
	bool write(QDataStream & out) const { return callbackQIconEngine_Write(const_cast<void*>(static_cast<const void*>(this)), static_cast<QDataStream*>(&out)) != 0; };
	 ~MyQIconEngine() { callbackQIconEngine_DestroyQIconEngine(this); };
};

Q_DECLARE_METATYPE(QIconEngine*)
Q_DECLARE_METATYPE(MyQIconEngine*)

int QIconEngine_QIconEngine_QRegisterMetaType(){qRegisterMetaType<QIconEngine*>(); return qRegisterMetaType<MyQIconEngine*>();}

void* QIconEngine_NewQIconEngine()
{
	return new MyQIconEngine();
}

void* QIconEngine_ActualSize(void* ptr, void* size, long long mode, long long state)
{
	return ({ QSize tmpValue = static_cast<QIconEngine*>(ptr)->actualSize(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QIconEngine_ActualSizeDefault(void* ptr, void* size, long long mode, long long state)
{
		return ({ QSize tmpValue = static_cast<QIconEngine*>(ptr)->QIconEngine::actualSize(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QIconEngine_AddFile(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state)
{
	static_cast<QIconEngine*>(ptr)->addFile(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void QIconEngine_AddFileDefault(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state)
{
		static_cast<QIconEngine*>(ptr)->QIconEngine::addFile(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void QIconEngine_AddPixmap(void* ptr, void* pixmap, long long mode, long long state)
{
	static_cast<QIconEngine*>(ptr)->addPixmap(*static_cast<QPixmap*>(pixmap), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void QIconEngine_AddPixmapDefault(void* ptr, void* pixmap, long long mode, long long state)
{
		static_cast<QIconEngine*>(ptr)->QIconEngine::addPixmap(*static_cast<QPixmap*>(pixmap), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

struct QtGui_PackedList QIconEngine_AvailableSizes(void* ptr, long long mode, long long state)
{
	return ({ QList<QSize>* tmpValueeb1d9a = new QList<QSize>(static_cast<QIconEngine*>(ptr)->availableSizes(static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state))); QtGui_PackedList { tmpValueeb1d9a, tmpValueeb1d9a->size() }; });
}

struct QtGui_PackedList QIconEngine_AvailableSizesDefault(void* ptr, long long mode, long long state)
{
		return ({ QList<QSize>* tmpValue16303c = new QList<QSize>(static_cast<QIconEngine*>(ptr)->QIconEngine::availableSizes(static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state))); QtGui_PackedList { tmpValue16303c, tmpValue16303c->size() }; });
}

void* QIconEngine_Clone(void* ptr)
{
	return static_cast<QIconEngine*>(ptr)->clone();
}

struct QtGui_PackedString QIconEngine_IconName(void* ptr)
{
	return ({ QByteArray* te81faa = new QByteArray(static_cast<QIconEngine*>(ptr)->iconName().toUtf8()); QtGui_PackedString { const_cast<char*>(te81faa->prepend("WHITESPACE").constData()+10), te81faa->size()-10, te81faa }; });
}

struct QtGui_PackedString QIconEngine_IconNameDefault(void* ptr)
{
		return ({ QByteArray* t0024e2 = new QByteArray(static_cast<QIconEngine*>(ptr)->QIconEngine::iconName().toUtf8()); QtGui_PackedString { const_cast<char*>(t0024e2->prepend("WHITESPACE").constData()+10), t0024e2->size()-10, t0024e2 }; });
}

char QIconEngine_IsNull(void* ptr)
{
	return static_cast<QIconEngine*>(ptr)->isNull();
}

struct QtGui_PackedString QIconEngine_Key(void* ptr)
{
	return ({ QByteArray* tfa2543 = new QByteArray(static_cast<QIconEngine*>(ptr)->key().toUtf8()); QtGui_PackedString { const_cast<char*>(tfa2543->prepend("WHITESPACE").constData()+10), tfa2543->size()-10, tfa2543 }; });
}

struct QtGui_PackedString QIconEngine_KeyDefault(void* ptr)
{
		return ({ QByteArray* t9979b6 = new QByteArray(static_cast<QIconEngine*>(ptr)->QIconEngine::key().toUtf8()); QtGui_PackedString { const_cast<char*>(t9979b6->prepend("WHITESPACE").constData()+10), t9979b6->size()-10, t9979b6 }; });
}

void QIconEngine_Paint(void* ptr, void* painter, void* rect, long long mode, long long state)
{
	static_cast<QIconEngine*>(ptr)->paint(static_cast<QPainter*>(painter), *static_cast<QRect*>(rect), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state));
}

void* QIconEngine_Pixmap(void* ptr, void* size, long long mode, long long state)
{
	return new QPixmap(static_cast<QIconEngine*>(ptr)->pixmap(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
}

void* QIconEngine_PixmapDefault(void* ptr, void* size, long long mode, long long state)
{
		return new QPixmap(static_cast<QIconEngine*>(ptr)->QIconEngine::pixmap(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state)));
}

char QIconEngine_Read(void* ptr, void* in)
{
	return static_cast<QIconEngine*>(ptr)->read(*static_cast<QDataStream*>(in));
}

char QIconEngine_ReadDefault(void* ptr, void* in)
{
		return static_cast<QIconEngine*>(ptr)->QIconEngine::read(*static_cast<QDataStream*>(in));
}

void* QIconEngine_ScaledPixmap(void* ptr, void* size, long long mode, long long state, double scale)
{
	return new QPixmap(static_cast<QIconEngine*>(ptr)->scaledPixmap(*static_cast<QSize*>(size), static_cast<QIcon::Mode>(mode), static_cast<QIcon::State>(state), scale));
}

void QIconEngine_Virtual_hook(void* ptr, int id, void* data)
{
	static_cast<QIconEngine*>(ptr)->virtual_hook(id, data);
}

void QIconEngine_Virtual_hookDefault(void* ptr, int id, void* data)
{
		static_cast<QIconEngine*>(ptr)->QIconEngine::virtual_hook(id, data);
}

char QIconEngine_Write(void* ptr, void* out)
{
	return static_cast<QIconEngine*>(ptr)->write(*static_cast<QDataStream*>(out));
}

char QIconEngine_WriteDefault(void* ptr, void* out)
{
		return static_cast<QIconEngine*>(ptr)->QIconEngine::write(*static_cast<QDataStream*>(out));
}

void QIconEngine_DestroyQIconEngine(void* ptr)
{
	static_cast<QIconEngine*>(ptr)->~QIconEngine();
}

void QIconEngine_DestroyQIconEngineDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QIconEngine___availableSizes_atList(void* ptr, int i)
{
	return ({ QSize tmpValue = ({QSize tmp = static_cast<QList<QSize>*>(ptr)->at(i); if (i == static_cast<QList<QSize>*>(ptr)->size()-1) { static_cast<QList<QSize>*>(ptr)->~QList(); free(ptr); }; tmp; }); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QIconEngine___availableSizes_setList(void* ptr, void* i)
{
	static_cast<QList<QSize>*>(ptr)->append(*static_cast<QSize*>(i));
}

void* QIconEngine___availableSizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QSize>();
}

class MyQIconEnginePlugin: public QIconEnginePlugin
{
public:
	MyQIconEnginePlugin(QObject *parent = Q_NULLPTR) : QIconEnginePlugin(parent) {QIconEnginePlugin_QIconEnginePlugin_QRegisterMetaType();};
	QIconEngine * create(const QString & filename) { QByteArray* t08deae = new QByteArray(filename.toUtf8()); QtGui_PackedString filenamePacked = { const_cast<char*>(t08deae->prepend("WHITESPACE").constData()+10), t08deae->size()-10, t08deae };return static_cast<QIconEngine*>(callbackQIconEnginePlugin_Create(this, filenamePacked)); };
	 ~MyQIconEnginePlugin() { callbackQIconEnginePlugin_DestroyQIconEnginePlugin(this); };
	void childEvent(QChildEvent * event) { callbackQIconEnginePlugin_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQIconEnginePlugin_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQIconEnginePlugin_CustomEvent(this, event); };
	void deleteLater() { callbackQIconEnginePlugin_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQIconEnginePlugin_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQIconEnginePlugin_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQIconEnginePlugin_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQIconEnginePlugin_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQIconEnginePlugin_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQIconEnginePlugin_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQIconEnginePlugin_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QIconEnginePlugin*)
Q_DECLARE_METATYPE(MyQIconEnginePlugin*)

int QIconEnginePlugin_QIconEnginePlugin_QRegisterMetaType(){qRegisterMetaType<QIconEnginePlugin*>(); return qRegisterMetaType<MyQIconEnginePlugin*>();}

void* QIconEnginePlugin_NewQIconEnginePlugin(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIconEnginePlugin(static_cast<QWindow*>(parent));
	} else {
		return new MyQIconEnginePlugin(static_cast<QObject*>(parent));
	}
}

void* QIconEnginePlugin_Create(void* ptr, struct QtGui_PackedString filename)
{
	return static_cast<QIconEnginePlugin*>(ptr)->create(QString::fromUtf8(filename.data, filename.len));
}

void QIconEnginePlugin_DestroyQIconEnginePlugin(void* ptr)
{
	static_cast<QIconEnginePlugin*>(ptr)->~QIconEnginePlugin();
}

void QIconEnginePlugin_DestroyQIconEnginePluginDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QIconEnginePlugin___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QIconEnginePlugin___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QIconEnginePlugin___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QIconEnginePlugin___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QIconEnginePlugin___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QIconEnginePlugin___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QIconEnginePlugin___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QIconEnginePlugin___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QIconEnginePlugin___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QIconEnginePlugin___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QIconEnginePlugin___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QIconEnginePlugin___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QIconEnginePlugin_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QIconEnginePlugin_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QIconEnginePlugin_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::customEvent(static_cast<QEvent*>(event));
}

void QIconEnginePlugin_DeleteLaterDefault(void* ptr)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::deleteLater();
}

void QIconEnginePlugin_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QIconEnginePlugin_EventDefault(void* ptr, void* e)
{
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::event(static_cast<QEvent*>(e));
}

char QIconEnginePlugin_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QIconEnginePlugin_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::metaObject());
}

void QIconEnginePlugin_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QIconEnginePlugin*>(ptr)->QIconEnginePlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQImage: public QImage
{
public:
	MyQImage() : QImage() {QImage_QImage_QRegisterMetaType();};
	MyQImage(const QSize &size, QImage::Format format) : QImage(size, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(int width, int height, QImage::Format format) : QImage(width, height, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(uchar *data, int width, int height, QImage::Format format) : QImage(data, width, height, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(const uchar *data, int width, int height, QImage::Format format) : QImage(data, width, height, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(uchar *data, int width, int height, int bytesPerLine, QImage::Format format) : QImage(data, width, height, bytesPerLine, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(const uchar *data, int width, int height, int bytesPerLine, QImage::Format format) : QImage(data, width, height, bytesPerLine, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(const QString &fileName, const char *format = Q_NULLPTR) : QImage(fileName, format) {QImage_QImage_QRegisterMetaType();};
	MyQImage(const QImage &image) : QImage(image) {QImage_QImage_QRegisterMetaType();};
	MyQImage(QImage &&other) : QImage(other) {QImage_QImage_QRegisterMetaType();};
	 ~MyQImage() { callbackQImage_DestroyQImage(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQImage_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QImage*)
Q_DECLARE_METATYPE(MyQImage*)

int QImage_QImage_QRegisterMetaType(){qRegisterMetaType<QImage*>(); return qRegisterMetaType<MyQImage*>();}

void* QImage_NewQImage()
{
	return new MyQImage();
}

void* QImage_NewQImage2(void* size, long long format)
{
	return new MyQImage(*static_cast<QSize*>(size), static_cast<QImage::Format>(format));
}

void* QImage_NewQImage3(int width, int height, long long format)
{
	return new MyQImage(width, height, static_cast<QImage::Format>(format));
}

void* QImage_NewQImage4(char* data, int width, int height, long long format)
{
	return new MyQImage(static_cast<uchar*>(static_cast<void*>(data)), width, height, static_cast<QImage::Format>(format));
}

void* QImage_NewQImage5(char* data, int width, int height, long long format)
{
	return new MyQImage(const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(data))), width, height, static_cast<QImage::Format>(format));
}

void* QImage_NewQImage6(char* data, int width, int height, int bytesPerLine, long long format)
{
	return new MyQImage(static_cast<uchar*>(static_cast<void*>(data)), width, height, bytesPerLine, static_cast<QImage::Format>(format));
}

void* QImage_NewQImage7(char* data, int width, int height, int bytesPerLine, long long format)
{
	return new MyQImage(const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(data))), width, height, bytesPerLine, static_cast<QImage::Format>(format));
}

void* QImage_NewQImage9(struct QtGui_PackedString fileName, char* format)
{
	return new MyQImage(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

void* QImage_NewQImage10(void* image)
{
	return new MyQImage(*static_cast<QImage*>(image));
}

void* QImage_NewQImage11(void* other)
{
	return new MyQImage(*static_cast<QImage*>(other));
}

char QImage_AllGray(void* ptr)
{
	return static_cast<QImage*>(ptr)->allGray();
}

void QImage_ApplyColorTransform(void* ptr, void* transform)
{
	static_cast<QImage*>(ptr)->applyColorTransform(*static_cast<QColorTransform*>(transform));
}

int QImage_BitPlaneCount(void* ptr)
{
	return static_cast<QImage*>(ptr)->bitPlaneCount();
}

struct QtGui_PackedString QImage_Bits(void* ptr)
{
	return ({ char* te11021 = static_cast<char*>(static_cast<void*>(static_cast<QImage*>(ptr)->bits())); QtGui_PackedString { te11021, -1, NULL }; });
}

struct QtGui_PackedString QImage_Bits2(void* ptr)
{
	return ({ char* te11021 = static_cast<char*>(static_cast<void*>(const_cast<uchar*>(static_cast<QImage*>(ptr)->bits()))); QtGui_PackedString { te11021, -1, NULL }; });
}

int QImage_BytesPerLine(void* ptr)
{
	return static_cast<QImage*>(ptr)->bytesPerLine();
}

long long QImage_CacheKey(void* ptr)
{
	return static_cast<QImage*>(ptr)->cacheKey();
}

unsigned int QImage_Color(void* ptr, int i)
{
	return static_cast<QImage*>(ptr)->color(i);
}

void* QImage_ColorSpace(void* ptr)
{
	return new QColorSpace(static_cast<QImage*>(ptr)->colorSpace());
}

struct QtGui_PackedList QImage_ColorTable(void* ptr)
{
	return ({ QVector<QRgb>* tmpValue37f65e = new QVector<QRgb>(static_cast<QImage*>(ptr)->colorTable()); QtGui_PackedList { tmpValue37f65e, tmpValue37f65e->size() }; });
}

struct QtGui_PackedString QImage_ConstBits(void* ptr)
{
	return ({ char* t467df0 = static_cast<char*>(static_cast<void*>(const_cast<uchar*>(static_cast<QImage*>(ptr)->constBits()))); QtGui_PackedString { t467df0, -1, NULL }; });
}

struct QtGui_PackedString QImage_ConstScanLine(void* ptr, int i)
{
	return ({ char* t2457d1 = static_cast<char*>(static_cast<void*>(const_cast<uchar*>(static_cast<QImage*>(ptr)->constScanLine(i)))); QtGui_PackedString { t2457d1, -1, NULL }; });
}

void QImage_ConvertTo(void* ptr, long long format, long long flags)
{
	static_cast<QImage*>(ptr)->convertTo(static_cast<QImage::Format>(format), static_cast<Qt::ImageConversionFlag>(flags));
}

void QImage_ConvertToColorSpace(void* ptr, void* colorSpace)
{
	static_cast<QImage*>(ptr)->convertToColorSpace(*static_cast<QColorSpace*>(colorSpace));
}

void* QImage_ConvertToFormat(void* ptr, long long format, long long flags)
{
	return new QImage(static_cast<QImage*>(ptr)->convertToFormat(static_cast<QImage::Format>(format), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QImage_ConvertToFormat2(void* ptr, long long format, long long flags)
{
	return new QImage(static_cast<QImage*>(ptr)->convertToFormat(static_cast<QImage::Format>(format), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QImage_ConvertToFormat3(void* ptr, long long format, void* colorTable, long long flags)
{
	return new QImage(static_cast<QImage*>(ptr)->convertToFormat(static_cast<QImage::Format>(format), *static_cast<QVector<QRgb>*>(colorTable), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QImage_ConvertedToColorSpace(void* ptr, void* colorSpace)
{
	return new QImage(static_cast<QImage*>(ptr)->convertedToColorSpace(*static_cast<QColorSpace*>(colorSpace)));
}

void* QImage_Copy(void* ptr, void* rectangle)
{
	return new QImage(static_cast<QImage*>(ptr)->copy(*static_cast<QRect*>(rectangle)));
}

void* QImage_Copy2(void* ptr, int x, int y, int width, int height)
{
	return new QImage(static_cast<QImage*>(ptr)->copy(x, y, width, height));
}

void* QImage_CreateAlphaMask(void* ptr, long long flags)
{
	return new QImage(static_cast<QImage*>(ptr)->createAlphaMask(static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QImage_CreateHeuristicMask(void* ptr, char clipTight)
{
	return new QImage(static_cast<QImage*>(ptr)->createHeuristicMask(clipTight != 0));
}

void* QImage_CreateMaskFromColor(void* ptr, unsigned int color, long long mode)
{
	return new QImage(static_cast<QImage*>(ptr)->createMaskFromColor(color, static_cast<Qt::MaskMode>(mode)));
}

double QImage_DevicePixelRatio(void* ptr)
{
	return static_cast<QImage*>(ptr)->devicePixelRatio();
}

int QImage_DotsPerMeterX(void* ptr)
{
	return static_cast<QImage*>(ptr)->dotsPerMeterX();
}

int QImage_DotsPerMeterY(void* ptr)
{
	return static_cast<QImage*>(ptr)->dotsPerMeterY();
}

void QImage_Fill(void* ptr, unsigned int pixelValue)
{
	static_cast<QImage*>(ptr)->fill(pixelValue);
}

void QImage_Fill2(void* ptr, void* color)
{
	static_cast<QImage*>(ptr)->fill(*static_cast<QColor*>(color));
}

void QImage_Fill3(void* ptr, long long color)
{
	static_cast<QImage*>(ptr)->fill(static_cast<Qt::GlobalColor>(color));
}

long long QImage_Format(void* ptr)
{
	return static_cast<QImage*>(ptr)->format();
}

void* QImage_QImage_FromData(char* data, int size, char* format)
{
	return new QImage(QImage::fromData(const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(data))), size, const_cast<const char*>(format)));
}

void* QImage_QImage_FromData2(void* data, char* format)
{
	return new QImage(QImage::fromData(*static_cast<QByteArray*>(data), const_cast<const char*>(format)));
}

char QImage_HasAlphaChannel(void* ptr)
{
	return static_cast<QImage*>(ptr)->hasAlphaChannel();
}

void QImage_InvertPixels(void* ptr, long long mode)
{
	static_cast<QImage*>(ptr)->invertPixels(static_cast<QImage::InvertMode>(mode));
}

char QImage_IsGrayscale(void* ptr)
{
	return static_cast<QImage*>(ptr)->isGrayscale();
}

char QImage_IsNull(void* ptr)
{
	return static_cast<QImage*>(ptr)->isNull();
}

char QImage_Load(void* ptr, struct QtGui_PackedString fileName, char* format)
{
	return static_cast<QImage*>(ptr)->load(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

char QImage_Load2(void* ptr, void* device, char* format)
{
	return static_cast<QImage*>(ptr)->load(static_cast<QIODevice*>(device), const_cast<const char*>(format));
}

char QImage_LoadFromData(void* ptr, char* data, int l, char* format)
{
	return static_cast<QImage*>(ptr)->loadFromData(const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(data))), l, const_cast<const char*>(format));
}

char QImage_LoadFromData2(void* ptr, void* data, char* format)
{
	return static_cast<QImage*>(ptr)->loadFromData(*static_cast<QByteArray*>(data), const_cast<const char*>(format));
}

void* QImage_Mirrored(void* ptr, char horizontal, char vertical)
{
	return new QImage(static_cast<QImage*>(ptr)->mirrored(horizontal != 0, vertical != 0));
}

void* QImage_Mirrored2(void* ptr, char horizontal, char vertical)
{
	return new QImage(static_cast<QImage*>(ptr)->mirrored(horizontal != 0, vertical != 0));
}

void* QImage_Offset(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QImage*>(ptr)->offset(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

unsigned int QImage_Pixel(void* ptr, void* position)
{
	return static_cast<QImage*>(ptr)->pixel(*static_cast<QPoint*>(position));
}

unsigned int QImage_Pixel2(void* ptr, int x, int y)
{
	return static_cast<QImage*>(ptr)->pixel(x, y);
}

void* QImage_PixelColor(void* ptr, void* position)
{
	return new QColor(static_cast<QImage*>(ptr)->pixelColor(*static_cast<QPoint*>(position)));
}

void* QImage_PixelColor2(void* ptr, int x, int y)
{
	return new QColor(static_cast<QImage*>(ptr)->pixelColor(x, y));
}

void* QImage_PixelFormat(void* ptr)
{
	return new QPixelFormat(static_cast<QImage*>(ptr)->pixelFormat());
}

int QImage_PixelIndex(void* ptr, void* position)
{
	return static_cast<QImage*>(ptr)->pixelIndex(*static_cast<QPoint*>(position));
}

int QImage_PixelIndex2(void* ptr, int x, int y)
{
	return static_cast<QImage*>(ptr)->pixelIndex(x, y);
}

void* QImage_Rect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QImage*>(ptr)->rect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QImage_ReinterpretAsFormat(void* ptr, long long format)
{
	return static_cast<QImage*>(ptr)->reinterpretAsFormat(static_cast<QImage::Format>(format));
}

void* QImage_RgbSwapped(void* ptr)
{
	return new QImage(static_cast<QImage*>(ptr)->rgbSwapped());
}

void* QImage_RgbSwapped2(void* ptr)
{
	return new QImage(static_cast<QImage*>(ptr)->rgbSwapped());
}

char QImage_Save(void* ptr, struct QtGui_PackedString fileName, char* format, int quality)
{
	return static_cast<QImage*>(ptr)->save(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format), quality);
}

char QImage_Save2(void* ptr, void* device, char* format, int quality)
{
	return static_cast<QImage*>(ptr)->save(static_cast<QIODevice*>(device), const_cast<const char*>(format), quality);
}

void* QImage_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode)
{
	return new QImage(static_cast<QImage*>(ptr)->scaled(*static_cast<QSize*>(size), static_cast<Qt::AspectRatioMode>(aspectRatioMode), static_cast<Qt::TransformationMode>(transformMode)));
}

void* QImage_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode)
{
	return new QImage(static_cast<QImage*>(ptr)->scaled(width, height, static_cast<Qt::AspectRatioMode>(aspectRatioMode), static_cast<Qt::TransformationMode>(transformMode)));
}

void* QImage_ScaledToHeight(void* ptr, int height, long long mode)
{
	return new QImage(static_cast<QImage*>(ptr)->scaledToHeight(height, static_cast<Qt::TransformationMode>(mode)));
}

void* QImage_ScaledToWidth(void* ptr, int width, long long mode)
{
	return new QImage(static_cast<QImage*>(ptr)->scaledToWidth(width, static_cast<Qt::TransformationMode>(mode)));
}

struct QtGui_PackedString QImage_ScanLine(void* ptr, int i)
{
	return ({ char* t3248e5 = static_cast<char*>(static_cast<void*>(static_cast<QImage*>(ptr)->scanLine(i))); QtGui_PackedString { t3248e5, -1, NULL }; });
}

struct QtGui_PackedString QImage_ScanLine2(void* ptr, int i)
{
	return ({ char* t3248e5 = static_cast<char*>(static_cast<void*>(const_cast<uchar*>(static_cast<QImage*>(ptr)->scanLine(i)))); QtGui_PackedString { t3248e5, -1, NULL }; });
}

void QImage_SetAlphaChannel(void* ptr, void* alphaChannel)
{
	static_cast<QImage*>(ptr)->setAlphaChannel(*static_cast<QImage*>(alphaChannel));
}

void QImage_SetColor(void* ptr, int index, unsigned int colorValue)
{
	static_cast<QImage*>(ptr)->setColor(index, colorValue);
}

void QImage_SetColorCount(void* ptr, int colorCount)
{
	static_cast<QImage*>(ptr)->setColorCount(colorCount);
}

void QImage_SetColorSpace(void* ptr, void* colorSpace)
{
	static_cast<QImage*>(ptr)->setColorSpace(*static_cast<QColorSpace*>(colorSpace));
}

void QImage_SetColorTable(void* ptr, void* colors)
{
	static_cast<QImage*>(ptr)->setColorTable(*static_cast<QVector<QRgb>*>(colors));
}

void QImage_SetDevicePixelRatio(void* ptr, double scaleFactor)
{
	static_cast<QImage*>(ptr)->setDevicePixelRatio(scaleFactor);
}

void QImage_SetDotsPerMeterX(void* ptr, int x)
{
	static_cast<QImage*>(ptr)->setDotsPerMeterX(x);
}

void QImage_SetDotsPerMeterY(void* ptr, int y)
{
	static_cast<QImage*>(ptr)->setDotsPerMeterY(y);
}

void QImage_SetOffset(void* ptr, void* offset)
{
	static_cast<QImage*>(ptr)->setOffset(*static_cast<QPoint*>(offset));
}

void QImage_SetPixel(void* ptr, void* position, unsigned int index_or_rgb)
{
	static_cast<QImage*>(ptr)->setPixel(*static_cast<QPoint*>(position), index_or_rgb);
}

void QImage_SetPixel2(void* ptr, int x, int y, unsigned int index_or_rgb)
{
	static_cast<QImage*>(ptr)->setPixel(x, y, index_or_rgb);
}

void QImage_SetPixelColor(void* ptr, void* position, void* color)
{
	static_cast<QImage*>(ptr)->setPixelColor(*static_cast<QPoint*>(position), *static_cast<QColor*>(color));
}

void QImage_SetPixelColor2(void* ptr, int x, int y, void* color)
{
	static_cast<QImage*>(ptr)->setPixelColor(x, y, *static_cast<QColor*>(color));
}

void QImage_SetText(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString text)
{
	static_cast<QImage*>(ptr)->setText(QString::fromUtf8(key.data, key.len), QString::fromUtf8(text.data, text.len));
}

void* QImage_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QImage*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QImage_SmoothScaled(void* ptr, int w, int h)
{
	return new QImage(static_cast<QImage*>(ptr)->smoothScaled(w, h));
}

void QImage_Swap(void* ptr, void* other)
{
	static_cast<QImage*>(ptr)->swap(*static_cast<QImage*>(other));
}

struct QtGui_PackedString QImage_Text(void* ptr, struct QtGui_PackedString key)
{
	return ({ QByteArray* t3cc0e5 = new QByteArray(static_cast<QImage*>(ptr)->text(QString::fromUtf8(key.data, key.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(t3cc0e5->prepend("WHITESPACE").constData()+10), t3cc0e5->size()-10, t3cc0e5 }; });
}

struct QtGui_PackedString QImage_TextKeys(void* ptr)
{
	return ({ QByteArray* t71d2ff = new QByteArray(static_cast<QImage*>(ptr)->textKeys().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t71d2ff->prepend("WHITESPACE").constData()+10), t71d2ff->size()-10, t71d2ff }; });
}

long long QImage_QImage_ToImageFormat(void* format)
{
	return QImage::toImageFormat(*static_cast<QPixelFormat*>(format));
}

void* QImage_QImage_ToPixelFormat(long long format)
{
	return new QPixelFormat(QImage::toPixelFormat(static_cast<QImage::Format>(format)));
}

void* QImage_Transformed2(void* ptr, void* matrix, long long mode)
{
	return new QImage(static_cast<QImage*>(ptr)->transformed(*static_cast<QTransform*>(matrix), static_cast<Qt::TransformationMode>(mode)));
}

void* QImage_QImage_TrueMatrix2(void* matrix, int width, int height)
{
	return new QTransform(QImage::trueMatrix(*static_cast<QTransform*>(matrix), width, height));
}

char QImage_Valid(void* ptr, void* pos)
{
	return static_cast<QImage*>(ptr)->valid(*static_cast<QPoint*>(pos));
}

char QImage_Valid2(void* ptr, int x, int y)
{
	return static_cast<QImage*>(ptr)->valid(x, y);
}

void QImage_DestroyQImage(void* ptr)
{
	static_cast<QImage*>(ptr)->~QImage();
}

void QImage_DestroyQImageDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QImage_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QImage*>(ptr));
}

unsigned int QImage___colorTable_atList(void* ptr, int i)
{
	return ({QRgb tmp = static_cast<QVector<QRgb>*>(ptr)->at(i); if (i == static_cast<QVector<QRgb>*>(ptr)->size()-1) { static_cast<QVector<QRgb>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QImage___colorTable_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<QRgb>*>(ptr)->append(i);
}

void* QImage___colorTable_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRgb>();
}

unsigned int QImage___convertToFormat_colorTable_atList3(void* ptr, int i)
{
	return ({QRgb tmp = static_cast<QVector<QRgb>*>(ptr)->at(i); if (i == static_cast<QVector<QRgb>*>(ptr)->size()-1) { static_cast<QVector<QRgb>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QImage___convertToFormat_colorTable_setList3(void* ptr, unsigned int i)
{
	static_cast<QVector<QRgb>*>(ptr)->append(i);
}

void* QImage___convertToFormat_colorTable_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRgb>();
}

unsigned int QImage___setColorTable_colors_atList(void* ptr, int i)
{
	return ({QRgb tmp = static_cast<QVector<QRgb>*>(ptr)->at(i); if (i == static_cast<QVector<QRgb>*>(ptr)->size()-1) { static_cast<QVector<QRgb>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QImage___setColorTable_colors_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<QRgb>*>(ptr)->append(i);
}

void* QImage___setColorTable_colors_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRgb>();
}

void* QImage_PaintEngine(void* ptr)
{
	return static_cast<QImage*>(ptr)->paintEngine();
}

void* QImage_PaintEngineDefault(void* ptr)
{
		return static_cast<QImage*>(ptr)->QImage::paintEngine();
}

class MyQImageIOHandler: public QImageIOHandler
{
public:
	MyQImageIOHandler() : QImageIOHandler() {QImageIOHandler_QImageIOHandler_QRegisterMetaType();};
	bool canRead() const { return callbackQImageIOHandler_CanRead(const_cast<void*>(static_cast<const void*>(this))) != 0; };
	int currentImageNumber() const { return callbackQImageIOHandler_CurrentImageNumber(const_cast<void*>(static_cast<const void*>(this))); };
	QRect currentImageRect() const { return *static_cast<QRect*>(callbackQImageIOHandler_CurrentImageRect(const_cast<void*>(static_cast<const void*>(this)))); };
	int imageCount() const { return callbackQImageIOHandler_ImageCount(const_cast<void*>(static_cast<const void*>(this))); };
	bool jumpToImage(int imageNumber) { return callbackQImageIOHandler_JumpToImage(this, imageNumber) != 0; };
	bool jumpToNextImage() { return callbackQImageIOHandler_JumpToNextImage(this) != 0; };
	int loopCount() const { return callbackQImageIOHandler_LoopCount(const_cast<void*>(static_cast<const void*>(this))); };
	int nextImageDelay() const { return callbackQImageIOHandler_NextImageDelay(const_cast<void*>(static_cast<const void*>(this))); };
	QVariant option(QImageIOHandler::ImageOption option) const { return *static_cast<QVariant*>(callbackQImageIOHandler_Option(const_cast<void*>(static_cast<const void*>(this)), option)); };
	bool read(QImage * image) { return callbackQImageIOHandler_Read(this, image) != 0; };
	void setOption(QImageIOHandler::ImageOption option, const QVariant & value) { callbackQImageIOHandler_SetOption(this, option, const_cast<QVariant*>(&value)); };
	bool supportsOption(QImageIOHandler::ImageOption option) const { return callbackQImageIOHandler_SupportsOption(const_cast<void*>(static_cast<const void*>(this)), option) != 0; };
	bool write(const QImage & image) { return callbackQImageIOHandler_Write(this, const_cast<QImage*>(&image)) != 0; };
	 ~MyQImageIOHandler() { callbackQImageIOHandler_DestroyQImageIOHandler(this); };
};

Q_DECLARE_METATYPE(QImageIOHandler*)
Q_DECLARE_METATYPE(MyQImageIOHandler*)

int QImageIOHandler_QImageIOHandler_QRegisterMetaType(){qRegisterMetaType<QImageIOHandler*>(); return qRegisterMetaType<MyQImageIOHandler*>();}

void* QImageIOHandler_NewQImageIOHandler()
{
	return new MyQImageIOHandler();
}

char QImageIOHandler_CanRead(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->canRead();
}

int QImageIOHandler_CurrentImageNumber(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->currentImageNumber();
}

int QImageIOHandler_CurrentImageNumberDefault(void* ptr)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::currentImageNumber();
}

void* QImageIOHandler_CurrentImageRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QImageIOHandler*>(ptr)->currentImageRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QImageIOHandler_CurrentImageRectDefault(void* ptr)
{
		return ({ QRect tmpValue = static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::currentImageRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QImageIOHandler_Device(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->device();
}

void* QImageIOHandler_Format(void* ptr)
{
	return new QByteArray(static_cast<QImageIOHandler*>(ptr)->format());
}

int QImageIOHandler_ImageCount(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->imageCount();
}

int QImageIOHandler_ImageCountDefault(void* ptr)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::imageCount();
}

char QImageIOHandler_JumpToImage(void* ptr, int imageNumber)
{
	return static_cast<QImageIOHandler*>(ptr)->jumpToImage(imageNumber);
}

char QImageIOHandler_JumpToImageDefault(void* ptr, int imageNumber)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::jumpToImage(imageNumber);
}

char QImageIOHandler_JumpToNextImage(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->jumpToNextImage();
}

char QImageIOHandler_JumpToNextImageDefault(void* ptr)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::jumpToNextImage();
}

int QImageIOHandler_LoopCount(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->loopCount();
}

int QImageIOHandler_LoopCountDefault(void* ptr)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::loopCount();
}

int QImageIOHandler_NextImageDelay(void* ptr)
{
	return static_cast<QImageIOHandler*>(ptr)->nextImageDelay();
}

int QImageIOHandler_NextImageDelayDefault(void* ptr)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::nextImageDelay();
}

void* QImageIOHandler_Option(void* ptr, long long option)
{
	return new QVariant(static_cast<QImageIOHandler*>(ptr)->option(static_cast<QImageIOHandler::ImageOption>(option)));
}

void* QImageIOHandler_OptionDefault(void* ptr, long long option)
{
		return new QVariant(static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::option(static_cast<QImageIOHandler::ImageOption>(option)));
}

char QImageIOHandler_Read(void* ptr, void* image)
{
	return static_cast<QImageIOHandler*>(ptr)->read(static_cast<QImage*>(image));
}

void QImageIOHandler_SetDevice(void* ptr, void* device)
{
	static_cast<QImageIOHandler*>(ptr)->setDevice(static_cast<QIODevice*>(device));
}

void QImageIOHandler_SetFormat(void* ptr, void* format)
{
	static_cast<QImageIOHandler*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

void QImageIOHandler_SetFormat2(void* ptr, void* format)
{
	static_cast<QImageIOHandler*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

void QImageIOHandler_SetOption(void* ptr, long long option, void* value)
{
	static_cast<QImageIOHandler*>(ptr)->setOption(static_cast<QImageIOHandler::ImageOption>(option), *static_cast<QVariant*>(value));
}

void QImageIOHandler_SetOptionDefault(void* ptr, long long option, void* value)
{
		static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::setOption(static_cast<QImageIOHandler::ImageOption>(option), *static_cast<QVariant*>(value));
}

char QImageIOHandler_SupportsOption(void* ptr, long long option)
{
	return static_cast<QImageIOHandler*>(ptr)->supportsOption(static_cast<QImageIOHandler::ImageOption>(option));
}

char QImageIOHandler_SupportsOptionDefault(void* ptr, long long option)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::supportsOption(static_cast<QImageIOHandler::ImageOption>(option));
}

char QImageIOHandler_Write(void* ptr, void* image)
{
	return static_cast<QImageIOHandler*>(ptr)->write(*static_cast<QImage*>(image));
}

char QImageIOHandler_WriteDefault(void* ptr, void* image)
{
		return static_cast<QImageIOHandler*>(ptr)->QImageIOHandler::write(*static_cast<QImage*>(image));
}

void QImageIOHandler_DestroyQImageIOHandler(void* ptr)
{
	static_cast<QImageIOHandler*>(ptr)->~QImageIOHandler();
}

void QImageIOHandler_DestroyQImageIOHandlerDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQImageIOPlugin: public QImageIOPlugin
{
public:
	MyQImageIOPlugin(QObject *parent = Q_NULLPTR) : QImageIOPlugin(parent) {QImageIOPlugin_QImageIOPlugin_QRegisterMetaType();};
	QImageIOPlugin::Capabilities capabilities(QIODevice * device, const QByteArray & format) const { return static_cast<QImageIOPlugin::Capability>(callbackQImageIOPlugin_Capabilities(const_cast<void*>(static_cast<const void*>(this)), device, const_cast<QByteArray*>(&format))); };
	QImageIOHandler * create(QIODevice * device, const QByteArray & format) const { return static_cast<QImageIOHandler*>(callbackQImageIOPlugin_Create(const_cast<void*>(static_cast<const void*>(this)), device, const_cast<QByteArray*>(&format))); };
	 ~MyQImageIOPlugin() { callbackQImageIOPlugin_DestroyQImageIOPlugin(this); };
	void childEvent(QChildEvent * event) { callbackQImageIOPlugin_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQImageIOPlugin_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQImageIOPlugin_CustomEvent(this, event); };
	void deleteLater() { callbackQImageIOPlugin_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQImageIOPlugin_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQImageIOPlugin_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQImageIOPlugin_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQImageIOPlugin_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQImageIOPlugin_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQImageIOPlugin_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQImageIOPlugin_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QImageIOPlugin*)
Q_DECLARE_METATYPE(MyQImageIOPlugin*)

int QImageIOPlugin_QImageIOPlugin_QRegisterMetaType(){qRegisterMetaType<QImageIOPlugin*>(); return qRegisterMetaType<MyQImageIOPlugin*>();}

void* QImageIOPlugin_NewQImageIOPlugin(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQImageIOPlugin(static_cast<QWindow*>(parent));
	} else {
		return new MyQImageIOPlugin(static_cast<QObject*>(parent));
	}
}

long long QImageIOPlugin_Capabilities(void* ptr, void* device, void* format)
{
	return static_cast<QImageIOPlugin*>(ptr)->capabilities(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format));
}

void* QImageIOPlugin_Create(void* ptr, void* device, void* format)
{
	return static_cast<QImageIOPlugin*>(ptr)->create(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format));
}

void QImageIOPlugin_DestroyQImageIOPlugin(void* ptr)
{
	static_cast<QImageIOPlugin*>(ptr)->~QImageIOPlugin();
}

void QImageIOPlugin_DestroyQImageIOPluginDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QImageIOPlugin___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QImageIOPlugin___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QImageIOPlugin___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QImageIOPlugin___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageIOPlugin___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageIOPlugin___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageIOPlugin___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QImageIOPlugin___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QImageIOPlugin___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QImageIOPlugin___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QImageIOPlugin___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QImageIOPlugin___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QImageIOPlugin_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QImageIOPlugin_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QImageIOPlugin_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::customEvent(static_cast<QEvent*>(event));
}

void QImageIOPlugin_DeleteLaterDefault(void* ptr)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::deleteLater();
}

void QImageIOPlugin_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QImageIOPlugin_EventDefault(void* ptr, void* e)
{
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::event(static_cast<QEvent*>(e));
}

char QImageIOPlugin_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QImageIOPlugin_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::metaObject());
}

void QImageIOPlugin_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QImageIOPlugin*>(ptr)->QImageIOPlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QImageReader*)
void* QImageReader_NewQImageReader()
{
	return new QImageReader();
}

void* QImageReader_NewQImageReader2(void* device, void* format)
{
	return new QImageReader(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format));
}

void* QImageReader_NewQImageReader3(struct QtGui_PackedString fileName, void* format)
{
	return new QImageReader(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format));
}

char QImageReader_AutoDetectImageFormat(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->autoDetectImageFormat();
}

char QImageReader_AutoTransform(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->autoTransform();
}

void* QImageReader_BackgroundColor(void* ptr)
{
	return new QColor(static_cast<QImageReader*>(ptr)->backgroundColor());
}

char QImageReader_CanRead(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->canRead();
}

void* QImageReader_ClipRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QImageReader*>(ptr)->clipRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

int QImageReader_CurrentImageNumber(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->currentImageNumber();
}

void* QImageReader_CurrentImageRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QImageReader*>(ptr)->currentImageRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QImageReader_DecideFormatFromContent(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->decideFormatFromContent();
}

void* QImageReader_Device(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->device();
}

long long QImageReader_Error(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->error();
}

struct QtGui_PackedString QImageReader_ErrorString(void* ptr)
{
	return ({ QByteArray* t444465 = new QByteArray(static_cast<QImageReader*>(ptr)->errorString().toUtf8()); QtGui_PackedString { const_cast<char*>(t444465->prepend("WHITESPACE").constData()+10), t444465->size()-10, t444465 }; });
}

struct QtGui_PackedString QImageReader_FileName(void* ptr)
{
	return ({ QByteArray* t78ed9f = new QByteArray(static_cast<QImageReader*>(ptr)->fileName().toUtf8()); QtGui_PackedString { const_cast<char*>(t78ed9f->prepend("WHITESPACE").constData()+10), t78ed9f->size()-10, t78ed9f }; });
}

void* QImageReader_Format(void* ptr)
{
	return new QByteArray(static_cast<QImageReader*>(ptr)->format());
}

int QImageReader_ImageCount(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->imageCount();
}

long long QImageReader_ImageFormat(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->imageFormat();
}

void* QImageReader_QImageReader_ImageFormat2(struct QtGui_PackedString fileName)
{
	return new QByteArray(QImageReader::imageFormat(QString::fromUtf8(fileName.data, fileName.len)));
}

void* QImageReader_QImageReader_ImageFormat3(void* device)
{
	return new QByteArray(QImageReader::imageFormat(static_cast<QIODevice*>(device)));
}

struct QtGui_PackedList QImageReader_QImageReader_ImageFormatsForMimeType(void* mimeType)
{
	return ({ QList<QByteArray>* tmpValuea96946 = new QList<QByteArray>(QImageReader::imageFormatsForMimeType(*static_cast<QByteArray*>(mimeType))); QtGui_PackedList { tmpValuea96946, tmpValuea96946->size() }; });
}

char QImageReader_JumpToImage(void* ptr, int imageNumber)
{
	return static_cast<QImageReader*>(ptr)->jumpToImage(imageNumber);
}

char QImageReader_JumpToNextImage(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->jumpToNextImage();
}

int QImageReader_LoopCount(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->loopCount();
}

int QImageReader_NextImageDelay(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->nextImageDelay();
}

int QImageReader_Quality(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->quality();
}

void* QImageReader_Read(void* ptr)
{
	return new QImage(static_cast<QImageReader*>(ptr)->read());
}

char QImageReader_Read2(void* ptr, void* image)
{
	return static_cast<QImageReader*>(ptr)->read(static_cast<QImage*>(image));
}

void* QImageReader_ScaledClipRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QImageReader*>(ptr)->scaledClipRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QImageReader_ScaledSize(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QImageReader*>(ptr)->scaledSize(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QImageReader_SetAutoDetectImageFormat(void* ptr, char enabled)
{
	static_cast<QImageReader*>(ptr)->setAutoDetectImageFormat(enabled != 0);
}

void QImageReader_SetAutoTransform(void* ptr, char enabled)
{
	static_cast<QImageReader*>(ptr)->setAutoTransform(enabled != 0);
}

void QImageReader_SetBackgroundColor(void* ptr, void* color)
{
	static_cast<QImageReader*>(ptr)->setBackgroundColor(*static_cast<QColor*>(color));
}

void QImageReader_SetClipRect(void* ptr, void* rect)
{
	static_cast<QImageReader*>(ptr)->setClipRect(*static_cast<QRect*>(rect));
}

void QImageReader_SetDecideFormatFromContent(void* ptr, char ignored)
{
	static_cast<QImageReader*>(ptr)->setDecideFormatFromContent(ignored != 0);
}

void QImageReader_SetDevice(void* ptr, void* device)
{
	static_cast<QImageReader*>(ptr)->setDevice(static_cast<QIODevice*>(device));
}

void QImageReader_SetFileName(void* ptr, struct QtGui_PackedString fileName)
{
	static_cast<QImageReader*>(ptr)->setFileName(QString::fromUtf8(fileName.data, fileName.len));
}

void QImageReader_SetFormat(void* ptr, void* format)
{
	static_cast<QImageReader*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

void QImageReader_SetQuality(void* ptr, int quality)
{
	static_cast<QImageReader*>(ptr)->setQuality(quality);
}

void QImageReader_SetScaledClipRect(void* ptr, void* rect)
{
	static_cast<QImageReader*>(ptr)->setScaledClipRect(*static_cast<QRect*>(rect));
}

void QImageReader_SetScaledSize(void* ptr, void* size)
{
	static_cast<QImageReader*>(ptr)->setScaledSize(*static_cast<QSize*>(size));
}

void* QImageReader_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QImageReader*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QImageReader_SubType(void* ptr)
{
	return new QByteArray(static_cast<QImageReader*>(ptr)->subType());
}

struct QtGui_PackedList QImageReader_QImageReader_SupportedImageFormats()
{
	return ({ QList<QByteArray>* tmpValue0ee4ca = new QList<QByteArray>(QImageReader::supportedImageFormats()); QtGui_PackedList { tmpValue0ee4ca, tmpValue0ee4ca->size() }; });
}

struct QtGui_PackedList QImageReader_QImageReader_SupportedMimeTypes()
{
	return ({ QList<QByteArray>* tmpValueaf60c6 = new QList<QByteArray>(QImageReader::supportedMimeTypes()); QtGui_PackedList { tmpValueaf60c6, tmpValueaf60c6->size() }; });
}

struct QtGui_PackedList QImageReader_SupportedSubTypes(void* ptr)
{
	return ({ QList<QByteArray>* tmpValuead2d7a = new QList<QByteArray>(static_cast<QImageReader*>(ptr)->supportedSubTypes()); QtGui_PackedList { tmpValuead2d7a, tmpValuead2d7a->size() }; });
}

char QImageReader_SupportsAnimation(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->supportsAnimation();
}

char QImageReader_SupportsOption(void* ptr, long long option)
{
	return static_cast<QImageReader*>(ptr)->supportsOption(static_cast<QImageIOHandler::ImageOption>(option));
}

struct QtGui_PackedString QImageReader_Text(void* ptr, struct QtGui_PackedString key)
{
	return ({ QByteArray* t392633 = new QByteArray(static_cast<QImageReader*>(ptr)->text(QString::fromUtf8(key.data, key.len)).toUtf8()); QtGui_PackedString { const_cast<char*>(t392633->prepend("WHITESPACE").constData()+10), t392633->size()-10, t392633 }; });
}

struct QtGui_PackedString QImageReader_TextKeys(void* ptr)
{
	return ({ QByteArray* t436ca8 = new QByteArray(static_cast<QImageReader*>(ptr)->textKeys().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t436ca8->prepend("WHITESPACE").constData()+10), t436ca8->size()-10, t436ca8 }; });
}

long long QImageReader_Transformation(void* ptr)
{
	return static_cast<QImageReader*>(ptr)->transformation();
}

void QImageReader_DestroyQImageReader(void* ptr)
{
	static_cast<QImageReader*>(ptr)->~QImageReader();
}

void* QImageReader___imageFormatsForMimeType_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageReader___imageFormatsForMimeType_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageReader___imageFormatsForMimeType_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageReader___supportedImageFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageReader___supportedImageFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageReader___supportedImageFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageReader___supportedMimeTypes_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageReader___supportedMimeTypes_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageReader___supportedMimeTypes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageReader___supportedSubTypes_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageReader___supportedSubTypes_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageReader___supportedSubTypes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

Q_DECLARE_METATYPE(QImageWriter*)
void* QImageWriter_NewQImageWriter()
{
	return new QImageWriter();
}

void* QImageWriter_NewQImageWriter2(void* device, void* format)
{
	return new QImageWriter(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format));
}

void* QImageWriter_NewQImageWriter3(struct QtGui_PackedString fileName, void* format)
{
	return new QImageWriter(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format));
}

char QImageWriter_CanWrite(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->canWrite();
}

int QImageWriter_Compression(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->compression();
}

void* QImageWriter_Device(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->device();
}

long long QImageWriter_Error(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->error();
}

struct QtGui_PackedString QImageWriter_ErrorString(void* ptr)
{
	return ({ QByteArray* t4f91d9 = new QByteArray(static_cast<QImageWriter*>(ptr)->errorString().toUtf8()); QtGui_PackedString { const_cast<char*>(t4f91d9->prepend("WHITESPACE").constData()+10), t4f91d9->size()-10, t4f91d9 }; });
}

struct QtGui_PackedString QImageWriter_FileName(void* ptr)
{
	return ({ QByteArray* tb587a3 = new QByteArray(static_cast<QImageWriter*>(ptr)->fileName().toUtf8()); QtGui_PackedString { const_cast<char*>(tb587a3->prepend("WHITESPACE").constData()+10), tb587a3->size()-10, tb587a3 }; });
}

void* QImageWriter_Format(void* ptr)
{
	return new QByteArray(static_cast<QImageWriter*>(ptr)->format());
}

struct QtGui_PackedList QImageWriter_QImageWriter_ImageFormatsForMimeType(void* mimeType)
{
	return ({ QList<QByteArray>* tmpValue84c90f = new QList<QByteArray>(QImageWriter::imageFormatsForMimeType(*static_cast<QByteArray*>(mimeType))); QtGui_PackedList { tmpValue84c90f, tmpValue84c90f->size() }; });
}

char QImageWriter_OptimizedWrite(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->optimizedWrite();
}

char QImageWriter_ProgressiveScanWrite(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->progressiveScanWrite();
}

int QImageWriter_Quality(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->quality();
}

void QImageWriter_SetCompression(void* ptr, int compression)
{
	static_cast<QImageWriter*>(ptr)->setCompression(compression);
}

void QImageWriter_SetDevice(void* ptr, void* device)
{
	static_cast<QImageWriter*>(ptr)->setDevice(static_cast<QIODevice*>(device));
}

void QImageWriter_SetFileName(void* ptr, struct QtGui_PackedString fileName)
{
	static_cast<QImageWriter*>(ptr)->setFileName(QString::fromUtf8(fileName.data, fileName.len));
}

void QImageWriter_SetFormat(void* ptr, void* format)
{
	static_cast<QImageWriter*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

void QImageWriter_SetOptimizedWrite(void* ptr, char optimize)
{
	static_cast<QImageWriter*>(ptr)->setOptimizedWrite(optimize != 0);
}

void QImageWriter_SetProgressiveScanWrite(void* ptr, char progressive)
{
	static_cast<QImageWriter*>(ptr)->setProgressiveScanWrite(progressive != 0);
}

void QImageWriter_SetQuality(void* ptr, int quality)
{
	static_cast<QImageWriter*>(ptr)->setQuality(quality);
}

void QImageWriter_SetSubType(void* ptr, void* ty)
{
	static_cast<QImageWriter*>(ptr)->setSubType(*static_cast<QByteArray*>(ty));
}

void QImageWriter_SetText(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString text)
{
	static_cast<QImageWriter*>(ptr)->setText(QString::fromUtf8(key.data, key.len), QString::fromUtf8(text.data, text.len));
}

void QImageWriter_SetTransformation(void* ptr, long long transform)
{
	static_cast<QImageWriter*>(ptr)->setTransformation(static_cast<QImageIOHandler::Transformation>(transform));
}

void* QImageWriter_SubType(void* ptr)
{
	return new QByteArray(static_cast<QImageWriter*>(ptr)->subType());
}

struct QtGui_PackedList QImageWriter_QImageWriter_SupportedImageFormats()
{
	return ({ QList<QByteArray>* tmpValue0d09bb = new QList<QByteArray>(QImageWriter::supportedImageFormats()); QtGui_PackedList { tmpValue0d09bb, tmpValue0d09bb->size() }; });
}

struct QtGui_PackedList QImageWriter_QImageWriter_SupportedMimeTypes()
{
	return ({ QList<QByteArray>* tmpValue58bbbe = new QList<QByteArray>(QImageWriter::supportedMimeTypes()); QtGui_PackedList { tmpValue58bbbe, tmpValue58bbbe->size() }; });
}

struct QtGui_PackedList QImageWriter_SupportedSubTypes(void* ptr)
{
	return ({ QList<QByteArray>* tmpValue401023 = new QList<QByteArray>(static_cast<QImageWriter*>(ptr)->supportedSubTypes()); QtGui_PackedList { tmpValue401023, tmpValue401023->size() }; });
}

char QImageWriter_SupportsOption(void* ptr, long long option)
{
	return static_cast<QImageWriter*>(ptr)->supportsOption(static_cast<QImageIOHandler::ImageOption>(option));
}

long long QImageWriter_Transformation(void* ptr)
{
	return static_cast<QImageWriter*>(ptr)->transformation();
}

char QImageWriter_Write(void* ptr, void* image)
{
	return static_cast<QImageWriter*>(ptr)->write(*static_cast<QImage*>(image));
}

void QImageWriter_DestroyQImageWriter(void* ptr)
{
	static_cast<QImageWriter*>(ptr)->~QImageWriter();
}

void* QImageWriter___imageFormatsForMimeType_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageWriter___imageFormatsForMimeType_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageWriter___imageFormatsForMimeType_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageWriter___supportedImageFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageWriter___supportedImageFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageWriter___supportedImageFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageWriter___supportedMimeTypes_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageWriter___supportedMimeTypes_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageWriter___supportedMimeTypes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QImageWriter___supportedSubTypes_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QImageWriter___supportedSubTypes_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QImageWriter___supportedSubTypes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

class MyQInputEvent: public QInputEvent
{
public:
};

Q_DECLARE_METATYPE(QInputEvent*)
Q_DECLARE_METATYPE(MyQInputEvent*)

int QInputEvent_QInputEvent_QRegisterMetaType(){qRegisterMetaType<QInputEvent*>(); return qRegisterMetaType<MyQInputEvent*>();}

long long QInputEvent_Modifiers(void* ptr)
{
	return static_cast<QInputEvent*>(ptr)->modifiers();
}

unsigned long QInputEvent_Timestamp(void* ptr)
{
	return static_cast<QInputEvent*>(ptr)->timestamp();
}

class MyQInputMethod: public QInputMethod
{
public:
	void Signal_AnchorRectangleChanged() { callbackQInputMethod_AnchorRectangleChanged(this); };
	void Signal_AnimatingChanged() { callbackQInputMethod_AnimatingChanged(this); };
	void commit() { callbackQInputMethod_Commit(this); };
	void Signal_CursorRectangleChanged() { callbackQInputMethod_CursorRectangleChanged(this); };
	void hide() { callbackQInputMethod_Hide(this); };
	void Signal_InputDirectionChanged(Qt::LayoutDirection newDirection) { callbackQInputMethod_InputDirectionChanged(this, newDirection); };
	void Signal_InputItemClipRectangleChanged() { callbackQInputMethod_InputItemClipRectangleChanged(this); };
	void invokeAction(QInputMethod::Action a, int cursorPosition) { callbackQInputMethod_InvokeAction(this, a, cursorPosition); };
	void Signal_KeyboardRectangleChanged() { callbackQInputMethod_KeyboardRectangleChanged(this); };
	void Signal_LocaleChanged() { callbackQInputMethod_LocaleChanged(this); };
	void reset() { callbackQInputMethod_Reset(this); };
	void show() { callbackQInputMethod_Show(this); };
	void update(Qt::InputMethodQueries queries) { callbackQInputMethod_Update(this, queries); };
	void Signal_VisibleChanged() { callbackQInputMethod_VisibleChanged(this); };
	void childEvent(QChildEvent * event) { callbackQInputMethod_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQInputMethod_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQInputMethod_CustomEvent(this, event); };
	void deleteLater() { callbackQInputMethod_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQInputMethod_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQInputMethod_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQInputMethod_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQInputMethod_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQInputMethod_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQInputMethod_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQInputMethod_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QInputMethod*)
Q_DECLARE_METATYPE(MyQInputMethod*)

int QInputMethod_QInputMethod_QRegisterMetaType(){qRegisterMetaType<QInputMethod*>(); return qRegisterMetaType<MyQInputMethod*>();}

void* QInputMethod_AnchorRectangle(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QInputMethod*>(ptr)->anchorRectangle(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QInputMethod_ConnectAnchorRectangleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::anchorRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_AnchorRectangleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectAnchorRectangleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::anchorRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_AnchorRectangleChanged));
}

void QInputMethod_AnchorRectangleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->anchorRectangleChanged();
}

void QInputMethod_ConnectAnimatingChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::animatingChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_AnimatingChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectAnimatingChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::animatingChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_AnimatingChanged));
}

void QInputMethod_AnimatingChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->animatingChanged();
}

void QInputMethod_Commit(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "commit");
}

void QInputMethod_CommitDefault(void* ptr)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::commit();
}

void* QInputMethod_CursorRectangle(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QInputMethod*>(ptr)->cursorRectangle(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QInputMethod_ConnectCursorRectangleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::cursorRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_CursorRectangleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectCursorRectangleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::cursorRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_CursorRectangleChanged));
}

void QInputMethod_CursorRectangleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->cursorRectangleChanged();
}

void QInputMethod_Hide(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "hide");
}

void QInputMethod_HideDefault(void* ptr)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::hide();
}

long long QInputMethod_InputDirection(void* ptr)
{
	return static_cast<QInputMethod*>(ptr)->inputDirection();
}

void QInputMethod_ConnectInputDirectionChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::LayoutDirection>();
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)(Qt::LayoutDirection)>(&QInputMethod::inputDirectionChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)(Qt::LayoutDirection)>(&MyQInputMethod::Signal_InputDirectionChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectInputDirectionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)(Qt::LayoutDirection)>(&QInputMethod::inputDirectionChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)(Qt::LayoutDirection)>(&MyQInputMethod::Signal_InputDirectionChanged));
}

void QInputMethod_InputDirectionChanged(void* ptr, long long newDirection)
{
	static_cast<QInputMethod*>(ptr)->inputDirectionChanged(static_cast<Qt::LayoutDirection>(newDirection));
}

void* QInputMethod_InputItemClipRectangle(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QInputMethod*>(ptr)->inputItemClipRectangle(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QInputMethod_ConnectInputItemClipRectangleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::inputItemClipRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_InputItemClipRectangleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectInputItemClipRectangleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::inputItemClipRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_InputItemClipRectangleChanged));
}

void QInputMethod_InputItemClipRectangleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->inputItemClipRectangleChanged();
}

void* QInputMethod_InputItemRectangle(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QInputMethod*>(ptr)->inputItemRectangle(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QInputMethod_InputItemTransform(void* ptr)
{
	return new QTransform(static_cast<QInputMethod*>(ptr)->inputItemTransform());
}

void QInputMethod_InvokeAction(void* ptr, long long a, int cursorPosition)
{
	qRegisterMetaType<QInputMethod::Action>();
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "invokeAction", Q_ARG(QInputMethod::Action, static_cast<QInputMethod::Action>(a)), Q_ARG(int, cursorPosition));
}

void QInputMethod_InvokeActionDefault(void* ptr, long long a, int cursorPosition)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::invokeAction(static_cast<QInputMethod::Action>(a), cursorPosition);
}

char QInputMethod_IsAnimating(void* ptr)
{
	return static_cast<QInputMethod*>(ptr)->isAnimating();
}

char QInputMethod_IsVisible(void* ptr)
{
	return static_cast<QInputMethod*>(ptr)->isVisible();
}

void* QInputMethod_KeyboardRectangle(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QInputMethod*>(ptr)->keyboardRectangle(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QInputMethod_ConnectKeyboardRectangleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::keyboardRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_KeyboardRectangleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectKeyboardRectangleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::keyboardRectangleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_KeyboardRectangleChanged));
}

void QInputMethod_KeyboardRectangleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->keyboardRectangleChanged();
}

void* QInputMethod_Locale(void* ptr)
{
	return new QLocale(static_cast<QInputMethod*>(ptr)->locale());
}

void QInputMethod_ConnectLocaleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::localeChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_LocaleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectLocaleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::localeChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_LocaleChanged));
}

void QInputMethod_LocaleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->localeChanged();
}

void* QInputMethod_QInputMethod_QueryFocusObject(long long query, void* argument)
{
	return new QVariant(QInputMethod::queryFocusObject(static_cast<Qt::InputMethodQuery>(query), *static_cast<QVariant*>(argument)));
}

void QInputMethod_Reset(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "reset");
}

void QInputMethod_ResetDefault(void* ptr)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::reset();
}

void QInputMethod_SetInputItemRectangle(void* ptr, void* rect)
{
	static_cast<QInputMethod*>(ptr)->setInputItemRectangle(*static_cast<QRectF*>(rect));
}

void QInputMethod_SetInputItemTransform(void* ptr, void* transform)
{
	static_cast<QInputMethod*>(ptr)->setInputItemTransform(*static_cast<QTransform*>(transform));
}

void QInputMethod_SetVisible(void* ptr, char visible)
{
	static_cast<QInputMethod*>(ptr)->setVisible(visible != 0);
}

void QInputMethod_Show(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "show");
}

void QInputMethod_ShowDefault(void* ptr)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::show();
}

void QInputMethod_Update(void* ptr, long long queries)
{
	qRegisterMetaType<Qt::InputMethodQueries>();
	QMetaObject::invokeMethod(static_cast<QInputMethod*>(ptr), "update", Q_ARG(Qt::InputMethodQueries, static_cast<Qt::InputMethodQuery>(queries)));
}

void QInputMethod_UpdateDefault(void* ptr, long long queries)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::update(static_cast<Qt::InputMethodQuery>(queries));
}

void QInputMethod_ConnectVisibleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::visibleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_VisibleChanged), static_cast<Qt::ConnectionType>(t));
}

void QInputMethod_DisconnectVisibleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QInputMethod*>(ptr), static_cast<void (QInputMethod::*)()>(&QInputMethod::visibleChanged), static_cast<MyQInputMethod*>(ptr), static_cast<void (MyQInputMethod::*)()>(&MyQInputMethod::Signal_VisibleChanged));
}

void QInputMethod_VisibleChanged(void* ptr)
{
	static_cast<QInputMethod*>(ptr)->visibleChanged();
}

void* QInputMethod___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QInputMethod___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QInputMethod___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QInputMethod___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QInputMethod___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QInputMethod___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QInputMethod___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QInputMethod___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QInputMethod___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QInputMethod___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QInputMethod___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QInputMethod___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QInputMethod_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::childEvent(static_cast<QChildEvent*>(event));
}

void QInputMethod_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QInputMethod_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::customEvent(static_cast<QEvent*>(event));
}

void QInputMethod_DeleteLaterDefault(void* ptr)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::deleteLater();
}

void QInputMethod_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QInputMethod_EventDefault(void* ptr, void* e)
{
		return static_cast<QInputMethod*>(ptr)->QInputMethod::event(static_cast<QEvent*>(e));
}

char QInputMethod_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QInputMethod*>(ptr)->QInputMethod::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QInputMethod*>(ptr)->QInputMethod::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QInputMethod*>(ptr)->QInputMethod::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QInputMethod*>(ptr)->QInputMethod::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QInputMethod*>(ptr)->QInputMethod::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QInputMethod_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QInputMethod*>(ptr)->QInputMethod::metaObject());
}

void QInputMethod_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QInputMethod*>(ptr)->QInputMethod::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQInputMethodEvent: public QInputMethodEvent
{
public:
	MyQInputMethodEvent() : QInputMethodEvent() {QInputMethodEvent_QInputMethodEvent_QRegisterMetaType();};
	MyQInputMethodEvent(const QInputMethodEvent &other) : QInputMethodEvent(other) {QInputMethodEvent_QInputMethodEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QInputMethodEvent*)
Q_DECLARE_METATYPE(MyQInputMethodEvent*)

int QInputMethodEvent_QInputMethodEvent_QRegisterMetaType(){qRegisterMetaType<QInputMethodEvent*>(); return qRegisterMetaType<MyQInputMethodEvent*>();}

void* QInputMethodEvent_NewQInputMethodEvent()
{
	return new MyQInputMethodEvent();
}

void* QInputMethodEvent_NewQInputMethodEvent3(void* other)
{
	return new MyQInputMethodEvent(*static_cast<QInputMethodEvent*>(other));
}

struct QtGui_PackedString QInputMethodEvent_CommitString(void* ptr)
{
	return ({ QByteArray* t69832e = new QByteArray(static_cast<QInputMethodEvent*>(ptr)->commitString().toUtf8()); QtGui_PackedString { const_cast<char*>(t69832e->prepend("WHITESPACE").constData()+10), t69832e->size()-10, t69832e }; });
}

struct QtGui_PackedString QInputMethodEvent_PreeditString(void* ptr)
{
	return ({ QByteArray* t9860e5 = new QByteArray(static_cast<QInputMethodEvent*>(ptr)->preeditString().toUtf8()); QtGui_PackedString { const_cast<char*>(t9860e5->prepend("WHITESPACE").constData()+10), t9860e5->size()-10, t9860e5 }; });
}

int QInputMethodEvent_ReplacementLength(void* ptr)
{
	return static_cast<QInputMethodEvent*>(ptr)->replacementLength();
}

int QInputMethodEvent_ReplacementStart(void* ptr)
{
	return static_cast<QInputMethodEvent*>(ptr)->replacementStart();
}

void QInputMethodEvent_SetCommitString(void* ptr, struct QtGui_PackedString commitString, int replaceFrom, int replaceLength)
{
	static_cast<QInputMethodEvent*>(ptr)->setCommitString(QString::fromUtf8(commitString.data, commitString.len), replaceFrom, replaceLength);
}

void* QInputMethodEvent___attrs_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QInputMethodEvent::Attribute>();
}

void* QInputMethodEvent___setAttrs__newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QInputMethodEvent::Attribute>();
}

class MyQInputMethodQueryEvent: public QInputMethodQueryEvent
{
public:
	MyQInputMethodQueryEvent(Qt::InputMethodQueries queries) : QInputMethodQueryEvent(queries) {QInputMethodQueryEvent_QInputMethodQueryEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QInputMethodQueryEvent*)
Q_DECLARE_METATYPE(MyQInputMethodQueryEvent*)

int QInputMethodQueryEvent_QInputMethodQueryEvent_QRegisterMetaType(){qRegisterMetaType<QInputMethodQueryEvent*>(); return qRegisterMetaType<MyQInputMethodQueryEvent*>();}

void* QInputMethodQueryEvent_NewQInputMethodQueryEvent(long long queries)
{
	return new MyQInputMethodQueryEvent(static_cast<Qt::InputMethodQuery>(queries));
}

long long QInputMethodQueryEvent_Queries(void* ptr)
{
	return static_cast<QInputMethodQueryEvent*>(ptr)->queries();
}

void QInputMethodQueryEvent_SetValue(void* ptr, long long query, void* value)
{
	static_cast<QInputMethodQueryEvent*>(ptr)->setValue(static_cast<Qt::InputMethodQuery>(query), *static_cast<QVariant*>(value));
}

void* QInputMethodQueryEvent_Value(void* ptr, long long query)
{
	return new QVariant(static_cast<QInputMethodQueryEvent*>(ptr)->value(static_cast<Qt::InputMethodQuery>(query)));
}

void* QInputMethodQueryEvent___m_values_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QInputMethodQueryEvent::QueryPair>();
}

void* QInputMethodQueryEvent___setM_values__newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QInputMethodQueryEvent::QueryPair>();
}

class MyQIntValidator: public QIntValidator
{
public:
	MyQIntValidator(QObject *parent = Q_NULLPTR) : QIntValidator(parent) {QIntValidator_QIntValidator_QRegisterMetaType();};
	MyQIntValidator(int minimum, int maximum, QObject *parent = Q_NULLPTR) : QIntValidator(minimum, maximum, parent) {QIntValidator_QIntValidator_QRegisterMetaType();};
	void Signal_BottomChanged(int bottom) { callbackQIntValidator_BottomChanged(this, bottom); };
	void fixup(QString & input) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };callbackQValidator_Fixup(const_cast<void*>(static_cast<const void*>(this)), inputPacked); };
	void setRange(int bottom, int top) { callbackQIntValidator_SetRange(this, bottom, top); };
	void Signal_TopChanged(int top) { callbackQIntValidator_TopChanged(this, top); };
	QValidator::State validate(QString & input, int & pos) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };return static_cast<QValidator::State>(callbackQIntValidator_Validate(const_cast<void*>(static_cast<const void*>(this)), inputPacked, pos)); };
	 ~MyQIntValidator() { callbackQIntValidator_DestroyQIntValidator(this); };
	void Signal_Changed() { callbackQValidator_Changed(this); };
	void childEvent(QChildEvent * event) { callbackQValidator_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQValidator_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQValidator_CustomEvent(this, event); };
	void deleteLater() { callbackQValidator_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQValidator_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQValidator_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQValidator_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQValidator_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQValidator_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQValidator_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQValidator_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QIntValidator*)
Q_DECLARE_METATYPE(MyQIntValidator*)

int QIntValidator_QIntValidator_QRegisterMetaType(){qRegisterMetaType<QIntValidator*>(); return qRegisterMetaType<MyQIntValidator*>();}

void* QIntValidator_NewQIntValidator(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(static_cast<QWindow*>(parent));
	} else {
		return new MyQIntValidator(static_cast<QObject*>(parent));
	}
}

void* QIntValidator_NewQIntValidator2(int minimum, int maximum, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQIntValidator(minimum, maximum, static_cast<QWindow*>(parent));
	} else {
		return new MyQIntValidator(minimum, maximum, static_cast<QObject*>(parent));
	}
}

int QIntValidator_Bottom(void* ptr)
{
	return static_cast<QIntValidator*>(ptr)->bottom();
}

void QIntValidator_ConnectBottomChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QIntValidator*>(ptr), static_cast<void (QIntValidator::*)(int)>(&QIntValidator::bottomChanged), static_cast<MyQIntValidator*>(ptr), static_cast<void (MyQIntValidator::*)(int)>(&MyQIntValidator::Signal_BottomChanged), static_cast<Qt::ConnectionType>(t));
}

void QIntValidator_DisconnectBottomChanged(void* ptr)
{
	QObject::disconnect(static_cast<QIntValidator*>(ptr), static_cast<void (QIntValidator::*)(int)>(&QIntValidator::bottomChanged), static_cast<MyQIntValidator*>(ptr), static_cast<void (MyQIntValidator::*)(int)>(&MyQIntValidator::Signal_BottomChanged));
}

void QIntValidator_BottomChanged(void* ptr, int bottom)
{
	static_cast<QIntValidator*>(ptr)->bottomChanged(bottom);
}

void QIntValidator_SetBottom(void* ptr, int vin)
{
	static_cast<QIntValidator*>(ptr)->setBottom(vin);
}

void QIntValidator_SetRange(void* ptr, int bottom, int top)
{
	static_cast<QIntValidator*>(ptr)->setRange(bottom, top);
}

void QIntValidator_SetRangeDefault(void* ptr, int bottom, int top)
{
		static_cast<QIntValidator*>(ptr)->QIntValidator::setRange(bottom, top);
}

void QIntValidator_SetTop(void* ptr, int vin)
{
	static_cast<QIntValidator*>(ptr)->setTop(vin);
}

int QIntValidator_Top(void* ptr)
{
	return static_cast<QIntValidator*>(ptr)->top();
}

void QIntValidator_ConnectTopChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QIntValidator*>(ptr), static_cast<void (QIntValidator::*)(int)>(&QIntValidator::topChanged), static_cast<MyQIntValidator*>(ptr), static_cast<void (MyQIntValidator::*)(int)>(&MyQIntValidator::Signal_TopChanged), static_cast<Qt::ConnectionType>(t));
}

void QIntValidator_DisconnectTopChanged(void* ptr)
{
	QObject::disconnect(static_cast<QIntValidator*>(ptr), static_cast<void (QIntValidator::*)(int)>(&QIntValidator::topChanged), static_cast<MyQIntValidator*>(ptr), static_cast<void (MyQIntValidator::*)(int)>(&MyQIntValidator::Signal_TopChanged));
}

void QIntValidator_TopChanged(void* ptr, int top)
{
	static_cast<QIntValidator*>(ptr)->topChanged(top);
}

long long QIntValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos)
{
	return static_cast<QIntValidator*>(ptr)->validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

long long QIntValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos)
{
		return static_cast<QIntValidator*>(ptr)->QIntValidator::validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

void QIntValidator_DestroyQIntValidator(void* ptr)
{
	static_cast<QIntValidator*>(ptr)->~QIntValidator();
}

void QIntValidator_DestroyQIntValidatorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQKeyEvent: public QKeyEvent
{
public:
	MyQKeyEvent(QEvent::Type ty, int key, Qt::KeyboardModifiers modifiers, const QString &text = QString(), bool autorep = false, ushort count = 1) : QKeyEvent(ty, key, modifiers, text, autorep, count) {QKeyEvent_QKeyEvent_QRegisterMetaType();};
	MyQKeyEvent(QEvent::Type ty, int key, Qt::KeyboardModifiers modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, const QString &text = QString(), bool autorep = false, ushort count = 1) : QKeyEvent(ty, key, modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, text, autorep, count) {QKeyEvent_QKeyEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QKeyEvent*)
Q_DECLARE_METATYPE(MyQKeyEvent*)

int QKeyEvent_QKeyEvent_QRegisterMetaType(){qRegisterMetaType<QKeyEvent*>(); return qRegisterMetaType<MyQKeyEvent*>();}

void* QKeyEvent_NewQKeyEvent(long long ty, int key, long long modifiers, struct QtGui_PackedString text, char autorep, unsigned short count)
{
	return new MyQKeyEvent(static_cast<QEvent::Type>(ty), key, static_cast<Qt::KeyboardModifier>(modifiers), QString::fromUtf8(text.data, text.len), autorep != 0, count);
}

void* QKeyEvent_NewQKeyEvent2(long long ty, int key, long long modifiers, unsigned int nativeScanCode, unsigned int nativeVirtualKey, unsigned int nativeModifiers, struct QtGui_PackedString text, char autorep, unsigned short count)
{
	return new MyQKeyEvent(static_cast<QEvent::Type>(ty), key, static_cast<Qt::KeyboardModifier>(modifiers), nativeScanCode, nativeVirtualKey, nativeModifiers, QString::fromUtf8(text.data, text.len), autorep != 0, count);
}

int QKeyEvent_Count(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->count();
}

char QKeyEvent_IsAutoRepeat(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->isAutoRepeat();
}

int QKeyEvent_Key(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->key();
}

char QKeyEvent_Matches(void* ptr, long long key)
{
	return static_cast<QKeyEvent*>(ptr)->matches(static_cast<QKeySequence::StandardKey>(key));
}

unsigned int QKeyEvent_NativeModifiers(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->nativeModifiers();
}

unsigned int QKeyEvent_NativeScanCode(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->nativeScanCode();
}

unsigned int QKeyEvent_NativeVirtualKey(void* ptr)
{
	return static_cast<QKeyEvent*>(ptr)->nativeVirtualKey();
}

struct QtGui_PackedString QKeyEvent_Text(void* ptr)
{
	return ({ QByteArray* tac962f = new QByteArray(static_cast<QKeyEvent*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(tac962f->prepend("WHITESPACE").constData()+10), tac962f->size()-10, tac962f }; });
}

Q_DECLARE_METATYPE(QKeySequence)
Q_DECLARE_METATYPE(QKeySequence*)
void* QKeySequence_NewQKeySequence()
{
	return new QKeySequence();
}

void* QKeySequence_NewQKeySequence2(struct QtGui_PackedString key, long long format)
{
	return new QKeySequence(QString::fromUtf8(key.data, key.len), static_cast<QKeySequence::SequenceFormat>(format));
}

void* QKeySequence_NewQKeySequence3(int k1, int k2, int k3, int k4)
{
	return new QKeySequence(k1, k2, k3, k4);
}

void* QKeySequence_NewQKeySequence4(void* keysequence)
{
	return new QKeySequence(*static_cast<QKeySequence*>(keysequence));
}

void* QKeySequence_NewQKeySequence5(long long key)
{
	return new QKeySequence(static_cast<QKeySequence::StandardKey>(key));
}

int QKeySequence_Count(void* ptr)
{
	return static_cast<QKeySequence*>(ptr)->count();
}

void* QKeySequence_QKeySequence_FromString(struct QtGui_PackedString str, long long format)
{
	return new QKeySequence(QKeySequence::fromString(QString::fromUtf8(str.data, str.len), static_cast<QKeySequence::SequenceFormat>(format)));
}

char QKeySequence_IsEmpty(void* ptr)
{
	return static_cast<QKeySequence*>(ptr)->isEmpty();
}

struct QtGui_PackedList QKeySequence_QKeySequence_KeyBindings(long long key)
{
	return ({ QList<QKeySequence>* tmpValue0650c1 = new QList<QKeySequence>(QKeySequence::keyBindings(static_cast<QKeySequence::StandardKey>(key))); QtGui_PackedList { tmpValue0650c1, tmpValue0650c1->size() }; });
}

struct QtGui_PackedList QKeySequence_QKeySequence_ListFromString(struct QtGui_PackedString str, long long format)
{
	return ({ QList<QKeySequence>* tmpValuedec9d9 = new QList<QKeySequence>(QKeySequence::listFromString(QString::fromUtf8(str.data, str.len), static_cast<QKeySequence::SequenceFormat>(format))); QtGui_PackedList { tmpValuedec9d9, tmpValuedec9d9->size() }; });
}

struct QtGui_PackedString QKeySequence_QKeySequence_ListToString(void* list, long long format)
{
	return ({ QByteArray* tdd68e7 = new QByteArray(QKeySequence::listToString(*static_cast<QList<QKeySequence>*>(list), static_cast<QKeySequence::SequenceFormat>(format)).toUtf8()); QtGui_PackedString { const_cast<char*>(tdd68e7->prepend("WHITESPACE").constData()+10), tdd68e7->size()-10, tdd68e7 }; });
}

long long QKeySequence_Matches(void* ptr, void* seq)
{
	return static_cast<QKeySequence*>(ptr)->matches(*static_cast<QKeySequence*>(seq));
}

void* QKeySequence_QKeySequence_Mnemonic(struct QtGui_PackedString text)
{
	return new QKeySequence(QKeySequence::mnemonic(QString::fromUtf8(text.data, text.len)));
}

void QKeySequence_Swap(void* ptr, void* other)
{
	static_cast<QKeySequence*>(ptr)->swap(*static_cast<QKeySequence*>(other));
}

struct QtGui_PackedString QKeySequence_ToString(void* ptr, long long format)
{
	return ({ QByteArray* t3bf8a8 = new QByteArray(static_cast<QKeySequence*>(ptr)->toString(static_cast<QKeySequence::SequenceFormat>(format)).toUtf8()); QtGui_PackedString { const_cast<char*>(t3bf8a8->prepend("WHITESPACE").constData()+10), t3bf8a8->size()-10, t3bf8a8 }; });
}

void QKeySequence_DestroyQKeySequence(void* ptr)
{
	static_cast<QKeySequence*>(ptr)->~QKeySequence();
}

void* QKeySequence___keyBindings_atList(void* ptr, int i)
{
	return new QKeySequence(({QKeySequence tmp = static_cast<QList<QKeySequence>*>(ptr)->at(i); if (i == static_cast<QList<QKeySequence>*>(ptr)->size()-1) { static_cast<QList<QKeySequence>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QKeySequence___keyBindings_setList(void* ptr, void* i)
{
	static_cast<QList<QKeySequence>*>(ptr)->append(*static_cast<QKeySequence*>(i));
}

void* QKeySequence___keyBindings_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QKeySequence>();
}

void* QKeySequence___listFromString_atList(void* ptr, int i)
{
	return new QKeySequence(({QKeySequence tmp = static_cast<QList<QKeySequence>*>(ptr)->at(i); if (i == static_cast<QList<QKeySequence>*>(ptr)->size()-1) { static_cast<QList<QKeySequence>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QKeySequence___listFromString_setList(void* ptr, void* i)
{
	static_cast<QList<QKeySequence>*>(ptr)->append(*static_cast<QKeySequence*>(i));
}

void* QKeySequence___listFromString_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QKeySequence>();
}

void* QKeySequence___listToString_list_atList(void* ptr, int i)
{
	return new QKeySequence(({QKeySequence tmp = static_cast<QList<QKeySequence>*>(ptr)->at(i); if (i == static_cast<QList<QKeySequence>*>(ptr)->size()-1) { static_cast<QList<QKeySequence>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QKeySequence___listToString_list_setList(void* ptr, void* i)
{
	static_cast<QList<QKeySequence>*>(ptr)->append(*static_cast<QKeySequence*>(i));
}

void* QKeySequence___listToString_list_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QKeySequence>();
}

Q_DECLARE_METATYPE(QLinearGradient)
Q_DECLARE_METATYPE(QLinearGradient*)
void* QLinearGradient_NewQLinearGradient()
{
	return new QLinearGradient();
}

void* QLinearGradient_NewQLinearGradient2(void* start, void* finalStop)
{
	return new QLinearGradient(*static_cast<QPointF*>(start), *static_cast<QPointF*>(finalStop));
}

void* QLinearGradient_NewQLinearGradient3(double x1, double y1, double x2, double y2)
{
	return new QLinearGradient(x1, y1, x2, y2);
}

void* QLinearGradient_FinalStop(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QLinearGradient*>(ptr)->finalStop(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QLinearGradient_SetFinalStop(void* ptr, void* stop)
{
	static_cast<QLinearGradient*>(ptr)->setFinalStop(*static_cast<QPointF*>(stop));
}

void QLinearGradient_SetFinalStop2(void* ptr, double x, double y)
{
	static_cast<QLinearGradient*>(ptr)->setFinalStop(x, y);
}

void QLinearGradient_SetStart(void* ptr, void* start)
{
	static_cast<QLinearGradient*>(ptr)->setStart(*static_cast<QPointF*>(start));
}

void QLinearGradient_SetStart2(void* ptr, double x, double y)
{
	static_cast<QLinearGradient*>(ptr)->setStart(x, y);
}

void* QLinearGradient_Start(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QLinearGradient*>(ptr)->start(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

Q_DECLARE_METATYPE(QMatrix)
Q_DECLARE_METATYPE(QMatrix*)
void* QMatrix_NewQMatrix2()
{
	return new QMatrix();
}

void* QMatrix_NewQMatrix3(double m11, double m12, double m21, double m22, double dx, double dy)
{
	return new QMatrix(m11, m12, m21, m22, dx, dy);
}

void* QMatrix_NewQMatrix5(void* matrix)
{
	return new QMatrix(*static_cast<QMatrix*>(matrix));
}

double QMatrix_Determinant(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->determinant();
}

double QMatrix_Dx(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->dx();
}

double QMatrix_Dy(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->dy();
}

void* QMatrix_Inverted(void* ptr, char* invertible)
{
	return new QMatrix(static_cast<QMatrix*>(ptr)->inverted(reinterpret_cast<bool*>(invertible)));
}

char QMatrix_IsIdentity(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->isIdentity();
}

char QMatrix_IsInvertible(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->isInvertible();
}

double QMatrix_M11(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->m11();
}

double QMatrix_M12(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->m12();
}

double QMatrix_M21(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->m21();
}

double QMatrix_M22(void* ptr)
{
	return static_cast<QMatrix*>(ptr)->m22();
}

void QMatrix_Map(void* ptr, double x, double y, double tx, double ty)
{
	static_cast<QMatrix*>(ptr)->map(x, y, &tx, &ty);
}

void QMatrix_Map2(void* ptr, int x, int y, int tx, int ty)
{
	static_cast<QMatrix*>(ptr)->map(x, y, &tx, &ty);
}

void* QMatrix_Map3(void* ptr, void* point)
{
	return ({ QPoint tmpValue = static_cast<QMatrix*>(ptr)->map(*static_cast<QPoint*>(point)); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QMatrix_Map4(void* ptr, void* point)
{
	return ({ QPointF tmpValue = static_cast<QMatrix*>(ptr)->map(*static_cast<QPointF*>(point)); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QMatrix_Map5(void* ptr, void* line)
{
	return ({ QLine tmpValue = static_cast<QMatrix*>(ptr)->map(*static_cast<QLine*>(line)); new QLine(tmpValue.p1(), tmpValue.p2()); });
}

void* QMatrix_Map6(void* ptr, void* line)
{
	return ({ QLineF tmpValue = static_cast<QMatrix*>(ptr)->map(*static_cast<QLineF*>(line)); new QLineF(tmpValue.p1(), tmpValue.p2()); });
}

void* QMatrix_Map7(void* ptr, void* polygon)
{
	return new QPolygonF(static_cast<QMatrix*>(ptr)->map(*static_cast<QPolygonF*>(polygon)));
}

void* QMatrix_Map8(void* ptr, void* polygon)
{
	return new QPolygon(static_cast<QMatrix*>(ptr)->map(*static_cast<QPolygon*>(polygon)));
}

void* QMatrix_Map9(void* ptr, void* region)
{
	return new QRegion(static_cast<QMatrix*>(ptr)->map(*static_cast<QRegion*>(region)));
}

void* QMatrix_Map10(void* ptr, void* path)
{
	return new QPainterPath(static_cast<QMatrix*>(ptr)->map(*static_cast<QPainterPath*>(path)));
}

void* QMatrix_MapRect(void* ptr, void* rectangle)
{
	return ({ QRectF tmpValue = static_cast<QMatrix*>(ptr)->mapRect(*static_cast<QRectF*>(rectangle)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QMatrix_MapRect2(void* ptr, void* rectangle)
{
	return ({ QRect tmpValue = static_cast<QMatrix*>(ptr)->mapRect(*static_cast<QRect*>(rectangle)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QMatrix_MapToPolygon(void* ptr, void* rectangle)
{
	return new QPolygon(static_cast<QMatrix*>(ptr)->mapToPolygon(*static_cast<QRect*>(rectangle)));
}

void QMatrix_Reset(void* ptr)
{
	static_cast<QMatrix*>(ptr)->reset();
}

void* QMatrix_Rotate(void* ptr, double degrees)
{
	return new QMatrix(static_cast<QMatrix*>(ptr)->rotate(degrees));
}

void* QMatrix_Scale(void* ptr, double sx, double sy)
{
	return new QMatrix(static_cast<QMatrix*>(ptr)->scale(sx, sy));
}

void QMatrix_SetMatrix(void* ptr, double m11, double m12, double m21, double m22, double dx, double dy)
{
	static_cast<QMatrix*>(ptr)->setMatrix(m11, m12, m21, m22, dx, dy);
}

void* QMatrix_Shear(void* ptr, double sh, double sv)
{
	return new QMatrix(static_cast<QMatrix*>(ptr)->shear(sh, sv));
}

void* QMatrix_Translate(void* ptr, double dx, double dy)
{
	return new QMatrix(static_cast<QMatrix*>(ptr)->translate(dx, dy));
}

Q_DECLARE_METATYPE(QMatrix4x4)
Q_DECLARE_METATYPE(QMatrix4x4*)
void* QMatrix4x4_NewQMatrix4x4()
{
	return new QMatrix4x4();
}

void* QMatrix4x4_NewQMatrix4x43(float values)
{
	return new QMatrix4x4(const_cast<const float*>(&values));
}

void* QMatrix4x4_NewQMatrix4x44(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)
{
	return new QMatrix4x4(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
}

void* QMatrix4x4_Column(void* ptr, int index)
{
	return new QVector4D(static_cast<QMatrix4x4*>(ptr)->column(index));
}

float QMatrix4x4_ConstData(void* ptr)
{
	return *static_cast<QMatrix4x4*>(ptr)->constData();
}

void QMatrix4x4_CopyDataTo(void* ptr, float values)
{
	static_cast<QMatrix4x4*>(ptr)->copyDataTo(&values);
}

float QMatrix4x4_Data(void* ptr)
{
	return *static_cast<QMatrix4x4*>(ptr)->data();
}

float QMatrix4x4_Data2(void* ptr)
{
	return *static_cast<QMatrix4x4*>(ptr)->data();
}

double QMatrix4x4_Determinant(void* ptr)
{
	return static_cast<QMatrix4x4*>(ptr)->determinant();
}

void QMatrix4x4_Fill(void* ptr, float value)
{
	static_cast<QMatrix4x4*>(ptr)->fill(value);
}

void QMatrix4x4_Frustum(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane)
{
	static_cast<QMatrix4x4*>(ptr)->frustum(left, right, bottom, top, nearPlane, farPlane);
}

void* QMatrix4x4_Inverted(void* ptr, char* invertible)
{
	return new QMatrix4x4(static_cast<QMatrix4x4*>(ptr)->inverted(reinterpret_cast<bool*>(invertible)));
}

char QMatrix4x4_IsAffine(void* ptr)
{
	return static_cast<QMatrix4x4*>(ptr)->isAffine();
}

char QMatrix4x4_IsIdentity(void* ptr)
{
	return static_cast<QMatrix4x4*>(ptr)->isIdentity();
}

void QMatrix4x4_LookAt(void* ptr, void* eye, void* center, void* up)
{
	static_cast<QMatrix4x4*>(ptr)->lookAt(*static_cast<QVector3D*>(eye), *static_cast<QVector3D*>(center), *static_cast<QVector3D*>(up));
}

void* QMatrix4x4_Map(void* ptr, void* point)
{
	return ({ QPoint tmpValue = static_cast<QMatrix4x4*>(ptr)->map(*static_cast<QPoint*>(point)); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QMatrix4x4_Map2(void* ptr, void* point)
{
	return ({ QPointF tmpValue = static_cast<QMatrix4x4*>(ptr)->map(*static_cast<QPointF*>(point)); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QMatrix4x4_Map3(void* ptr, void* point)
{
	return new QVector3D(static_cast<QMatrix4x4*>(ptr)->map(*static_cast<QVector3D*>(point)));
}

void* QMatrix4x4_Map4(void* ptr, void* point)
{
	return new QVector4D(static_cast<QMatrix4x4*>(ptr)->map(*static_cast<QVector4D*>(point)));
}

void* QMatrix4x4_MapRect(void* ptr, void* rect)
{
	return ({ QRect tmpValue = static_cast<QMatrix4x4*>(ptr)->mapRect(*static_cast<QRect*>(rect)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QMatrix4x4_MapRect2(void* ptr, void* rect)
{
	return ({ QRectF tmpValue = static_cast<QMatrix4x4*>(ptr)->mapRect(*static_cast<QRectF*>(rect)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QMatrix4x4_MapVector(void* ptr, void* vector)
{
	return new QVector3D(static_cast<QMatrix4x4*>(ptr)->mapVector(*static_cast<QVector3D*>(vector)));
}

void QMatrix4x4_Optimize(void* ptr)
{
	static_cast<QMatrix4x4*>(ptr)->optimize();
}

void QMatrix4x4_Ortho(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane)
{
	static_cast<QMatrix4x4*>(ptr)->ortho(left, right, bottom, top, nearPlane, farPlane);
}

void QMatrix4x4_Ortho2(void* ptr, void* rect)
{
	static_cast<QMatrix4x4*>(ptr)->ortho(*static_cast<QRect*>(rect));
}

void QMatrix4x4_Ortho3(void* ptr, void* rect)
{
	static_cast<QMatrix4x4*>(ptr)->ortho(*static_cast<QRectF*>(rect));
}

void QMatrix4x4_Perspective(void* ptr, float verticalAngle, float aspectRatio, float nearPlane, float farPlane)
{
	static_cast<QMatrix4x4*>(ptr)->perspective(verticalAngle, aspectRatio, nearPlane, farPlane);
}

void QMatrix4x4_Rotate(void* ptr, float angle, void* vector)
{
	static_cast<QMatrix4x4*>(ptr)->rotate(angle, *static_cast<QVector3D*>(vector));
}

void QMatrix4x4_Rotate2(void* ptr, float angle, float x, float y, float z)
{
	static_cast<QMatrix4x4*>(ptr)->rotate(angle, x, y, z);
}

void QMatrix4x4_Rotate3(void* ptr, void* quaternion)
{
	static_cast<QMatrix4x4*>(ptr)->rotate(*static_cast<QQuaternion*>(quaternion));
}

void* QMatrix4x4_Row(void* ptr, int index)
{
	return new QVector4D(static_cast<QMatrix4x4*>(ptr)->row(index));
}

void QMatrix4x4_Scale(void* ptr, void* vector)
{
	static_cast<QMatrix4x4*>(ptr)->scale(*static_cast<QVector3D*>(vector));
}

void QMatrix4x4_Scale2(void* ptr, float x, float y)
{
	static_cast<QMatrix4x4*>(ptr)->scale(x, y);
}

void QMatrix4x4_Scale3(void* ptr, float x, float y, float z)
{
	static_cast<QMatrix4x4*>(ptr)->scale(x, y, z);
}

void QMatrix4x4_Scale4(void* ptr, float factor)
{
	static_cast<QMatrix4x4*>(ptr)->scale(factor);
}

void QMatrix4x4_SetColumn(void* ptr, int index, void* value)
{
	static_cast<QMatrix4x4*>(ptr)->setColumn(index, *static_cast<QVector4D*>(value));
}

void QMatrix4x4_SetRow(void* ptr, int index, void* value)
{
	static_cast<QMatrix4x4*>(ptr)->setRow(index, *static_cast<QVector4D*>(value));
}

void QMatrix4x4_SetToIdentity(void* ptr)
{
	static_cast<QMatrix4x4*>(ptr)->setToIdentity();
}

void* QMatrix4x4_ToTransform(void* ptr)
{
	return new QTransform(static_cast<QMatrix4x4*>(ptr)->toTransform());
}

void* QMatrix4x4_ToTransform2(void* ptr, float distanceToPlane)
{
	return new QTransform(static_cast<QMatrix4x4*>(ptr)->toTransform(distanceToPlane));
}

void QMatrix4x4_Translate(void* ptr, void* vector)
{
	static_cast<QMatrix4x4*>(ptr)->translate(*static_cast<QVector3D*>(vector));
}

void QMatrix4x4_Translate2(void* ptr, float x, float y)
{
	static_cast<QMatrix4x4*>(ptr)->translate(x, y);
}

void QMatrix4x4_Translate3(void* ptr, float x, float y, float z)
{
	static_cast<QMatrix4x4*>(ptr)->translate(x, y, z);
}

void* QMatrix4x4_Transposed(void* ptr)
{
	return new QMatrix4x4(static_cast<QMatrix4x4*>(ptr)->transposed());
}

void QMatrix4x4_Viewport(void* ptr, float left, float bottom, float width, float height, float nearPlane, float farPlane)
{
	static_cast<QMatrix4x4*>(ptr)->viewport(left, bottom, width, height, nearPlane, farPlane);
}

void QMatrix4x4_Viewport2(void* ptr, void* rect)
{
	static_cast<QMatrix4x4*>(ptr)->viewport(*static_cast<QRectF*>(rect));
}

class MyQMouseEvent: public QMouseEvent
{
public:
	MyQMouseEvent(QEvent::Type ty, const QPointF &localPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) : QMouseEvent(ty, localPos, button, buttons, modifiers) {QMouseEvent_QMouseEvent_QRegisterMetaType();};
	MyQMouseEvent(QEvent::Type ty, const QPointF &localPos, const QPointF &screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) : QMouseEvent(ty, localPos, screenPos, button, buttons, modifiers) {QMouseEvent_QMouseEvent_QRegisterMetaType();};
	MyQMouseEvent(QEvent::Type ty, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers) : QMouseEvent(ty, localPos, windowPos, screenPos, button, buttons, modifiers) {QMouseEvent_QMouseEvent_QRegisterMetaType();};
	MyQMouseEvent(QEvent::Type ty, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::MouseEventSource source) : QMouseEvent(ty, localPos, windowPos, screenPos, button, buttons, modifiers, source) {QMouseEvent_QMouseEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QMouseEvent*)
Q_DECLARE_METATYPE(MyQMouseEvent*)

int QMouseEvent_QMouseEvent_QRegisterMetaType(){qRegisterMetaType<QMouseEvent*>(); return qRegisterMetaType<MyQMouseEvent*>();}

void* QMouseEvent_NewQMouseEvent(long long ty, void* localPos, long long button, long long buttons, long long modifiers)
{
	return new MyQMouseEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(localPos), static_cast<Qt::MouseButton>(button), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers));
}

void* QMouseEvent_NewQMouseEvent2(long long ty, void* localPos, void* screenPos, long long button, long long buttons, long long modifiers)
{
	return new MyQMouseEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(localPos), *static_cast<QPointF*>(screenPos), static_cast<Qt::MouseButton>(button), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers));
}

void* QMouseEvent_NewQMouseEvent3(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers)
{
	return new MyQMouseEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(localPos), *static_cast<QPointF*>(windowPos), *static_cast<QPointF*>(screenPos), static_cast<Qt::MouseButton>(button), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers));
}

void* QMouseEvent_NewQMouseEvent4(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers, long long source)
{
	return new MyQMouseEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(localPos), *static_cast<QPointF*>(windowPos), *static_cast<QPointF*>(screenPos), static_cast<Qt::MouseButton>(button), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers), static_cast<Qt::MouseEventSource>(source));
}

long long QMouseEvent_Button(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->button();
}

long long QMouseEvent_Buttons(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->buttons();
}

long long QMouseEvent_Flags(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->flags();
}

void* QMouseEvent_GlobalPos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QMouseEvent*>(ptr)->globalPos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

int QMouseEvent_GlobalX(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->globalX();
}

int QMouseEvent_GlobalY(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->globalY();
}

void* QMouseEvent_LocalPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QMouseEvent*>(ptr)->localPos());
}

void* QMouseEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QMouseEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QMouseEvent_ScreenPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QMouseEvent*>(ptr)->screenPos());
}

long long QMouseEvent_Source(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->source();
}

void* QMouseEvent_WindowPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QMouseEvent*>(ptr)->windowPos());
}

int QMouseEvent_X(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->x();
}

int QMouseEvent_Y(void* ptr)
{
	return static_cast<QMouseEvent*>(ptr)->y();
}

class MyQMoveEvent: public QMoveEvent
{
public:
	MyQMoveEvent(const QPoint &pos, const QPoint &oldPos) : QMoveEvent(pos, oldPos) {QMoveEvent_QMoveEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QMoveEvent*)
Q_DECLARE_METATYPE(MyQMoveEvent*)

int QMoveEvent_QMoveEvent_QRegisterMetaType(){qRegisterMetaType<QMoveEvent*>(); return qRegisterMetaType<MyQMoveEvent*>();}

void* QMoveEvent_NewQMoveEvent(void* pos, void* oldPos)
{
	return new MyQMoveEvent(*static_cast<QPoint*>(pos), *static_cast<QPoint*>(oldPos));
}

void* QMoveEvent_OldPos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QMoveEvent*>(ptr)->oldPos());
}

void* QMoveEvent_Pos(void* ptr)
{
	return const_cast<QPoint*>(&static_cast<QMoveEvent*>(ptr)->pos());
}

class MyQMovie: public QMovie
{
public:
	MyQMovie(QObject *parent = Q_NULLPTR) : QMovie(parent) {QMovie_QMovie_QRegisterMetaType();};
	MyQMovie(QIODevice *device, const QByteArray &format = QByteArray(), QObject *parent = Q_NULLPTR) : QMovie(device, format, parent) {QMovie_QMovie_QRegisterMetaType();};
	MyQMovie(const QString &fileName, const QByteArray &format = QByteArray(), QObject *parent = Q_NULLPTR) : QMovie(fileName, format, parent) {QMovie_QMovie_QRegisterMetaType();};
	void Signal_Error(QImageReader::ImageReaderError error) { callbackQMovie_Error(this, error); };
	void Signal_Finished() { callbackQMovie_Finished(this); };
	void Signal_FrameChanged(int frameNumber) { callbackQMovie_FrameChanged(this, frameNumber); };
	bool jumpToNextFrame() { return callbackQMovie_JumpToNextFrame(this) != 0; };
	void Signal_Resized(const QSize & size) { callbackQMovie_Resized(this, const_cast<QSize*>(&size)); };
	void setPaused(bool paused) { callbackQMovie_SetPaused(this, paused); };
	void setSpeed(int percentSpeed) { callbackQMovie_SetSpeed(this, percentSpeed); };
	void start() { callbackQMovie_Start(this); };
	void Signal_Started() { callbackQMovie_Started(this); };
	void Signal_StateChanged(QMovie::MovieState state) { callbackQMovie_StateChanged(this, state); };
	void stop() { callbackQMovie_Stop(this); };
	void Signal_Updated(const QRect & rect) { callbackQMovie_Updated(this, const_cast<QRect*>(&rect)); };
	 ~MyQMovie() { callbackQMovie_DestroyQMovie(this); };
	void childEvent(QChildEvent * event) { callbackQMovie_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQMovie_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQMovie_CustomEvent(this, event); };
	void deleteLater() { callbackQMovie_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQMovie_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQMovie_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQMovie_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQMovie_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQMovie_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQMovie_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQMovie_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QMovie*)
Q_DECLARE_METATYPE(MyQMovie*)

int QMovie_QMovie_QRegisterMetaType(){qRegisterMetaType<QMovie*>(); return qRegisterMetaType<MyQMovie*>();}

void* QMovie_NewQMovie(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QWindow*>(parent));
	} else {
		return new MyQMovie(static_cast<QObject*>(parent));
	}
}

void* QMovie_NewQMovie2(void* device, void* format, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QWindow*>(parent));
	} else {
		return new MyQMovie(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format), static_cast<QObject*>(parent));
	}
}

void* QMovie_NewQMovie3(struct QtGui_PackedString fileName, void* format, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QWindow*>(parent));
	} else {
		return new MyQMovie(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format), static_cast<QObject*>(parent));
	}
}

void* QMovie_BackgroundColor(void* ptr)
{
	return new QColor(static_cast<QMovie*>(ptr)->backgroundColor());
}

long long QMovie_CacheMode(void* ptr)
{
	return static_cast<QMovie*>(ptr)->cacheMode();
}

int QMovie_CurrentFrameNumber(void* ptr)
{
	return static_cast<QMovie*>(ptr)->currentFrameNumber();
}

void* QMovie_CurrentImage(void* ptr)
{
	return new QImage(static_cast<QMovie*>(ptr)->currentImage());
}

void* QMovie_CurrentPixmap(void* ptr)
{
	return new QPixmap(static_cast<QMovie*>(ptr)->currentPixmap());
}

void* QMovie_Device(void* ptr)
{
	return static_cast<QMovie*>(ptr)->device();
}

void QMovie_ConnectError(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(QImageReader::ImageReaderError)>(&QMovie::error), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(QImageReader::ImageReaderError)>(&MyQMovie::Signal_Error), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectError(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(QImageReader::ImageReaderError)>(&QMovie::error), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(QImageReader::ImageReaderError)>(&MyQMovie::Signal_Error));
}

void QMovie_Error(void* ptr, long long error)
{
	static_cast<QMovie*>(ptr)->error(static_cast<QImageReader::ImageReaderError>(error));
}

struct QtGui_PackedString QMovie_FileName(void* ptr)
{
	return ({ QByteArray* t73bc7e = new QByteArray(static_cast<QMovie*>(ptr)->fileName().toUtf8()); QtGui_PackedString { const_cast<char*>(t73bc7e->prepend("WHITESPACE").constData()+10), t73bc7e->size()-10, t73bc7e }; });
}

void QMovie_ConnectFinished(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)()>(&QMovie::finished), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)()>(&MyQMovie::Signal_Finished), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectFinished(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)()>(&QMovie::finished), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)()>(&MyQMovie::Signal_Finished));
}

void QMovie_Finished(void* ptr)
{
	static_cast<QMovie*>(ptr)->finished();
}

void* QMovie_Format(void* ptr)
{
	return new QByteArray(static_cast<QMovie*>(ptr)->format());
}

void QMovie_ConnectFrameChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(int)>(&QMovie::frameChanged), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(int)>(&MyQMovie::Signal_FrameChanged), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectFrameChanged(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(int)>(&QMovie::frameChanged), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(int)>(&MyQMovie::Signal_FrameChanged));
}

void QMovie_FrameChanged(void* ptr, int frameNumber)
{
	static_cast<QMovie*>(ptr)->frameChanged(frameNumber);
}

int QMovie_FrameCount(void* ptr)
{
	return static_cast<QMovie*>(ptr)->frameCount();
}

void* QMovie_FrameRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QMovie*>(ptr)->frameRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QMovie_IsValid(void* ptr)
{
	return static_cast<QMovie*>(ptr)->isValid();
}

char QMovie_JumpToFrame(void* ptr, int frameNumber)
{
	return static_cast<QMovie*>(ptr)->jumpToFrame(frameNumber);
}

char QMovie_JumpToNextFrame(void* ptr)
{
	bool returnArg;
	QMetaObject::invokeMethod(static_cast<QMovie*>(ptr), "jumpToNextFrame", Q_RETURN_ARG(bool, returnArg));
	return returnArg;
}

char QMovie_JumpToNextFrameDefault(void* ptr)
{
		return static_cast<QMovie*>(ptr)->QMovie::jumpToNextFrame();
}

long long QMovie_LastError(void* ptr)
{
	return static_cast<QMovie*>(ptr)->lastError();
}

struct QtGui_PackedString QMovie_LastErrorString(void* ptr)
{
	return ({ QByteArray* tc1e035 = new QByteArray(static_cast<QMovie*>(ptr)->lastErrorString().toUtf8()); QtGui_PackedString { const_cast<char*>(tc1e035->prepend("WHITESPACE").constData()+10), tc1e035->size()-10, tc1e035 }; });
}

int QMovie_LoopCount(void* ptr)
{
	return static_cast<QMovie*>(ptr)->loopCount();
}

int QMovie_NextFrameDelay(void* ptr)
{
	return static_cast<QMovie*>(ptr)->nextFrameDelay();
}

void QMovie_ConnectResized(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(const QSize &)>(&QMovie::resized), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(const QSize &)>(&MyQMovie::Signal_Resized), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectResized(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(const QSize &)>(&QMovie::resized), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(const QSize &)>(&MyQMovie::Signal_Resized));
}

void QMovie_Resized(void* ptr, void* size)
{
	static_cast<QMovie*>(ptr)->resized(*static_cast<QSize*>(size));
}

void* QMovie_ScaledSize(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QMovie*>(ptr)->scaledSize(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QMovie_SetBackgroundColor(void* ptr, void* color)
{
	static_cast<QMovie*>(ptr)->setBackgroundColor(*static_cast<QColor*>(color));
}

void QMovie_SetCacheMode(void* ptr, long long mode)
{
	static_cast<QMovie*>(ptr)->setCacheMode(static_cast<QMovie::CacheMode>(mode));
}

void QMovie_SetDevice(void* ptr, void* device)
{
	static_cast<QMovie*>(ptr)->setDevice(static_cast<QIODevice*>(device));
}

void QMovie_SetFileName(void* ptr, struct QtGui_PackedString fileName)
{
	static_cast<QMovie*>(ptr)->setFileName(QString::fromUtf8(fileName.data, fileName.len));
}

void QMovie_SetFormat(void* ptr, void* format)
{
	static_cast<QMovie*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

void QMovie_SetPaused(void* ptr, char paused)
{
	QMetaObject::invokeMethod(static_cast<QMovie*>(ptr), "setPaused", Q_ARG(bool, paused != 0));
}

void QMovie_SetPausedDefault(void* ptr, char paused)
{
		static_cast<QMovie*>(ptr)->QMovie::setPaused(paused != 0);
}

void QMovie_SetScaledSize(void* ptr, void* size)
{
	static_cast<QMovie*>(ptr)->setScaledSize(*static_cast<QSize*>(size));
}

void QMovie_SetSpeed(void* ptr, int percentSpeed)
{
	QMetaObject::invokeMethod(static_cast<QMovie*>(ptr), "setSpeed", Q_ARG(int, percentSpeed));
}

void QMovie_SetSpeedDefault(void* ptr, int percentSpeed)
{
		static_cast<QMovie*>(ptr)->QMovie::setSpeed(percentSpeed);
}

int QMovie_Speed(void* ptr)
{
	return static_cast<QMovie*>(ptr)->speed();
}

void QMovie_Start(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QMovie*>(ptr), "start");
}

void QMovie_StartDefault(void* ptr)
{
		static_cast<QMovie*>(ptr)->QMovie::start();
}

void QMovie_ConnectStarted(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)()>(&QMovie::started), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)()>(&MyQMovie::Signal_Started), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectStarted(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)()>(&QMovie::started), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)()>(&MyQMovie::Signal_Started));
}

void QMovie_Started(void* ptr)
{
	static_cast<QMovie*>(ptr)->started();
}

long long QMovie_State(void* ptr)
{
	return static_cast<QMovie*>(ptr)->state();
}

void QMovie_ConnectStateChanged(void* ptr, long long t)
{
	qRegisterMetaType<QMovie::MovieState>();
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(QMovie::MovieState)>(&QMovie::stateChanged), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(QMovie::MovieState)>(&MyQMovie::Signal_StateChanged), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectStateChanged(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(QMovie::MovieState)>(&QMovie::stateChanged), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(QMovie::MovieState)>(&MyQMovie::Signal_StateChanged));
}

void QMovie_StateChanged(void* ptr, long long state)
{
	static_cast<QMovie*>(ptr)->stateChanged(static_cast<QMovie::MovieState>(state));
}

void QMovie_Stop(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QMovie*>(ptr), "stop");
}

void QMovie_StopDefault(void* ptr)
{
		static_cast<QMovie*>(ptr)->QMovie::stop();
}

struct QtGui_PackedList QMovie_QMovie_SupportedFormats()
{
	return ({ QList<QByteArray>* tmpValue6b4223 = new QList<QByteArray>(QMovie::supportedFormats()); QtGui_PackedList { tmpValue6b4223, tmpValue6b4223->size() }; });
}

void QMovie_ConnectUpdated(void* ptr, long long t)
{
	QObject::connect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(const QRect &)>(&QMovie::updated), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(const QRect &)>(&MyQMovie::Signal_Updated), static_cast<Qt::ConnectionType>(t));
}

void QMovie_DisconnectUpdated(void* ptr)
{
	QObject::disconnect(static_cast<QMovie*>(ptr), static_cast<void (QMovie::*)(const QRect &)>(&QMovie::updated), static_cast<MyQMovie*>(ptr), static_cast<void (MyQMovie::*)(const QRect &)>(&MyQMovie::Signal_Updated));
}

void QMovie_Updated(void* ptr, void* rect)
{
	static_cast<QMovie*>(ptr)->updated(*static_cast<QRect*>(rect));
}

void QMovie_DestroyQMovie(void* ptr)
{
	static_cast<QMovie*>(ptr)->~QMovie();
}

void QMovie_DestroyQMovieDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QMovie___supportedFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QMovie___supportedFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QMovie___supportedFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QMovie___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QMovie___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QMovie___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QMovie___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QMovie___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QMovie___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QMovie___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QMovie___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QMovie___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QMovie___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QMovie___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QMovie___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QMovie_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QMovie*>(ptr)->QMovie::childEvent(static_cast<QChildEvent*>(event));
}

void QMovie_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QMovie*>(ptr)->QMovie::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QMovie_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QMovie*>(ptr)->QMovie::customEvent(static_cast<QEvent*>(event));
}

void QMovie_DeleteLaterDefault(void* ptr)
{
		static_cast<QMovie*>(ptr)->QMovie::deleteLater();
}

void QMovie_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QMovie*>(ptr)->QMovie::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QMovie_EventDefault(void* ptr, void* e)
{
		return static_cast<QMovie*>(ptr)->QMovie::event(static_cast<QEvent*>(e));
}

char QMovie_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QMovie*>(ptr)->QMovie::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QMovie*>(ptr)->QMovie::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QMovie*>(ptr)->QMovie::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QMovie*>(ptr)->QMovie::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QMovie*>(ptr)->QMovie::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QMovie_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QMovie*>(ptr)->QMovie::metaObject());
}

void QMovie_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QMovie*>(ptr)->QMovie::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQNativeGestureEvent: public QNativeGestureEvent
{
public:
	MyQNativeGestureEvent(Qt::NativeGestureType ty, const QTouchDevice *device, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos, qreal realValue, ulong sequenceId, quint64 intValue) : QNativeGestureEvent(ty, device, localPos, windowPos, screenPos, realValue, sequenceId, intValue) {QNativeGestureEvent_QNativeGestureEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QNativeGestureEvent*)
Q_DECLARE_METATYPE(MyQNativeGestureEvent*)

int QNativeGestureEvent_QNativeGestureEvent_QRegisterMetaType(){qRegisterMetaType<QNativeGestureEvent*>(); return qRegisterMetaType<MyQNativeGestureEvent*>();}

void* QNativeGestureEvent_NewQNativeGestureEvent2(long long ty, void* device, void* localPos, void* windowPos, void* screenPos, double realValue, unsigned long sequenceId, unsigned long long intValue)
{
	return new MyQNativeGestureEvent(static_cast<Qt::NativeGestureType>(ty), static_cast<QTouchDevice*>(device), *static_cast<QPointF*>(localPos), *static_cast<QPointF*>(windowPos), *static_cast<QPointF*>(screenPos), realValue, sequenceId, intValue);
}

void* QNativeGestureEvent_Device(void* ptr)
{
	return const_cast<QTouchDevice*>(static_cast<QNativeGestureEvent*>(ptr)->device());
}

long long QNativeGestureEvent_GestureType(void* ptr)
{
	return static_cast<QNativeGestureEvent*>(ptr)->gestureType();
}

void* QNativeGestureEvent_GlobalPos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QNativeGestureEvent*>(ptr)->globalPos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QNativeGestureEvent_LocalPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QNativeGestureEvent*>(ptr)->localPos());
}

void* QNativeGestureEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QNativeGestureEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QNativeGestureEvent_ScreenPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QNativeGestureEvent*>(ptr)->screenPos());
}

double QNativeGestureEvent_Value(void* ptr)
{
	return static_cast<QNativeGestureEvent*>(ptr)->value();
}

void* QNativeGestureEvent_WindowPos(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QNativeGestureEvent*>(ptr)->windowPos());
}

class MyQOffscreenSurface: public QOffscreenSurface
{
public:
	MyQOffscreenSurface(QScreen *targetScreen, QObject *parent) : QOffscreenSurface(targetScreen, parent) {QOffscreenSurface_QOffscreenSurface_QRegisterMetaType();};
	MyQOffscreenSurface(QScreen *targetScreen = Q_NULLPTR) : QOffscreenSurface(targetScreen) {QOffscreenSurface_QOffscreenSurface_QRegisterMetaType();};
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQOffscreenSurface_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ScreenChanged(QScreen * screen) { callbackQOffscreenSurface_ScreenChanged(this, screen); };
	QSize size() const { return *static_cast<QSize*>(callbackQOffscreenSurface_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQOffscreenSurface_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQOffscreenSurface() { callbackQOffscreenSurface_DestroyQOffscreenSurface(this); };
	void childEvent(QChildEvent * event) { callbackQOffscreenSurface_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOffscreenSurface_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOffscreenSurface_CustomEvent(this, event); };
	void deleteLater() { callbackQOffscreenSurface_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOffscreenSurface_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOffscreenSurface_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOffscreenSurface_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOffscreenSurface_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOffscreenSurface_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOffscreenSurface_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOffscreenSurface_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOffscreenSurface*)
Q_DECLARE_METATYPE(MyQOffscreenSurface*)

int QOffscreenSurface_QOffscreenSurface_QRegisterMetaType(){qRegisterMetaType<QOffscreenSurface*>(); return qRegisterMetaType<MyQOffscreenSurface*>();}

void* QOffscreenSurface_NewQOffscreenSurface(void* targetScreen, void* parent)
{
	return new MyQOffscreenSurface(static_cast<QScreen*>(targetScreen), static_cast<QObject*>(parent));
}

void* QOffscreenSurface_NewQOffscreenSurface2(void* targetScreen)
{
	return new MyQOffscreenSurface(static_cast<QScreen*>(targetScreen));
}

void QOffscreenSurface_Create(void* ptr)
{
		static_cast<QOffscreenSurface*>(ptr)->create();
}

void QOffscreenSurface_Destroy(void* ptr)
{
		static_cast<QOffscreenSurface*>(ptr)->destroy();
}

void* QOffscreenSurface_Format(void* ptr)
{
		return new QSurfaceFormat(static_cast<QOffscreenSurface*>(ptr)->format());
}

void* QOffscreenSurface_FormatDefault(void* ptr)
{
		return new QSurfaceFormat(static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::format());
}

char QOffscreenSurface_IsValid(void* ptr)
{
		return static_cast<QOffscreenSurface*>(ptr)->isValid();
}

void* QOffscreenSurface_NativeHandle(void* ptr)
{
		return static_cast<QOffscreenSurface*>(ptr)->nativeHandle();
}

void* QOffscreenSurface_RequestedFormat(void* ptr)
{
		return new QSurfaceFormat(static_cast<QOffscreenSurface*>(ptr)->requestedFormat());
}

void* QOffscreenSurface_Screen(void* ptr)
{
		return static_cast<QOffscreenSurface*>(ptr)->screen();
}

void QOffscreenSurface_ConnectScreenChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QOffscreenSurface*>(ptr), static_cast<void (QOffscreenSurface::*)(QScreen *)>(&QOffscreenSurface::screenChanged), static_cast<MyQOffscreenSurface*>(ptr), static_cast<void (MyQOffscreenSurface::*)(QScreen *)>(&MyQOffscreenSurface::Signal_ScreenChanged), static_cast<Qt::ConnectionType>(t));
}

void QOffscreenSurface_DisconnectScreenChanged(void* ptr)
{
	QObject::disconnect(static_cast<QOffscreenSurface*>(ptr), static_cast<void (QOffscreenSurface::*)(QScreen *)>(&QOffscreenSurface::screenChanged), static_cast<MyQOffscreenSurface*>(ptr), static_cast<void (MyQOffscreenSurface::*)(QScreen *)>(&MyQOffscreenSurface::Signal_ScreenChanged));
}

void QOffscreenSurface_ScreenChanged(void* ptr, void* screen)
{
		static_cast<QOffscreenSurface*>(ptr)->screenChanged(static_cast<QScreen*>(screen));
}

void QOffscreenSurface_SetFormat(void* ptr, void* format)
{
		static_cast<QOffscreenSurface*>(ptr)->setFormat(*static_cast<QSurfaceFormat*>(format));
}

void QOffscreenSurface_SetNativeHandle(void* ptr, void* handle)
{
		static_cast<QOffscreenSurface*>(ptr)->setNativeHandle(handle);
}

void QOffscreenSurface_SetScreen(void* ptr, void* newScreen)
{
		static_cast<QOffscreenSurface*>(ptr)->setScreen(static_cast<QScreen*>(newScreen));
}

void* QOffscreenSurface_Size(void* ptr)
{
		return ({ QSize tmpValue = static_cast<QOffscreenSurface*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QOffscreenSurface_SizeDefault(void* ptr)
{
		return ({ QSize tmpValue = static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

long long QOffscreenSurface_SurfaceType(void* ptr)
{
		return static_cast<QOffscreenSurface*>(ptr)->surfaceType();
}

long long QOffscreenSurface_SurfaceTypeDefault(void* ptr)
{
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::surfaceType();
}

void QOffscreenSurface_DestroyQOffscreenSurface(void* ptr)
{
	static_cast<QOffscreenSurface*>(ptr)->~QOffscreenSurface();
}

void QOffscreenSurface_DestroyQOffscreenSurfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOffscreenSurface___children_atList(void* ptr, int i)
{
		return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOffscreenSurface___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOffscreenSurface___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject *>();
}

void* QOffscreenSurface___dynamicPropertyNames_atList(void* ptr, int i)
{
		return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOffscreenSurface___dynamicPropertyNames_setList(void* ptr, void* i)
{
		static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOffscreenSurface___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QByteArray>();
}

void* QOffscreenSurface___findChildren_atList(void* ptr, int i)
{
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOffscreenSurface___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOffscreenSurface___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject*>();
}

void* QOffscreenSurface___findChildren_atList3(void* ptr, int i)
{
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOffscreenSurface___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOffscreenSurface___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject*>();
}

void QOffscreenSurface_ChildEvent(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QOffscreenSurface_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::childEvent(static_cast<QChildEvent*>(event));
}

void QOffscreenSurface_ConnectNotify(void* ptr, void* sign)
{
		static_cast<QOffscreenSurface*>(ptr)->connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOffscreenSurface_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOffscreenSurface_CustomEvent(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QOffscreenSurface_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::customEvent(static_cast<QEvent*>(event));
}

void QOffscreenSurface_DeleteLater(void* ptr)
{
		QMetaObject::invokeMethod(static_cast<QOffscreenSurface*>(ptr), "deleteLater");
}

void QOffscreenSurface_DeleteLaterDefault(void* ptr)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::deleteLater();
}

void QOffscreenSurface_DisconnectNotify(void* ptr, void* sign)
{
		static_cast<QOffscreenSurface*>(ptr)->disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOffscreenSurface_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOffscreenSurface_Event(void* ptr, void* e)
{
		return static_cast<QOffscreenSurface*>(ptr)->event(static_cast<QEvent*>(e));
}

char QOffscreenSurface_EventDefault(void* ptr, void* e)
{
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::event(static_cast<QEvent*>(e));
}

char QOffscreenSurface_EventFilter(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOffscreenSurface*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

char QOffscreenSurface_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOffscreenSurface_MetaObject(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOffscreenSurface*>(ptr)->metaObject());
}

void* QOffscreenSurface_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::metaObject());
}

void QOffscreenSurface_TimerEvent(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QOffscreenSurface_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOffscreenSurface*>(ptr)->QOffscreenSurface::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QOpenGLBuffer)
Q_DECLARE_METATYPE(QOpenGLBuffer*)
void* QOpenGLBuffer_NewQOpenGLBuffer()
{
	return new QOpenGLBuffer();
}

void* QOpenGLBuffer_NewQOpenGLBuffer2(long long ty)
{
	return new QOpenGLBuffer(static_cast<QOpenGLBuffer::Type>(ty));
}

void* QOpenGLBuffer_NewQOpenGLBuffer3(void* other)
{
	return new QOpenGLBuffer(*static_cast<QOpenGLBuffer*>(other));
}

void QOpenGLBuffer_Allocate(void* ptr, void* data, int count)
{
	static_cast<QOpenGLBuffer*>(ptr)->allocate(data, count);
}

void QOpenGLBuffer_Allocate2(void* ptr, int count)
{
	static_cast<QOpenGLBuffer*>(ptr)->allocate(count);
}

char QOpenGLBuffer_Bind(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->bind();
}

unsigned int QOpenGLBuffer_BufferId(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->bufferId();
}

char QOpenGLBuffer_Create(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->create();
}

void QOpenGLBuffer_Destroy(void* ptr)
{
	static_cast<QOpenGLBuffer*>(ptr)->destroy();
}

char QOpenGLBuffer_IsCreated(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->isCreated();
}

void* QOpenGLBuffer_Map(void* ptr, long long access)
{
	return static_cast<QOpenGLBuffer*>(ptr)->map(static_cast<QOpenGLBuffer::Access>(access));
}

void* QOpenGLBuffer_MapRange(void* ptr, int offset, int count, long long access)
{
	return static_cast<QOpenGLBuffer*>(ptr)->mapRange(offset, count, static_cast<QOpenGLBuffer::RangeAccessFlag>(access));
}

char QOpenGLBuffer_Read(void* ptr, int offset, void* data, int count)
{
	return static_cast<QOpenGLBuffer*>(ptr)->read(offset, data, count);
}

void QOpenGLBuffer_Release(void* ptr)
{
	static_cast<QOpenGLBuffer*>(ptr)->release();
}

void QOpenGLBuffer_QOpenGLBuffer_Release2(long long ty)
{
	QOpenGLBuffer::release(static_cast<QOpenGLBuffer::Type>(ty));
}

void QOpenGLBuffer_SetUsagePattern(void* ptr, long long value)
{
	static_cast<QOpenGLBuffer*>(ptr)->setUsagePattern(static_cast<QOpenGLBuffer::UsagePattern>(value));
}

int QOpenGLBuffer_Size(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->size();
}

long long QOpenGLBuffer_Type(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->type();
}

char QOpenGLBuffer_Unmap(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->unmap();
}

long long QOpenGLBuffer_UsagePattern(void* ptr)
{
	return static_cast<QOpenGLBuffer*>(ptr)->usagePattern();
}

void QOpenGLBuffer_Write(void* ptr, int offset, void* data, int count)
{
	static_cast<QOpenGLBuffer*>(ptr)->write(offset, data, count);
}

void QOpenGLBuffer_DestroyQOpenGLBuffer(void* ptr)
{
	static_cast<QOpenGLBuffer*>(ptr)->~QOpenGLBuffer();
}

class MyQOpenGLContext: public QOpenGLContext
{
public:
	MyQOpenGLContext(QObject *parent = Q_NULLPTR) : QOpenGLContext(parent) {QOpenGLContext_QOpenGLContext_QRegisterMetaType();};
	void Signal_AboutToBeDestroyed() { callbackQOpenGLContext_AboutToBeDestroyed(this); };
	 ~MyQOpenGLContext() { callbackQOpenGLContext_DestroyQOpenGLContext(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLContext_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLContext_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLContext_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLContext_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLContext_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLContext_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLContext_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLContext_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLContext_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLContext_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLContext_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLContext*)
Q_DECLARE_METATYPE(MyQOpenGLContext*)

int QOpenGLContext_QOpenGLContext_QRegisterMetaType(){qRegisterMetaType<QOpenGLContext*>(); return qRegisterMetaType<MyQOpenGLContext*>();}

void* QOpenGLContext_NewQOpenGLContext(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLContext(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLContext(static_cast<QObject*>(parent));
	}
}

void QOpenGLContext_ConnectAboutToBeDestroyed(void* ptr, long long t)
{
	QObject::connect(static_cast<QOpenGLContext*>(ptr), static_cast<void (QOpenGLContext::*)()>(&QOpenGLContext::aboutToBeDestroyed), static_cast<MyQOpenGLContext*>(ptr), static_cast<void (MyQOpenGLContext::*)()>(&MyQOpenGLContext::Signal_AboutToBeDestroyed), static_cast<Qt::ConnectionType>(t));
}

void QOpenGLContext_DisconnectAboutToBeDestroyed(void* ptr)
{
	QObject::disconnect(static_cast<QOpenGLContext*>(ptr), static_cast<void (QOpenGLContext::*)()>(&QOpenGLContext::aboutToBeDestroyed), static_cast<MyQOpenGLContext*>(ptr), static_cast<void (MyQOpenGLContext::*)()>(&MyQOpenGLContext::Signal_AboutToBeDestroyed));
}

void QOpenGLContext_AboutToBeDestroyed(void* ptr)
{
	static_cast<QOpenGLContext*>(ptr)->aboutToBeDestroyed();
}

char QOpenGLContext_QOpenGLContext_AreSharing(void* first, void* second)
{
	return QOpenGLContext::areSharing(static_cast<QOpenGLContext*>(first), static_cast<QOpenGLContext*>(second));
}

char QOpenGLContext_Create(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->create();
}

void* QOpenGLContext_QOpenGLContext_CurrentContext()
{
	return QOpenGLContext::currentContext();
}

unsigned int QOpenGLContext_DefaultFramebufferObject(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->defaultFramebufferObject();
}

void QOpenGLContext_DoneCurrent(void* ptr)
{
	static_cast<QOpenGLContext*>(ptr)->doneCurrent();
}

void* QOpenGLContext_ExtraFunctions(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->extraFunctions();
}

void* QOpenGLContext_Format(void* ptr)
{
	return new QSurfaceFormat(static_cast<QOpenGLContext*>(ptr)->format());
}

void* QOpenGLContext_Functions(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->functions();
}

void* QOpenGLContext_GetProcAddress(void* ptr, void* procName)
{
	return reinterpret_cast<void*>(static_cast<QOpenGLContext*>(ptr)->getProcAddress(*static_cast<QByteArray*>(procName)));
}

void* QOpenGLContext_GetProcAddress2(void* ptr, char* procName)
{
	return reinterpret_cast<void*>(static_cast<QOpenGLContext*>(ptr)->getProcAddress(const_cast<const char*>(procName)));
}

void* QOpenGLContext_QOpenGLContext_GlobalShareContext()
{
	return QOpenGLContext::globalShareContext();
}

char QOpenGLContext_HasExtension(void* ptr, void* extensi)
{
	return static_cast<QOpenGLContext*>(ptr)->hasExtension(*static_cast<QByteArray*>(extensi));
}

char QOpenGLContext_IsOpenGLES(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->isOpenGLES();
}

char QOpenGLContext_IsValid(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->isValid();
}

char QOpenGLContext_MakeCurrent(void* ptr, void* surface)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(surface))) {
		return static_cast<QOpenGLContext*>(ptr)->makeCurrent(static_cast<QOffscreenSurface*>(surface));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(surface))) {
		return static_cast<QOpenGLContext*>(ptr)->makeCurrent(static_cast<QPaintDeviceWindow*>(surface));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(surface))) {
		return static_cast<QOpenGLContext*>(ptr)->makeCurrent(static_cast<QWindow*>(surface));
	} else {
		return static_cast<QOpenGLContext*>(ptr)->makeCurrent(static_cast<QSurface*>(surface));
	}
}

void* QOpenGLContext_NativeHandle(void* ptr)
{
	return new QVariant(static_cast<QOpenGLContext*>(ptr)->nativeHandle());
}

void* QOpenGLContext_QOpenGLContext_OpenGLModuleHandle()
{
	return QOpenGLContext::openGLModuleHandle();
}

long long QOpenGLContext_QOpenGLContext_OpenGLModuleType()
{
	return QOpenGLContext::openGLModuleType();
}

void* QOpenGLContext_Screen(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->screen();
}

void QOpenGLContext_SetFormat(void* ptr, void* format)
{
	static_cast<QOpenGLContext*>(ptr)->setFormat(*static_cast<QSurfaceFormat*>(format));
}

void QOpenGLContext_SetNativeHandle(void* ptr, void* handle)
{
	static_cast<QOpenGLContext*>(ptr)->setNativeHandle(*static_cast<QVariant*>(handle));
}

void QOpenGLContext_SetScreen(void* ptr, void* screen)
{
	static_cast<QOpenGLContext*>(ptr)->setScreen(static_cast<QScreen*>(screen));
}

void QOpenGLContext_SetShareContext(void* ptr, void* shareContext)
{
	static_cast<QOpenGLContext*>(ptr)->setShareContext(static_cast<QOpenGLContext*>(shareContext));
}

void* QOpenGLContext_ShareContext(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->shareContext();
}

void* QOpenGLContext_ShareGroup(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->shareGroup();
}

char QOpenGLContext_QOpenGLContext_SupportsThreadedOpenGL()
{
	return QOpenGLContext::supportsThreadedOpenGL();
}

void* QOpenGLContext_Surface(void* ptr)
{
	return static_cast<QOpenGLContext*>(ptr)->surface();
}

void QOpenGLContext_SwapBuffers(void* ptr, void* surface)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(surface))) {
		static_cast<QOpenGLContext*>(ptr)->swapBuffers(static_cast<QOffscreenSurface*>(surface));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(surface))) {
		static_cast<QOpenGLContext*>(ptr)->swapBuffers(static_cast<QPaintDeviceWindow*>(surface));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(surface))) {
		static_cast<QOpenGLContext*>(ptr)->swapBuffers(static_cast<QWindow*>(surface));
	} else {
		static_cast<QOpenGLContext*>(ptr)->swapBuffers(static_cast<QSurface*>(surface));
	}
}

void* QOpenGLContext_VersionFunctions(void* ptr, void* versionProfile)
{
	return static_cast<QOpenGLContext*>(ptr)->versionFunctions(*static_cast<QOpenGLVersionProfile*>(versionProfile));
}

void QOpenGLContext_DestroyQOpenGLContext(void* ptr)
{
	static_cast<QOpenGLContext*>(ptr)->~QOpenGLContext();
}

void QOpenGLContext_DestroyQOpenGLContextDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOpenGLContext___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContext___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContext___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLContext___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLContext___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLContext___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLContext___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContext___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContext___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLContext___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContext___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContext___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLContext_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLContext_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLContext_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLContext_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::deleteLater();
}

void QOpenGLContext_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLContext_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::event(static_cast<QEvent*>(e));
}

char QOpenGLContext_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLContext_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::metaObject());
}

void QOpenGLContext_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContext*>(ptr)->QOpenGLContext::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQOpenGLContextGroup: public QOpenGLContextGroup
{
public:
	void childEvent(QChildEvent * event) { callbackQOpenGLContextGroup_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLContextGroup_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLContextGroup_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLContextGroup_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLContextGroup_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLContextGroup_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLContextGroup_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLContextGroup_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLContextGroup_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLContextGroup_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLContextGroup_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLContextGroup*)
Q_DECLARE_METATYPE(MyQOpenGLContextGroup*)

int QOpenGLContextGroup_QOpenGLContextGroup_QRegisterMetaType(){qRegisterMetaType<QOpenGLContextGroup*>(); return qRegisterMetaType<MyQOpenGLContextGroup*>();}

void* QOpenGLContextGroup_QOpenGLContextGroup_CurrentContextGroup()
{
	return QOpenGLContextGroup::currentContextGroup();
}

struct QtGui_PackedList QOpenGLContextGroup_Shares(void* ptr)
{
	return ({ QList<QOpenGLContext *>* tmpValuec31b07 = new QList<QOpenGLContext *>(static_cast<QOpenGLContextGroup*>(ptr)->shares()); QtGui_PackedList { tmpValuec31b07, tmpValuec31b07->size() }; });
}

void* QOpenGLContextGroup___shares_atList(void* ptr, int i)
{
	return ({QOpenGLContext * tmp = static_cast<QList<QOpenGLContext *>*>(ptr)->at(i); if (i == static_cast<QList<QOpenGLContext *>*>(ptr)->size()-1) { static_cast<QList<QOpenGLContext *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContextGroup___shares_setList(void* ptr, void* i)
{
	static_cast<QList<QOpenGLContext *>*>(ptr)->append(static_cast<QOpenGLContext*>(i));
}

void* QOpenGLContextGroup___shares_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QOpenGLContext *>();
}

void* QOpenGLContextGroup___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContextGroup___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContextGroup___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLContextGroup___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLContextGroup___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLContextGroup___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLContextGroup___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContextGroup___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContextGroup___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLContextGroup___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLContextGroup___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLContextGroup___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLContextGroup_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLContextGroup_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLContextGroup_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLContextGroup_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::deleteLater();
}

void QOpenGLContextGroup_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLContextGroup_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::event(static_cast<QEvent*>(e));
}

char QOpenGLContextGroup_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLContextGroup_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::metaObject());
}

void QOpenGLContextGroup_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLContextGroup*>(ptr)->QOpenGLContextGroup::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQOpenGLDebugLogger: public QOpenGLDebugLogger
{
public:
	MyQOpenGLDebugLogger(QObject *parent = Q_NULLPTR) : QOpenGLDebugLogger(parent) {QOpenGLDebugLogger_QOpenGLDebugLogger_QRegisterMetaType();};
	void logMessage(const QOpenGLDebugMessage & debugMessage) { callbackQOpenGLDebugLogger_LogMessage(this, const_cast<QOpenGLDebugMessage*>(&debugMessage)); };
	void Signal_MessageLogged(const QOpenGLDebugMessage & debugMessage) { callbackQOpenGLDebugLogger_MessageLogged(this, const_cast<QOpenGLDebugMessage*>(&debugMessage)); };
	void startLogging(QOpenGLDebugLogger::LoggingMode loggingMode) { callbackQOpenGLDebugLogger_StartLogging(this, loggingMode); };
	void stopLogging() { callbackQOpenGLDebugLogger_StopLogging(this); };
	 ~MyQOpenGLDebugLogger() { callbackQOpenGLDebugLogger_DestroyQOpenGLDebugLogger(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLDebugLogger_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLDebugLogger_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLDebugLogger_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLDebugLogger_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLDebugLogger_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLDebugLogger_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLDebugLogger_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLDebugLogger_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLDebugLogger_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLDebugLogger_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLDebugLogger_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLDebugLogger*)
Q_DECLARE_METATYPE(MyQOpenGLDebugLogger*)

int QOpenGLDebugLogger_QOpenGLDebugLogger_QRegisterMetaType(){qRegisterMetaType<QOpenGLDebugLogger*>(); return qRegisterMetaType<MyQOpenGLDebugLogger*>();}

void* QOpenGLDebugLogger_NewQOpenGLDebugLogger(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLDebugLogger(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLDebugLogger(static_cast<QObject*>(parent));
	}
}

void QOpenGLDebugLogger_DisableMessages(void* ptr, long long sources, long long types, long long severities)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->disableMessages(static_cast<QOpenGLDebugMessage::Source>(sources), static_cast<QOpenGLDebugMessage::Type>(types), static_cast<QOpenGLDebugMessage::Severity>(severities));
}

void QOpenGLDebugLogger_DisableMessages2(void* ptr, void* ids, long long sources, long long types)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->disableMessages(*static_cast<QVector<GLuint>*>(ids), static_cast<QOpenGLDebugMessage::Source>(sources), static_cast<QOpenGLDebugMessage::Type>(types));
}

void QOpenGLDebugLogger_EnableMessages(void* ptr, long long sources, long long types, long long severities)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->enableMessages(static_cast<QOpenGLDebugMessage::Source>(sources), static_cast<QOpenGLDebugMessage::Type>(types), static_cast<QOpenGLDebugMessage::Severity>(severities));
}

void QOpenGLDebugLogger_EnableMessages2(void* ptr, void* ids, long long sources, long long types)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->enableMessages(*static_cast<QVector<GLuint>*>(ids), static_cast<QOpenGLDebugMessage::Source>(sources), static_cast<QOpenGLDebugMessage::Type>(types));
}

char QOpenGLDebugLogger_Initialize(void* ptr)
{
	return static_cast<QOpenGLDebugLogger*>(ptr)->initialize();
}

char QOpenGLDebugLogger_IsLogging(void* ptr)
{
	return static_cast<QOpenGLDebugLogger*>(ptr)->isLogging();
}

void QOpenGLDebugLogger_LogMessage(void* ptr, void* debugMessage)
{
	QMetaObject::invokeMethod(static_cast<QOpenGLDebugLogger*>(ptr), "logMessage", Q_ARG(const QOpenGLDebugMessage, *static_cast<QOpenGLDebugMessage*>(debugMessage)));
}

void QOpenGLDebugLogger_LogMessageDefault(void* ptr, void* debugMessage)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::logMessage(*static_cast<QOpenGLDebugMessage*>(debugMessage));
}

struct QtGui_PackedList QOpenGLDebugLogger_LoggedMessages(void* ptr)
{
	return ({ QList<QOpenGLDebugMessage>* tmpValuefdab42 = new QList<QOpenGLDebugMessage>(static_cast<QOpenGLDebugLogger*>(ptr)->loggedMessages()); QtGui_PackedList { tmpValuefdab42, tmpValuefdab42->size() }; });
}

long long QOpenGLDebugLogger_LoggingMode(void* ptr)
{
	return static_cast<QOpenGLDebugLogger*>(ptr)->loggingMode();
}

long long QOpenGLDebugLogger_MaximumMessageLength(void* ptr)
{
	return static_cast<QOpenGLDebugLogger*>(ptr)->maximumMessageLength();
}

void QOpenGLDebugLogger_ConnectMessageLogged(void* ptr, long long t)
{
	QObject::connect(static_cast<QOpenGLDebugLogger*>(ptr), static_cast<void (QOpenGLDebugLogger::*)(const QOpenGLDebugMessage &)>(&QOpenGLDebugLogger::messageLogged), static_cast<MyQOpenGLDebugLogger*>(ptr), static_cast<void (MyQOpenGLDebugLogger::*)(const QOpenGLDebugMessage &)>(&MyQOpenGLDebugLogger::Signal_MessageLogged), static_cast<Qt::ConnectionType>(t));
}

void QOpenGLDebugLogger_DisconnectMessageLogged(void* ptr)
{
	QObject::disconnect(static_cast<QOpenGLDebugLogger*>(ptr), static_cast<void (QOpenGLDebugLogger::*)(const QOpenGLDebugMessage &)>(&QOpenGLDebugLogger::messageLogged), static_cast<MyQOpenGLDebugLogger*>(ptr), static_cast<void (MyQOpenGLDebugLogger::*)(const QOpenGLDebugMessage &)>(&MyQOpenGLDebugLogger::Signal_MessageLogged));
}

void QOpenGLDebugLogger_MessageLogged(void* ptr, void* debugMessage)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->messageLogged(*static_cast<QOpenGLDebugMessage*>(debugMessage));
}

void QOpenGLDebugLogger_PopGroup(void* ptr)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->popGroup();
}

void QOpenGLDebugLogger_PushGroup(void* ptr, struct QtGui_PackedString name, unsigned int id, long long source)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->pushGroup(QString::fromUtf8(name.data, name.len), id, static_cast<QOpenGLDebugMessage::Source>(source));
}

void QOpenGLDebugLogger_StartLogging(void* ptr, long long loggingMode)
{
	qRegisterMetaType<QOpenGLDebugLogger::LoggingMode>();
	QMetaObject::invokeMethod(static_cast<QOpenGLDebugLogger*>(ptr), "startLogging", Q_ARG(QOpenGLDebugLogger::LoggingMode, static_cast<QOpenGLDebugLogger::LoggingMode>(loggingMode)));
}

void QOpenGLDebugLogger_StartLoggingDefault(void* ptr, long long loggingMode)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::startLogging(static_cast<QOpenGLDebugLogger::LoggingMode>(loggingMode));
}

void QOpenGLDebugLogger_StopLogging(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QOpenGLDebugLogger*>(ptr), "stopLogging");
}

void QOpenGLDebugLogger_StopLoggingDefault(void* ptr)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::stopLogging();
}

void QOpenGLDebugLogger_DestroyQOpenGLDebugLogger(void* ptr)
{
	static_cast<QOpenGLDebugLogger*>(ptr)->~QOpenGLDebugLogger();
}

void QOpenGLDebugLogger_DestroyQOpenGLDebugLoggerDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

unsigned int QOpenGLDebugLogger___disableMessages_ids_atList2(void* ptr, int i)
{
	return ({GLuint tmp = static_cast<QVector<GLuint>*>(ptr)->at(i); if (i == static_cast<QVector<GLuint>*>(ptr)->size()-1) { static_cast<QVector<GLuint>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLDebugLogger___disableMessages_ids_setList2(void* ptr, unsigned int i)
{
	static_cast<QVector<GLuint>*>(ptr)->append(i);
}

void* QOpenGLDebugLogger___disableMessages_ids_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint>();
}

unsigned int QOpenGLDebugLogger___enableMessages_ids_atList2(void* ptr, int i)
{
	return ({GLuint tmp = static_cast<QVector<GLuint>*>(ptr)->at(i); if (i == static_cast<QVector<GLuint>*>(ptr)->size()-1) { static_cast<QVector<GLuint>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLDebugLogger___enableMessages_ids_setList2(void* ptr, unsigned int i)
{
	static_cast<QVector<GLuint>*>(ptr)->append(i);
}

void* QOpenGLDebugLogger___enableMessages_ids_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint>();
}

void* QOpenGLDebugLogger___loggedMessages_atList(void* ptr, int i)
{
	return new QOpenGLDebugMessage(({QOpenGLDebugMessage tmp = static_cast<QList<QOpenGLDebugMessage>*>(ptr)->at(i); if (i == static_cast<QList<QOpenGLDebugMessage>*>(ptr)->size()-1) { static_cast<QList<QOpenGLDebugMessage>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLDebugLogger___loggedMessages_setList(void* ptr, void* i)
{
	static_cast<QList<QOpenGLDebugMessage>*>(ptr)->append(*static_cast<QOpenGLDebugMessage*>(i));
}

void* QOpenGLDebugLogger___loggedMessages_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QOpenGLDebugMessage>();
}

void* QOpenGLDebugLogger___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLDebugLogger___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLDebugLogger___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLDebugLogger___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLDebugLogger___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLDebugLogger___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLDebugLogger___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLDebugLogger___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLDebugLogger___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLDebugLogger___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLDebugLogger___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLDebugLogger___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLDebugLogger_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLDebugLogger_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLDebugLogger_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLDebugLogger_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::deleteLater();
}

void QOpenGLDebugLogger_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLDebugLogger_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::event(static_cast<QEvent*>(e));
}

char QOpenGLDebugLogger_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLDebugLogger_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::metaObject());
}

void QOpenGLDebugLogger_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLDebugLogger*>(ptr)->QOpenGLDebugLogger::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QOpenGLDebugMessage*)
void* QOpenGLDebugMessage_NewQOpenGLDebugMessage()
{
	return new QOpenGLDebugMessage();
}

void* QOpenGLDebugMessage_NewQOpenGLDebugMessage2(void* debugMessage)
{
	return new QOpenGLDebugMessage(*static_cast<QOpenGLDebugMessage*>(debugMessage));
}

void* QOpenGLDebugMessage_QOpenGLDebugMessage_CreateApplicationMessage(struct QtGui_PackedString text, unsigned int id, long long severity, long long ty)
{
	return new QOpenGLDebugMessage(QOpenGLDebugMessage::createApplicationMessage(QString::fromUtf8(text.data, text.len), id, static_cast<QOpenGLDebugMessage::Severity>(severity), static_cast<QOpenGLDebugMessage::Type>(ty)));
}

void* QOpenGLDebugMessage_QOpenGLDebugMessage_CreateThirdPartyMessage(struct QtGui_PackedString text, unsigned int id, long long severity, long long ty)
{
	return new QOpenGLDebugMessage(QOpenGLDebugMessage::createThirdPartyMessage(QString::fromUtf8(text.data, text.len), id, static_cast<QOpenGLDebugMessage::Severity>(severity), static_cast<QOpenGLDebugMessage::Type>(ty)));
}

unsigned int QOpenGLDebugMessage_Id(void* ptr)
{
	return static_cast<QOpenGLDebugMessage*>(ptr)->id();
}

struct QtGui_PackedString QOpenGLDebugMessage_Message(void* ptr)
{
	return ({ QByteArray* t195421 = new QByteArray(static_cast<QOpenGLDebugMessage*>(ptr)->message().toUtf8()); QtGui_PackedString { const_cast<char*>(t195421->prepend("WHITESPACE").constData()+10), t195421->size()-10, t195421 }; });
}

long long QOpenGLDebugMessage_Severity(void* ptr)
{
	return static_cast<QOpenGLDebugMessage*>(ptr)->severity();
}

long long QOpenGLDebugMessage_Source(void* ptr)
{
	return static_cast<QOpenGLDebugMessage*>(ptr)->source();
}

void QOpenGLDebugMessage_Swap(void* ptr, void* debugMessage)
{
	static_cast<QOpenGLDebugMessage*>(ptr)->swap(*static_cast<QOpenGLDebugMessage*>(debugMessage));
}

long long QOpenGLDebugMessage_Type(void* ptr)
{
	return static_cast<QOpenGLDebugMessage*>(ptr)->type();
}

void QOpenGLDebugMessage_DestroyQOpenGLDebugMessage(void* ptr)
{
	static_cast<QOpenGLDebugMessage*>(ptr)->~QOpenGLDebugMessage();
}

Q_DECLARE_METATYPE(QOpenGLExtraFunctions)
Q_DECLARE_METATYPE(QOpenGLExtraFunctions*)
void* QOpenGLExtraFunctions_NewQOpenGLExtraFunctions()
{
	return new QOpenGLExtraFunctions();
}

void* QOpenGLExtraFunctions_NewQOpenGLExtraFunctions2(void* context)
{
	return new QOpenGLExtraFunctions(static_cast<QOpenGLContext*>(context));
}

void QOpenGLExtraFunctions_GlActiveShaderProgram(void* ptr, unsigned int pipeline, unsigned int program)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glActiveShaderProgram(pipeline, program);
}

void QOpenGLExtraFunctions_GlBeginQuery(void* ptr, unsigned int target, unsigned int id)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBeginQuery(target, id);
}

void QOpenGLExtraFunctions_GlBeginTransformFeedback(void* ptr, unsigned int primitiveMode)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBeginTransformFeedback(primitiveMode);
}

void QOpenGLExtraFunctions_GlBindBufferBase(void* ptr, unsigned int target, unsigned int index, unsigned int buffer)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindBufferBase(target, index, buffer);
}

void QOpenGLExtraFunctions_GlBindImageTexture(void* ptr, unsigned int unit, unsigned int texture, int level, char layered, int layer, unsigned int access, unsigned int format)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindImageTexture(unit, texture, level, layered != 0, layer, access, format);
}

void QOpenGLExtraFunctions_GlBindProgramPipeline(void* ptr, unsigned int pipeline)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindProgramPipeline(pipeline);
}

void QOpenGLExtraFunctions_GlBindSampler(void* ptr, unsigned int unit, unsigned int sampler)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindSampler(unit, sampler);
}

void QOpenGLExtraFunctions_GlBindTransformFeedback(void* ptr, unsigned int target, unsigned int id)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindTransformFeedback(target, id);
}

void QOpenGLExtraFunctions_GlBindVertexArray(void* ptr, unsigned int array)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBindVertexArray(array);
}

void QOpenGLExtraFunctions_GlBlendBarrier(void* ptr)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlendBarrier();
}

void QOpenGLExtraFunctions_GlBlendEquationSeparatei(void* ptr, unsigned int buf, unsigned int modeRGB, unsigned int modeAlpha)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}

void QOpenGLExtraFunctions_GlBlendEquationi(void* ptr, unsigned int buf, unsigned int mode)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlendEquationi(buf, mode);
}

void QOpenGLExtraFunctions_GlBlendFuncSeparatei(void* ptr, unsigned int buf, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void QOpenGLExtraFunctions_GlBlendFunci(void* ptr, unsigned int buf, unsigned int src, unsigned int dst)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlendFunci(buf, src, dst);
}

void QOpenGLExtraFunctions_GlBlitFramebuffer(void* ptr, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, unsigned int mask, unsigned int filter)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void QOpenGLExtraFunctions_GlClearBufferfi(void* ptr, unsigned int buffer, int drawbuffer, float depth, int stencil)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glClearBufferfi(buffer, drawbuffer, depth, stencil);
}

void QOpenGLExtraFunctions_GlClearBufferfv(void* ptr, unsigned int buffer, int drawbuffer, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glClearBufferfv(buffer, drawbuffer, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlClearBufferiv(void* ptr, unsigned int buffer, int drawbuffer, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glClearBufferiv(buffer, drawbuffer, const_cast<const GLint*>(&value));
}

void QOpenGLExtraFunctions_GlClearBufferuiv(void* ptr, unsigned int buffer, int drawbuffer, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glClearBufferuiv(buffer, drawbuffer, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlColorMaski(void* ptr, unsigned int index, char r, char g, char b, char a)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glColorMaski(index, r != 0, g != 0, b != 0, a != 0);
}

void QOpenGLExtraFunctions_GlCompressedTexImage3D(void* ptr, unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, int imageSize, void* data)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void QOpenGLExtraFunctions_GlCompressedTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, int imageSize, void* data)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void QOpenGLExtraFunctions_GlCopyImageSubData(void* ptr, unsigned int srcName, unsigned int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, unsigned int dstName, unsigned int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

void QOpenGLExtraFunctions_GlCopyTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void QOpenGLExtraFunctions_GlDebugMessageControl(void* ptr, unsigned int source, unsigned int ty, unsigned int severity, int count, unsigned int ids, char enabled)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDebugMessageControl(source, ty, severity, count, const_cast<const GLuint*>(&ids), enabled != 0);
}

void QOpenGLExtraFunctions_GlDeleteProgramPipelines(void* ptr, int n, unsigned int pipelines)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDeleteProgramPipelines(n, const_cast<const GLuint*>(&pipelines));
}

void QOpenGLExtraFunctions_GlDeleteQueries(void* ptr, int n, unsigned int ids)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDeleteQueries(n, const_cast<const GLuint*>(&ids));
}

void QOpenGLExtraFunctions_GlDeleteSamplers(void* ptr, int count, unsigned int samplers)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDeleteSamplers(count, const_cast<const GLuint*>(&samplers));
}

void QOpenGLExtraFunctions_GlDeleteTransformFeedbacks(void* ptr, int n, unsigned int ids)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDeleteTransformFeedbacks(n, const_cast<const GLuint*>(&ids));
}

void QOpenGLExtraFunctions_GlDeleteVertexArrays(void* ptr, int n, unsigned int arrays)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDeleteVertexArrays(n, const_cast<const GLuint*>(&arrays));
}

void QOpenGLExtraFunctions_GlDisablei(void* ptr, unsigned int target, unsigned int index)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDisablei(target, index);
}

void QOpenGLExtraFunctions_GlDispatchCompute(void* ptr, unsigned int num_groups_x, unsigned int num_groups_y, unsigned int num_groups_z)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}

void QOpenGLExtraFunctions_GlDrawArraysIndirect(void* ptr, unsigned int mode, void* indirect)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawArraysIndirect(mode, indirect);
}

void QOpenGLExtraFunctions_GlDrawArraysInstanced(void* ptr, unsigned int mode, int first, int count, int instancecount)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawArraysInstanced(mode, first, count, instancecount);
}

void QOpenGLExtraFunctions_GlDrawBuffers(void* ptr, int n, unsigned int bufs)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawBuffers(n, const_cast<const GLenum*>(&bufs));
}

void QOpenGLExtraFunctions_GlDrawElementsBaseVertex(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int basevertex)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawElementsBaseVertex(mode, count, ty, indices, basevertex);
}

void QOpenGLExtraFunctions_GlDrawElementsIndirect(void* ptr, unsigned int mode, unsigned int ty, void* indirect)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawElementsIndirect(mode, ty, indirect);
}

void QOpenGLExtraFunctions_GlDrawElementsInstanced(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int instancecount)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawElementsInstanced(mode, count, ty, indices, instancecount);
}

void QOpenGLExtraFunctions_GlDrawElementsInstancedBaseVertex(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int instancecount, int basevertex)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawElementsInstancedBaseVertex(mode, count, ty, indices, instancecount, basevertex);
}

void QOpenGLExtraFunctions_GlDrawRangeElements(void* ptr, unsigned int mode, unsigned int start, unsigned int end, int count, unsigned int ty, void* indices)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawRangeElements(mode, start, end, count, ty, indices);
}

void QOpenGLExtraFunctions_GlDrawRangeElementsBaseVertex(void* ptr, unsigned int mode, unsigned int start, unsigned int end, int count, unsigned int ty, void* indices, int basevertex)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glDrawRangeElementsBaseVertex(mode, start, end, count, ty, indices, basevertex);
}

void QOpenGLExtraFunctions_GlEnablei(void* ptr, unsigned int target, unsigned int index)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glEnablei(target, index);
}

void QOpenGLExtraFunctions_GlEndQuery(void* ptr, unsigned int target)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glEndQuery(target);
}

void QOpenGLExtraFunctions_GlEndTransformFeedback(void* ptr)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glEndTransformFeedback();
}

void QOpenGLExtraFunctions_GlFramebufferParameteri(void* ptr, unsigned int target, unsigned int pname, int param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glFramebufferParameteri(target, pname, param);
}

void QOpenGLExtraFunctions_GlFramebufferTexture(void* ptr, unsigned int target, unsigned int attachment, unsigned int texture, int level)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glFramebufferTexture(target, attachment, texture, level);
}

void QOpenGLExtraFunctions_GlFramebufferTextureLayer(void* ptr, unsigned int target, unsigned int attachment, unsigned int texture, int level, int layer)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glFramebufferTextureLayer(target, attachment, texture, level, layer);
}

void QOpenGLExtraFunctions_GlGenProgramPipelines(void* ptr, int n, unsigned int pipelines)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGenProgramPipelines(n, &pipelines);
}

void QOpenGLExtraFunctions_GlGenQueries(void* ptr, int n, unsigned int ids)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGenQueries(n, &ids);
}

void QOpenGLExtraFunctions_GlGenSamplers(void* ptr, int count, unsigned int samplers)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGenSamplers(count, &samplers);
}

void QOpenGLExtraFunctions_GlGenTransformFeedbacks(void* ptr, int n, unsigned int ids)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGenTransformFeedbacks(n, &ids);
}

void QOpenGLExtraFunctions_GlGenVertexArrays(void* ptr, int n, unsigned int arrays)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGenVertexArrays(n, &arrays);
}

void QOpenGLExtraFunctions_GlGetActiveUniformBlockiv(void* ptr, unsigned int program, unsigned int uniformBlockIndex, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, &params);
}

void QOpenGLExtraFunctions_GlGetActiveUniformsiv(void* ptr, unsigned int program, int uniformCount, unsigned int uniformIndices, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetActiveUniformsiv(program, uniformCount, const_cast<const GLuint*>(&uniformIndices), pname, &params);
}

void QOpenGLExtraFunctions_GlGetBooleani_v(void* ptr, unsigned int target, unsigned int index, char* data)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetBooleani_v(target, index, reinterpret_cast<GLboolean*>(data));
}

void QOpenGLExtraFunctions_GlGetBufferPointerv(void* ptr, unsigned int target, unsigned int pname, void* params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetBufferPointerv(target, pname, &params);
}

void QOpenGLExtraFunctions_GlGetFramebufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetFramebufferParameteriv(target, pname, &params);
}

unsigned int QOpenGLExtraFunctions_GlGetGraphicsResetStatus(void* ptr)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glGetGraphicsResetStatus();
}

void QOpenGLExtraFunctions_GlGetIntegeri_v(void* ptr, unsigned int target, unsigned int index, int data)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetIntegeri_v(target, index, &data);
}

void QOpenGLExtraFunctions_GlGetInternalformativ(void* ptr, unsigned int target, unsigned int internalformat, unsigned int pname, int bufSize, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetInternalformativ(target, internalformat, pname, bufSize, &params);
}

void QOpenGLExtraFunctions_GlGetMultisamplefv(void* ptr, unsigned int pname, unsigned int index, float val)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetMultisamplefv(pname, index, &val);
}

void QOpenGLExtraFunctions_GlGetPointerv(void* ptr, unsigned int pname, void* params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetPointerv(pname, &params);
}

void QOpenGLExtraFunctions_GlGetProgramBinary(void* ptr, unsigned int program, int bufSize, int length, unsigned int binaryFormat, void* binary)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetProgramBinary(program, bufSize, &length, &binaryFormat, binary);
}

void QOpenGLExtraFunctions_GlGetProgramInterfaceiv(void* ptr, unsigned int program, unsigned int programInterface, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetProgramInterfaceiv(program, programInterface, pname, &params);
}

void QOpenGLExtraFunctions_GlGetProgramPipelineiv(void* ptr, unsigned int pipeline, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetProgramPipelineiv(pipeline, pname, &params);
}

void QOpenGLExtraFunctions_GlGetProgramResourceiv(void* ptr, unsigned int program, unsigned int programInterface, unsigned int index, int propCount, unsigned int props, int bufSize, int length, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetProgramResourceiv(program, programInterface, index, propCount, const_cast<const GLenum*>(&props), bufSize, &length, &params);
}

void QOpenGLExtraFunctions_GlGetQueryObjectuiv(void* ptr, unsigned int id, unsigned int pname, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetQueryObjectuiv(id, pname, &params);
}

void QOpenGLExtraFunctions_GlGetQueryiv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetQueryiv(target, pname, &params);
}

void QOpenGLExtraFunctions_GlGetSamplerParameterIiv(void* ptr, unsigned int sampler, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetSamplerParameterIiv(sampler, pname, &params);
}

void QOpenGLExtraFunctions_GlGetSamplerParameterIuiv(void* ptr, unsigned int sampler, unsigned int pname, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetSamplerParameterIuiv(sampler, pname, &params);
}

void QOpenGLExtraFunctions_GlGetSamplerParameterfv(void* ptr, unsigned int sampler, unsigned int pname, float params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetSamplerParameterfv(sampler, pname, &params);
}

void QOpenGLExtraFunctions_GlGetSamplerParameteriv(void* ptr, unsigned int sampler, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetSamplerParameteriv(sampler, pname, &params);
}

struct QtGui_PackedString QOpenGLExtraFunctions_GlGetStringi(void* ptr, unsigned int name, unsigned int index)
{
	return ({ char* t7c422e = static_cast<char*>(static_cast<void*>(const_cast<GLubyte*>(static_cast<QOpenGLExtraFunctions*>(ptr)->glGetStringi(name, index)))); QtGui_PackedString { t7c422e, -1, NULL }; });
}

void QOpenGLExtraFunctions_GlGetTexLevelParameterfv(void* ptr, unsigned int target, int level, unsigned int pname, float params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetTexLevelParameterfv(target, level, pname, &params);
}

void QOpenGLExtraFunctions_GlGetTexLevelParameteriv(void* ptr, unsigned int target, int level, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetTexLevelParameteriv(target, level, pname, &params);
}

void QOpenGLExtraFunctions_GlGetTexParameterIiv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetTexParameterIiv(target, pname, &params);
}

void QOpenGLExtraFunctions_GlGetTexParameterIuiv(void* ptr, unsigned int target, unsigned int pname, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetTexParameterIuiv(target, pname, &params);
}

void QOpenGLExtraFunctions_GlGetUniformuiv(void* ptr, unsigned int program, int location, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetUniformuiv(program, location, &params);
}

void QOpenGLExtraFunctions_GlGetVertexAttribIiv(void* ptr, unsigned int index, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetVertexAttribIiv(index, pname, &params);
}

void QOpenGLExtraFunctions_GlGetVertexAttribIuiv(void* ptr, unsigned int index, unsigned int pname, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetVertexAttribIuiv(index, pname, &params);
}

void QOpenGLExtraFunctions_GlGetnUniformfv(void* ptr, unsigned int program, int location, int bufSize, float params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetnUniformfv(program, location, bufSize, &params);
}

void QOpenGLExtraFunctions_GlGetnUniformiv(void* ptr, unsigned int program, int location, int bufSize, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetnUniformiv(program, location, bufSize, &params);
}

void QOpenGLExtraFunctions_GlGetnUniformuiv(void* ptr, unsigned int program, int location, int bufSize, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glGetnUniformuiv(program, location, bufSize, &params);
}

void QOpenGLExtraFunctions_GlInvalidateFramebuffer(void* ptr, unsigned int target, int numAttachments, unsigned int attachments)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glInvalidateFramebuffer(target, numAttachments, const_cast<const GLenum*>(&attachments));
}

void QOpenGLExtraFunctions_GlInvalidateSubFramebuffer(void* ptr, unsigned int target, int numAttachments, unsigned int attachments, int x, int y, int width, int height)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glInvalidateSubFramebuffer(target, numAttachments, const_cast<const GLenum*>(&attachments), x, y, width, height);
}

char QOpenGLExtraFunctions_GlIsEnabledi(void* ptr, unsigned int target, unsigned int index)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsEnabledi(target, index);
}

char QOpenGLExtraFunctions_GlIsProgramPipeline(void* ptr, unsigned int pipeline)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsProgramPipeline(pipeline);
}

char QOpenGLExtraFunctions_GlIsQuery(void* ptr, unsigned int id)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsQuery(id);
}

char QOpenGLExtraFunctions_GlIsSampler(void* ptr, unsigned int sampler)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsSampler(sampler);
}

char QOpenGLExtraFunctions_GlIsTransformFeedback(void* ptr, unsigned int id)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsTransformFeedback(id);
}

char QOpenGLExtraFunctions_GlIsVertexArray(void* ptr, unsigned int array)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glIsVertexArray(array);
}

void QOpenGLExtraFunctions_GlMemoryBarrier(void* ptr, unsigned int barriers)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glMemoryBarrier(barriers);
}

void QOpenGLExtraFunctions_GlMemoryBarrierByRegion(void* ptr, unsigned int barriers)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glMemoryBarrierByRegion(barriers);
}

void QOpenGLExtraFunctions_GlMinSampleShading(void* ptr, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glMinSampleShading(value);
}

void QOpenGLExtraFunctions_GlPatchParameteri(void* ptr, unsigned int pname, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glPatchParameteri(pname, value);
}

void QOpenGLExtraFunctions_GlPauseTransformFeedback(void* ptr)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glPauseTransformFeedback();
}

void QOpenGLExtraFunctions_GlPopDebugGroup(void* ptr)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glPopDebugGroup();
}

void QOpenGLExtraFunctions_GlPrimitiveBoundingBox(void* ptr, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

void QOpenGLExtraFunctions_GlProgramBinary(void* ptr, unsigned int program, unsigned int binaryFormat, void* binary, int length)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramBinary(program, binaryFormat, binary, length);
}

void QOpenGLExtraFunctions_GlProgramParameteri(void* ptr, unsigned int program, unsigned int pname, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramParameteri(program, pname, value);
}

void QOpenGLExtraFunctions_GlProgramUniform1f(void* ptr, unsigned int program, int location, float v0)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1f(program, location, v0);
}

void QOpenGLExtraFunctions_GlProgramUniform1fv(void* ptr, unsigned int program, int location, int count, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1fv(program, location, count, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform1i(void* ptr, unsigned int program, int location, int v0)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1i(program, location, v0);
}

void QOpenGLExtraFunctions_GlProgramUniform1iv(void* ptr, unsigned int program, int location, int count, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1iv(program, location, count, const_cast<const GLint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform1ui(void* ptr, unsigned int program, int location, unsigned int v0)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1ui(program, location, v0);
}

void QOpenGLExtraFunctions_GlProgramUniform1uiv(void* ptr, unsigned int program, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform1uiv(program, location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform2f(void* ptr, unsigned int program, int location, float v0, float v1)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2f(program, location, v0, v1);
}

void QOpenGLExtraFunctions_GlProgramUniform2fv(void* ptr, unsigned int program, int location, int count, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2fv(program, location, count, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform2i(void* ptr, unsigned int program, int location, int v0, int v1)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2i(program, location, v0, v1);
}

void QOpenGLExtraFunctions_GlProgramUniform2iv(void* ptr, unsigned int program, int location, int count, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2iv(program, location, count, const_cast<const GLint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform2ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2ui(program, location, v0, v1);
}

void QOpenGLExtraFunctions_GlProgramUniform2uiv(void* ptr, unsigned int program, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform2uiv(program, location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform3f(void* ptr, unsigned int program, int location, float v0, float v1, float v2)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3f(program, location, v0, v1, v2);
}

void QOpenGLExtraFunctions_GlProgramUniform3fv(void* ptr, unsigned int program, int location, int count, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3fv(program, location, count, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform3i(void* ptr, unsigned int program, int location, int v0, int v1, int v2)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3i(program, location, v0, v1, v2);
}

void QOpenGLExtraFunctions_GlProgramUniform3iv(void* ptr, unsigned int program, int location, int count, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3iv(program, location, count, const_cast<const GLint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform3ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1, unsigned int v2)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3ui(program, location, v0, v1, v2);
}

void QOpenGLExtraFunctions_GlProgramUniform3uiv(void* ptr, unsigned int program, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform3uiv(program, location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform4f(void* ptr, unsigned int program, int location, float v0, float v1, float v2, float v3)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4f(program, location, v0, v1, v2, v3);
}

void QOpenGLExtraFunctions_GlProgramUniform4fv(void* ptr, unsigned int program, int location, int count, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4fv(program, location, count, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform4i(void* ptr, unsigned int program, int location, int v0, int v1, int v2, int v3)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4i(program, location, v0, v1, v2, v3);
}

void QOpenGLExtraFunctions_GlProgramUniform4iv(void* ptr, unsigned int program, int location, int count, int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4iv(program, location, count, const_cast<const GLint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniform4ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4ui(program, location, v0, v1, v2, v3);
}

void QOpenGLExtraFunctions_GlProgramUniform4uiv(void* ptr, unsigned int program, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniform4uiv(program, location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix2fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix2x3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix2x3fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix2x4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix2x4fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix3fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix3x2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix3x2fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix3x4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix3x4fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix4fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix4x2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix4x2fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlProgramUniformMatrix4x3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glProgramUniformMatrix4x3fv(program, location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlReadBuffer(void* ptr, unsigned int src)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glReadBuffer(src);
}

void QOpenGLExtraFunctions_GlReadnPixels(void* ptr, int x, int y, int width, int height, unsigned int format, unsigned int ty, int bufSize, void* data)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glReadnPixels(x, y, width, height, format, ty, bufSize, data);
}

void QOpenGLExtraFunctions_GlRenderbufferStorageMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

void QOpenGLExtraFunctions_GlResumeTransformFeedback(void* ptr)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glResumeTransformFeedback();
}

void QOpenGLExtraFunctions_GlSampleMaski(void* ptr, unsigned int maskNumber, unsigned int mask)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSampleMaski(maskNumber, mask);
}

void QOpenGLExtraFunctions_GlSamplerParameterIiv(void* ptr, unsigned int sampler, unsigned int pname, int param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameterIiv(sampler, pname, const_cast<const GLint*>(&param));
}

void QOpenGLExtraFunctions_GlSamplerParameterIuiv(void* ptr, unsigned int sampler, unsigned int pname, unsigned int param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameterIuiv(sampler, pname, const_cast<const GLuint*>(&param));
}

void QOpenGLExtraFunctions_GlSamplerParameterf(void* ptr, unsigned int sampler, unsigned int pname, float param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameterf(sampler, pname, param);
}

void QOpenGLExtraFunctions_GlSamplerParameterfv(void* ptr, unsigned int sampler, unsigned int pname, float param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameterfv(sampler, pname, const_cast<const GLfloat*>(&param));
}

void QOpenGLExtraFunctions_GlSamplerParameteri(void* ptr, unsigned int sampler, unsigned int pname, int param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameteri(sampler, pname, param);
}

void QOpenGLExtraFunctions_GlSamplerParameteriv(void* ptr, unsigned int sampler, unsigned int pname, int param)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glSamplerParameteriv(sampler, pname, const_cast<const GLint*>(&param));
}

void QOpenGLExtraFunctions_GlTexBuffer(void* ptr, unsigned int target, unsigned int internalformat, unsigned int buffer)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexBuffer(target, internalformat, buffer);
}

void QOpenGLExtraFunctions_GlTexImage3D(void* ptr, unsigned int target, int level, int internalformat, int width, int height, int depth, int border, unsigned int format, unsigned int ty, void* pixels)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexImage3D(target, level, internalformat, width, height, depth, border, format, ty, pixels);
}

void QOpenGLExtraFunctions_GlTexParameterIiv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexParameterIiv(target, pname, const_cast<const GLint*>(&params));
}

void QOpenGLExtraFunctions_GlTexParameterIuiv(void* ptr, unsigned int target, unsigned int pname, unsigned int params)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexParameterIuiv(target, pname, const_cast<const GLuint*>(&params));
}

void QOpenGLExtraFunctions_GlTexStorage2D(void* ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexStorage2D(target, levels, internalformat, width, height);
}

void QOpenGLExtraFunctions_GlTexStorage2DMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, char fixedsamplelocations)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations != 0);
}

void QOpenGLExtraFunctions_GlTexStorage3D(void* ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height, int depth)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexStorage3D(target, levels, internalformat, width, height, depth);
}

void QOpenGLExtraFunctions_GlTexStorage3DMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, int depth, char fixedsamplelocations)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations != 0);
}

void QOpenGLExtraFunctions_GlTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int ty, void* pixels)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, pixels);
}

void QOpenGLExtraFunctions_GlUniform1ui(void* ptr, int location, unsigned int v0)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform1ui(location, v0);
}

void QOpenGLExtraFunctions_GlUniform1uiv(void* ptr, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform1uiv(location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlUniform2ui(void* ptr, int location, unsigned int v0, unsigned int v1)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform2ui(location, v0, v1);
}

void QOpenGLExtraFunctions_GlUniform2uiv(void* ptr, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform2uiv(location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlUniform3ui(void* ptr, int location, unsigned int v0, unsigned int v1, unsigned int v2)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform3ui(location, v0, v1, v2);
}

void QOpenGLExtraFunctions_GlUniform3uiv(void* ptr, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform3uiv(location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlUniform4ui(void* ptr, int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform4ui(location, v0, v1, v2, v3);
}

void QOpenGLExtraFunctions_GlUniform4uiv(void* ptr, int location, int count, unsigned int value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniform4uiv(location, count, const_cast<const GLuint*>(&value));
}

void QOpenGLExtraFunctions_GlUniformBlockBinding(void* ptr, unsigned int program, unsigned int uniformBlockIndex, unsigned int uniformBlockBinding)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

void QOpenGLExtraFunctions_GlUniformMatrix2x3fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix2x3fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlUniformMatrix2x4fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix2x4fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlUniformMatrix3x2fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix3x2fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlUniformMatrix3x4fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix3x4fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlUniformMatrix4x2fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix4x2fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLExtraFunctions_GlUniformMatrix4x3fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUniformMatrix4x3fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

char QOpenGLExtraFunctions_GlUnmapBuffer(void* ptr, unsigned int target)
{
	return static_cast<QOpenGLExtraFunctions*>(ptr)->glUnmapBuffer(target);
}

void QOpenGLExtraFunctions_GlUseProgramStages(void* ptr, unsigned int pipeline, unsigned int stages, unsigned int program)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glUseProgramStages(pipeline, stages, program);
}

void QOpenGLExtraFunctions_GlValidateProgramPipeline(void* ptr, unsigned int pipeline)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glValidateProgramPipeline(pipeline);
}

void QOpenGLExtraFunctions_GlVertexAttribBinding(void* ptr, unsigned int attribindex, unsigned int bindingindex)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribBinding(attribindex, bindingindex);
}

void QOpenGLExtraFunctions_GlVertexAttribDivisor(void* ptr, unsigned int index, unsigned int divisor)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribDivisor(index, divisor);
}

void QOpenGLExtraFunctions_GlVertexAttribFormat(void* ptr, unsigned int attribindex, int size, unsigned int ty, char normalized, unsigned int relativeoffset)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribFormat(attribindex, size, ty, normalized != 0, relativeoffset);
}

void QOpenGLExtraFunctions_GlVertexAttribI4i(void* ptr, unsigned int index, int x, int y, int z, int w)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribI4i(index, x, y, z, w);
}

void QOpenGLExtraFunctions_GlVertexAttribI4iv(void* ptr, unsigned int index, int v)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribI4iv(index, const_cast<const GLint*>(&v));
}

void QOpenGLExtraFunctions_GlVertexAttribI4ui(void* ptr, unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribI4ui(index, x, y, z, w);
}

void QOpenGLExtraFunctions_GlVertexAttribI4uiv(void* ptr, unsigned int index, unsigned int v)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribI4uiv(index, const_cast<const GLuint*>(&v));
}

void QOpenGLExtraFunctions_GlVertexAttribIFormat(void* ptr, unsigned int attribindex, int size, unsigned int ty, unsigned int relativeoffset)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribIFormat(attribindex, size, ty, relativeoffset);
}

void QOpenGLExtraFunctions_GlVertexAttribIPointer(void* ptr, unsigned int index, int size, unsigned int ty, int stride, void* pointer)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexAttribIPointer(index, size, ty, stride, pointer);
}

void QOpenGLExtraFunctions_GlVertexBindingDivisor(void* ptr, unsigned int bindingindex, unsigned int divisor)
{
	static_cast<QOpenGLExtraFunctions*>(ptr)->glVertexBindingDivisor(bindingindex, divisor);
}

class MyQOpenGLFramebufferObject: public QOpenGLFramebufferObject
{
public:
	MyQOpenGLFramebufferObject(const QSize &size, GLenum target = GL_TEXTURE_2D) : QOpenGLFramebufferObject(size, target) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	MyQOpenGLFramebufferObject(int width, int height, GLenum target = GL_TEXTURE_2D) : QOpenGLFramebufferObject(width, height, target) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	MyQOpenGLFramebufferObject(const QSize &size, QOpenGLFramebufferObject::Attachment attachment, GLenum target = GL_TEXTURE_2D, GLenum internalFormat = 0) : QOpenGLFramebufferObject(size, attachment, target, internalFormat) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	MyQOpenGLFramebufferObject(int width, int height, QOpenGLFramebufferObject::Attachment attachment, GLenum target = GL_TEXTURE_2D, GLenum internalFormat = 0) : QOpenGLFramebufferObject(width, height, attachment, target, internalFormat) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	MyQOpenGLFramebufferObject(const QSize &size, const QOpenGLFramebufferObjectFormat &format) : QOpenGLFramebufferObject(size, format) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	MyQOpenGLFramebufferObject(int width, int height, const QOpenGLFramebufferObjectFormat &format) : QOpenGLFramebufferObject(width, height, format) {QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();};
	 ~MyQOpenGLFramebufferObject() { callbackQOpenGLFramebufferObject_DestroyQOpenGLFramebufferObject(this); };
};

Q_DECLARE_METATYPE(QOpenGLFramebufferObject*)
Q_DECLARE_METATYPE(MyQOpenGLFramebufferObject*)

int QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType(){qRegisterMetaType<QOpenGLFramebufferObject*>(); return qRegisterMetaType<MyQOpenGLFramebufferObject*>();}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject(void* size, unsigned int target)
{
	return new MyQOpenGLFramebufferObject(*static_cast<QSize*>(size), target);
}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject2(int width, int height, unsigned int target)
{
	return new MyQOpenGLFramebufferObject(width, height, target);
}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject3(void* size, long long attachment, unsigned int target, unsigned int internalFormat)
{
	return new MyQOpenGLFramebufferObject(*static_cast<QSize*>(size), static_cast<QOpenGLFramebufferObject::Attachment>(attachment), target, internalFormat);
}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject4(int width, int height, long long attachment, unsigned int target, unsigned int internalFormat)
{
	return new MyQOpenGLFramebufferObject(width, height, static_cast<QOpenGLFramebufferObject::Attachment>(attachment), target, internalFormat);
}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject5(void* size, void* format)
{
	return new MyQOpenGLFramebufferObject(*static_cast<QSize*>(size), *static_cast<QOpenGLFramebufferObjectFormat*>(format));
}

void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject6(int width, int height, void* format)
{
	return new MyQOpenGLFramebufferObject(width, height, *static_cast<QOpenGLFramebufferObjectFormat*>(format));
}

void QOpenGLFramebufferObject_AddColorAttachment(void* ptr, void* size, unsigned int internalFormat)
{
	static_cast<QOpenGLFramebufferObject*>(ptr)->addColorAttachment(*static_cast<QSize*>(size), internalFormat);
}

void QOpenGLFramebufferObject_AddColorAttachment2(void* ptr, int width, int height, unsigned int internalFormat)
{
	static_cast<QOpenGLFramebufferObject*>(ptr)->addColorAttachment(width, height, internalFormat);
}

long long QOpenGLFramebufferObject_Attachment(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->attachment();
}

char QOpenGLFramebufferObject_Bind(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->bind();
}

char QOpenGLFramebufferObject_QOpenGLFramebufferObject_BindDefault()
{
	return QOpenGLFramebufferObject::bindDefault();
}

void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex, long long restorePolicy)
{
	QOpenGLFramebufferObject::blitFramebuffer(static_cast<QOpenGLFramebufferObject*>(target), *static_cast<QRect*>(targetRect), static_cast<QOpenGLFramebufferObject*>(source), *static_cast<QRect*>(sourceRect), buffers, filter, readColorAttachmentIndex, drawColorAttachmentIndex, static_cast<QOpenGLFramebufferObject::FramebufferRestorePolicy>(restorePolicy));
}

void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer2(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex)
{
	QOpenGLFramebufferObject::blitFramebuffer(static_cast<QOpenGLFramebufferObject*>(target), *static_cast<QRect*>(targetRect), static_cast<QOpenGLFramebufferObject*>(source), *static_cast<QRect*>(sourceRect), buffers, filter, readColorAttachmentIndex, drawColorAttachmentIndex);
}

void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer3(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter)
{
	QOpenGLFramebufferObject::blitFramebuffer(static_cast<QOpenGLFramebufferObject*>(target), *static_cast<QRect*>(targetRect), static_cast<QOpenGLFramebufferObject*>(source), *static_cast<QRect*>(sourceRect), buffers, filter);
}

void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer4(void* target, void* source, unsigned int buffers, unsigned int filter)
{
	QOpenGLFramebufferObject::blitFramebuffer(static_cast<QOpenGLFramebufferObject*>(target), static_cast<QOpenGLFramebufferObject*>(source), buffers, filter);
}

void* QOpenGLFramebufferObject_Format(void* ptr)
{
	return new QOpenGLFramebufferObjectFormat(static_cast<QOpenGLFramebufferObject*>(ptr)->format());
}

unsigned int QOpenGLFramebufferObject_Handle(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->handle();
}

char QOpenGLFramebufferObject_QOpenGLFramebufferObject_HasOpenGLFramebufferBlit()
{
	return QOpenGLFramebufferObject::hasOpenGLFramebufferBlit();
}

char QOpenGLFramebufferObject_QOpenGLFramebufferObject_HasOpenGLFramebufferObjects()
{
	return QOpenGLFramebufferObject::hasOpenGLFramebufferObjects();
}

int QOpenGLFramebufferObject_Height(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->height();
}

char QOpenGLFramebufferObject_IsBound(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->isBound();
}

char QOpenGLFramebufferObject_IsValid(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->isValid();
}

char QOpenGLFramebufferObject_Release(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->release();
}

void QOpenGLFramebufferObject_SetAttachment(void* ptr, long long attachment)
{
	static_cast<QOpenGLFramebufferObject*>(ptr)->setAttachment(static_cast<QOpenGLFramebufferObject::Attachment>(attachment));
}

void* QOpenGLFramebufferObject_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QOpenGLFramebufferObject*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

struct QtGui_PackedList QOpenGLFramebufferObject_Sizes(void* ptr)
{
	return ({ QVector<QSize>* tmpValued3b21f = new QVector<QSize>(static_cast<QOpenGLFramebufferObject*>(ptr)->sizes()); QtGui_PackedList { tmpValued3b21f, tmpValued3b21f->size() }; });
}

unsigned int QOpenGLFramebufferObject_TakeTexture(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->takeTexture();
}

unsigned int QOpenGLFramebufferObject_TakeTexture2(void* ptr, int colorAttachmentIndex)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->takeTexture(colorAttachmentIndex);
}

unsigned int QOpenGLFramebufferObject_Texture(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->texture();
}

struct QtGui_PackedList QOpenGLFramebufferObject_Textures(void* ptr)
{
	return ({ QVector<GLuint>* tmpValue0c5676 = new QVector<GLuint>(static_cast<QOpenGLFramebufferObject*>(ptr)->textures()); QtGui_PackedList { tmpValue0c5676, tmpValue0c5676->size() }; });
}

void* QOpenGLFramebufferObject_ToImage(void* ptr, char flipped)
{
	return new QImage(static_cast<QOpenGLFramebufferObject*>(ptr)->toImage(flipped != 0));
}

void* QOpenGLFramebufferObject_ToImage2(void* ptr)
{
	return new QImage(static_cast<QOpenGLFramebufferObject*>(ptr)->toImage());
}

void* QOpenGLFramebufferObject_ToImage3(void* ptr, char flipped, int colorAttachmentIndex)
{
	return new QImage(static_cast<QOpenGLFramebufferObject*>(ptr)->toImage(flipped != 0, colorAttachmentIndex));
}

int QOpenGLFramebufferObject_Width(void* ptr)
{
	return static_cast<QOpenGLFramebufferObject*>(ptr)->width();
}

void QOpenGLFramebufferObject_DestroyQOpenGLFramebufferObject(void* ptr)
{
	static_cast<QOpenGLFramebufferObject*>(ptr)->~QOpenGLFramebufferObject();
}

void QOpenGLFramebufferObject_DestroyQOpenGLFramebufferObjectDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOpenGLFramebufferObject___sizes_atList(void* ptr, int i)
{
	return ({ QSize tmpValue = ({QSize tmp = static_cast<QVector<QSize>*>(ptr)->at(i); if (i == static_cast<QVector<QSize>*>(ptr)->size()-1) { static_cast<QVector<QSize>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QOpenGLFramebufferObject___sizes_setList(void* ptr, void* i)
{
	static_cast<QVector<QSize>*>(ptr)->append(*static_cast<QSize*>(i));
}

void* QOpenGLFramebufferObject___sizes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QSize>();
}

unsigned int QOpenGLFramebufferObject___textures_atList(void* ptr, int i)
{
	return ({GLuint tmp = static_cast<QVector<GLuint>*>(ptr)->at(i); if (i == static_cast<QVector<GLuint>*>(ptr)->size()-1) { static_cast<QVector<GLuint>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLFramebufferObject___textures_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<GLuint>*>(ptr)->append(i);
}

void* QOpenGLFramebufferObject___textures_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint>();
}

Q_DECLARE_METATYPE(QOpenGLFramebufferObjectFormat)
Q_DECLARE_METATYPE(QOpenGLFramebufferObjectFormat*)
void* QOpenGLFramebufferObjectFormat_NewQOpenGLFramebufferObjectFormat()
{
	return new QOpenGLFramebufferObjectFormat();
}

void* QOpenGLFramebufferObjectFormat_NewQOpenGLFramebufferObjectFormat2(void* other)
{
	return new QOpenGLFramebufferObjectFormat(*static_cast<QOpenGLFramebufferObjectFormat*>(other));
}

long long QOpenGLFramebufferObjectFormat_Attachment(void* ptr)
{
	return static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->attachment();
}

unsigned int QOpenGLFramebufferObjectFormat_InternalTextureFormat(void* ptr)
{
	return static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->internalTextureFormat();
}

char QOpenGLFramebufferObjectFormat_Mipmap(void* ptr)
{
	return static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->mipmap();
}

int QOpenGLFramebufferObjectFormat_Samples(void* ptr)
{
	return static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->samples();
}

void QOpenGLFramebufferObjectFormat_SetAttachment(void* ptr, long long attachment)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->setAttachment(static_cast<QOpenGLFramebufferObject::Attachment>(attachment));
}

void QOpenGLFramebufferObjectFormat_SetInternalTextureFormat(void* ptr, unsigned int internalTextureFormat)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->setInternalTextureFormat(internalTextureFormat);
}

void QOpenGLFramebufferObjectFormat_SetMipmap(void* ptr, char enabled)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->setMipmap(enabled != 0);
}

void QOpenGLFramebufferObjectFormat_SetSamples(void* ptr, int samples)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->setSamples(samples);
}

void QOpenGLFramebufferObjectFormat_SetTextureTarget(void* ptr, unsigned int target)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->setTextureTarget(target);
}

unsigned int QOpenGLFramebufferObjectFormat_TextureTarget(void* ptr)
{
	return static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->textureTarget();
}

void QOpenGLFramebufferObjectFormat_DestroyQOpenGLFramebufferObjectFormat(void* ptr)
{
	static_cast<QOpenGLFramebufferObjectFormat*>(ptr)->~QOpenGLFramebufferObjectFormat();
}

Q_DECLARE_METATYPE(QOpenGLFunctions)
Q_DECLARE_METATYPE(QOpenGLFunctions*)
void* QOpenGLFunctions_NewQOpenGLFunctions()
{
	return new QOpenGLFunctions();
}

void* QOpenGLFunctions_NewQOpenGLFunctions2(void* context)
{
	return new QOpenGLFunctions(static_cast<QOpenGLContext*>(context));
}

void QOpenGLFunctions_GlActiveTexture(void* ptr, unsigned int texture)
{
	static_cast<QOpenGLFunctions*>(ptr)->glActiveTexture(texture);
}

void QOpenGLFunctions_GlAttachShader(void* ptr, unsigned int program, unsigned int shader)
{
	static_cast<QOpenGLFunctions*>(ptr)->glAttachShader(program, shader);
}

void QOpenGLFunctions_GlBindAttribLocation(void* ptr, unsigned int program, unsigned int index, char* name)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBindAttribLocation(program, index, const_cast<const char*>(name));
}

void QOpenGLFunctions_GlBindBuffer(void* ptr, unsigned int target, unsigned int buffer)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBindBuffer(target, buffer);
}

void QOpenGLFunctions_GlBindFramebuffer(void* ptr, unsigned int target, unsigned int framebuffer)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBindFramebuffer(target, framebuffer);
}

void QOpenGLFunctions_GlBindRenderbuffer(void* ptr, unsigned int target, unsigned int renderbuffer)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBindRenderbuffer(target, renderbuffer);
}

void QOpenGLFunctions_GlBindTexture(void* ptr, unsigned int target, unsigned int texture)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBindTexture(target, texture);
}

void QOpenGLFunctions_GlBlendColor(void* ptr, float red, float green, float blue, float alpha)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBlendColor(red, green, blue, alpha);
}

void QOpenGLFunctions_GlBlendEquation(void* ptr, unsigned int mode)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBlendEquation(mode);
}

void QOpenGLFunctions_GlBlendEquationSeparate(void* ptr, unsigned int modeRGB, unsigned int modeAlpha)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBlendEquationSeparate(modeRGB, modeAlpha);
}

void QOpenGLFunctions_GlBlendFunc(void* ptr, unsigned int sfactor, unsigned int dfactor)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBlendFunc(sfactor, dfactor);
}

void QOpenGLFunctions_GlBlendFuncSeparate(void* ptr, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha)
{
	static_cast<QOpenGLFunctions*>(ptr)->glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

unsigned int QOpenGLFunctions_GlCheckFramebufferStatus(void* ptr, unsigned int target)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glCheckFramebufferStatus(target);
}

void QOpenGLFunctions_GlClear(void* ptr, unsigned int mask)
{
	static_cast<QOpenGLFunctions*>(ptr)->glClear(mask);
}

void QOpenGLFunctions_GlClearColor(void* ptr, float red, float green, float blue, float alpha)
{
	static_cast<QOpenGLFunctions*>(ptr)->glClearColor(red, green, blue, alpha);
}

void QOpenGLFunctions_GlClearDepthf(void* ptr, float depth)
{
	static_cast<QOpenGLFunctions*>(ptr)->glClearDepthf(depth);
}

void QOpenGLFunctions_GlClearStencil(void* ptr, int s)
{
	static_cast<QOpenGLFunctions*>(ptr)->glClearStencil(s);
}

void QOpenGLFunctions_GlColorMask(void* ptr, char red, char green, char blue, char alpha)
{
	static_cast<QOpenGLFunctions*>(ptr)->glColorMask(red != 0, green != 0, blue != 0, alpha != 0);
}

void QOpenGLFunctions_GlCompileShader(void* ptr, unsigned int shader)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCompileShader(shader);
}

void QOpenGLFunctions_GlCompressedTexImage2D(void* ptr, unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, void* data)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

void QOpenGLFunctions_GlCompressedTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, void* data)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void QOpenGLFunctions_GlCopyTexImage2D(void* ptr, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

void QOpenGLFunctions_GlCopyTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

unsigned int QOpenGLFunctions_GlCreateProgram(void* ptr)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glCreateProgram();
}

unsigned int QOpenGLFunctions_GlCreateShader(void* ptr, unsigned int ty)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glCreateShader(ty);
}

void QOpenGLFunctions_GlCullFace(void* ptr, unsigned int mode)
{
	static_cast<QOpenGLFunctions*>(ptr)->glCullFace(mode);
}

void QOpenGLFunctions_GlDeleteBuffers(void* ptr, int n, unsigned int buffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteBuffers(n, const_cast<const GLuint*>(&buffers));
}

void QOpenGLFunctions_GlDeleteFramebuffers(void* ptr, int n, unsigned int framebuffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteFramebuffers(n, const_cast<const GLuint*>(&framebuffers));
}

void QOpenGLFunctions_GlDeleteProgram(void* ptr, unsigned int program)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteProgram(program);
}

void QOpenGLFunctions_GlDeleteRenderbuffers(void* ptr, int n, unsigned int renderbuffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteRenderbuffers(n, const_cast<const GLuint*>(&renderbuffers));
}

void QOpenGLFunctions_GlDeleteShader(void* ptr, unsigned int shader)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteShader(shader);
}

void QOpenGLFunctions_GlDeleteTextures(void* ptr, int n, unsigned int textures)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDeleteTextures(n, const_cast<const GLuint*>(&textures));
}

void QOpenGLFunctions_GlDepthFunc(void* ptr, unsigned int fu)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDepthFunc(fu);
}

void QOpenGLFunctions_GlDepthMask(void* ptr, char flag)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDepthMask(flag != 0);
}

void QOpenGLFunctions_GlDepthRangef(void* ptr, float zNear, float zFar)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDepthRangef(zNear, zFar);
}

void QOpenGLFunctions_GlDetachShader(void* ptr, unsigned int program, unsigned int shader)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDetachShader(program, shader);
}

void QOpenGLFunctions_GlDisable(void* ptr, unsigned int cap)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDisable(cap);
}

void QOpenGLFunctions_GlDisableVertexAttribArray(void* ptr, unsigned int index)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDisableVertexAttribArray(index);
}

void QOpenGLFunctions_GlDrawArrays(void* ptr, unsigned int mode, int first, int count)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDrawArrays(mode, first, count);
}

void QOpenGLFunctions_GlDrawElements(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices)
{
	static_cast<QOpenGLFunctions*>(ptr)->glDrawElements(mode, count, ty, indices);
}

void QOpenGLFunctions_GlEnable(void* ptr, unsigned int cap)
{
	static_cast<QOpenGLFunctions*>(ptr)->glEnable(cap);
}

void QOpenGLFunctions_GlEnableVertexAttribArray(void* ptr, unsigned int index)
{
	static_cast<QOpenGLFunctions*>(ptr)->glEnableVertexAttribArray(index);
}

void QOpenGLFunctions_GlFinish(void* ptr)
{
	static_cast<QOpenGLFunctions*>(ptr)->glFinish();
}

void QOpenGLFunctions_GlFlush(void* ptr)
{
	static_cast<QOpenGLFunctions*>(ptr)->glFlush();
}

void QOpenGLFunctions_GlFramebufferRenderbuffer(void* ptr, unsigned int target, unsigned int attachment, unsigned int renderbuffertarget, unsigned int renderbuffer)
{
	static_cast<QOpenGLFunctions*>(ptr)->glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

void QOpenGLFunctions_GlFramebufferTexture2D(void* ptr, unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level)
{
	static_cast<QOpenGLFunctions*>(ptr)->glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

void QOpenGLFunctions_GlFrontFace(void* ptr, unsigned int mode)
{
	static_cast<QOpenGLFunctions*>(ptr)->glFrontFace(mode);
}

void QOpenGLFunctions_GlGenBuffers(void* ptr, int n, unsigned int buffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGenBuffers(n, &buffers);
}

void QOpenGLFunctions_GlGenFramebuffers(void* ptr, int n, unsigned int framebuffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGenFramebuffers(n, &framebuffers);
}

void QOpenGLFunctions_GlGenRenderbuffers(void* ptr, int n, unsigned int renderbuffers)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGenRenderbuffers(n, &renderbuffers);
}

void QOpenGLFunctions_GlGenTextures(void* ptr, int n, unsigned int textures)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGenTextures(n, &textures);
}

void QOpenGLFunctions_GlGenerateMipmap(void* ptr, unsigned int target)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGenerateMipmap(target);
}

void QOpenGLFunctions_GlGetActiveAttrib(void* ptr, unsigned int program, unsigned int index, int bufsize, int length, int size, unsigned int ty, char* name)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetActiveAttrib(program, index, bufsize, &length, &size, &ty, name);
}

void QOpenGLFunctions_GlGetActiveUniform(void* ptr, unsigned int program, unsigned int index, int bufsize, int length, int size, unsigned int ty, char* name)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetActiveUniform(program, index, bufsize, &length, &size, &ty, name);
}

void QOpenGLFunctions_GlGetAttachedShaders(void* ptr, unsigned int program, int maxcount, int count, unsigned int shaders)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetAttachedShaders(program, maxcount, &count, &shaders);
}

int QOpenGLFunctions_GlGetAttribLocation(void* ptr, unsigned int program, char* name)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glGetAttribLocation(program, const_cast<const char*>(name));
}

void QOpenGLFunctions_GlGetBooleanv(void* ptr, unsigned int pname, char* params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetBooleanv(pname, reinterpret_cast<GLboolean*>(params));
}

void QOpenGLFunctions_GlGetBufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetBufferParameteriv(target, pname, &params);
}

unsigned int QOpenGLFunctions_GlGetError(void* ptr)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glGetError();
}

void QOpenGLFunctions_GlGetFloatv(void* ptr, unsigned int pname, float params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetFloatv(pname, &params);
}

void QOpenGLFunctions_GlGetFramebufferAttachmentParameteriv(void* ptr, unsigned int target, unsigned int attachment, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetFramebufferAttachmentParameteriv(target, attachment, pname, &params);
}

void QOpenGLFunctions_GlGetIntegerv(void* ptr, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetIntegerv(pname, &params);
}

void QOpenGLFunctions_GlGetProgramInfoLog(void* ptr, unsigned int program, int bufsize, int length, char* infolog)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetProgramInfoLog(program, bufsize, &length, infolog);
}

void QOpenGLFunctions_GlGetProgramiv(void* ptr, unsigned int program, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetProgramiv(program, pname, &params);
}

void QOpenGLFunctions_GlGetRenderbufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetRenderbufferParameteriv(target, pname, &params);
}

void QOpenGLFunctions_GlGetShaderInfoLog(void* ptr, unsigned int shader, int bufsize, int length, char* infolog)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetShaderInfoLog(shader, bufsize, &length, infolog);
}

void QOpenGLFunctions_GlGetShaderPrecisionFormat(void* ptr, unsigned int shadertype, unsigned int precisiontype, int ran, int precision)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetShaderPrecisionFormat(shadertype, precisiontype, &ran, &precision);
}

void QOpenGLFunctions_GlGetShaderSource(void* ptr, unsigned int shader, int bufsize, int length, char* source)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetShaderSource(shader, bufsize, &length, source);
}

void QOpenGLFunctions_GlGetShaderiv(void* ptr, unsigned int shader, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetShaderiv(shader, pname, &params);
}

struct QtGui_PackedString QOpenGLFunctions_GlGetString(void* ptr, unsigned int name)
{
	return ({ char* t88dc64 = static_cast<char*>(static_cast<void*>(const_cast<GLubyte*>(static_cast<QOpenGLFunctions*>(ptr)->glGetString(name)))); QtGui_PackedString { t88dc64, -1, NULL }; });
}

void QOpenGLFunctions_GlGetTexParameterfv(void* ptr, unsigned int target, unsigned int pname, float params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetTexParameterfv(target, pname, &params);
}

void QOpenGLFunctions_GlGetTexParameteriv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetTexParameteriv(target, pname, &params);
}

int QOpenGLFunctions_GlGetUniformLocation(void* ptr, unsigned int program, char* name)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glGetUniformLocation(program, const_cast<const char*>(name));
}

void QOpenGLFunctions_GlGetUniformfv(void* ptr, unsigned int program, int location, float params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetUniformfv(program, location, &params);
}

void QOpenGLFunctions_GlGetUniformiv(void* ptr, unsigned int program, int location, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetUniformiv(program, location, &params);
}

void QOpenGLFunctions_GlGetVertexAttribPointerv(void* ptr, unsigned int index, unsigned int pname, void* pointer)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetVertexAttribPointerv(index, pname, &pointer);
}

void QOpenGLFunctions_GlGetVertexAttribfv(void* ptr, unsigned int index, unsigned int pname, float params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetVertexAttribfv(index, pname, &params);
}

void QOpenGLFunctions_GlGetVertexAttribiv(void* ptr, unsigned int index, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glGetVertexAttribiv(index, pname, &params);
}

void QOpenGLFunctions_GlHint(void* ptr, unsigned int target, unsigned int mode)
{
	static_cast<QOpenGLFunctions*>(ptr)->glHint(target, mode);
}

char QOpenGLFunctions_GlIsBuffer(void* ptr, unsigned int buffer)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsBuffer(buffer);
}

char QOpenGLFunctions_GlIsEnabled(void* ptr, unsigned int cap)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsEnabled(cap);
}

char QOpenGLFunctions_GlIsFramebuffer(void* ptr, unsigned int framebuffer)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsFramebuffer(framebuffer);
}

char QOpenGLFunctions_GlIsProgram(void* ptr, unsigned int program)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsProgram(program);
}

char QOpenGLFunctions_GlIsRenderbuffer(void* ptr, unsigned int renderbuffer)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsRenderbuffer(renderbuffer);
}

char QOpenGLFunctions_GlIsShader(void* ptr, unsigned int shader)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsShader(shader);
}

char QOpenGLFunctions_GlIsTexture(void* ptr, unsigned int texture)
{
	return static_cast<QOpenGLFunctions*>(ptr)->glIsTexture(texture);
}

void QOpenGLFunctions_GlLineWidth(void* ptr, float width)
{
	static_cast<QOpenGLFunctions*>(ptr)->glLineWidth(width);
}

void QOpenGLFunctions_GlLinkProgram(void* ptr, unsigned int program)
{
	static_cast<QOpenGLFunctions*>(ptr)->glLinkProgram(program);
}

void QOpenGLFunctions_GlPixelStorei(void* ptr, unsigned int pname, int param)
{
	static_cast<QOpenGLFunctions*>(ptr)->glPixelStorei(pname, param);
}

void QOpenGLFunctions_GlPolygonOffset(void* ptr, float factor, float units)
{
	static_cast<QOpenGLFunctions*>(ptr)->glPolygonOffset(factor, units);
}

void QOpenGLFunctions_GlReadPixels(void* ptr, int x, int y, int width, int height, unsigned int format, unsigned int ty, void* pixels)
{
	static_cast<QOpenGLFunctions*>(ptr)->glReadPixels(x, y, width, height, format, ty, pixels);
}

void QOpenGLFunctions_GlReleaseShaderCompiler(void* ptr)
{
	static_cast<QOpenGLFunctions*>(ptr)->glReleaseShaderCompiler();
}

void QOpenGLFunctions_GlRenderbufferStorage(void* ptr, unsigned int target, unsigned int internalformat, int width, int height)
{
	static_cast<QOpenGLFunctions*>(ptr)->glRenderbufferStorage(target, internalformat, width, height);
}

void QOpenGLFunctions_GlSampleCoverage(void* ptr, float value, char invert)
{
	static_cast<QOpenGLFunctions*>(ptr)->glSampleCoverage(value, invert != 0);
}

void QOpenGLFunctions_GlScissor(void* ptr, int x, int y, int width, int height)
{
	static_cast<QOpenGLFunctions*>(ptr)->glScissor(x, y, width, height);
}

void QOpenGLFunctions_GlShaderBinary(void* ptr, int n, unsigned int shaders, unsigned int binaryformat, void* binary, int length)
{
	static_cast<QOpenGLFunctions*>(ptr)->glShaderBinary(n, const_cast<const GLuint*>(&shaders), binaryformat, binary, length);
}

void QOpenGLFunctions_GlStencilFunc(void* ptr, unsigned int fu, int ref, unsigned int mask)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilFunc(fu, ref, mask);
}

void QOpenGLFunctions_GlStencilFuncSeparate(void* ptr, unsigned int face, unsigned int fu, int ref, unsigned int mask)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilFuncSeparate(face, fu, ref, mask);
}

void QOpenGLFunctions_GlStencilMask(void* ptr, unsigned int mask)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilMask(mask);
}

void QOpenGLFunctions_GlStencilMaskSeparate(void* ptr, unsigned int face, unsigned int mask)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilMaskSeparate(face, mask);
}

void QOpenGLFunctions_GlStencilOp(void* ptr, unsigned int fail, unsigned int zfail, unsigned int zpass)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilOp(fail, zfail, zpass);
}

void QOpenGLFunctions_GlStencilOpSeparate(void* ptr, unsigned int face, unsigned int fail, unsigned int zfail, unsigned int zpass)
{
	static_cast<QOpenGLFunctions*>(ptr)->glStencilOpSeparate(face, fail, zfail, zpass);
}

void QOpenGLFunctions_GlTexImage2D(void* ptr, unsigned int target, int level, int internalformat, int width, int height, int border, unsigned int format, unsigned int ty, void* pixels)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexImage2D(target, level, internalformat, width, height, border, format, ty, pixels);
}

void QOpenGLFunctions_GlTexParameterf(void* ptr, unsigned int target, unsigned int pname, float param)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexParameterf(target, pname, param);
}

void QOpenGLFunctions_GlTexParameterfv(void* ptr, unsigned int target, unsigned int pname, float params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexParameterfv(target, pname, const_cast<const GLfloat*>(&params));
}

void QOpenGLFunctions_GlTexParameteri(void* ptr, unsigned int target, unsigned int pname, int param)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexParameteri(target, pname, param);
}

void QOpenGLFunctions_GlTexParameteriv(void* ptr, unsigned int target, unsigned int pname, int params)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexParameteriv(target, pname, const_cast<const GLint*>(&params));
}

void QOpenGLFunctions_GlTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int ty, void* pixels)
{
	static_cast<QOpenGLFunctions*>(ptr)->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ty, pixels);
}

void QOpenGLFunctions_GlUniform1f(void* ptr, int location, float x)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform1f(location, x);
}

void QOpenGLFunctions_GlUniform1fv(void* ptr, int location, int count, float v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform1fv(location, count, const_cast<const GLfloat*>(&v));
}

void QOpenGLFunctions_GlUniform1i(void* ptr, int location, int x)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform1i(location, x);
}

void QOpenGLFunctions_GlUniform1iv(void* ptr, int location, int count, int v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform1iv(location, count, const_cast<const GLint*>(&v));
}

void QOpenGLFunctions_GlUniform2f(void* ptr, int location, float x, float y)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform2f(location, x, y);
}

void QOpenGLFunctions_GlUniform2fv(void* ptr, int location, int count, float v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform2fv(location, count, const_cast<const GLfloat*>(&v));
}

void QOpenGLFunctions_GlUniform2i(void* ptr, int location, int x, int y)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform2i(location, x, y);
}

void QOpenGLFunctions_GlUniform2iv(void* ptr, int location, int count, int v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform2iv(location, count, const_cast<const GLint*>(&v));
}

void QOpenGLFunctions_GlUniform3f(void* ptr, int location, float x, float y, float z)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform3f(location, x, y, z);
}

void QOpenGLFunctions_GlUniform3fv(void* ptr, int location, int count, float v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform3fv(location, count, const_cast<const GLfloat*>(&v));
}

void QOpenGLFunctions_GlUniform3i(void* ptr, int location, int x, int y, int z)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform3i(location, x, y, z);
}

void QOpenGLFunctions_GlUniform3iv(void* ptr, int location, int count, int v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform3iv(location, count, const_cast<const GLint*>(&v));
}

void QOpenGLFunctions_GlUniform4f(void* ptr, int location, float x, float y, float z, float w)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform4f(location, x, y, z, w);
}

void QOpenGLFunctions_GlUniform4fv(void* ptr, int location, int count, float v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform4fv(location, count, const_cast<const GLfloat*>(&v));
}

void QOpenGLFunctions_GlUniform4i(void* ptr, int location, int x, int y, int z, int w)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform4i(location, x, y, z, w);
}

void QOpenGLFunctions_GlUniform4iv(void* ptr, int location, int count, int v)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniform4iv(location, count, const_cast<const GLint*>(&v));
}

void QOpenGLFunctions_GlUniformMatrix2fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniformMatrix2fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLFunctions_GlUniformMatrix3fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniformMatrix3fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLFunctions_GlUniformMatrix4fv(void* ptr, int location, int count, char transpose, float value)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUniformMatrix4fv(location, count, transpose != 0, const_cast<const GLfloat*>(&value));
}

void QOpenGLFunctions_GlUseProgram(void* ptr, unsigned int program)
{
	static_cast<QOpenGLFunctions*>(ptr)->glUseProgram(program);
}

void QOpenGLFunctions_GlValidateProgram(void* ptr, unsigned int program)
{
	static_cast<QOpenGLFunctions*>(ptr)->glValidateProgram(program);
}

void QOpenGLFunctions_GlVertexAttrib1f(void* ptr, unsigned int indx, float x)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib1f(indx, x);
}

void QOpenGLFunctions_GlVertexAttrib1fv(void* ptr, unsigned int indx, float values)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib1fv(indx, const_cast<const GLfloat*>(&values));
}

void QOpenGLFunctions_GlVertexAttrib2f(void* ptr, unsigned int indx, float x, float y)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib2f(indx, x, y);
}

void QOpenGLFunctions_GlVertexAttrib2fv(void* ptr, unsigned int indx, float values)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib2fv(indx, const_cast<const GLfloat*>(&values));
}

void QOpenGLFunctions_GlVertexAttrib3f(void* ptr, unsigned int indx, float x, float y, float z)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib3f(indx, x, y, z);
}

void QOpenGLFunctions_GlVertexAttrib3fv(void* ptr, unsigned int indx, float values)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib3fv(indx, const_cast<const GLfloat*>(&values));
}

void QOpenGLFunctions_GlVertexAttrib4f(void* ptr, unsigned int indx, float x, float y, float z, float w)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib4f(indx, x, y, z, w);
}

void QOpenGLFunctions_GlVertexAttrib4fv(void* ptr, unsigned int indx, float values)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttrib4fv(indx, const_cast<const GLfloat*>(&values));
}

void QOpenGLFunctions_GlVertexAttribPointer(void* ptr, unsigned int indx, int size, unsigned int ty, char normalized, int stride, void* p)
{
	static_cast<QOpenGLFunctions*>(ptr)->glVertexAttribPointer(indx, size, ty, normalized != 0, stride, p);
}

void QOpenGLFunctions_GlViewport(void* ptr, int x, int y, int width, int height)
{
	static_cast<QOpenGLFunctions*>(ptr)->glViewport(x, y, width, height);
}

char QOpenGLFunctions_HasOpenGLFeature(void* ptr, long long feature)
{
	return static_cast<QOpenGLFunctions*>(ptr)->hasOpenGLFeature(static_cast<QOpenGLFunctions::OpenGLFeature>(feature));
}

void QOpenGLFunctions_InitializeOpenGLFunctions(void* ptr)
{
	static_cast<QOpenGLFunctions*>(ptr)->initializeOpenGLFunctions();
}

long long QOpenGLFunctions_OpenGLFeatures(void* ptr)
{
	return static_cast<QOpenGLFunctions*>(ptr)->openGLFeatures();
}

void QOpenGLFunctions_DestroyQOpenGLFunctions(void* ptr)
{
	static_cast<QOpenGLFunctions*>(ptr)->~QOpenGLFunctions();
}

class MyQOpenGLPaintDevice: public QOpenGLPaintDevice
{
public:
	MyQOpenGLPaintDevice() : QOpenGLPaintDevice() {QOpenGLPaintDevice_QOpenGLPaintDevice_QRegisterMetaType();};
	MyQOpenGLPaintDevice(const QSize &size) : QOpenGLPaintDevice(size) {QOpenGLPaintDevice_QOpenGLPaintDevice_QRegisterMetaType();};
	MyQOpenGLPaintDevice(int width, int height) : QOpenGLPaintDevice(width, height) {QOpenGLPaintDevice_QOpenGLPaintDevice_QRegisterMetaType();};
	void ensureActiveTarget() { callbackQOpenGLPaintDevice_EnsureActiveTarget(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQOpenGLPaintDevice_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQOpenGLPaintDevice() { callbackQOpenGLPaintDevice_DestroyQOpenGLPaintDevice(this); };
};

Q_DECLARE_METATYPE(QOpenGLPaintDevice*)
Q_DECLARE_METATYPE(MyQOpenGLPaintDevice*)

int QOpenGLPaintDevice_QOpenGLPaintDevice_QRegisterMetaType(){qRegisterMetaType<QOpenGLPaintDevice*>(); return qRegisterMetaType<MyQOpenGLPaintDevice*>();}

void* QOpenGLPaintDevice_NewQOpenGLPaintDevice()
{
	return new MyQOpenGLPaintDevice();
}

void* QOpenGLPaintDevice_NewQOpenGLPaintDevice2(void* size)
{
	return new MyQOpenGLPaintDevice(*static_cast<QSize*>(size));
}

void* QOpenGLPaintDevice_NewQOpenGLPaintDevice3(int width, int height)
{
	return new MyQOpenGLPaintDevice(width, height);
}

void* QOpenGLPaintDevice_Context(void* ptr)
{
	return static_cast<QOpenGLPaintDevice*>(ptr)->context();
}

double QOpenGLPaintDevice_DotsPerMeterX(void* ptr)
{
	return static_cast<QOpenGLPaintDevice*>(ptr)->dotsPerMeterX();
}

double QOpenGLPaintDevice_DotsPerMeterY(void* ptr)
{
	return static_cast<QOpenGLPaintDevice*>(ptr)->dotsPerMeterY();
}

void QOpenGLPaintDevice_EnsureActiveTarget(void* ptr)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->ensureActiveTarget();
}

void QOpenGLPaintDevice_EnsureActiveTargetDefault(void* ptr)
{
		static_cast<QOpenGLPaintDevice*>(ptr)->QOpenGLPaintDevice::ensureActiveTarget();
}

void* QOpenGLPaintDevice_PaintEngine(void* ptr)
{
	return static_cast<QOpenGLPaintDevice*>(ptr)->paintEngine();
}

void* QOpenGLPaintDevice_PaintEngineDefault(void* ptr)
{
		return static_cast<QOpenGLPaintDevice*>(ptr)->QOpenGLPaintDevice::paintEngine();
}

char QOpenGLPaintDevice_PaintFlipped(void* ptr)
{
	return static_cast<QOpenGLPaintDevice*>(ptr)->paintFlipped();
}

void QOpenGLPaintDevice_SetDevicePixelRatio(void* ptr, double devicePixelRatio)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->setDevicePixelRatio(devicePixelRatio);
}

void QOpenGLPaintDevice_SetDotsPerMeterX(void* ptr, double dpmx)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->setDotsPerMeterX(dpmx);
}

void QOpenGLPaintDevice_SetDotsPerMeterY(void* ptr, double dpmy)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->setDotsPerMeterY(dpmy);
}

void QOpenGLPaintDevice_SetPaintFlipped(void* ptr, char flipped)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->setPaintFlipped(flipped != 0);
}

void QOpenGLPaintDevice_SetSize(void* ptr, void* size)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->setSize(*static_cast<QSize*>(size));
}

void* QOpenGLPaintDevice_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QOpenGLPaintDevice*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QOpenGLPaintDevice_DestroyQOpenGLPaintDevice(void* ptr)
{
	static_cast<QOpenGLPaintDevice*>(ptr)->~QOpenGLPaintDevice();
}

void QOpenGLPaintDevice_DestroyQOpenGLPaintDeviceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QOpenGLPixelTransferOptions)
Q_DECLARE_METATYPE(QOpenGLPixelTransferOptions*)
void* QOpenGLPixelTransferOptions_NewQOpenGLPixelTransferOptions()
{
	return new QOpenGLPixelTransferOptions();
}

int QOpenGLPixelTransferOptions_Alignment(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->alignment();
}

int QOpenGLPixelTransferOptions_ImageHeight(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->imageHeight();
}

char QOpenGLPixelTransferOptions_IsLeastSignificantBitFirst(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->isLeastSignificantBitFirst();
}

char QOpenGLPixelTransferOptions_IsSwapBytesEnabled(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->isSwapBytesEnabled();
}

int QOpenGLPixelTransferOptions_RowLength(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->rowLength();
}

void QOpenGLPixelTransferOptions_SetAlignment(void* ptr, int alignment)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setAlignment(alignment);
}

void QOpenGLPixelTransferOptions_SetImageHeight(void* ptr, int imageHeight)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setImageHeight(imageHeight);
}

void QOpenGLPixelTransferOptions_SetLeastSignificantByteFirst(void* ptr, char lsbFirst)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setLeastSignificantByteFirst(lsbFirst != 0);
}

void QOpenGLPixelTransferOptions_SetRowLength(void* ptr, int rowLength)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setRowLength(rowLength);
}

void QOpenGLPixelTransferOptions_SetSkipImages(void* ptr, int skipImages)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setSkipImages(skipImages);
}

void QOpenGLPixelTransferOptions_SetSkipPixels(void* ptr, int skipPixels)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setSkipPixels(skipPixels);
}

void QOpenGLPixelTransferOptions_SetSkipRows(void* ptr, int skipRows)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setSkipRows(skipRows);
}

void QOpenGLPixelTransferOptions_SetSwapBytesEnabled(void* ptr, char swapBytes)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->setSwapBytesEnabled(swapBytes != 0);
}

int QOpenGLPixelTransferOptions_SkipImages(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->skipImages();
}

int QOpenGLPixelTransferOptions_SkipPixels(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->skipPixels();
}

int QOpenGLPixelTransferOptions_SkipRows(void* ptr)
{
	return static_cast<QOpenGLPixelTransferOptions*>(ptr)->skipRows();
}

void QOpenGLPixelTransferOptions_DestroyQOpenGLPixelTransferOptions(void* ptr)
{
	static_cast<QOpenGLPixelTransferOptions*>(ptr)->~QOpenGLPixelTransferOptions();
}

class MyQOpenGLShader: public QOpenGLShader
{
public:
	MyQOpenGLShader(QOpenGLShader::ShaderType ty, QObject *parent = Q_NULLPTR) : QOpenGLShader(ty, parent) {QOpenGLShader_QOpenGLShader_QRegisterMetaType();};
	 ~MyQOpenGLShader() { callbackQOpenGLShader_DestroyQOpenGLShader(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLShader_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLShader_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLShader_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLShader_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLShader_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLShader_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLShader_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLShader_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLShader_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLShader_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLShader_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLShader*)
Q_DECLARE_METATYPE(MyQOpenGLShader*)

int QOpenGLShader_QOpenGLShader_QRegisterMetaType(){qRegisterMetaType<QOpenGLShader*>(); return qRegisterMetaType<MyQOpenGLShader*>();}

void* QOpenGLShader_NewQOpenGLShader(long long ty, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLShader(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QObject*>(parent));
	}
}

char QOpenGLShader_CompileSourceCode(void* ptr, char* source)
{
	return static_cast<QOpenGLShader*>(ptr)->compileSourceCode(const_cast<const char*>(source));
}

char QOpenGLShader_CompileSourceCode2(void* ptr, void* source)
{
	return static_cast<QOpenGLShader*>(ptr)->compileSourceCode(*static_cast<QByteArray*>(source));
}

char QOpenGLShader_CompileSourceCode3(void* ptr, struct QtGui_PackedString source)
{
	return static_cast<QOpenGLShader*>(ptr)->compileSourceCode(QString::fromUtf8(source.data, source.len));
}

char QOpenGLShader_CompileSourceFile(void* ptr, struct QtGui_PackedString fileName)
{
	return static_cast<QOpenGLShader*>(ptr)->compileSourceFile(QString::fromUtf8(fileName.data, fileName.len));
}

char QOpenGLShader_QOpenGLShader_HasOpenGLShaders(long long ty, void* context)
{
	return QOpenGLShader::hasOpenGLShaders(static_cast<QOpenGLShader::ShaderTypeBit>(ty), static_cast<QOpenGLContext*>(context));
}

char QOpenGLShader_IsCompiled(void* ptr)
{
	return static_cast<QOpenGLShader*>(ptr)->isCompiled();
}

struct QtGui_PackedString QOpenGLShader_Log(void* ptr)
{
	return ({ QByteArray* t6038d9 = new QByteArray(static_cast<QOpenGLShader*>(ptr)->log().toUtf8()); QtGui_PackedString { const_cast<char*>(t6038d9->prepend("WHITESPACE").constData()+10), t6038d9->size()-10, t6038d9 }; });
}

unsigned int QOpenGLShader_ShaderId(void* ptr)
{
	return static_cast<QOpenGLShader*>(ptr)->shaderId();
}

long long QOpenGLShader_ShaderType(void* ptr)
{
	return static_cast<QOpenGLShader*>(ptr)->shaderType();
}

void* QOpenGLShader_SourceCode(void* ptr)
{
	return new QByteArray(static_cast<QOpenGLShader*>(ptr)->sourceCode());
}

void QOpenGLShader_DestroyQOpenGLShader(void* ptr)
{
	static_cast<QOpenGLShader*>(ptr)->~QOpenGLShader();
}

void QOpenGLShader_DestroyQOpenGLShaderDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOpenGLShader___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShader___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShader___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLShader___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLShader___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLShader___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLShader___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShader___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShader___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLShader___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShader___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShader___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLShader_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLShader_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLShader_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLShader_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::deleteLater();
}

void QOpenGLShader_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLShader_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::event(static_cast<QEvent*>(e));
}

char QOpenGLShader_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLShader_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::metaObject());
}

void QOpenGLShader_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShader*>(ptr)->QOpenGLShader::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQOpenGLShaderProgram: public QOpenGLShaderProgram
{
public:
	MyQOpenGLShaderProgram(QObject *parent = Q_NULLPTR) : QOpenGLShaderProgram(parent) {QOpenGLShaderProgram_QOpenGLShaderProgram_QRegisterMetaType();};
	bool link() { return callbackQOpenGLShaderProgram_Link(this) != 0; };
	 ~MyQOpenGLShaderProgram() { callbackQOpenGLShaderProgram_DestroyQOpenGLShaderProgram(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLShaderProgram_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLShaderProgram_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLShaderProgram_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLShaderProgram_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLShaderProgram_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLShaderProgram_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLShaderProgram_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLShaderProgram_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLShaderProgram_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLShaderProgram_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLShaderProgram_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLShaderProgram*)
Q_DECLARE_METATYPE(MyQOpenGLShaderProgram*)

int QOpenGLShaderProgram_QOpenGLShaderProgram_QRegisterMetaType(){qRegisterMetaType<QOpenGLShaderProgram*>(); return qRegisterMetaType<MyQOpenGLShaderProgram*>();}

void* QOpenGLShaderProgram_NewQOpenGLShaderProgram(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLShaderProgram(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLShaderProgram(static_cast<QObject*>(parent));
	}
}

char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode(void* ptr, long long ty, char* source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addCacheableShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), const_cast<const char*>(source));
}

char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode2(void* ptr, long long ty, void* source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addCacheableShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), *static_cast<QByteArray*>(source));
}

char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode3(void* ptr, long long ty, struct QtGui_PackedString source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addCacheableShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), QString::fromUtf8(source.data, source.len));
}

char QOpenGLShaderProgram_AddCacheableShaderFromSourceFile(void* ptr, long long ty, struct QtGui_PackedString fileName)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addCacheableShaderFromSourceFile(static_cast<QOpenGLShader::ShaderTypeBit>(ty), QString::fromUtf8(fileName.data, fileName.len));
}

char QOpenGLShaderProgram_AddShader(void* ptr, void* shader)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addShader(static_cast<QOpenGLShader*>(shader));
}

char QOpenGLShaderProgram_AddShaderFromSourceCode(void* ptr, long long ty, char* source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), const_cast<const char*>(source));
}

char QOpenGLShaderProgram_AddShaderFromSourceCode2(void* ptr, long long ty, void* source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), *static_cast<QByteArray*>(source));
}

char QOpenGLShaderProgram_AddShaderFromSourceCode3(void* ptr, long long ty, struct QtGui_PackedString source)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addShaderFromSourceCode(static_cast<QOpenGLShader::ShaderTypeBit>(ty), QString::fromUtf8(source.data, source.len));
}

char QOpenGLShaderProgram_AddShaderFromSourceFile(void* ptr, long long ty, struct QtGui_PackedString fileName)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->addShaderFromSourceFile(static_cast<QOpenGLShader::ShaderTypeBit>(ty), QString::fromUtf8(fileName.data, fileName.len));
}

int QOpenGLShaderProgram_AttributeLocation(void* ptr, char* name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->attributeLocation(const_cast<const char*>(name));
}

int QOpenGLShaderProgram_AttributeLocation2(void* ptr, void* name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->attributeLocation(*static_cast<QByteArray*>(name));
}

int QOpenGLShaderProgram_AttributeLocation3(void* ptr, struct QtGui_PackedString name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->attributeLocation(QString::fromUtf8(name.data, name.len));
}

char QOpenGLShaderProgram_Bind(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->bind();
}

void QOpenGLShaderProgram_BindAttributeLocation(void* ptr, char* name, int location)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->bindAttributeLocation(const_cast<const char*>(name), location);
}

void QOpenGLShaderProgram_BindAttributeLocation2(void* ptr, void* name, int location)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->bindAttributeLocation(*static_cast<QByteArray*>(name), location);
}

void QOpenGLShaderProgram_BindAttributeLocation3(void* ptr, struct QtGui_PackedString name, int location)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->bindAttributeLocation(QString::fromUtf8(name.data, name.len), location);
}

char QOpenGLShaderProgram_Create(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->create();
}

struct QtGui_PackedList QOpenGLShaderProgram_DefaultInnerTessellationLevels(void* ptr)
{
	return ({ QVector<float>* tmpValued1ea02 = new QVector<float>(static_cast<QOpenGLShaderProgram*>(ptr)->defaultInnerTessellationLevels()); QtGui_PackedList { tmpValued1ea02, tmpValued1ea02->size() }; });
}

struct QtGui_PackedList QOpenGLShaderProgram_DefaultOuterTessellationLevels(void* ptr)
{
	return ({ QVector<float>* tmpValue63d866 = new QVector<float>(static_cast<QOpenGLShaderProgram*>(ptr)->defaultOuterTessellationLevels()); QtGui_PackedList { tmpValue63d866, tmpValue63d866->size() }; });
}

void QOpenGLShaderProgram_DisableAttributeArray(void* ptr, int location)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->disableAttributeArray(location);
}

void QOpenGLShaderProgram_DisableAttributeArray2(void* ptr, char* name)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->disableAttributeArray(const_cast<const char*>(name));
}

void QOpenGLShaderProgram_EnableAttributeArray(void* ptr, int location)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->enableAttributeArray(location);
}

void QOpenGLShaderProgram_EnableAttributeArray2(void* ptr, char* name)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->enableAttributeArray(const_cast<const char*>(name));
}

char QOpenGLShaderProgram_QOpenGLShaderProgram_HasOpenGLShaderPrograms(void* context)
{
	return QOpenGLShaderProgram::hasOpenGLShaderPrograms(static_cast<QOpenGLContext*>(context));
}

char QOpenGLShaderProgram_IsLinked(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->isLinked();
}

char QOpenGLShaderProgram_Link(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->link();
}

char QOpenGLShaderProgram_LinkDefault(void* ptr)
{
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::link();
}

struct QtGui_PackedString QOpenGLShaderProgram_Log(void* ptr)
{
	return ({ QByteArray* t6e5a96 = new QByteArray(static_cast<QOpenGLShaderProgram*>(ptr)->log().toUtf8()); QtGui_PackedString { const_cast<char*>(t6e5a96->prepend("WHITESPACE").constData()+10), t6e5a96->size()-10, t6e5a96 }; });
}

int QOpenGLShaderProgram_MaxGeometryOutputVertices(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->maxGeometryOutputVertices();
}

int QOpenGLShaderProgram_PatchVertexCount(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->patchVertexCount();
}

unsigned int QOpenGLShaderProgram_ProgramId(void* ptr)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->programId();
}

void QOpenGLShaderProgram_Release(void* ptr)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->release();
}

void QOpenGLShaderProgram_RemoveAllShaders(void* ptr)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->removeAllShaders();
}

void QOpenGLShaderProgram_RemoveShader(void* ptr, void* shader)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->removeShader(static_cast<QOpenGLShader*>(shader));
}

void QOpenGLShaderProgram_SetAttributeArray(void* ptr, int location, float values, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(location, const_cast<const GLfloat*>(&values), tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeArray2(void* ptr, int location, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(location, static_cast<QVector2D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray3(void* ptr, int location, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(location, static_cast<QVector3D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray4(void* ptr, int location, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(location, static_cast<QVector4D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray5(void* ptr, int location, unsigned int ty, void* values, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(location, ty, values, tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeArray6(void* ptr, char* name, float values, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(const_cast<const char*>(name), const_cast<const GLfloat*>(&values), tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeArray7(void* ptr, char* name, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(const_cast<const char*>(name), static_cast<QVector2D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray8(void* ptr, char* name, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(const_cast<const char*>(name), static_cast<QVector3D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray9(void* ptr, char* name, void* values, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(const_cast<const char*>(name), static_cast<QVector4D*>(values), stride);
}

void QOpenGLShaderProgram_SetAttributeArray10(void* ptr, char* name, unsigned int ty, void* values, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeArray(const_cast<const char*>(name), ty, values, tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeBuffer(void* ptr, int location, unsigned int ty, int offset, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeBuffer(location, ty, offset, tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeBuffer2(void* ptr, char* name, unsigned int ty, int offset, int tupleSize, int stride)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeBuffer(const_cast<const char*>(name), ty, offset, tupleSize, stride);
}

void QOpenGLShaderProgram_SetAttributeValue(void* ptr, int location, float value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, value);
}

void QOpenGLShaderProgram_SetAttributeValue2(void* ptr, int location, float x, float y)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, x, y);
}

void QOpenGLShaderProgram_SetAttributeValue3(void* ptr, int location, float x, float y, float z)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, x, y, z);
}

void QOpenGLShaderProgram_SetAttributeValue4(void* ptr, int location, float x, float y, float z, float w)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, x, y, z, w);
}

void QOpenGLShaderProgram_SetAttributeValue5(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, *static_cast<QVector2D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue6(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, *static_cast<QVector3D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue7(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, *static_cast<QVector4D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue8(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, *static_cast<QColor*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue9(void* ptr, int location, float values, int columns, int rows)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(location, const_cast<const GLfloat*>(&values), columns, rows);
}

void QOpenGLShaderProgram_SetAttributeValue10(void* ptr, char* name, float value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), value);
}

void QOpenGLShaderProgram_SetAttributeValue11(void* ptr, char* name, float x, float y)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), x, y);
}

void QOpenGLShaderProgram_SetAttributeValue12(void* ptr, char* name, float x, float y, float z)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), x, y, z);
}

void QOpenGLShaderProgram_SetAttributeValue13(void* ptr, char* name, float x, float y, float z, float w)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), x, y, z, w);
}

void QOpenGLShaderProgram_SetAttributeValue14(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), *static_cast<QVector2D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue15(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), *static_cast<QVector3D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue16(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), *static_cast<QVector4D*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue17(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), *static_cast<QColor*>(value));
}

void QOpenGLShaderProgram_SetAttributeValue18(void* ptr, char* name, float values, int columns, int rows)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setAttributeValue(const_cast<const char*>(name), const_cast<const GLfloat*>(&values), columns, rows);
}

void QOpenGLShaderProgram_SetDefaultInnerTessellationLevels(void* ptr, void* levels)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setDefaultInnerTessellationLevels(*static_cast<QVector<float>*>(levels));
}

void QOpenGLShaderProgram_SetDefaultOuterTessellationLevels(void* ptr, void* levels)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setDefaultOuterTessellationLevels(*static_cast<QVector<float>*>(levels));
}

void QOpenGLShaderProgram_SetPatchVertexCount(void* ptr, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setPatchVertexCount(count);
}

void QOpenGLShaderProgram_SetUniformValue(void* ptr, int location, float value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, value);
}

void QOpenGLShaderProgram_SetUniformValue2(void* ptr, int location, int value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, value);
}

void QOpenGLShaderProgram_SetUniformValue3(void* ptr, int location, unsigned int value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, value);
}

void QOpenGLShaderProgram_SetUniformValue4(void* ptr, int location, float x, float y)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, x, y);
}

void QOpenGLShaderProgram_SetUniformValue5(void* ptr, int location, float x, float y, float z)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, x, y, z);
}

void QOpenGLShaderProgram_SetUniformValue6(void* ptr, int location, float x, float y, float z, float w)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, x, y, z, w);
}

void QOpenGLShaderProgram_SetUniformValue7(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QVector2D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue8(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QVector3D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue9(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QVector4D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue10(void* ptr, int location, void* color)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QColor*>(color));
}

void QOpenGLShaderProgram_SetUniformValue11(void* ptr, int location, void* point)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QPoint*>(point));
}

void QOpenGLShaderProgram_SetUniformValue12(void* ptr, int location, void* point)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QPointF*>(point));
}

void QOpenGLShaderProgram_SetUniformValue13(void* ptr, int location, void* size)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QSize*>(size));
}

void QOpenGLShaderProgram_SetUniformValue14(void* ptr, int location, void* size)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QSizeF*>(size));
}

void QOpenGLShaderProgram_SetUniformValue23(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QMatrix4x4*>(value));
}

void QOpenGLShaderProgram_SetUniformValue27(void* ptr, int location, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(location, *static_cast<QTransform*>(value));
}

void QOpenGLShaderProgram_SetUniformValue28(void* ptr, char* name, float value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), value);
}

void QOpenGLShaderProgram_SetUniformValue29(void* ptr, char* name, int value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), value);
}

void QOpenGLShaderProgram_SetUniformValue30(void* ptr, char* name, unsigned int value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), value);
}

void QOpenGLShaderProgram_SetUniformValue31(void* ptr, char* name, float x, float y)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), x, y);
}

void QOpenGLShaderProgram_SetUniformValue32(void* ptr, char* name, float x, float y, float z)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), x, y, z);
}

void QOpenGLShaderProgram_SetUniformValue33(void* ptr, char* name, float x, float y, float z, float w)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), x, y, z, w);
}

void QOpenGLShaderProgram_SetUniformValue34(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QVector2D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue35(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QVector3D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue36(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QVector4D*>(value));
}

void QOpenGLShaderProgram_SetUniformValue37(void* ptr, char* name, void* color)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QColor*>(color));
}

void QOpenGLShaderProgram_SetUniformValue38(void* ptr, char* name, void* point)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QPoint*>(point));
}

void QOpenGLShaderProgram_SetUniformValue39(void* ptr, char* name, void* point)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QPointF*>(point));
}

void QOpenGLShaderProgram_SetUniformValue40(void* ptr, char* name, void* size)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QSize*>(size));
}

void QOpenGLShaderProgram_SetUniformValue41(void* ptr, char* name, void* size)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QSizeF*>(size));
}

void QOpenGLShaderProgram_SetUniformValue50(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QMatrix4x4*>(value));
}

void QOpenGLShaderProgram_SetUniformValue54(void* ptr, char* name, void* value)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValue(const_cast<const char*>(name), *static_cast<QTransform*>(value));
}

void QOpenGLShaderProgram_SetUniformValueArray(void* ptr, int location, float values, int count, int tupleSize)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, const_cast<const GLfloat*>(&values), count, tupleSize);
}

void QOpenGLShaderProgram_SetUniformValueArray2(void* ptr, int location, int values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, const_cast<const GLint*>(&values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray3(void* ptr, int location, unsigned int values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, const_cast<const GLuint*>(&values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray4(void* ptr, int location, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, static_cast<QVector2D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray5(void* ptr, int location, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, static_cast<QVector3D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray6(void* ptr, int location, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, static_cast<QVector4D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray15(void* ptr, int location, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(location, static_cast<QMatrix4x4*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray16(void* ptr, char* name, float values, int count, int tupleSize)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), const_cast<const GLfloat*>(&values), count, tupleSize);
}

void QOpenGLShaderProgram_SetUniformValueArray17(void* ptr, char* name, int values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), const_cast<const GLint*>(&values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray18(void* ptr, char* name, unsigned int values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), const_cast<const GLuint*>(&values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray19(void* ptr, char* name, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), static_cast<QVector2D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray20(void* ptr, char* name, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), static_cast<QVector3D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray21(void* ptr, char* name, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), static_cast<QVector4D*>(values), count);
}

void QOpenGLShaderProgram_SetUniformValueArray30(void* ptr, char* name, void* values, int count)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->setUniformValueArray(const_cast<const char*>(name), static_cast<QMatrix4x4*>(values), count);
}

struct QtGui_PackedList QOpenGLShaderProgram_Shaders(void* ptr)
{
	return ({ QList<QOpenGLShader *>* tmpValuee656ce = new QList<QOpenGLShader *>(static_cast<QOpenGLShaderProgram*>(ptr)->shaders()); QtGui_PackedList { tmpValuee656ce, tmpValuee656ce->size() }; });
}

int QOpenGLShaderProgram_UniformLocation(void* ptr, char* name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->uniformLocation(const_cast<const char*>(name));
}

int QOpenGLShaderProgram_UniformLocation2(void* ptr, void* name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->uniformLocation(*static_cast<QByteArray*>(name));
}

int QOpenGLShaderProgram_UniformLocation3(void* ptr, struct QtGui_PackedString name)
{
	return static_cast<QOpenGLShaderProgram*>(ptr)->uniformLocation(QString::fromUtf8(name.data, name.len));
}

void QOpenGLShaderProgram_DestroyQOpenGLShaderProgram(void* ptr)
{
	static_cast<QOpenGLShaderProgram*>(ptr)->~QOpenGLShaderProgram();
}

void QOpenGLShaderProgram_DestroyQOpenGLShaderProgramDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

float QOpenGLShaderProgram___defaultInnerTessellationLevels_atList(void* ptr, int i)
{
	return ({float tmp = static_cast<QVector<float>*>(ptr)->at(i); if (i == static_cast<QVector<float>*>(ptr)->size()-1) { static_cast<QVector<float>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___defaultInnerTessellationLevels_setList(void* ptr, float i)
{
	static_cast<QVector<float>*>(ptr)->append(i);
}

void* QOpenGLShaderProgram___defaultInnerTessellationLevels_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<float>();
}

float QOpenGLShaderProgram___defaultOuterTessellationLevels_atList(void* ptr, int i)
{
	return ({float tmp = static_cast<QVector<float>*>(ptr)->at(i); if (i == static_cast<QVector<float>*>(ptr)->size()-1) { static_cast<QVector<float>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___defaultOuterTessellationLevels_setList(void* ptr, float i)
{
	static_cast<QVector<float>*>(ptr)->append(i);
}

void* QOpenGLShaderProgram___defaultOuterTessellationLevels_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<float>();
}

float QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_atList(void* ptr, int i)
{
	return ({float tmp = static_cast<QVector<float>*>(ptr)->at(i); if (i == static_cast<QVector<float>*>(ptr)->size()-1) { static_cast<QVector<float>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_setList(void* ptr, float i)
{
	static_cast<QVector<float>*>(ptr)->append(i);
}

void* QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<float>();
}

float QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_atList(void* ptr, int i)
{
	return ({float tmp = static_cast<QVector<float>*>(ptr)->at(i); if (i == static_cast<QVector<float>*>(ptr)->size()-1) { static_cast<QVector<float>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_setList(void* ptr, float i)
{
	static_cast<QVector<float>*>(ptr)->append(i);
}

void* QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<float>();
}

void* QOpenGLShaderProgram___shaders_atList(void* ptr, int i)
{
	return ({QOpenGLShader * tmp = static_cast<QList<QOpenGLShader *>*>(ptr)->at(i); if (i == static_cast<QList<QOpenGLShader *>*>(ptr)->size()-1) { static_cast<QList<QOpenGLShader *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___shaders_setList(void* ptr, void* i)
{
	static_cast<QList<QOpenGLShader *>*>(ptr)->append(static_cast<QOpenGLShader*>(i));
}

void* QOpenGLShaderProgram___shaders_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QOpenGLShader *>();
}

void* QOpenGLShaderProgram___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShaderProgram___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLShaderProgram___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLShaderProgram___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLShaderProgram___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLShaderProgram___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShaderProgram___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLShaderProgram___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLShaderProgram___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLShaderProgram___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLShaderProgram_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLShaderProgram_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLShaderProgram_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLShaderProgram_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::deleteLater();
}

void QOpenGLShaderProgram_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLShaderProgram_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::event(static_cast<QEvent*>(e));
}

char QOpenGLShaderProgram_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLShaderProgram_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::metaObject());
}

void QOpenGLShaderProgram_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLShaderProgram*>(ptr)->QOpenGLShaderProgram::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QOpenGLTexture*)
void* QOpenGLTexture_NewQOpenGLTexture(long long target)
{
	return new QOpenGLTexture(static_cast<QOpenGLTexture::Target>(target));
}

void* QOpenGLTexture_NewQOpenGLTexture2(void* image, long long genMipMaps)
{
	return new QOpenGLTexture(*static_cast<QImage*>(image), static_cast<QOpenGLTexture::MipMapGeneration>(genMipMaps));
}

void QOpenGLTexture_AllocateStorage(void* ptr)
{
	static_cast<QOpenGLTexture*>(ptr)->allocateStorage();
}

void QOpenGLTexture_AllocateStorage2(void* ptr, long long pixelFormat, long long pixelType)
{
	static_cast<QOpenGLTexture*>(ptr)->allocateStorage(static_cast<QOpenGLTexture::PixelFormat>(pixelFormat), static_cast<QOpenGLTexture::PixelType>(pixelType));
}

void QOpenGLTexture_Bind(void* ptr)
{
	static_cast<QOpenGLTexture*>(ptr)->bind();
}

void QOpenGLTexture_Bind2(void* ptr, unsigned int unit, long long reset)
{
	static_cast<QOpenGLTexture*>(ptr)->bind(unit, static_cast<QOpenGLTexture::TextureUnitReset>(reset));
}

void* QOpenGLTexture_BorderColor(void* ptr)
{
	return new QColor(static_cast<QOpenGLTexture*>(ptr)->borderColor());
}

void QOpenGLTexture_BorderColor2(void* ptr, float border)
{
	static_cast<QOpenGLTexture*>(ptr)->borderColor(&border);
}

void QOpenGLTexture_BorderColor3(void* ptr, int border)
{
	static_cast<QOpenGLTexture*>(ptr)->borderColor(&border);
}

void QOpenGLTexture_BorderColor4(void* ptr, unsigned int border)
{
	static_cast<QOpenGLTexture*>(ptr)->borderColor(&border);
}

unsigned int QOpenGLTexture_QOpenGLTexture_BoundTextureId(long long target)
{
	return QOpenGLTexture::boundTextureId(static_cast<QOpenGLTexture::BindingTarget>(target));
}

unsigned int QOpenGLTexture_QOpenGLTexture_BoundTextureId2(unsigned int unit, long long target)
{
	return QOpenGLTexture::boundTextureId(unit, static_cast<QOpenGLTexture::BindingTarget>(target));
}

long long QOpenGLTexture_ComparisonFunction(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->comparisonFunction();
}

long long QOpenGLTexture_ComparisonMode(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->comparisonMode();
}

char QOpenGLTexture_Create(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->create();
}

void* QOpenGLTexture_CreateTextureView(void* ptr, long long target, long long viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer)
{
	return static_cast<QOpenGLTexture*>(ptr)->createTextureView(static_cast<QOpenGLTexture::Target>(target), static_cast<QOpenGLTexture::TextureFormat>(viewFormat), minimumMipmapLevel, maximumMipmapLevel, minimumLayer, maximumLayer);
}

int QOpenGLTexture_Depth(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->depth();
}

long long QOpenGLTexture_DepthStencilMode(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->depthStencilMode();
}

void QOpenGLTexture_Destroy(void* ptr)
{
	static_cast<QOpenGLTexture*>(ptr)->destroy();
}

int QOpenGLTexture_Faces(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->faces();
}

long long QOpenGLTexture_Format(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->format();
}

void QOpenGLTexture_GenerateMipMaps(void* ptr)
{
	static_cast<QOpenGLTexture*>(ptr)->generateMipMaps();
}

void QOpenGLTexture_GenerateMipMaps2(void* ptr, int baseLevel, char resetBaseLevel)
{
	static_cast<QOpenGLTexture*>(ptr)->generateMipMaps(baseLevel, resetBaseLevel != 0);
}

char QOpenGLTexture_QOpenGLTexture_HasFeature(long long feature)
{
	return QOpenGLTexture::hasFeature(static_cast<QOpenGLTexture::Feature>(feature));
}

int QOpenGLTexture_Height(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->height();
}

char QOpenGLTexture_IsAutoMipMapGenerationEnabled(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isAutoMipMapGenerationEnabled();
}

char QOpenGLTexture_IsBound(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isBound();
}

char QOpenGLTexture_IsBound2(void* ptr, unsigned int unit)
{
	return static_cast<QOpenGLTexture*>(ptr)->isBound(unit);
}

char QOpenGLTexture_IsCreated(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isCreated();
}

char QOpenGLTexture_IsFixedSamplePositions(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isFixedSamplePositions();
}

char QOpenGLTexture_IsStorageAllocated(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isStorageAllocated();
}

char QOpenGLTexture_IsTextureView(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->isTextureView();
}

int QOpenGLTexture_Layers(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->layers();
}

float QOpenGLTexture_LevelofDetailBias(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->levelofDetailBias();
}

long long QOpenGLTexture_MagnificationFilter(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->magnificationFilter();
}

float QOpenGLTexture_MaximumAnisotropy(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->maximumAnisotropy();
}

float QOpenGLTexture_MaximumLevelOfDetail(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->maximumLevelOfDetail();
}

int QOpenGLTexture_MaximumMipLevels(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->maximumMipLevels();
}

long long QOpenGLTexture_MinificationFilter(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->minificationFilter();
}

float QOpenGLTexture_MinimumLevelOfDetail(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->minimumLevelOfDetail();
}

int QOpenGLTexture_MipBaseLevel(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->mipBaseLevel();
}

int QOpenGLTexture_MipLevels(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->mipLevels();
}

int QOpenGLTexture_MipMaxLevel(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->mipMaxLevel();
}

void QOpenGLTexture_Release(void* ptr)
{
	static_cast<QOpenGLTexture*>(ptr)->release();
}

void QOpenGLTexture_Release2(void* ptr, unsigned int unit, long long reset)
{
	static_cast<QOpenGLTexture*>(ptr)->release(unit, static_cast<QOpenGLTexture::TextureUnitReset>(reset));
}

int QOpenGLTexture_Samples(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->samples();
}

void QOpenGLTexture_SetAutoMipMapGenerationEnabled(void* ptr, char enabled)
{
	static_cast<QOpenGLTexture*>(ptr)->setAutoMipMapGenerationEnabled(enabled != 0);
}

void QOpenGLTexture_SetBorderColor(void* ptr, void* color)
{
	static_cast<QOpenGLTexture*>(ptr)->setBorderColor(*static_cast<QColor*>(color));
}

void QOpenGLTexture_SetBorderColor2(void* ptr, float r, float g, float b, float a)
{
	static_cast<QOpenGLTexture*>(ptr)->setBorderColor(r, g, b, a);
}

void QOpenGLTexture_SetBorderColor3(void* ptr, int r, int g, int b, int a)
{
	static_cast<QOpenGLTexture*>(ptr)->setBorderColor(r, g, b, a);
}

void QOpenGLTexture_SetBorderColor4(void* ptr, unsigned int r, unsigned int g, unsigned int b, unsigned int a)
{
	static_cast<QOpenGLTexture*>(ptr)->setBorderColor(r, g, b, a);
}

void QOpenGLTexture_SetComparisonFunction(void* ptr, long long function)
{
	static_cast<QOpenGLTexture*>(ptr)->setComparisonFunction(static_cast<QOpenGLTexture::ComparisonFunction>(function));
}

void QOpenGLTexture_SetComparisonMode(void* ptr, long long mode)
{
	static_cast<QOpenGLTexture*>(ptr)->setComparisonMode(static_cast<QOpenGLTexture::ComparisonMode>(mode));
}

void QOpenGLTexture_SetCompressedData(void* ptr, int mipLevel, int layer, long long cubeFace, int dataSize, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setCompressedData(mipLevel, layer, static_cast<QOpenGLTexture::CubeMapFace>(cubeFace), dataSize, data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetCompressedData6(void* ptr, int mipLevel, int layer, int layerCount, long long cubeFace, int dataSize, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setCompressedData(mipLevel, layer, layerCount, static_cast<QOpenGLTexture::CubeMapFace>(cubeFace), dataSize, data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetCompressedData7(void* ptr, int mipLevel, int layer, int dataSize, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setCompressedData(mipLevel, layer, dataSize, data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetCompressedData8(void* ptr, int mipLevel, int dataSize, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setCompressedData(mipLevel, dataSize, data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetCompressedData9(void* ptr, int dataSize, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setCompressedData(dataSize, data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData(void* ptr, int mipLevel, int layer, long long cubeFace, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(mipLevel, layer, static_cast<QOpenGLTexture::CubeMapFace>(cubeFace), static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData6(void* ptr, int mipLevel, int layer, int layerCount, long long cubeFace, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(mipLevel, layer, layerCount, static_cast<QOpenGLTexture::CubeMapFace>(cubeFace), static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData7(void* ptr, int mipLevel, int layer, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(mipLevel, layer, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData8(void* ptr, int mipLevel, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(mipLevel, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData9(void* ptr, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData10(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(xOffset, yOffset, zOffset, width, height, depth, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData11(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData12(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData13(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long face, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, static_cast<QOpenGLTexture::CubeMapFace>(face), static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData14(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long face, int layerCount, long long sourceFormat, long long sourceType, void* data, void* options)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, static_cast<QOpenGLTexture::CubeMapFace>(face), layerCount, static_cast<QOpenGLTexture::PixelFormat>(sourceFormat), static_cast<QOpenGLTexture::PixelType>(sourceType), data, static_cast<QOpenGLPixelTransferOptions*>(options));
}

void QOpenGLTexture_SetData15(void* ptr, void* image, long long genMipMaps)
{
	static_cast<QOpenGLTexture*>(ptr)->setData(*static_cast<QImage*>(image), static_cast<QOpenGLTexture::MipMapGeneration>(genMipMaps));
}

void QOpenGLTexture_SetDepthStencilMode(void* ptr, long long mode)
{
	static_cast<QOpenGLTexture*>(ptr)->setDepthStencilMode(static_cast<QOpenGLTexture::DepthStencilMode>(mode));
}

void QOpenGLTexture_SetFixedSamplePositions(void* ptr, char fixed)
{
	static_cast<QOpenGLTexture*>(ptr)->setFixedSamplePositions(fixed != 0);
}

void QOpenGLTexture_SetFormat(void* ptr, long long format)
{
	static_cast<QOpenGLTexture*>(ptr)->setFormat(static_cast<QOpenGLTexture::TextureFormat>(format));
}

void QOpenGLTexture_SetLayers(void* ptr, int layers)
{
	static_cast<QOpenGLTexture*>(ptr)->setLayers(layers);
}

void QOpenGLTexture_SetLevelOfDetailRange(void* ptr, float min, float max)
{
	static_cast<QOpenGLTexture*>(ptr)->setLevelOfDetailRange(min, max);
}

void QOpenGLTexture_SetLevelofDetailBias(void* ptr, float bias)
{
	static_cast<QOpenGLTexture*>(ptr)->setLevelofDetailBias(bias);
}

void QOpenGLTexture_SetMagnificationFilter(void* ptr, long long filter)
{
	static_cast<QOpenGLTexture*>(ptr)->setMagnificationFilter(static_cast<QOpenGLTexture::Filter>(filter));
}

void QOpenGLTexture_SetMaximumAnisotropy(void* ptr, float anisotropy)
{
	static_cast<QOpenGLTexture*>(ptr)->setMaximumAnisotropy(anisotropy);
}

void QOpenGLTexture_SetMaximumLevelOfDetail(void* ptr, float value)
{
	static_cast<QOpenGLTexture*>(ptr)->setMaximumLevelOfDetail(value);
}

void QOpenGLTexture_SetMinMagFilters(void* ptr, long long minificationFilter, long long magnificationFilter)
{
	static_cast<QOpenGLTexture*>(ptr)->setMinMagFilters(static_cast<QOpenGLTexture::Filter>(minificationFilter), static_cast<QOpenGLTexture::Filter>(magnificationFilter));
}

void QOpenGLTexture_SetMinificationFilter(void* ptr, long long filter)
{
	static_cast<QOpenGLTexture*>(ptr)->setMinificationFilter(static_cast<QOpenGLTexture::Filter>(filter));
}

void QOpenGLTexture_SetMinimumLevelOfDetail(void* ptr, float value)
{
	static_cast<QOpenGLTexture*>(ptr)->setMinimumLevelOfDetail(value);
}

void QOpenGLTexture_SetMipBaseLevel(void* ptr, int baseLevel)
{
	static_cast<QOpenGLTexture*>(ptr)->setMipBaseLevel(baseLevel);
}

void QOpenGLTexture_SetMipLevelRange(void* ptr, int baseLevel, int maxLevel)
{
	static_cast<QOpenGLTexture*>(ptr)->setMipLevelRange(baseLevel, maxLevel);
}

void QOpenGLTexture_SetMipLevels(void* ptr, int levels)
{
	static_cast<QOpenGLTexture*>(ptr)->setMipLevels(levels);
}

void QOpenGLTexture_SetMipMaxLevel(void* ptr, int maxLevel)
{
	static_cast<QOpenGLTexture*>(ptr)->setMipMaxLevel(maxLevel);
}

void QOpenGLTexture_SetSamples(void* ptr, int samples)
{
	static_cast<QOpenGLTexture*>(ptr)->setSamples(samples);
}

void QOpenGLTexture_SetSize(void* ptr, int width, int height, int depth)
{
	static_cast<QOpenGLTexture*>(ptr)->setSize(width, height, depth);
}

void QOpenGLTexture_SetSwizzleMask(void* ptr, long long component, long long value)
{
	static_cast<QOpenGLTexture*>(ptr)->setSwizzleMask(static_cast<QOpenGLTexture::SwizzleComponent>(component), static_cast<QOpenGLTexture::SwizzleValue>(value));
}

void QOpenGLTexture_SetSwizzleMask2(void* ptr, long long r, long long g, long long b, long long a)
{
	static_cast<QOpenGLTexture*>(ptr)->setSwizzleMask(static_cast<QOpenGLTexture::SwizzleValue>(r), static_cast<QOpenGLTexture::SwizzleValue>(g), static_cast<QOpenGLTexture::SwizzleValue>(b), static_cast<QOpenGLTexture::SwizzleValue>(a));
}

void QOpenGLTexture_SetWrapMode(void* ptr, long long mode)
{
	static_cast<QOpenGLTexture*>(ptr)->setWrapMode(static_cast<QOpenGLTexture::WrapMode>(mode));
}

void QOpenGLTexture_SetWrapMode2(void* ptr, long long direction, long long mode)
{
	static_cast<QOpenGLTexture*>(ptr)->setWrapMode(static_cast<QOpenGLTexture::CoordinateDirection>(direction), static_cast<QOpenGLTexture::WrapMode>(mode));
}

long long QOpenGLTexture_SwizzleMask(void* ptr, long long component)
{
	return static_cast<QOpenGLTexture*>(ptr)->swizzleMask(static_cast<QOpenGLTexture::SwizzleComponent>(component));
}

long long QOpenGLTexture_Target(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->target();
}

unsigned int QOpenGLTexture_TextureId(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->textureId();
}

int QOpenGLTexture_Width(void* ptr)
{
	return static_cast<QOpenGLTexture*>(ptr)->width();
}

long long QOpenGLTexture_WrapMode(void* ptr, long long direction)
{
	return static_cast<QOpenGLTexture*>(ptr)->wrapMode(static_cast<QOpenGLTexture::CoordinateDirection>(direction));
}

Q_DECLARE_METATYPE(QOpenGLTextureBlitter*)
void* QOpenGLTextureBlitter_NewQOpenGLTextureBlitter()
{
	return new QOpenGLTextureBlitter();
}

void QOpenGLTextureBlitter_Bind(void* ptr, unsigned int target)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->bind(target);
}

void QOpenGLTextureBlitter_Blit(void* ptr, unsigned int texture, void* targetTransform, long long sourceOrigin)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->blit(texture, *static_cast<QMatrix4x4*>(targetTransform), static_cast<QOpenGLTextureBlitter::Origin>(sourceOrigin));
}

char QOpenGLTextureBlitter_Create(void* ptr)
{
	return static_cast<QOpenGLTextureBlitter*>(ptr)->create();
}

void QOpenGLTextureBlitter_Destroy(void* ptr)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->destroy();
}

char QOpenGLTextureBlitter_IsCreated(void* ptr)
{
	return static_cast<QOpenGLTextureBlitter*>(ptr)->isCreated();
}

void QOpenGLTextureBlitter_Release(void* ptr)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->release();
}

void QOpenGLTextureBlitter_SetOpacity(void* ptr, float opacity)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->setOpacity(opacity);
}

void QOpenGLTextureBlitter_SetRedBlueSwizzle(void* ptr, char swizzle)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->setRedBlueSwizzle(swizzle != 0);
}

char QOpenGLTextureBlitter_SupportsExternalOESTarget(void* ptr)
{
	return static_cast<QOpenGLTextureBlitter*>(ptr)->supportsExternalOESTarget();
}

void* QOpenGLTextureBlitter_QOpenGLTextureBlitter_TargetTransform(void* target, void* viewport)
{
	return new QMatrix4x4(QOpenGLTextureBlitter::targetTransform(*static_cast<QRectF*>(target), *static_cast<QRect*>(viewport)));
}

void QOpenGLTextureBlitter_DestroyQOpenGLTextureBlitter(void* ptr)
{
	static_cast<QOpenGLTextureBlitter*>(ptr)->~QOpenGLTextureBlitter();
}

class MyQOpenGLTimeMonitor: public QOpenGLTimeMonitor
{
public:
	MyQOpenGLTimeMonitor(QObject *parent = Q_NULLPTR) : QOpenGLTimeMonitor(parent) {QOpenGLTimeMonitor_QOpenGLTimeMonitor_QRegisterMetaType();};
	 ~MyQOpenGLTimeMonitor() { callbackQOpenGLTimeMonitor_DestroyQOpenGLTimeMonitor(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLTimeMonitor_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLTimeMonitor_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLTimeMonitor_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLTimeMonitor_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLTimeMonitor_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLTimeMonitor_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLTimeMonitor_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLTimeMonitor_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLTimeMonitor_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLTimeMonitor_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLTimeMonitor_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLTimeMonitor*)
Q_DECLARE_METATYPE(MyQOpenGLTimeMonitor*)

int QOpenGLTimeMonitor_QOpenGLTimeMonitor_QRegisterMetaType(){qRegisterMetaType<QOpenGLTimeMonitor*>(); return qRegisterMetaType<MyQOpenGLTimeMonitor*>();}

void* QOpenGLTimeMonitor_NewQOpenGLTimeMonitor(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimeMonitor(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLTimeMonitor(static_cast<QObject*>(parent));
	}
}

char QOpenGLTimeMonitor_Create(void* ptr)
{
	return static_cast<QOpenGLTimeMonitor*>(ptr)->create();
}

void QOpenGLTimeMonitor_Destroy(void* ptr)
{
	static_cast<QOpenGLTimeMonitor*>(ptr)->destroy();
}

char QOpenGLTimeMonitor_IsCreated(void* ptr)
{
	return static_cast<QOpenGLTimeMonitor*>(ptr)->isCreated();
}

char QOpenGLTimeMonitor_IsResultAvailable(void* ptr)
{
	return static_cast<QOpenGLTimeMonitor*>(ptr)->isResultAvailable();
}

struct QtGui_PackedList QOpenGLTimeMonitor_ObjectIds(void* ptr)
{
	return ({ QVector<GLuint>* tmpValueef0adc = new QVector<GLuint>(static_cast<QOpenGLTimeMonitor*>(ptr)->objectIds()); QtGui_PackedList { tmpValueef0adc, tmpValueef0adc->size() }; });
}

int QOpenGLTimeMonitor_RecordSample(void* ptr)
{
	return static_cast<QOpenGLTimeMonitor*>(ptr)->recordSample();
}

void QOpenGLTimeMonitor_Reset(void* ptr)
{
	static_cast<QOpenGLTimeMonitor*>(ptr)->reset();
}

int QOpenGLTimeMonitor_SampleCount(void* ptr)
{
	return static_cast<QOpenGLTimeMonitor*>(ptr)->sampleCount();
}

void QOpenGLTimeMonitor_SetSampleCount(void* ptr, int sampleCount)
{
	static_cast<QOpenGLTimeMonitor*>(ptr)->setSampleCount(sampleCount);
}

void QOpenGLTimeMonitor_DestroyQOpenGLTimeMonitor(void* ptr)
{
	static_cast<QOpenGLTimeMonitor*>(ptr)->~QOpenGLTimeMonitor();
}

void QOpenGLTimeMonitor_DestroyQOpenGLTimeMonitorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

unsigned int QOpenGLTimeMonitor___objectIds_atList(void* ptr, int i)
{
	return ({GLuint tmp = static_cast<QVector<GLuint>*>(ptr)->at(i); if (i == static_cast<QVector<GLuint>*>(ptr)->size()-1) { static_cast<QVector<GLuint>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QOpenGLTimeMonitor___objectIds_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<GLuint>*>(ptr)->append(i);
}

void* QOpenGLTimeMonitor___objectIds_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint>();
}

void* QOpenGLTimeMonitor___waitForIntervals_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint64>();
}

void* QOpenGLTimeMonitor___waitForSamples_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<GLuint64>();
}

void* QOpenGLTimeMonitor___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimeMonitor___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimeMonitor___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLTimeMonitor___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLTimeMonitor___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLTimeMonitor___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLTimeMonitor___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimeMonitor___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimeMonitor___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLTimeMonitor___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimeMonitor___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimeMonitor___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLTimeMonitor_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLTimeMonitor_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLTimeMonitor_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLTimeMonitor_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::deleteLater();
}

void QOpenGLTimeMonitor_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLTimeMonitor_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::event(static_cast<QEvent*>(e));
}

char QOpenGLTimeMonitor_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLTimeMonitor_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::metaObject());
}

void QOpenGLTimeMonitor_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimeMonitor*>(ptr)->QOpenGLTimeMonitor::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQOpenGLTimerQuery: public QOpenGLTimerQuery
{
public:
	MyQOpenGLTimerQuery(QObject *parent = Q_NULLPTR) : QOpenGLTimerQuery(parent) {QOpenGLTimerQuery_QOpenGLTimerQuery_QRegisterMetaType();};
	 ~MyQOpenGLTimerQuery() { callbackQOpenGLTimerQuery_DestroyQOpenGLTimerQuery(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLTimerQuery_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLTimerQuery_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLTimerQuery_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLTimerQuery_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLTimerQuery_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLTimerQuery_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLTimerQuery_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLTimerQuery_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLTimerQuery_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLTimerQuery_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLTimerQuery_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLTimerQuery*)
Q_DECLARE_METATYPE(MyQOpenGLTimerQuery*)

int QOpenGLTimerQuery_QOpenGLTimerQuery_QRegisterMetaType(){qRegisterMetaType<QOpenGLTimerQuery*>(); return qRegisterMetaType<MyQOpenGLTimerQuery*>();}

void* QOpenGLTimerQuery_NewQOpenGLTimerQuery(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLTimerQuery(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLTimerQuery(static_cast<QObject*>(parent));
	}
}

void QOpenGLTimerQuery_Begin(void* ptr)
{
	static_cast<QOpenGLTimerQuery*>(ptr)->begin();
}

char QOpenGLTimerQuery_Create(void* ptr)
{
	return static_cast<QOpenGLTimerQuery*>(ptr)->create();
}

void QOpenGLTimerQuery_Destroy(void* ptr)
{
	static_cast<QOpenGLTimerQuery*>(ptr)->destroy();
}

void QOpenGLTimerQuery_End(void* ptr)
{
	static_cast<QOpenGLTimerQuery*>(ptr)->end();
}

char QOpenGLTimerQuery_IsCreated(void* ptr)
{
	return static_cast<QOpenGLTimerQuery*>(ptr)->isCreated();
}

char QOpenGLTimerQuery_IsResultAvailable(void* ptr)
{
	return static_cast<QOpenGLTimerQuery*>(ptr)->isResultAvailable();
}

unsigned int QOpenGLTimerQuery_ObjectId(void* ptr)
{
	return static_cast<QOpenGLTimerQuery*>(ptr)->objectId();
}

void QOpenGLTimerQuery_RecordTimestamp(void* ptr)
{
	static_cast<QOpenGLTimerQuery*>(ptr)->recordTimestamp();
}

void QOpenGLTimerQuery_DestroyQOpenGLTimerQuery(void* ptr)
{
	static_cast<QOpenGLTimerQuery*>(ptr)->~QOpenGLTimerQuery();
}

void QOpenGLTimerQuery_DestroyQOpenGLTimerQueryDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOpenGLTimerQuery___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimerQuery___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimerQuery___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLTimerQuery___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLTimerQuery___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLTimerQuery___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLTimerQuery___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimerQuery___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimerQuery___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLTimerQuery___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLTimerQuery___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLTimerQuery___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLTimerQuery_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLTimerQuery_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLTimerQuery_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLTimerQuery_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::deleteLater();
}

void QOpenGLTimerQuery_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLTimerQuery_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::event(static_cast<QEvent*>(e));
}

char QOpenGLTimerQuery_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLTimerQuery_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::metaObject());
}

void QOpenGLTimerQuery_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLTimerQuery*>(ptr)->QOpenGLTimerQuery::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QOpenGLVersionProfile)
Q_DECLARE_METATYPE(QOpenGLVersionProfile*)
void* QOpenGLVersionProfile_NewQOpenGLVersionProfile()
{
	return new QOpenGLVersionProfile();
}

void* QOpenGLVersionProfile_NewQOpenGLVersionProfile2(void* format)
{
	return new QOpenGLVersionProfile(*static_cast<QSurfaceFormat*>(format));
}

void* QOpenGLVersionProfile_NewQOpenGLVersionProfile3(void* other)
{
	return new QOpenGLVersionProfile(*static_cast<QOpenGLVersionProfile*>(other));
}

char QOpenGLVersionProfile_HasProfiles(void* ptr)
{
	return static_cast<QOpenGLVersionProfile*>(ptr)->hasProfiles();
}

char QOpenGLVersionProfile_IsLegacyVersion(void* ptr)
{
	return static_cast<QOpenGLVersionProfile*>(ptr)->isLegacyVersion();
}

char QOpenGLVersionProfile_IsValid(void* ptr)
{
	return static_cast<QOpenGLVersionProfile*>(ptr)->isValid();
}

long long QOpenGLVersionProfile_Profile(void* ptr)
{
	return static_cast<QOpenGLVersionProfile*>(ptr)->profile();
}

void QOpenGLVersionProfile_SetProfile(void* ptr, long long profile)
{
	static_cast<QOpenGLVersionProfile*>(ptr)->setProfile(static_cast<QSurfaceFormat::OpenGLContextProfile>(profile));
}

void QOpenGLVersionProfile_SetVersion(void* ptr, int majorVersion, int minorVersion)
{
	static_cast<QOpenGLVersionProfile*>(ptr)->setVersion(majorVersion, minorVersion);
}

void QOpenGLVersionProfile_DestroyQOpenGLVersionProfile(void* ptr)
{
	static_cast<QOpenGLVersionProfile*>(ptr)->~QOpenGLVersionProfile();
}

class MyQOpenGLVertexArrayObject: public QOpenGLVertexArrayObject
{
public:
	MyQOpenGLVertexArrayObject(QObject *parent = Q_NULLPTR) : QOpenGLVertexArrayObject(parent) {QOpenGLVertexArrayObject_QOpenGLVertexArrayObject_QRegisterMetaType();};
	 ~MyQOpenGLVertexArrayObject() { callbackQOpenGLVertexArrayObject_DestroyQOpenGLVertexArrayObject(this); };
	void childEvent(QChildEvent * event) { callbackQOpenGLVertexArrayObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQOpenGLVertexArrayObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQOpenGLVertexArrayObject_CustomEvent(this, event); };
	void deleteLater() { callbackQOpenGLVertexArrayObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQOpenGLVertexArrayObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQOpenGLVertexArrayObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQOpenGLVertexArrayObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQOpenGLVertexArrayObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQOpenGLVertexArrayObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQOpenGLVertexArrayObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQOpenGLVertexArrayObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QOpenGLVertexArrayObject*)
Q_DECLARE_METATYPE(MyQOpenGLVertexArrayObject*)

int QOpenGLVertexArrayObject_QOpenGLVertexArrayObject_QRegisterMetaType(){qRegisterMetaType<QOpenGLVertexArrayObject*>(); return qRegisterMetaType<MyQOpenGLVertexArrayObject*>();}

void* QOpenGLVertexArrayObject_NewQOpenGLVertexArrayObject(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLVertexArrayObject(static_cast<QWindow*>(parent));
	} else {
		return new MyQOpenGLVertexArrayObject(static_cast<QObject*>(parent));
	}
}

void QOpenGLVertexArrayObject_Bind(void* ptr)
{
	static_cast<QOpenGLVertexArrayObject*>(ptr)->bind();
}

char QOpenGLVertexArrayObject_Create(void* ptr)
{
	return static_cast<QOpenGLVertexArrayObject*>(ptr)->create();
}

void QOpenGLVertexArrayObject_Destroy(void* ptr)
{
	static_cast<QOpenGLVertexArrayObject*>(ptr)->destroy();
}

char QOpenGLVertexArrayObject_IsCreated(void* ptr)
{
	return static_cast<QOpenGLVertexArrayObject*>(ptr)->isCreated();
}

unsigned int QOpenGLVertexArrayObject_ObjectId(void* ptr)
{
	return static_cast<QOpenGLVertexArrayObject*>(ptr)->objectId();
}

void QOpenGLVertexArrayObject_Release(void* ptr)
{
	static_cast<QOpenGLVertexArrayObject*>(ptr)->release();
}

void QOpenGLVertexArrayObject_DestroyQOpenGLVertexArrayObject(void* ptr)
{
	static_cast<QOpenGLVertexArrayObject*>(ptr)->~QOpenGLVertexArrayObject();
}

void QOpenGLVertexArrayObject_DestroyQOpenGLVertexArrayObjectDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QOpenGLVertexArrayObject___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLVertexArrayObject___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLVertexArrayObject___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QOpenGLVertexArrayObject___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QOpenGLVertexArrayObject___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QOpenGLVertexArrayObject___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QOpenGLVertexArrayObject___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLVertexArrayObject___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLVertexArrayObject___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QOpenGLVertexArrayObject___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QOpenGLVertexArrayObject___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QOpenGLVertexArrayObject___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QOpenGLVertexArrayObject_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::childEvent(static_cast<QChildEvent*>(event));
}

void QOpenGLVertexArrayObject_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QOpenGLVertexArrayObject_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::customEvent(static_cast<QEvent*>(event));
}

void QOpenGLVertexArrayObject_DeleteLaterDefault(void* ptr)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::deleteLater();
}

void QOpenGLVertexArrayObject_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QOpenGLVertexArrayObject_EventDefault(void* ptr, void* e)
{
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::event(static_cast<QEvent*>(e));
}

char QOpenGLVertexArrayObject_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QOpenGLVertexArrayObject_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::metaObject());
}

void QOpenGLVertexArrayObject_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QOpenGLVertexArrayObject*>(ptr)->QOpenGLVertexArrayObject::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQOpenGLWindow: public QOpenGLWindow
{
public:
	MyQOpenGLWindow(QOpenGLWindow::UpdateBehavior updateBehavior = NoPartialUpdate, QWindow *parent = Q_NULLPTR) : QOpenGLWindow(updateBehavior, parent) {QOpenGLWindow_QOpenGLWindow_QRegisterMetaType();};
	MyQOpenGLWindow(QOpenGLContext *shareContext, QOpenGLWindow::UpdateBehavior updateBehavior = NoPartialUpdate, QWindow *parent = Q_NULLPTR) : QOpenGLWindow(shareContext, updateBehavior, parent) {QOpenGLWindow_QOpenGLWindow_QRegisterMetaType();};
	void Signal_FrameSwapped() { callbackQOpenGLWindow_FrameSwapped(this); };
	void initializeGL() { callbackQOpenGLWindow_InitializeGL(this); };
	void paintEvent(QPaintEvent * event) { callbackQPaintDeviceWindow_PaintEvent(this, event); };
	void paintGL() { callbackQOpenGLWindow_PaintGL(this); };
	void paintOverGL() { callbackQOpenGLWindow_PaintOverGL(this); };
	void paintUnderGL() { callbackQOpenGLWindow_PaintUnderGL(this); };
	void resizeEvent(QResizeEvent * event) { callbackQWindow_ResizeEvent(this, event); };
	void resizeGL(int w, int h) { callbackQOpenGLWindow_ResizeGL(this, w, h); };
	 ~MyQOpenGLWindow() { callbackQOpenGLWindow_DestroyQOpenGLWindow(this); };
	void update() { callbackQPaintDeviceWindow_Update3(this); };
	void Signal_ActiveChanged() { callbackQWindow_ActiveChanged(this); };
	void alert(int msec) { callbackQWindow_Alert(this, msec); };
	bool close() { return callbackQWindow_Close(this) != 0; };
	void Signal_ContentOrientationChanged(Qt::ScreenOrientation orientation) { callbackQWindow_ContentOrientationChanged(this, orientation); };
	bool event(QEvent * ev) { return callbackQWindow_Event(this, ev) != 0; };
	void exposeEvent(QExposeEvent * ev) { callbackQWindow_ExposeEvent(this, ev); };
	void focusInEvent(QFocusEvent * ev) { callbackQWindow_FocusInEvent(this, ev); };
	QObject * focusObject() const { return static_cast<QObject*>(callbackQWindow_FocusObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_FocusObjectChanged(QObject * object) { callbackQWindow_FocusObjectChanged(this, object); };
	void focusOutEvent(QFocusEvent * ev) { callbackQWindow_FocusOutEvent(this, ev); };
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQWindow_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_HeightChanged(int arg) { callbackQWindow_HeightChanged(this, arg); };
	void hide() { callbackQWindow_Hide(this); };
	void hideEvent(QHideEvent * ev) { callbackQWindow_HideEvent(this, ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQWindow_KeyPressEvent(this, ev); };
	void keyReleaseEvent(QKeyEvent * ev) { callbackQWindow_KeyReleaseEvent(this, ev); };
	void lower() { callbackQWindow_Lower(this); };
	void Signal_MaximumHeightChanged(int arg) { callbackQWindow_MaximumHeightChanged(this, arg); };
	void Signal_MaximumWidthChanged(int arg) { callbackQWindow_MaximumWidthChanged(this, arg); };
	void Signal_MinimumHeightChanged(int arg) { callbackQWindow_MinimumHeightChanged(this, arg); };
	void Signal_MinimumWidthChanged(int arg) { callbackQWindow_MinimumWidthChanged(this, arg); };
	void Signal_ModalityChanged(Qt::WindowModality modality) { callbackQWindow_ModalityChanged(this, modality); };
	void mouseDoubleClickEvent(QMouseEvent * ev) { callbackQWindow_MouseDoubleClickEvent(this, ev); };
	void mouseMoveEvent(QMouseEvent * ev) { callbackQWindow_MouseMoveEvent(this, ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQWindow_MousePressEvent(this, ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQWindow_MouseReleaseEvent(this, ev); };
	void moveEvent(QMoveEvent * ev) { callbackQWindow_MoveEvent(this, ev); };
	bool nativeEvent(const QByteArray & eventType, void * message, long * result) { return callbackQWindow_NativeEvent(this, const_cast<QByteArray*>(&eventType), message, result) != 0; };
	void Signal_OpacityChanged(qreal opacity) { callbackQWindow_OpacityChanged(this, opacity); };
	void raise() { callbackQWindow_Raise(this); };
	void requestActivate() { callbackQWindow_RequestActivate(this); };
	void requestUpdate() { callbackQWindow_RequestUpdate(this); };
	void Signal_ScreenChanged(QScreen * screen) { callbackQWindow_ScreenChanged(this, screen); };
	void setGeometry(int posx, int posy, int w, int h) { callbackQWindow_SetGeometry(this, posx, posy, w, h); };
	void setGeometry(const QRect & rect) { callbackQWindow_SetGeometry2(this, const_cast<QRect*>(&rect)); };
	void setHeight(int arg) { callbackQWindow_SetHeight(this, arg); };
	void setMaximumHeight(int h) { callbackQWindow_SetMaximumHeight(this, h); };
	void setMaximumWidth(int w) { callbackQWindow_SetMaximumWidth(this, w); };
	void setMinimumHeight(int h) { callbackQWindow_SetMinimumHeight(this, h); };
	void setMinimumWidth(int w) { callbackQWindow_SetMinimumWidth(this, w); };
	void setTitle(const QString & vqs) { QByteArray* tda39a3 = new QByteArray(vqs.toUtf8()); QtGui_PackedString vqsPacked = { const_cast<char*>(tda39a3->prepend("WHITESPACE").constData()+10), tda39a3->size()-10, tda39a3 };callbackQWindow_SetTitle(this, vqsPacked); };
	void setVisible(bool visible) { callbackQWindow_SetVisible(this, visible); };
	void setWidth(int arg) { callbackQWindow_SetWidth(this, arg); };
	void setX(int arg) { callbackQWindow_SetX(this, arg); };
	void setY(int arg) { callbackQWindow_SetY(this, arg); };
	void show() { callbackQWindow_Show(this); };
	void showEvent(QShowEvent * ev) { callbackQWindow_ShowEvent(this, ev); };
	void showFullScreen() { callbackQWindow_ShowFullScreen(this); };
	void showMaximized() { callbackQWindow_ShowMaximized(this); };
	void showMinimized() { callbackQWindow_ShowMinimized(this); };
	void showNormal() { callbackQWindow_ShowNormal(this); };
	QSize size() const { return *static_cast<QSize*>(callbackQWindow_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	bool startSystemMove() { return callbackQWindow_StartSystemMove(this) != 0; };
	bool startSystemResize(Qt::Edges edges) { return callbackQWindow_StartSystemResize(this, edges) != 0; };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQWindow_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	void tabletEvent(QTabletEvent * ev) { callbackQWindow_TabletEvent(this, ev); };
	void touchEvent(QTouchEvent * ev) { callbackQWindow_TouchEvent(this, ev); };
	void Signal_VisibilityChanged(QWindow::Visibility visibility) { callbackQWindow_VisibilityChanged(this, visibility); };
	void Signal_VisibleChanged(bool arg) { callbackQWindow_VisibleChanged(this, arg); };
	void wheelEvent(QWheelEvent * ev) { callbackQWindow_WheelEvent(this, ev); };
	void Signal_WidthChanged(int arg) { callbackQWindow_WidthChanged(this, arg); };
	void Signal_WindowStateChanged(Qt::WindowState windowState) { callbackQWindow_WindowStateChanged(this, windowState); };
	void Signal_WindowTitleChanged(const QString & title) { QByteArray* t3c6de1 = new QByteArray(title.toUtf8()); QtGui_PackedString titlePacked = { const_cast<char*>(t3c6de1->prepend("WHITESPACE").constData()+10), t3c6de1->size()-10, t3c6de1 };callbackQWindow_WindowTitleChanged(this, titlePacked); };
	void Signal_XChanged(int arg) { callbackQWindow_XChanged(this, arg); };
	void Signal_YChanged(int arg) { callbackQWindow_YChanged(this, arg); };
	void childEvent(QChildEvent * event) { callbackQWindow_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQWindow_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQWindow_CustomEvent(this, event); };
	void deleteLater() { callbackQWindow_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQWindow_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQWindow_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQWindow_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQWindow_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQWindow_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQWindow_TimerEvent(this, event); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPaintDeviceWindow_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QOpenGLWindow*)
Q_DECLARE_METATYPE(MyQOpenGLWindow*)

int QOpenGLWindow_QOpenGLWindow_QRegisterMetaType(){qRegisterMetaType<QOpenGLWindow*>(); return qRegisterMetaType<MyQOpenGLWindow*>();}

void* QOpenGLWindow_NewQOpenGLWindow(long long updateBehavior, void* parent)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLWindow(static_cast<QOpenGLWindow::UpdateBehavior>(updateBehavior), static_cast<QPaintDeviceWindow*>(parent));
	} else {
		return new MyQOpenGLWindow(static_cast<QOpenGLWindow::UpdateBehavior>(updateBehavior), static_cast<QWindow*>(parent));
	}
}

void* QOpenGLWindow_NewQOpenGLWindow2(void* shareContext, long long updateBehavior, void* parent)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQOpenGLWindow(static_cast<QOpenGLContext*>(shareContext), static_cast<QOpenGLWindow::UpdateBehavior>(updateBehavior), static_cast<QPaintDeviceWindow*>(parent));
	} else {
		return new MyQOpenGLWindow(static_cast<QOpenGLContext*>(shareContext), static_cast<QOpenGLWindow::UpdateBehavior>(updateBehavior), static_cast<QWindow*>(parent));
	}
}

void* QOpenGLWindow_Context(void* ptr)
{
	return static_cast<QOpenGLWindow*>(ptr)->context();
}

unsigned int QOpenGLWindow_DefaultFramebufferObject(void* ptr)
{
	return static_cast<QOpenGLWindow*>(ptr)->defaultFramebufferObject();
}

void QOpenGLWindow_DoneCurrent(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->doneCurrent();
}

void QOpenGLWindow_ConnectFrameSwapped(void* ptr, long long t)
{
	QObject::connect(static_cast<QOpenGLWindow*>(ptr), static_cast<void (QOpenGLWindow::*)()>(&QOpenGLWindow::frameSwapped), static_cast<MyQOpenGLWindow*>(ptr), static_cast<void (MyQOpenGLWindow::*)()>(&MyQOpenGLWindow::Signal_FrameSwapped), static_cast<Qt::ConnectionType>(t));
}

void QOpenGLWindow_DisconnectFrameSwapped(void* ptr)
{
	QObject::disconnect(static_cast<QOpenGLWindow*>(ptr), static_cast<void (QOpenGLWindow::*)()>(&QOpenGLWindow::frameSwapped), static_cast<MyQOpenGLWindow*>(ptr), static_cast<void (MyQOpenGLWindow::*)()>(&MyQOpenGLWindow::Signal_FrameSwapped));
}

void QOpenGLWindow_FrameSwapped(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->frameSwapped();
}

void* QOpenGLWindow_GrabFramebuffer(void* ptr)
{
	return new QImage(static_cast<QOpenGLWindow*>(ptr)->grabFramebuffer());
}

void QOpenGLWindow_InitializeGL(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->initializeGL();
}

void QOpenGLWindow_InitializeGLDefault(void* ptr)
{
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::initializeGL();
}

char QOpenGLWindow_IsValid(void* ptr)
{
	return static_cast<QOpenGLWindow*>(ptr)->isValid();
}

void QOpenGLWindow_MakeCurrent(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->makeCurrent();
}

void QOpenGLWindow_PaintGL(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->paintGL();
}

void QOpenGLWindow_PaintGLDefault(void* ptr)
{
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::paintGL();
}

void QOpenGLWindow_PaintOverGL(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->paintOverGL();
}

void QOpenGLWindow_PaintOverGLDefault(void* ptr)
{
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::paintOverGL();
}

void QOpenGLWindow_PaintUnderGL(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->paintUnderGL();
}

void QOpenGLWindow_PaintUnderGLDefault(void* ptr)
{
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::paintUnderGL();
}

void QOpenGLWindow_ResizeGL(void* ptr, int w, int h)
{
	static_cast<QOpenGLWindow*>(ptr)->resizeGL(w, h);
}

void QOpenGLWindow_ResizeGLDefault(void* ptr, int w, int h)
{
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::resizeGL(w, h);
}

void* QOpenGLWindow_ShareContext(void* ptr)
{
	return static_cast<QOpenGLWindow*>(ptr)->shareContext();
}

long long QOpenGLWindow_UpdateBehavior(void* ptr)
{
	return static_cast<QOpenGLWindow*>(ptr)->updateBehavior();
}

void QOpenGLWindow_DestroyQOpenGLWindow(void* ptr)
{
	static_cast<QOpenGLWindow*>(ptr)->~QOpenGLWindow();
}

void QOpenGLWindow_DestroyQOpenGLWindowDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QPageLayout*)
void* QPageLayout_NewQPageLayout()
{
	return new QPageLayout();
}

void* QPageLayout_NewQPageLayout2(void* pageSize, long long orientation, void* margins, long long units, void* minMargins)
{
	return new QPageLayout(*static_cast<QPageSize*>(pageSize), static_cast<QPageLayout::Orientation>(orientation), *static_cast<QMarginsF*>(margins), static_cast<QPageLayout::Unit>(units), *static_cast<QMarginsF*>(minMargins));
}

void* QPageLayout_NewQPageLayout3(void* other)
{
	return new QPageLayout(*static_cast<QPageLayout*>(other));
}

void* QPageLayout_FullRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPageLayout*>(ptr)->fullRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_FullRect2(void* ptr, long long units)
{
	return ({ QRectF tmpValue = static_cast<QPageLayout*>(ptr)->fullRect(static_cast<QPageLayout::Unit>(units)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_FullRectPixels(void* ptr, int resolution)
{
	return ({ QRect tmpValue = static_cast<QPageLayout*>(ptr)->fullRectPixels(resolution); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_FullRectPoints(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPageLayout*>(ptr)->fullRectPoints(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPageLayout_IsEquivalentTo(void* ptr, void* other)
{
	return static_cast<QPageLayout*>(ptr)->isEquivalentTo(*static_cast<QPageLayout*>(other));
}

char QPageLayout_IsValid(void* ptr)
{
	return static_cast<QPageLayout*>(ptr)->isValid();
}

void* QPageLayout_Margins(void* ptr)
{
	return ({ QMarginsF tmpValue = static_cast<QPageLayout*>(ptr)->margins(); new QMarginsF(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

void* QPageLayout_Margins2(void* ptr, long long units)
{
	return ({ QMarginsF tmpValue = static_cast<QPageLayout*>(ptr)->margins(static_cast<QPageLayout::Unit>(units)); new QMarginsF(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

void* QPageLayout_MarginsPixels(void* ptr, int resolution)
{
	return ({ QMargins tmpValue = static_cast<QPageLayout*>(ptr)->marginsPixels(resolution); new QMargins(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

void* QPageLayout_MarginsPoints(void* ptr)
{
	return ({ QMargins tmpValue = static_cast<QPageLayout*>(ptr)->marginsPoints(); new QMargins(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

void* QPageLayout_MaximumMargins(void* ptr)
{
	return ({ QMarginsF tmpValue = static_cast<QPageLayout*>(ptr)->maximumMargins(); new QMarginsF(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

void* QPageLayout_MinimumMargins(void* ptr)
{
	return ({ QMarginsF tmpValue = static_cast<QPageLayout*>(ptr)->minimumMargins(); new QMarginsF(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
}

long long QPageLayout_Mode(void* ptr)
{
	return static_cast<QPageLayout*>(ptr)->mode();
}

long long QPageLayout_Orientation(void* ptr)
{
	return static_cast<QPageLayout*>(ptr)->orientation();
}

void* QPageLayout_PageSize(void* ptr)
{
	return new QPageSize(static_cast<QPageLayout*>(ptr)->pageSize());
}

void* QPageLayout_PaintRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPageLayout*>(ptr)->paintRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_PaintRect2(void* ptr, long long units)
{
	return ({ QRectF tmpValue = static_cast<QPageLayout*>(ptr)->paintRect(static_cast<QPageLayout::Unit>(units)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_PaintRectPixels(void* ptr, int resolution)
{
	return ({ QRect tmpValue = static_cast<QPageLayout*>(ptr)->paintRectPixels(resolution); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageLayout_PaintRectPoints(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPageLayout*>(ptr)->paintRectPoints(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPageLayout_SetBottomMargin(void* ptr, double bottomMargin)
{
	return static_cast<QPageLayout*>(ptr)->setBottomMargin(bottomMargin);
}

char QPageLayout_SetLeftMargin(void* ptr, double leftMargin)
{
	return static_cast<QPageLayout*>(ptr)->setLeftMargin(leftMargin);
}

char QPageLayout_SetMargins(void* ptr, void* margins)
{
	return static_cast<QPageLayout*>(ptr)->setMargins(*static_cast<QMarginsF*>(margins));
}

void QPageLayout_SetMinimumMargins(void* ptr, void* minMargins)
{
	static_cast<QPageLayout*>(ptr)->setMinimumMargins(*static_cast<QMarginsF*>(minMargins));
}

void QPageLayout_SetMode(void* ptr, long long mode)
{
	static_cast<QPageLayout*>(ptr)->setMode(static_cast<QPageLayout::Mode>(mode));
}

void QPageLayout_SetOrientation(void* ptr, long long orientation)
{
	static_cast<QPageLayout*>(ptr)->setOrientation(static_cast<QPageLayout::Orientation>(orientation));
}

void QPageLayout_SetPageSize(void* ptr, void* pageSize, void* minMargins)
{
	static_cast<QPageLayout*>(ptr)->setPageSize(*static_cast<QPageSize*>(pageSize), *static_cast<QMarginsF*>(minMargins));
}

char QPageLayout_SetRightMargin(void* ptr, double rightMargin)
{
	return static_cast<QPageLayout*>(ptr)->setRightMargin(rightMargin);
}

char QPageLayout_SetTopMargin(void* ptr, double topMargin)
{
	return static_cast<QPageLayout*>(ptr)->setTopMargin(topMargin);
}

void QPageLayout_SetUnits(void* ptr, long long units)
{
	static_cast<QPageLayout*>(ptr)->setUnits(static_cast<QPageLayout::Unit>(units));
}

void QPageLayout_Swap(void* ptr, void* other)
{
	static_cast<QPageLayout*>(ptr)->swap(*static_cast<QPageLayout*>(other));
}

long long QPageLayout_Units(void* ptr)
{
	return static_cast<QPageLayout*>(ptr)->units();
}

void QPageLayout_DestroyQPageLayout(void* ptr)
{
	static_cast<QPageLayout*>(ptr)->~QPageLayout();
}

Q_DECLARE_METATYPE(QPageSize*)
void* QPageSize_NewQPageSize()
{
	return new QPageSize();
}

void* QPageSize_NewQPageSize2(long long pageSize)
{
	return new QPageSize(static_cast<QPageSize::PageSizeId>(pageSize));
}

void* QPageSize_NewQPageSize3(void* pointSize, struct QtGui_PackedString name, long long matchPolicy)
{
	return new QPageSize(*static_cast<QSize*>(pointSize), QString::fromUtf8(name.data, name.len), static_cast<QPageSize::SizeMatchPolicy>(matchPolicy));
}

void* QPageSize_NewQPageSize4(void* size, long long units, struct QtGui_PackedString name, long long matchPolicy)
{
	return new QPageSize(*static_cast<QSizeF*>(size), static_cast<QPageSize::Unit>(units), QString::fromUtf8(name.data, name.len), static_cast<QPageSize::SizeMatchPolicy>(matchPolicy));
}

void* QPageSize_NewQPageSize5(void* other)
{
	return new QPageSize(*static_cast<QPageSize*>(other));
}

void* QPageSize_DefinitionSize(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QPageSize*>(ptr)->definitionSize(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_QPageSize_DefinitionSize2(long long pageSizeId)
{
	return ({ QSizeF tmpValue = QPageSize::definitionSize(static_cast<QPageSize::PageSizeId>(pageSizeId)); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

long long QPageSize_DefinitionUnits(void* ptr)
{
	return static_cast<QPageSize*>(ptr)->definitionUnits();
}

long long QPageSize_QPageSize_DefinitionUnits2(long long pageSizeId)
{
	return QPageSize::definitionUnits(static_cast<QPageSize::PageSizeId>(pageSizeId));
}

long long QPageSize_Id(void* ptr)
{
	return static_cast<QPageSize*>(ptr)->id();
}

long long QPageSize_QPageSize_Id2(void* pointSize, long long matchPolicy)
{
	return QPageSize::id(*static_cast<QSize*>(pointSize), static_cast<QPageSize::SizeMatchPolicy>(matchPolicy));
}

long long QPageSize_QPageSize_Id3(void* size, long long units, long long matchPolicy)
{
	return QPageSize::id(*static_cast<QSizeF*>(size), static_cast<QPageSize::Unit>(units), static_cast<QPageSize::SizeMatchPolicy>(matchPolicy));
}

long long QPageSize_QPageSize_Id4(int windowsId)
{
	return QPageSize::id(windowsId);
}

char QPageSize_IsEquivalentTo(void* ptr, void* other)
{
	return static_cast<QPageSize*>(ptr)->isEquivalentTo(*static_cast<QPageSize*>(other));
}

char QPageSize_IsValid(void* ptr)
{
	return static_cast<QPageSize*>(ptr)->isValid();
}

struct QtGui_PackedString QPageSize_Key(void* ptr)
{
	return ({ QByteArray* t01da2c = new QByteArray(static_cast<QPageSize*>(ptr)->key().toUtf8()); QtGui_PackedString { const_cast<char*>(t01da2c->prepend("WHITESPACE").constData()+10), t01da2c->size()-10, t01da2c }; });
}

struct QtGui_PackedString QPageSize_QPageSize_Key2(long long pageSizeId)
{
	return ({ QByteArray* tba9d4f = new QByteArray(QPageSize::key(static_cast<QPageSize::PageSizeId>(pageSizeId)).toUtf8()); QtGui_PackedString { const_cast<char*>(tba9d4f->prepend("WHITESPACE").constData()+10), tba9d4f->size()-10, tba9d4f }; });
}

struct QtGui_PackedString QPageSize_Name(void* ptr)
{
	return ({ QByteArray* t2620ab = new QByteArray(static_cast<QPageSize*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(t2620ab->prepend("WHITESPACE").constData()+10), t2620ab->size()-10, t2620ab }; });
}

struct QtGui_PackedString QPageSize_QPageSize_Name2(long long pageSizeId)
{
	return ({ QByteArray* t8d3c9f = new QByteArray(QPageSize::name(static_cast<QPageSize::PageSizeId>(pageSizeId)).toUtf8()); QtGui_PackedString { const_cast<char*>(t8d3c9f->prepend("WHITESPACE").constData()+10), t8d3c9f->size()-10, t8d3c9f }; });
}

void* QPageSize_Rect(void* ptr, long long units)
{
	return ({ QRectF tmpValue = static_cast<QPageSize*>(ptr)->rect(static_cast<QPageSize::Unit>(units)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_RectPixels(void* ptr, int resolution)
{
	return ({ QRect tmpValue = static_cast<QPageSize*>(ptr)->rectPixels(resolution); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_RectPoints(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPageSize*>(ptr)->rectPoints(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_Size(void* ptr, long long units)
{
	return ({ QSizeF tmpValue = static_cast<QPageSize*>(ptr)->size(static_cast<QPageSize::Unit>(units)); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_QPageSize_Size2(long long pageSizeId, long long units)
{
	return ({ QSizeF tmpValue = QPageSize::size(static_cast<QPageSize::PageSizeId>(pageSizeId), static_cast<QPageSize::Unit>(units)); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_SizePixels(void* ptr, int resolution)
{
	return ({ QSize tmpValue = static_cast<QPageSize*>(ptr)->sizePixels(resolution); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_QPageSize_SizePixels2(long long pageSizeId, int resolution)
{
	return ({ QSize tmpValue = QPageSize::sizePixels(static_cast<QPageSize::PageSizeId>(pageSizeId), resolution); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_SizePoints(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QPageSize*>(ptr)->sizePoints(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QPageSize_QPageSize_SizePoints2(long long pageSizeId)
{
	return ({ QSize tmpValue = QPageSize::sizePoints(static_cast<QPageSize::PageSizeId>(pageSizeId)); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QPageSize_Swap(void* ptr, void* other)
{
	static_cast<QPageSize*>(ptr)->swap(*static_cast<QPageSize*>(other));
}

int QPageSize_WindowsId(void* ptr)
{
	return static_cast<QPageSize*>(ptr)->windowsId();
}

int QPageSize_QPageSize_WindowsId2(long long pageSizeId)
{
	return QPageSize::windowsId(static_cast<QPageSize::PageSizeId>(pageSizeId));
}

void QPageSize_DestroyQPageSize(void* ptr)
{
	static_cast<QPageSize*>(ptr)->~QPageSize();
}

class MyQPagedPaintDevice: public QPagedPaintDevice
{
public:
	bool newPage() { return callbackQPagedPaintDevice_NewPage(this) != 0; };
	void setPageSize(QPagedPaintDevice::PageSize size) { callbackQPagedPaintDevice_SetPageSize2(this, size); };
	 ~MyQPagedPaintDevice() { callbackQPagedPaintDevice_DestroyQPagedPaintDevice(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPagedPaintDevice_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QPagedPaintDevice*)
Q_DECLARE_METATYPE(MyQPagedPaintDevice*)

int QPagedPaintDevice_QPagedPaintDevice_QRegisterMetaType(){qRegisterMetaType<QPagedPaintDevice*>(); return qRegisterMetaType<MyQPagedPaintDevice*>();}

char QPagedPaintDevice_NewPage(void* ptr)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->newPage();
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->newPage();
	}
}

void* QPagedPaintDevice_PageLayout(void* ptr)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return new QPageLayout(static_cast<QPdfWriter*>(ptr)->pageLayout());
	} else {
		return new QPageLayout(static_cast<QPagedPaintDevice*>(ptr)->pageLayout());
	}
}

long long QPagedPaintDevice_PageSize(void* ptr)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->pageSize();
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->pageSize();
	}
}

char QPagedPaintDevice_SetPageLayout(void* ptr, void* newPageLayout)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->setPageLayout(*static_cast<QPageLayout*>(newPageLayout));
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->setPageLayout(*static_cast<QPageLayout*>(newPageLayout));
	}
}

char QPagedPaintDevice_SetPageMargins(void* ptr, void* margins)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->setPageMargins(*static_cast<QMarginsF*>(margins));
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->setPageMargins(*static_cast<QMarginsF*>(margins));
	}
}

char QPagedPaintDevice_SetPageMargins2(void* ptr, void* margins, long long units)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->setPageMargins(*static_cast<QMarginsF*>(margins), static_cast<QPageLayout::Unit>(units));
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->setPageMargins(*static_cast<QMarginsF*>(margins), static_cast<QPageLayout::Unit>(units));
	}
}

char QPagedPaintDevice_SetPageOrientation(void* ptr, long long orientation)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->setPageOrientation(static_cast<QPageLayout::Orientation>(orientation));
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->setPageOrientation(static_cast<QPageLayout::Orientation>(orientation));
	}
}

char QPagedPaintDevice_SetPageSize(void* ptr, void* pageSize)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->setPageSize(*static_cast<QPageSize*>(pageSize));
	} else {
		return static_cast<QPagedPaintDevice*>(ptr)->setPageSize(*static_cast<QPageSize*>(pageSize));
	}
}

void QPagedPaintDevice_SetPageSize2(void* ptr, long long size)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		static_cast<QPdfWriter*>(ptr)->setPageSize(static_cast<QPagedPaintDevice::PageSize>(size));
	} else {
		static_cast<QPagedPaintDevice*>(ptr)->setPageSize(static_cast<QPagedPaintDevice::PageSize>(size));
	}
}

void QPagedPaintDevice_SetPageSize2Default(void* ptr, long long size)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::setPageSize(static_cast<QPagedPaintDevice::PageSize>(size));
	} else {
		static_cast<QPagedPaintDevice*>(ptr)->QPagedPaintDevice::setPageSize(static_cast<QPagedPaintDevice::PageSize>(size));
	}
}

void QPagedPaintDevice_DestroyQPagedPaintDevice(void* ptr)
{
	static_cast<QPagedPaintDevice*>(ptr)->~QPagedPaintDevice();
}

void QPagedPaintDevice_DestroyQPagedPaintDeviceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPagedPaintDevice_PaintEngine(void* ptr)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->paintEngine();
	} else {
	
	}
}

void* QPagedPaintDevice_PaintEngineDefault(void* ptr)
{
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::paintEngine();
	} else {
	
	}
}

class MyQPaintDevice: public QPaintDevice
{
public:
	MyQPaintDevice() : QPaintDevice() {QPaintDevice_QPaintDevice_QRegisterMetaType();};
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPaintDevice_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQPaintDevice() { callbackQPaintDevice_DestroyQPaintDevice(this); };
};

Q_DECLARE_METATYPE(QPaintDevice*)
Q_DECLARE_METATYPE(MyQPaintDevice*)

int QPaintDevice_QPaintDevice_QRegisterMetaType(){qRegisterMetaType<QPaintDevice*>(); return qRegisterMetaType<MyQPaintDevice*>();}

void* QPaintDevice_NewQPaintDevice()
{
	return new MyQPaintDevice();
}

int QPaintDevice_ColorCount(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->colorCount();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->colorCount();
	} else {
		return static_cast<QPaintDevice*>(ptr)->colorCount();
	}
}

int QPaintDevice_Depth(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->depth();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->depth();
	} else {
		return static_cast<QPaintDevice*>(ptr)->depth();
	}
}

int QPaintDevice_DevicePixelRatio(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->devicePixelRatio();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->devicePixelRatio();
	} else {
		return static_cast<QPaintDevice*>(ptr)->devicePixelRatio();
	}
}

double QPaintDevice_DevicePixelRatioF(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->devicePixelRatioF();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->devicePixelRatioF();
	} else {
		return static_cast<QPaintDevice*>(ptr)->devicePixelRatioF();
	}
}

int QPaintDevice_Height(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->height();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->height();
	} else {
		return static_cast<QPaintDevice*>(ptr)->height();
	}
}

int QPaintDevice_HeightMM(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->heightMM();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->heightMM();
	} else {
		return static_cast<QPaintDevice*>(ptr)->heightMM();
	}
}

int QPaintDevice_LogicalDpiX(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->logicalDpiX();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->logicalDpiX();
	} else {
		return static_cast<QPaintDevice*>(ptr)->logicalDpiX();
	}
}

int QPaintDevice_LogicalDpiY(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->logicalDpiY();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->logicalDpiY();
	} else {
		return static_cast<QPaintDevice*>(ptr)->logicalDpiY();
	}
}

int QPaintDevice_Metric(void* ptr, long long metric)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else {
		return static_cast<QPaintDevice*>(ptr)->metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	}
}

int QPaintDevice_MetricDefault(void* ptr, long long metric)
{
	if (dynamic_cast<QBitmap*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QBitmap*>(ptr)->QBitmap::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPixmap*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QPixmap*>(ptr)->QPixmap::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPicture*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QPicture*>(ptr)->QPicture::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QPagedPaintDevice*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QPagedPaintDevice*>(ptr)->QPagedPaintDevice::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QOpenGLPaintDevice*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QOpenGLPaintDevice*>(ptr)->QOpenGLPaintDevice::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else if (dynamic_cast<QImage*>(static_cast<QPaintDevice*>(ptr))) {
		return static_cast<QImage*>(ptr)->QImage::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	} else {
		return static_cast<QPaintDevice*>(ptr)->QPaintDevice::metric(static_cast<QPaintDevice::PaintDeviceMetric>(metric));
	}
}

void* QPaintDevice_PaintEngine(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->paintEngine();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->paintEngine();
	} else {
		return static_cast<QPaintDevice*>(ptr)->paintEngine();
	}
}

char QPaintDevice_PaintingActive(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->paintingActive();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->paintingActive();
	} else {
		return static_cast<QPaintDevice*>(ptr)->paintingActive();
	}
}

int QPaintDevice_PhysicalDpiX(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->physicalDpiX();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->physicalDpiX();
	} else {
		return static_cast<QPaintDevice*>(ptr)->physicalDpiX();
	}
}

int QPaintDevice_PhysicalDpiY(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->physicalDpiY();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->physicalDpiY();
	} else {
		return static_cast<QPaintDevice*>(ptr)->physicalDpiY();
	}
}

int QPaintDevice_Width(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->width();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->width();
	} else {
		return static_cast<QPaintDevice*>(ptr)->width();
	}
}

int QPaintDevice_WidthMM(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->widthMM();
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPdfWriter*>(ptr)->widthMM();
	} else {
		return static_cast<QPaintDevice*>(ptr)->widthMM();
	}
}

void QPaintDevice_DestroyQPaintDevice(void* ptr)
{
	static_cast<QPaintDevice*>(ptr)->~QPaintDevice();
}

void QPaintDevice_DestroyQPaintDeviceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQPaintDeviceWindow: public QPaintDeviceWindow
{
public:
	void paintEvent(QPaintEvent * event) { callbackQPaintDeviceWindow_PaintEvent(this, event); };
	void update() { callbackQPaintDeviceWindow_Update3(this); };
	void Signal_ActiveChanged() { callbackQWindow_ActiveChanged(this); };
	void alert(int msec) { callbackQWindow_Alert(this, msec); };
	bool close() { return callbackQWindow_Close(this) != 0; };
	void Signal_ContentOrientationChanged(Qt::ScreenOrientation orientation) { callbackQWindow_ContentOrientationChanged(this, orientation); };
	bool event(QEvent * ev) { return callbackQWindow_Event(this, ev) != 0; };
	void exposeEvent(QExposeEvent * ev) { callbackQWindow_ExposeEvent(this, ev); };
	void focusInEvent(QFocusEvent * ev) { callbackQWindow_FocusInEvent(this, ev); };
	QObject * focusObject() const { return static_cast<QObject*>(callbackQWindow_FocusObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_FocusObjectChanged(QObject * object) { callbackQWindow_FocusObjectChanged(this, object); };
	void focusOutEvent(QFocusEvent * ev) { callbackQWindow_FocusOutEvent(this, ev); };
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQWindow_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_HeightChanged(int arg) { callbackQWindow_HeightChanged(this, arg); };
	void hide() { callbackQWindow_Hide(this); };
	void hideEvent(QHideEvent * ev) { callbackQWindow_HideEvent(this, ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQWindow_KeyPressEvent(this, ev); };
	void keyReleaseEvent(QKeyEvent * ev) { callbackQWindow_KeyReleaseEvent(this, ev); };
	void lower() { callbackQWindow_Lower(this); };
	void Signal_MaximumHeightChanged(int arg) { callbackQWindow_MaximumHeightChanged(this, arg); };
	void Signal_MaximumWidthChanged(int arg) { callbackQWindow_MaximumWidthChanged(this, arg); };
	void Signal_MinimumHeightChanged(int arg) { callbackQWindow_MinimumHeightChanged(this, arg); };
	void Signal_MinimumWidthChanged(int arg) { callbackQWindow_MinimumWidthChanged(this, arg); };
	void Signal_ModalityChanged(Qt::WindowModality modality) { callbackQWindow_ModalityChanged(this, modality); };
	void mouseDoubleClickEvent(QMouseEvent * ev) { callbackQWindow_MouseDoubleClickEvent(this, ev); };
	void mouseMoveEvent(QMouseEvent * ev) { callbackQWindow_MouseMoveEvent(this, ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQWindow_MousePressEvent(this, ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQWindow_MouseReleaseEvent(this, ev); };
	void moveEvent(QMoveEvent * ev) { callbackQWindow_MoveEvent(this, ev); };
	bool nativeEvent(const QByteArray & eventType, void * message, long * result) { return callbackQWindow_NativeEvent(this, const_cast<QByteArray*>(&eventType), message, result) != 0; };
	void Signal_OpacityChanged(qreal opacity) { callbackQWindow_OpacityChanged(this, opacity); };
	void raise() { callbackQWindow_Raise(this); };
	void requestActivate() { callbackQWindow_RequestActivate(this); };
	void requestUpdate() { callbackQWindow_RequestUpdate(this); };
	void resizeEvent(QResizeEvent * ev) { callbackQWindow_ResizeEvent(this, ev); };
	void Signal_ScreenChanged(QScreen * screen) { callbackQWindow_ScreenChanged(this, screen); };
	void setGeometry(int posx, int posy, int w, int h) { callbackQWindow_SetGeometry(this, posx, posy, w, h); };
	void setGeometry(const QRect & rect) { callbackQWindow_SetGeometry2(this, const_cast<QRect*>(&rect)); };
	void setHeight(int arg) { callbackQWindow_SetHeight(this, arg); };
	void setMaximumHeight(int h) { callbackQWindow_SetMaximumHeight(this, h); };
	void setMaximumWidth(int w) { callbackQWindow_SetMaximumWidth(this, w); };
	void setMinimumHeight(int h) { callbackQWindow_SetMinimumHeight(this, h); };
	void setMinimumWidth(int w) { callbackQWindow_SetMinimumWidth(this, w); };
	void setTitle(const QString & vqs) { QByteArray* tda39a3 = new QByteArray(vqs.toUtf8()); QtGui_PackedString vqsPacked = { const_cast<char*>(tda39a3->prepend("WHITESPACE").constData()+10), tda39a3->size()-10, tda39a3 };callbackQWindow_SetTitle(this, vqsPacked); };
	void setVisible(bool visible) { callbackQWindow_SetVisible(this, visible); };
	void setWidth(int arg) { callbackQWindow_SetWidth(this, arg); };
	void setX(int arg) { callbackQWindow_SetX(this, arg); };
	void setY(int arg) { callbackQWindow_SetY(this, arg); };
	void show() { callbackQWindow_Show(this); };
	void showEvent(QShowEvent * ev) { callbackQWindow_ShowEvent(this, ev); };
	void showFullScreen() { callbackQWindow_ShowFullScreen(this); };
	void showMaximized() { callbackQWindow_ShowMaximized(this); };
	void showMinimized() { callbackQWindow_ShowMinimized(this); };
	void showNormal() { callbackQWindow_ShowNormal(this); };
	QSize size() const { return *static_cast<QSize*>(callbackQWindow_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	bool startSystemMove() { return callbackQWindow_StartSystemMove(this) != 0; };
	bool startSystemResize(Qt::Edges edges) { return callbackQWindow_StartSystemResize(this, edges) != 0; };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQWindow_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	void tabletEvent(QTabletEvent * ev) { callbackQWindow_TabletEvent(this, ev); };
	void touchEvent(QTouchEvent * ev) { callbackQWindow_TouchEvent(this, ev); };
	void Signal_VisibilityChanged(QWindow::Visibility visibility) { callbackQWindow_VisibilityChanged(this, visibility); };
	void Signal_VisibleChanged(bool arg) { callbackQWindow_VisibleChanged(this, arg); };
	void wheelEvent(QWheelEvent * ev) { callbackQWindow_WheelEvent(this, ev); };
	void Signal_WidthChanged(int arg) { callbackQWindow_WidthChanged(this, arg); };
	void Signal_WindowStateChanged(Qt::WindowState windowState) { callbackQWindow_WindowStateChanged(this, windowState); };
	void Signal_WindowTitleChanged(const QString & title) { QByteArray* t3c6de1 = new QByteArray(title.toUtf8()); QtGui_PackedString titlePacked = { const_cast<char*>(t3c6de1->prepend("WHITESPACE").constData()+10), t3c6de1->size()-10, t3c6de1 };callbackQWindow_WindowTitleChanged(this, titlePacked); };
	void Signal_XChanged(int arg) { callbackQWindow_XChanged(this, arg); };
	void Signal_YChanged(int arg) { callbackQWindow_YChanged(this, arg); };
	void childEvent(QChildEvent * event) { callbackQWindow_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQWindow_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQWindow_CustomEvent(this, event); };
	void deleteLater() { callbackQWindow_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQWindow_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQWindow_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQWindow_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQWindow_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQWindow_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQWindow_TimerEvent(this, event); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPaintDeviceWindow_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QPaintDeviceWindow*)
Q_DECLARE_METATYPE(MyQPaintDeviceWindow*)

int QPaintDeviceWindow_QPaintDeviceWindow_QRegisterMetaType(){qRegisterMetaType<QPaintDeviceWindow*>(); return qRegisterMetaType<MyQPaintDeviceWindow*>();}

void QPaintDeviceWindow_PaintEvent(void* ptr, void* event)
{
		static_cast<QPaintDeviceWindow*>(ptr)->paintEvent(static_cast<QPaintEvent*>(event));
}

void QPaintDeviceWindow_PaintEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::paintEvent(static_cast<QPaintEvent*>(event));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::paintEvent(static_cast<QPaintEvent*>(event));
	} else {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::paintEvent(static_cast<QPaintEvent*>(event));
	}
}

void QPaintDeviceWindow_Update(void* ptr, void* rect)
{
		static_cast<QPaintDeviceWindow*>(ptr)->update(*static_cast<QRect*>(rect));
}

void QPaintDeviceWindow_Update2(void* ptr, void* region)
{
		static_cast<QPaintDeviceWindow*>(ptr)->update(*static_cast<QRegion*>(region));
}

void QPaintDeviceWindow_Update3(void* ptr)
{
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "update");
}

void QPaintDeviceWindow_Update3Default(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::update();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::update();
	} else {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::update();
	}
}

void* QPaintDeviceWindow_PaintEngine(void* ptr)
{
		return static_cast<QPaintDeviceWindow*>(ptr)->paintEngine();
}

void* QPaintDeviceWindow_PaintEngineDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::paintEngine();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::paintEngine();
	} else {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::paintEngine();
	}
}

class MyQPaintEngine: public QPaintEngine
{
public:
	MyQPaintEngine(QPaintEngine::PaintEngineFeatures caps = PaintEngineFeatures()) : QPaintEngine(caps) {QPaintEngine_QPaintEngine_QRegisterMetaType();};
	bool begin(QPaintDevice * pdev) { return callbackQPaintEngine_Begin(this, pdev) != 0; };
	void drawEllipse(const QRectF & rect) { callbackQPaintEngine_DrawEllipse(this, const_cast<QRectF*>(&rect)); };
	void drawEllipse(const QRect & rect) { callbackQPaintEngine_DrawEllipse2(this, const_cast<QRect*>(&rect)); };
	void drawImage(const QRectF & rectangle, const QImage & image, const QRectF & sr, Qt::ImageConversionFlags flags) { callbackQPaintEngine_DrawImage(this, const_cast<QRectF*>(&rectangle), const_cast<QImage*>(&image), const_cast<QRectF*>(&sr), flags); };
	void drawLines(const QLineF * lines, int lineCount) { callbackQPaintEngine_DrawLines(this, const_cast<QLineF*>(lines), lineCount); };
	void drawLines(const QLine * lines, int lineCount) { callbackQPaintEngine_DrawLines2(this, const_cast<QLine*>(lines), lineCount); };
	void drawPath(const QPainterPath & path) { callbackQPaintEngine_DrawPath(this, const_cast<QPainterPath*>(&path)); };
	void drawPixmap(const QRectF & r, const QPixmap & pm, const QRectF & sr) { callbackQPaintEngine_DrawPixmap(this, const_cast<QRectF*>(&r), const_cast<QPixmap*>(&pm), const_cast<QRectF*>(&sr)); };
	void drawPoints(const QPointF * points, int pointCount) { callbackQPaintEngine_DrawPoints(this, const_cast<QPointF*>(points), pointCount); };
	void drawPoints(const QPoint * points, int pointCount) { callbackQPaintEngine_DrawPoints2(this, const_cast<QPoint*>(points), pointCount); };
	void drawPolygon(const QPointF * points, int pointCount, QPaintEngine::PolygonDrawMode mode) { callbackQPaintEngine_DrawPolygon(this, const_cast<QPointF*>(points), pointCount, mode); };
	void drawPolygon(const QPoint * points, int pointCount, QPaintEngine::PolygonDrawMode mode) { callbackQPaintEngine_DrawPolygon2(this, const_cast<QPoint*>(points), pointCount, mode); };
	void drawRects(const QRectF * rects, int rectCount) { callbackQPaintEngine_DrawRects(this, const_cast<QRectF*>(rects), rectCount); };
	void drawRects(const QRect * rects, int rectCount) { callbackQPaintEngine_DrawRects2(this, const_cast<QRect*>(rects), rectCount); };
	void drawTextItem(const QPointF & p, const QTextItem & textItem) { callbackQPaintEngine_DrawTextItem(this, const_cast<QPointF*>(&p), const_cast<QTextItem*>(&textItem)); };
	void drawTiledPixmap(const QRectF & rect, const QPixmap & pixmap, const QPointF & p) { callbackQPaintEngine_DrawTiledPixmap(this, const_cast<QRectF*>(&rect), const_cast<QPixmap*>(&pixmap), const_cast<QPointF*>(&p)); };
	bool end() { return callbackQPaintEngine_End(this) != 0; };
	QPaintEngine::Type type() const { return static_cast<QPaintEngine::Type>(callbackQPaintEngine_Type(const_cast<void*>(static_cast<const void*>(this)))); };
	void updateState(const QPaintEngineState & state) { callbackQPaintEngine_UpdateState(this, const_cast<QPaintEngineState*>(&state)); };
	 ~MyQPaintEngine() { callbackQPaintEngine_DestroyQPaintEngine(this); };
};

Q_DECLARE_METATYPE(QPaintEngine*)
Q_DECLARE_METATYPE(MyQPaintEngine*)

int QPaintEngine_QPaintEngine_QRegisterMetaType(){qRegisterMetaType<QPaintEngine*>(); return qRegisterMetaType<MyQPaintEngine*>();}

void* QPaintEngine_NewQPaintEngine(long long caps)
{
	return new MyQPaintEngine(static_cast<QPaintEngine::PaintEngineFeature>(caps));
}

char QPaintEngine_Begin(void* ptr, void* pdev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(pdev))) {
		return static_cast<QPaintEngine*>(ptr)->begin(static_cast<QPaintDeviceWindow*>(pdev));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(pdev))) {
		return static_cast<QPaintEngine*>(ptr)->begin(static_cast<QPdfWriter*>(pdev));
	} else {
		return static_cast<QPaintEngine*>(ptr)->begin(static_cast<QPaintDevice*>(pdev));
	}
}

void QPaintEngine_DrawEllipse(void* ptr, void* rect)
{
	static_cast<QPaintEngine*>(ptr)->drawEllipse(*static_cast<QRectF*>(rect));
}

void QPaintEngine_DrawEllipseDefault(void* ptr, void* rect)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawEllipse(*static_cast<QRectF*>(rect));
}

void QPaintEngine_DrawEllipse2(void* ptr, void* rect)
{
	static_cast<QPaintEngine*>(ptr)->drawEllipse(*static_cast<QRect*>(rect));
}

void QPaintEngine_DrawEllipse2Default(void* ptr, void* rect)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawEllipse(*static_cast<QRect*>(rect));
}

void QPaintEngine_DrawImage(void* ptr, void* rectangle, void* image, void* sr, long long flags)
{
	static_cast<QPaintEngine*>(ptr)->drawImage(*static_cast<QRectF*>(rectangle), *static_cast<QImage*>(image), *static_cast<QRectF*>(sr), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPaintEngine_DrawImageDefault(void* ptr, void* rectangle, void* image, void* sr, long long flags)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawImage(*static_cast<QRectF*>(rectangle), *static_cast<QImage*>(image), *static_cast<QRectF*>(sr), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPaintEngine_DrawLines(void* ptr, void* lines, int lineCount)
{
	static_cast<QPaintEngine*>(ptr)->drawLines(static_cast<QLineF*>(lines), lineCount);
}

void QPaintEngine_DrawLinesDefault(void* ptr, void* lines, int lineCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawLines(static_cast<QLineF*>(lines), lineCount);
}

void QPaintEngine_DrawLines2(void* ptr, void* lines, int lineCount)
{
	static_cast<QPaintEngine*>(ptr)->drawLines(static_cast<QLine*>(lines), lineCount);
}

void QPaintEngine_DrawLines2Default(void* ptr, void* lines, int lineCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawLines(static_cast<QLine*>(lines), lineCount);
}

void QPaintEngine_DrawPath(void* ptr, void* path)
{
	static_cast<QPaintEngine*>(ptr)->drawPath(*static_cast<QPainterPath*>(path));
}

void QPaintEngine_DrawPathDefault(void* ptr, void* path)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawPath(*static_cast<QPainterPath*>(path));
}

void QPaintEngine_DrawPixmap(void* ptr, void* r, void* pm, void* sr)
{
	static_cast<QPaintEngine*>(ptr)->drawPixmap(*static_cast<QRectF*>(r), *static_cast<QPixmap*>(pm), *static_cast<QRectF*>(sr));
}

void QPaintEngine_DrawPoints(void* ptr, void* points, int pointCount)
{
	static_cast<QPaintEngine*>(ptr)->drawPoints(static_cast<QPointF*>(points), pointCount);
}

void QPaintEngine_DrawPointsDefault(void* ptr, void* points, int pointCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawPoints(static_cast<QPointF*>(points), pointCount);
}

void QPaintEngine_DrawPoints2(void* ptr, void* points, int pointCount)
{
	static_cast<QPaintEngine*>(ptr)->drawPoints(static_cast<QPoint*>(points), pointCount);
}

void QPaintEngine_DrawPoints2Default(void* ptr, void* points, int pointCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawPoints(static_cast<QPoint*>(points), pointCount);
}

void QPaintEngine_DrawPolygon(void* ptr, void* points, int pointCount, long long mode)
{
	static_cast<QPaintEngine*>(ptr)->drawPolygon(static_cast<QPointF*>(points), pointCount, static_cast<QPaintEngine::PolygonDrawMode>(mode));
}

void QPaintEngine_DrawPolygonDefault(void* ptr, void* points, int pointCount, long long mode)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawPolygon(static_cast<QPointF*>(points), pointCount, static_cast<QPaintEngine::PolygonDrawMode>(mode));
}

void QPaintEngine_DrawPolygon2(void* ptr, void* points, int pointCount, long long mode)
{
	static_cast<QPaintEngine*>(ptr)->drawPolygon(static_cast<QPoint*>(points), pointCount, static_cast<QPaintEngine::PolygonDrawMode>(mode));
}

void QPaintEngine_DrawPolygon2Default(void* ptr, void* points, int pointCount, long long mode)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawPolygon(static_cast<QPoint*>(points), pointCount, static_cast<QPaintEngine::PolygonDrawMode>(mode));
}

void QPaintEngine_DrawRects(void* ptr, void* rects, int rectCount)
{
	static_cast<QPaintEngine*>(ptr)->drawRects(static_cast<QRectF*>(rects), rectCount);
}

void QPaintEngine_DrawRectsDefault(void* ptr, void* rects, int rectCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawRects(static_cast<QRectF*>(rects), rectCount);
}

void QPaintEngine_DrawRects2(void* ptr, void* rects, int rectCount)
{
	static_cast<QPaintEngine*>(ptr)->drawRects(static_cast<QRect*>(rects), rectCount);
}

void QPaintEngine_DrawRects2Default(void* ptr, void* rects, int rectCount)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawRects(static_cast<QRect*>(rects), rectCount);
}

void QPaintEngine_DrawTextItem(void* ptr, void* p, void* textItem)
{
	static_cast<QPaintEngine*>(ptr)->drawTextItem(*static_cast<QPointF*>(p), *static_cast<QTextItem*>(textItem));
}

void QPaintEngine_DrawTextItemDefault(void* ptr, void* p, void* textItem)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawTextItem(*static_cast<QPointF*>(p), *static_cast<QTextItem*>(textItem));
}

void QPaintEngine_DrawTiledPixmap(void* ptr, void* rect, void* pixmap, void* p)
{
	static_cast<QPaintEngine*>(ptr)->drawTiledPixmap(*static_cast<QRectF*>(rect), *static_cast<QPixmap*>(pixmap), *static_cast<QPointF*>(p));
}

void QPaintEngine_DrawTiledPixmapDefault(void* ptr, void* rect, void* pixmap, void* p)
{
		static_cast<QPaintEngine*>(ptr)->QPaintEngine::drawTiledPixmap(*static_cast<QRectF*>(rect), *static_cast<QPixmap*>(pixmap), *static_cast<QPointF*>(p));
}

char QPaintEngine_End(void* ptr)
{
	return static_cast<QPaintEngine*>(ptr)->end();
}

char QPaintEngine_HasFeature(void* ptr, long long feature)
{
	return static_cast<QPaintEngine*>(ptr)->hasFeature(static_cast<QPaintEngine::PaintEngineFeature>(feature));
}

char QPaintEngine_IsActive(void* ptr)
{
	return static_cast<QPaintEngine*>(ptr)->isActive();
}

void* QPaintEngine_PaintDevice(void* ptr)
{
	return static_cast<QPaintEngine*>(ptr)->paintDevice();
}

void* QPaintEngine_Painter(void* ptr)
{
	return static_cast<QPaintEngine*>(ptr)->painter();
}

void QPaintEngine_SetActive(void* ptr, char state)
{
	static_cast<QPaintEngine*>(ptr)->setActive(state != 0);
}

long long QPaintEngine_Type(void* ptr)
{
	return static_cast<QPaintEngine*>(ptr)->type();
}

void QPaintEngine_UpdateState(void* ptr, void* state)
{
	static_cast<QPaintEngine*>(ptr)->updateState(*static_cast<QPaintEngineState*>(state));
}

void QPaintEngine_DestroyQPaintEngine(void* ptr)
{
	static_cast<QPaintEngine*>(ptr)->~QPaintEngine();
}

void QPaintEngine_DestroyQPaintEngineDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPaintEngineState_BackgroundBrush(void* ptr)
{
	return new QBrush(static_cast<QPaintEngineState*>(ptr)->backgroundBrush());
}

long long QPaintEngineState_BackgroundMode(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->backgroundMode();
}

void* QPaintEngineState_Brush(void* ptr)
{
	return new QBrush(static_cast<QPaintEngineState*>(ptr)->brush());
}

char QPaintEngineState_BrushNeedsResolving(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->brushNeedsResolving();
}

void* QPaintEngineState_BrushOrigin(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QPaintEngineState*>(ptr)->brushOrigin(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

long long QPaintEngineState_ClipOperation(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->clipOperation();
}

void* QPaintEngineState_ClipPath(void* ptr)
{
	return new QPainterPath(static_cast<QPaintEngineState*>(ptr)->clipPath());
}

void* QPaintEngineState_ClipRegion(void* ptr)
{
	return new QRegion(static_cast<QPaintEngineState*>(ptr)->clipRegion());
}

long long QPaintEngineState_CompositionMode(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->compositionMode();
}

void* QPaintEngineState_Font(void* ptr)
{
	return new QFont(static_cast<QPaintEngineState*>(ptr)->font());
}

char QPaintEngineState_IsClipEnabled(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->isClipEnabled();
}

double QPaintEngineState_Opacity(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->opacity();
}

void* QPaintEngineState_Painter(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->painter();
}

void* QPaintEngineState_Pen(void* ptr)
{
	return new QPen(static_cast<QPaintEngineState*>(ptr)->pen());
}

char QPaintEngineState_PenNeedsResolving(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->penNeedsResolving();
}

long long QPaintEngineState_RenderHints(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->renderHints();
}

long long QPaintEngineState_State(void* ptr)
{
	return static_cast<QPaintEngineState*>(ptr)->state();
}

void* QPaintEngineState_Transform(void* ptr)
{
	return new QTransform(static_cast<QPaintEngineState*>(ptr)->transform());
}

class MyQPaintEvent: public QPaintEvent
{
public:
	MyQPaintEvent(const QRegion &paintRegion) : QPaintEvent(paintRegion) {QPaintEvent_QPaintEvent_QRegisterMetaType();};
	MyQPaintEvent(const QRect &paintRect) : QPaintEvent(paintRect) {QPaintEvent_QPaintEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QPaintEvent*)
Q_DECLARE_METATYPE(MyQPaintEvent*)

int QPaintEvent_QPaintEvent_QRegisterMetaType(){qRegisterMetaType<QPaintEvent*>(); return qRegisterMetaType<MyQPaintEvent*>();}

void* QPaintEvent_NewQPaintEvent(void* paintRegion)
{
	return new MyQPaintEvent(*static_cast<QRegion*>(paintRegion));
}

void* QPaintEvent_NewQPaintEvent2(void* paintRect)
{
	return new MyQPaintEvent(*static_cast<QRect*>(paintRect));
}

void* QPaintEvent_Rect(void* ptr)
{
	return const_cast<QRect*>(&static_cast<QPaintEvent*>(ptr)->rect());
}

void* QPaintEvent_Region(void* ptr)
{
	return const_cast<QRegion*>(&static_cast<QPaintEvent*>(ptr)->region());
}

Q_DECLARE_METATYPE(QPainter*)
void* QPainter_NewQPainter()
{
	return new QPainter();
}

void* QPainter_NewQPainter2(void* device)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(device))) {
		return new QPainter(static_cast<QPaintDeviceWindow*>(device));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(device))) {
		return new QPainter(static_cast<QPdfWriter*>(device));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(device))) {
		return new QPainter(static_cast<QWidget*>(device));
	} else {
		return new QPainter(static_cast<QPaintDevice*>(device));
	}
}

void* QPainter_Background(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPainter*>(ptr)->background());
}

long long QPainter_BackgroundMode(void* ptr)
{
	return static_cast<QPainter*>(ptr)->backgroundMode();
}

char QPainter_Begin(void* ptr, void* device)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(device))) {
		return static_cast<QPainter*>(ptr)->begin(static_cast<QPaintDeviceWindow*>(device));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(device))) {
		return static_cast<QPainter*>(ptr)->begin(static_cast<QPdfWriter*>(device));
	} else {
		return static_cast<QPainter*>(ptr)->begin(static_cast<QPaintDevice*>(device));
	}
}

void QPainter_BeginNativePainting(void* ptr)
{
	static_cast<QPainter*>(ptr)->beginNativePainting();
}

void* QPainter_BoundingRect(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text)
{
	return ({ QRectF tmpValue = static_cast<QPainter*>(ptr)->boundingRect(*static_cast<QRectF*>(rectangle), flags, QString::fromUtf8(text.data, text.len)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_BoundingRect2(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text)
{
	return ({ QRect tmpValue = static_cast<QPainter*>(ptr)->boundingRect(*static_cast<QRect*>(rectangle), flags, QString::fromUtf8(text.data, text.len)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_BoundingRect3(void* ptr, int x, int y, int w, int h, int flags, struct QtGui_PackedString text)
{
	return ({ QRect tmpValue = static_cast<QPainter*>(ptr)->boundingRect(x, y, w, h, flags, QString::fromUtf8(text.data, text.len)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_BoundingRect4(void* ptr, void* rectangle, struct QtGui_PackedString text, void* option)
{
	return ({ QRectF tmpValue = static_cast<QPainter*>(ptr)->boundingRect(*static_cast<QRectF*>(rectangle), QString::fromUtf8(text.data, text.len), *static_cast<QTextOption*>(option)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_Brush(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPainter*>(ptr)->brush());
}

void* QPainter_BrushOrigin(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QPainter*>(ptr)->brushOrigin(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QPainter_ClipBoundingRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPainter*>(ptr)->clipBoundingRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_ClipPath(void* ptr)
{
	return new QPainterPath(static_cast<QPainter*>(ptr)->clipPath());
}

void* QPainter_ClipRegion(void* ptr)
{
	return new QRegion(static_cast<QPainter*>(ptr)->clipRegion());
}

void* QPainter_CombinedTransform(void* ptr)
{
	return new QTransform(static_cast<QPainter*>(ptr)->combinedTransform());
}

long long QPainter_CompositionMode(void* ptr)
{
	return static_cast<QPainter*>(ptr)->compositionMode();
}

void* QPainter_Device(void* ptr)
{
	return static_cast<QPainter*>(ptr)->device();
}

void* QPainter_DeviceTransform(void* ptr)
{
	return const_cast<QTransform*>(&static_cast<QPainter*>(ptr)->deviceTransform());
}

void QPainter_DrawArc(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawArc(*static_cast<QRectF*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawArc2(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawArc(*static_cast<QRect*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawArc3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawArc(x, y, width, height, startAngle, spanAngle);
}

void QPainter_DrawChord(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawChord(*static_cast<QRectF*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawChord2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawChord(x, y, width, height, startAngle, spanAngle);
}

void QPainter_DrawChord3(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawChord(*static_cast<QRect*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawConvexPolygon(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawConvexPolygon(static_cast<QPointF*>(points), pointCount);
}

void QPainter_DrawConvexPolygon2(void* ptr, void* polygon)
{
	static_cast<QPainter*>(ptr)->drawConvexPolygon(*static_cast<QPolygonF*>(polygon));
}

void QPainter_DrawConvexPolygon3(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawConvexPolygon(static_cast<QPoint*>(points), pointCount);
}

void QPainter_DrawConvexPolygon4(void* ptr, void* polygon)
{
	static_cast<QPainter*>(ptr)->drawConvexPolygon(*static_cast<QPolygon*>(polygon));
}

void QPainter_DrawEllipse(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->drawEllipse(*static_cast<QRectF*>(rectangle));
}

void QPainter_DrawEllipse2(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->drawEllipse(*static_cast<QRect*>(rectangle));
}

void QPainter_DrawEllipse3(void* ptr, int x, int y, int width, int height)
{
	static_cast<QPainter*>(ptr)->drawEllipse(x, y, width, height);
}

void QPainter_DrawEllipse4(void* ptr, void* center, double rx, double ry)
{
	static_cast<QPainter*>(ptr)->drawEllipse(*static_cast<QPointF*>(center), rx, ry);
}

void QPainter_DrawEllipse5(void* ptr, void* center, int rx, int ry)
{
	static_cast<QPainter*>(ptr)->drawEllipse(*static_cast<QPoint*>(center), rx, ry);
}

void QPainter_DrawGlyphRun(void* ptr, void* position, void* glyphs)
{
	static_cast<QPainter*>(ptr)->drawGlyphRun(*static_cast<QPointF*>(position), *static_cast<QGlyphRun*>(glyphs));
}

void QPainter_DrawImage(void* ptr, void* target, void* image, void* source, long long flags)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QRectF*>(target), *static_cast<QImage*>(image), *static_cast<QRectF*>(source), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPainter_DrawImage2(void* ptr, void* target, void* image, void* source, long long flags)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QRect*>(target), *static_cast<QImage*>(image), *static_cast<QRect*>(source), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPainter_DrawImage3(void* ptr, void* point, void* image, void* source, long long flags)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QPointF*>(point), *static_cast<QImage*>(image), *static_cast<QRectF*>(source), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPainter_DrawImage4(void* ptr, void* point, void* image, void* source, long long flags)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QPoint*>(point), *static_cast<QImage*>(image), *static_cast<QRect*>(source), static_cast<Qt::ImageConversionFlag>(flags));
}

void QPainter_DrawImage5(void* ptr, void* rectangle, void* image)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QRectF*>(rectangle), *static_cast<QImage*>(image));
}

void QPainter_DrawImage6(void* ptr, void* rectangle, void* image)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QRect*>(rectangle), *static_cast<QImage*>(image));
}

void QPainter_DrawImage7(void* ptr, void* point, void* image)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QPointF*>(point), *static_cast<QImage*>(image));
}

void QPainter_DrawImage8(void* ptr, void* point, void* image)
{
	static_cast<QPainter*>(ptr)->drawImage(*static_cast<QPoint*>(point), *static_cast<QImage*>(image));
}

void QPainter_DrawImage9(void* ptr, int x, int y, void* image, int sx, int sy, int sw, int sh, long long flags)
{
	static_cast<QPainter*>(ptr)->drawImage(x, y, *static_cast<QImage*>(image), sx, sy, sw, sh, static_cast<Qt::ImageConversionFlag>(flags));
}

void QPainter_DrawLine(void* ptr, void* line)
{
	static_cast<QPainter*>(ptr)->drawLine(*static_cast<QLineF*>(line));
}

void QPainter_DrawLine2(void* ptr, void* line)
{
	static_cast<QPainter*>(ptr)->drawLine(*static_cast<QLine*>(line));
}

void QPainter_DrawLine3(void* ptr, int x1, int y1, int x2, int y2)
{
	static_cast<QPainter*>(ptr)->drawLine(x1, y1, x2, y2);
}

void QPainter_DrawLine4(void* ptr, void* p1, void* p2)
{
	static_cast<QPainter*>(ptr)->drawLine(*static_cast<QPoint*>(p1), *static_cast<QPoint*>(p2));
}

void QPainter_DrawLine5(void* ptr, void* p1, void* p2)
{
	static_cast<QPainter*>(ptr)->drawLine(*static_cast<QPointF*>(p1), *static_cast<QPointF*>(p2));
}

void QPainter_DrawLines(void* ptr, void* lines, int lineCount)
{
	static_cast<QPainter*>(ptr)->drawLines(static_cast<QLineF*>(lines), lineCount);
}

void QPainter_DrawLines2(void* ptr, void* lines)
{
	static_cast<QPainter*>(ptr)->drawLines(*static_cast<QVector<QLineF>*>(lines));
}

void QPainter_DrawLines3(void* ptr, void* pointPairs, int lineCount)
{
	static_cast<QPainter*>(ptr)->drawLines(static_cast<QPointF*>(pointPairs), lineCount);
}

void QPainter_DrawLines4(void* ptr, void* pointPairs)
{
	static_cast<QPainter*>(ptr)->drawLines(*static_cast<QVector<QPointF>*>(pointPairs));
}

void QPainter_DrawLines5(void* ptr, void* lines, int lineCount)
{
	static_cast<QPainter*>(ptr)->drawLines(static_cast<QLine*>(lines), lineCount);
}

void QPainter_DrawLines6(void* ptr, void* lines)
{
	static_cast<QPainter*>(ptr)->drawLines(*static_cast<QVector<QLine>*>(lines));
}

void QPainter_DrawLines7(void* ptr, void* pointPairs, int lineCount)
{
	static_cast<QPainter*>(ptr)->drawLines(static_cast<QPoint*>(pointPairs), lineCount);
}

void QPainter_DrawLines8(void* ptr, void* pointPairs)
{
	static_cast<QPainter*>(ptr)->drawLines(*static_cast<QVector<QPoint>*>(pointPairs));
}

void QPainter_DrawPath(void* ptr, void* path)
{
	static_cast<QPainter*>(ptr)->drawPath(*static_cast<QPainterPath*>(path));
}

void QPainter_DrawPicture(void* ptr, void* point, void* picture)
{
	static_cast<QPainter*>(ptr)->drawPicture(*static_cast<QPointF*>(point), *static_cast<QPicture*>(picture));
}

void QPainter_DrawPicture2(void* ptr, int x, int y, void* picture)
{
	static_cast<QPainter*>(ptr)->drawPicture(x, y, *static_cast<QPicture*>(picture));
}

void QPainter_DrawPicture3(void* ptr, void* point, void* picture)
{
	static_cast<QPainter*>(ptr)->drawPicture(*static_cast<QPoint*>(point), *static_cast<QPicture*>(picture));
}

void QPainter_DrawPie(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawPie(*static_cast<QRectF*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawPie2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawPie(x, y, width, height, startAngle, spanAngle);
}

void QPainter_DrawPie3(void* ptr, void* rectangle, int startAngle, int spanAngle)
{
	static_cast<QPainter*>(ptr)->drawPie(*static_cast<QRect*>(rectangle), startAngle, spanAngle);
}

void QPainter_DrawPixmap(void* ptr, void* target, void* pixmap, void* source)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QRectF*>(target), *static_cast<QPixmap*>(pixmap), *static_cast<QRectF*>(source));
}

void QPainter_DrawPixmap2(void* ptr, void* target, void* pixmap, void* source)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QRect*>(target), *static_cast<QPixmap*>(pixmap), *static_cast<QRect*>(source));
}

void QPainter_DrawPixmap3(void* ptr, int x, int y, int w, int h, void* pixmap, int sx, int sy, int sw, int sh)
{
	static_cast<QPainter*>(ptr)->drawPixmap(x, y, w, h, *static_cast<QPixmap*>(pixmap), sx, sy, sw, sh);
}

void QPainter_DrawPixmap4(void* ptr, int x, int y, void* pixmap, int sx, int sy, int sw, int sh)
{
	static_cast<QPainter*>(ptr)->drawPixmap(x, y, *static_cast<QPixmap*>(pixmap), sx, sy, sw, sh);
}

void QPainter_DrawPixmap5(void* ptr, void* point, void* pixmap, void* source)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QPointF*>(point), *static_cast<QPixmap*>(pixmap), *static_cast<QRectF*>(source));
}

void QPainter_DrawPixmap6(void* ptr, void* point, void* pixmap, void* source)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QPoint*>(point), *static_cast<QPixmap*>(pixmap), *static_cast<QRect*>(source));
}

void QPainter_DrawPixmap7(void* ptr, void* point, void* pixmap)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QPointF*>(point), *static_cast<QPixmap*>(pixmap));
}

void QPainter_DrawPixmap8(void* ptr, void* point, void* pixmap)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QPoint*>(point), *static_cast<QPixmap*>(pixmap));
}

void QPainter_DrawPixmap9(void* ptr, int x, int y, void* pixmap)
{
	static_cast<QPainter*>(ptr)->drawPixmap(x, y, *static_cast<QPixmap*>(pixmap));
}

void QPainter_DrawPixmap10(void* ptr, void* rectangle, void* pixmap)
{
	static_cast<QPainter*>(ptr)->drawPixmap(*static_cast<QRect*>(rectangle), *static_cast<QPixmap*>(pixmap));
}

void QPainter_DrawPixmap11(void* ptr, int x, int y, int width, int height, void* pixmap)
{
	static_cast<QPainter*>(ptr)->drawPixmap(x, y, width, height, *static_cast<QPixmap*>(pixmap));
}

void QPainter_DrawPoint(void* ptr, void* position)
{
	static_cast<QPainter*>(ptr)->drawPoint(*static_cast<QPointF*>(position));
}

void QPainter_DrawPoint2(void* ptr, void* position)
{
	static_cast<QPainter*>(ptr)->drawPoint(*static_cast<QPoint*>(position));
}

void QPainter_DrawPoint3(void* ptr, int x, int y)
{
	static_cast<QPainter*>(ptr)->drawPoint(x, y);
}

void QPainter_DrawPoints(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawPoints(static_cast<QPointF*>(points), pointCount);
}

void QPainter_DrawPoints2(void* ptr, void* points)
{
	static_cast<QPainter*>(ptr)->drawPoints(*static_cast<QPolygonF*>(points));
}

void QPainter_DrawPoints3(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawPoints(static_cast<QPoint*>(points), pointCount);
}

void QPainter_DrawPoints4(void* ptr, void* points)
{
	static_cast<QPainter*>(ptr)->drawPoints(*static_cast<QPolygon*>(points));
}

void QPainter_DrawPolygon(void* ptr, void* points, int pointCount, long long fillRule)
{
	static_cast<QPainter*>(ptr)->drawPolygon(static_cast<QPointF*>(points), pointCount, static_cast<Qt::FillRule>(fillRule));
}

void QPainter_DrawPolygon2(void* ptr, void* points, long long fillRule)
{
	static_cast<QPainter*>(ptr)->drawPolygon(*static_cast<QPolygonF*>(points), static_cast<Qt::FillRule>(fillRule));
}

void QPainter_DrawPolygon3(void* ptr, void* points, int pointCount, long long fillRule)
{
	static_cast<QPainter*>(ptr)->drawPolygon(static_cast<QPoint*>(points), pointCount, static_cast<Qt::FillRule>(fillRule));
}

void QPainter_DrawPolygon4(void* ptr, void* points, long long fillRule)
{
	static_cast<QPainter*>(ptr)->drawPolygon(*static_cast<QPolygon*>(points), static_cast<Qt::FillRule>(fillRule));
}

void QPainter_DrawPolyline(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawPolyline(static_cast<QPointF*>(points), pointCount);
}

void QPainter_DrawPolyline2(void* ptr, void* points)
{
	static_cast<QPainter*>(ptr)->drawPolyline(*static_cast<QPolygonF*>(points));
}

void QPainter_DrawPolyline3(void* ptr, void* points, int pointCount)
{
	static_cast<QPainter*>(ptr)->drawPolyline(static_cast<QPoint*>(points), pointCount);
}

void QPainter_DrawPolyline4(void* ptr, void* points)
{
	static_cast<QPainter*>(ptr)->drawPolyline(*static_cast<QPolygon*>(points));
}

void QPainter_DrawRect(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->drawRect(*static_cast<QRectF*>(rectangle));
}

void QPainter_DrawRect2(void* ptr, int x, int y, int width, int height)
{
	static_cast<QPainter*>(ptr)->drawRect(x, y, width, height);
}

void QPainter_DrawRect3(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->drawRect(*static_cast<QRect*>(rectangle));
}

void QPainter_DrawRects(void* ptr, void* rectangles, int rectCount)
{
	static_cast<QPainter*>(ptr)->drawRects(static_cast<QRectF*>(rectangles), rectCount);
}

void QPainter_DrawRects2(void* ptr, void* rectangles)
{
	static_cast<QPainter*>(ptr)->drawRects(*static_cast<QVector<QRectF>*>(rectangles));
}

void QPainter_DrawRects3(void* ptr, void* rectangles, int rectCount)
{
	static_cast<QPainter*>(ptr)->drawRects(static_cast<QRect*>(rectangles), rectCount);
}

void QPainter_DrawRects4(void* ptr, void* rectangles)
{
	static_cast<QPainter*>(ptr)->drawRects(*static_cast<QVector<QRect>*>(rectangles));
}

void QPainter_DrawRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode)
{
	static_cast<QPainter*>(ptr)->drawRoundedRect(*static_cast<QRectF*>(rect), xRadius, yRadius, static_cast<Qt::SizeMode>(mode));
}

void QPainter_DrawRoundedRect2(void* ptr, int x, int y, int w, int h, double xRadius, double yRadius, long long mode)
{
	static_cast<QPainter*>(ptr)->drawRoundedRect(x, y, w, h, xRadius, yRadius, static_cast<Qt::SizeMode>(mode));
}

void QPainter_DrawRoundedRect3(void* ptr, void* rect, double xRadius, double yRadius, long long mode)
{
	static_cast<QPainter*>(ptr)->drawRoundedRect(*static_cast<QRect*>(rect), xRadius, yRadius, static_cast<Qt::SizeMode>(mode));
}

void QPainter_DrawStaticText(void* ptr, void* topLeftPosition, void* staticText)
{
	static_cast<QPainter*>(ptr)->drawStaticText(*static_cast<QPointF*>(topLeftPosition), *static_cast<QStaticText*>(staticText));
}

void QPainter_DrawStaticText2(void* ptr, void* topLeftPosition, void* staticText)
{
	static_cast<QPainter*>(ptr)->drawStaticText(*static_cast<QPoint*>(topLeftPosition), *static_cast<QStaticText*>(staticText));
}

void QPainter_DrawStaticText3(void* ptr, int left, int top, void* staticText)
{
	static_cast<QPainter*>(ptr)->drawStaticText(left, top, *static_cast<QStaticText*>(staticText));
}

void QPainter_DrawText(void* ptr, void* position, struct QtGui_PackedString text)
{
	static_cast<QPainter*>(ptr)->drawText(*static_cast<QPointF*>(position), QString::fromUtf8(text.data, text.len));
}

void QPainter_DrawText2(void* ptr, void* position, struct QtGui_PackedString text)
{
	static_cast<QPainter*>(ptr)->drawText(*static_cast<QPoint*>(position), QString::fromUtf8(text.data, text.len));
}

void QPainter_DrawText3(void* ptr, int x, int y, struct QtGui_PackedString text)
{
	static_cast<QPainter*>(ptr)->drawText(x, y, QString::fromUtf8(text.data, text.len));
}

void QPainter_DrawText4(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text, void* boundingRect)
{
	static_cast<QPainter*>(ptr)->drawText(*static_cast<QRect*>(rectangle), flags, QString::fromUtf8(text.data, text.len), static_cast<QRect*>(boundingRect));
}

void QPainter_DrawText5(void* ptr, int x, int y, int width, int height, int flags, struct QtGui_PackedString text, void* boundingRect)
{
	static_cast<QPainter*>(ptr)->drawText(x, y, width, height, flags, QString::fromUtf8(text.data, text.len), static_cast<QRect*>(boundingRect));
}

void QPainter_DrawText6(void* ptr, void* rectangle, struct QtGui_PackedString text, void* option)
{
	static_cast<QPainter*>(ptr)->drawText(*static_cast<QRectF*>(rectangle), QString::fromUtf8(text.data, text.len), *static_cast<QTextOption*>(option));
}

void QPainter_DrawTiledPixmap(void* ptr, void* rectangle, void* pixmap, void* position)
{
	static_cast<QPainter*>(ptr)->drawTiledPixmap(*static_cast<QRectF*>(rectangle), *static_cast<QPixmap*>(pixmap), *static_cast<QPointF*>(position));
}

void QPainter_DrawTiledPixmap2(void* ptr, int x, int y, int width, int height, void* pixmap, int sx, int sy)
{
	static_cast<QPainter*>(ptr)->drawTiledPixmap(x, y, width, height, *static_cast<QPixmap*>(pixmap), sx, sy);
}

void QPainter_DrawTiledPixmap3(void* ptr, void* rectangle, void* pixmap, void* position)
{
	static_cast<QPainter*>(ptr)->drawTiledPixmap(*static_cast<QRect*>(rectangle), *static_cast<QPixmap*>(pixmap), *static_cast<QPoint*>(position));
}

char QPainter_End(void* ptr)
{
	return static_cast<QPainter*>(ptr)->end();
}

void QPainter_EndNativePainting(void* ptr)
{
	static_cast<QPainter*>(ptr)->endNativePainting();
}

void QPainter_EraseRect(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->eraseRect(*static_cast<QRectF*>(rectangle));
}

void QPainter_EraseRect2(void* ptr, int x, int y, int width, int height)
{
	static_cast<QPainter*>(ptr)->eraseRect(x, y, width, height);
}

void QPainter_EraseRect3(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->eraseRect(*static_cast<QRect*>(rectangle));
}

void QPainter_FillPath(void* ptr, void* path, void* brush)
{
	static_cast<QPainter*>(ptr)->fillPath(*static_cast<QPainterPath*>(path), *static_cast<QBrush*>(brush));
}

void QPainter_FillRect(void* ptr, void* rectangle, void* brush)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRectF*>(rectangle), *static_cast<QBrush*>(brush));
}

void QPainter_FillRect2(void* ptr, int x, int y, int width, int height, void* brush)
{
	static_cast<QPainter*>(ptr)->fillRect(x, y, width, height, *static_cast<QBrush*>(brush));
}

void QPainter_FillRect3(void* ptr, void* rectangle, void* brush)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRect*>(rectangle), *static_cast<QBrush*>(brush));
}

void QPainter_FillRect4(void* ptr, void* rectangle, void* color)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRectF*>(rectangle), *static_cast<QColor*>(color));
}

void QPainter_FillRect5(void* ptr, int x, int y, int width, int height, void* color)
{
	static_cast<QPainter*>(ptr)->fillRect(x, y, width, height, *static_cast<QColor*>(color));
}

void QPainter_FillRect6(void* ptr, void* rectangle, void* color)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRect*>(rectangle), *static_cast<QColor*>(color));
}

void QPainter_FillRect7(void* ptr, int x, int y, int width, int height, long long color)
{
	static_cast<QPainter*>(ptr)->fillRect(x, y, width, height, static_cast<Qt::GlobalColor>(color));
}

void QPainter_FillRect8(void* ptr, void* rectangle, long long color)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRect*>(rectangle), static_cast<Qt::GlobalColor>(color));
}

void QPainter_FillRect9(void* ptr, void* rectangle, long long color)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRectF*>(rectangle), static_cast<Qt::GlobalColor>(color));
}

void QPainter_FillRect10(void* ptr, int x, int y, int width, int height, long long style)
{
	static_cast<QPainter*>(ptr)->fillRect(x, y, width, height, static_cast<Qt::BrushStyle>(style));
}

void QPainter_FillRect11(void* ptr, void* rectangle, long long style)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRect*>(rectangle), static_cast<Qt::BrushStyle>(style));
}

void QPainter_FillRect12(void* ptr, void* rectangle, long long style)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRectF*>(rectangle), static_cast<Qt::BrushStyle>(style));
}

void QPainter_FillRect13(void* ptr, int x, int y, int width, int height, long long preset)
{
	static_cast<QPainter*>(ptr)->fillRect(x, y, width, height, static_cast<QGradient::Preset>(preset));
}

void QPainter_FillRect14(void* ptr, void* rectangle, long long preset)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRect*>(rectangle), static_cast<QGradient::Preset>(preset));
}

void QPainter_FillRect15(void* ptr, void* rectangle, long long preset)
{
	static_cast<QPainter*>(ptr)->fillRect(*static_cast<QRectF*>(rectangle), static_cast<QGradient::Preset>(preset));
}

void* QPainter_Font(void* ptr)
{
	return const_cast<QFont*>(&static_cast<QPainter*>(ptr)->font());
}

void* QPainter_FontInfo(void* ptr)
{
	return new QFontInfo(static_cast<QPainter*>(ptr)->fontInfo());
}

void* QPainter_FontMetrics(void* ptr)
{
	return new QFontMetrics(static_cast<QPainter*>(ptr)->fontMetrics());
}

char QPainter_HasClipping(void* ptr)
{
	return static_cast<QPainter*>(ptr)->hasClipping();
}

char QPainter_IsActive(void* ptr)
{
	return static_cast<QPainter*>(ptr)->isActive();
}

long long QPainter_LayoutDirection(void* ptr)
{
	return static_cast<QPainter*>(ptr)->layoutDirection();
}

double QPainter_Opacity(void* ptr)
{
	return static_cast<QPainter*>(ptr)->opacity();
}

void* QPainter_PaintEngine(void* ptr)
{
	return static_cast<QPainter*>(ptr)->paintEngine();
}

void* QPainter_Pen(void* ptr)
{
	return const_cast<QPen*>(&static_cast<QPainter*>(ptr)->pen());
}

long long QPainter_RenderHints(void* ptr)
{
	return static_cast<QPainter*>(ptr)->renderHints();
}

void QPainter_ResetTransform(void* ptr)
{
	static_cast<QPainter*>(ptr)->resetTransform();
}

void QPainter_Restore(void* ptr)
{
	static_cast<QPainter*>(ptr)->restore();
}

void QPainter_Rotate(void* ptr, double angle)
{
	static_cast<QPainter*>(ptr)->rotate(angle);
}

void QPainter_Save(void* ptr)
{
	static_cast<QPainter*>(ptr)->save();
}

void QPainter_Scale(void* ptr, double sx, double sy)
{
	static_cast<QPainter*>(ptr)->scale(sx, sy);
}

void QPainter_SetBackground(void* ptr, void* brush)
{
	static_cast<QPainter*>(ptr)->setBackground(*static_cast<QBrush*>(brush));
}

void QPainter_SetBackgroundMode(void* ptr, long long mode)
{
	static_cast<QPainter*>(ptr)->setBackgroundMode(static_cast<Qt::BGMode>(mode));
}

void QPainter_SetBrush(void* ptr, void* brush)
{
	static_cast<QPainter*>(ptr)->setBrush(*static_cast<QBrush*>(brush));
}

void QPainter_SetBrush2(void* ptr, long long style)
{
	static_cast<QPainter*>(ptr)->setBrush(static_cast<Qt::BrushStyle>(style));
}

void QPainter_SetBrushOrigin(void* ptr, void* position)
{
	static_cast<QPainter*>(ptr)->setBrushOrigin(*static_cast<QPointF*>(position));
}

void QPainter_SetBrushOrigin2(void* ptr, int x, int y)
{
	static_cast<QPainter*>(ptr)->setBrushOrigin(x, y);
}

void QPainter_SetBrushOrigin3(void* ptr, void* position)
{
	static_cast<QPainter*>(ptr)->setBrushOrigin(*static_cast<QPoint*>(position));
}

void QPainter_SetClipPath(void* ptr, void* path, long long operation)
{
	static_cast<QPainter*>(ptr)->setClipPath(*static_cast<QPainterPath*>(path), static_cast<Qt::ClipOperation>(operation));
}

void QPainter_SetClipRect(void* ptr, void* rectangle, long long operation)
{
	static_cast<QPainter*>(ptr)->setClipRect(*static_cast<QRectF*>(rectangle), static_cast<Qt::ClipOperation>(operation));
}

void QPainter_SetClipRect2(void* ptr, void* rectangle, long long operation)
{
	static_cast<QPainter*>(ptr)->setClipRect(*static_cast<QRect*>(rectangle), static_cast<Qt::ClipOperation>(operation));
}

void QPainter_SetClipRect3(void* ptr, int x, int y, int width, int height, long long operation)
{
	static_cast<QPainter*>(ptr)->setClipRect(x, y, width, height, static_cast<Qt::ClipOperation>(operation));
}

void QPainter_SetClipRegion(void* ptr, void* region, long long operation)
{
	static_cast<QPainter*>(ptr)->setClipRegion(*static_cast<QRegion*>(region), static_cast<Qt::ClipOperation>(operation));
}

void QPainter_SetClipping(void* ptr, char enable)
{
	static_cast<QPainter*>(ptr)->setClipping(enable != 0);
}

void QPainter_SetCompositionMode(void* ptr, long long mode)
{
	static_cast<QPainter*>(ptr)->setCompositionMode(static_cast<QPainter::CompositionMode>(mode));
}

void QPainter_SetFont(void* ptr, void* font)
{
	static_cast<QPainter*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QPainter_SetLayoutDirection(void* ptr, long long direction)
{
	static_cast<QPainter*>(ptr)->setLayoutDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QPainter_SetOpacity(void* ptr, double opacity)
{
	static_cast<QPainter*>(ptr)->setOpacity(opacity);
}

void QPainter_SetPen(void* ptr, void* pen)
{
	static_cast<QPainter*>(ptr)->setPen(*static_cast<QPen*>(pen));
}

void QPainter_SetPen2(void* ptr, void* color)
{
	static_cast<QPainter*>(ptr)->setPen(*static_cast<QColor*>(color));
}

void QPainter_SetPen3(void* ptr, long long style)
{
	static_cast<QPainter*>(ptr)->setPen(static_cast<Qt::PenStyle>(style));
}

void QPainter_SetRenderHint(void* ptr, long long hint, char on)
{
	static_cast<QPainter*>(ptr)->setRenderHint(static_cast<QPainter::RenderHint>(hint), on != 0);
}

void QPainter_SetRenderHints(void* ptr, long long hints, char on)
{
	static_cast<QPainter*>(ptr)->setRenderHints(static_cast<QPainter::RenderHint>(hints), on != 0);
}

void QPainter_SetTransform(void* ptr, void* transform, char combine)
{
	static_cast<QPainter*>(ptr)->setTransform(*static_cast<QTransform*>(transform), combine != 0);
}

void QPainter_SetViewTransformEnabled(void* ptr, char enable)
{
	static_cast<QPainter*>(ptr)->setViewTransformEnabled(enable != 0);
}

void QPainter_SetViewport(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->setViewport(*static_cast<QRect*>(rectangle));
}

void QPainter_SetViewport2(void* ptr, int x, int y, int width, int height)
{
	static_cast<QPainter*>(ptr)->setViewport(x, y, width, height);
}

void QPainter_SetWindow(void* ptr, void* rectangle)
{
	static_cast<QPainter*>(ptr)->setWindow(*static_cast<QRect*>(rectangle));
}

void QPainter_SetWindow2(void* ptr, int x, int y, int width, int height)
{
	static_cast<QPainter*>(ptr)->setWindow(x, y, width, height);
}

void QPainter_SetWorldMatrixEnabled(void* ptr, char enable)
{
	static_cast<QPainter*>(ptr)->setWorldMatrixEnabled(enable != 0);
}

void QPainter_SetWorldTransform(void* ptr, void* matrix, char combine)
{
	static_cast<QPainter*>(ptr)->setWorldTransform(*static_cast<QTransform*>(matrix), combine != 0);
}

void QPainter_Shear(void* ptr, double sh, double sv)
{
	static_cast<QPainter*>(ptr)->shear(sh, sv);
}

void QPainter_StrokePath(void* ptr, void* path, void* pen)
{
	static_cast<QPainter*>(ptr)->strokePath(*static_cast<QPainterPath*>(path), *static_cast<QPen*>(pen));
}

char QPainter_TestRenderHint(void* ptr, long long hint)
{
	return static_cast<QPainter*>(ptr)->testRenderHint(static_cast<QPainter::RenderHint>(hint));
}

void* QPainter_Transform(void* ptr)
{
	return const_cast<QTransform*>(&static_cast<QPainter*>(ptr)->transform());
}

void QPainter_Translate(void* ptr, void* offset)
{
	static_cast<QPainter*>(ptr)->translate(*static_cast<QPointF*>(offset));
}

void QPainter_Translate2(void* ptr, void* offset)
{
	static_cast<QPainter*>(ptr)->translate(*static_cast<QPoint*>(offset));
}

void QPainter_Translate3(void* ptr, double dx, double dy)
{
	static_cast<QPainter*>(ptr)->translate(dx, dy);
}

char QPainter_ViewTransformEnabled(void* ptr)
{
	return static_cast<QPainter*>(ptr)->viewTransformEnabled();
}

void* QPainter_Viewport(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPainter*>(ptr)->viewport(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QPainter_Window(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPainter*>(ptr)->window(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPainter_WorldMatrixEnabled(void* ptr)
{
	return static_cast<QPainter*>(ptr)->worldMatrixEnabled();
}

void* QPainter_WorldTransform(void* ptr)
{
	return const_cast<QTransform*>(&static_cast<QPainter*>(ptr)->worldTransform());
}

void QPainter_DestroyQPainter(void* ptr)
{
	static_cast<QPainter*>(ptr)->~QPainter();
}

void* QPainter___drawLines_lines_atList2(void* ptr, int i)
{
	return ({ QLineF tmpValue = ({QLineF tmp = static_cast<QVector<QLineF>*>(ptr)->at(i); if (i == static_cast<QVector<QLineF>*>(ptr)->size()-1) { static_cast<QVector<QLineF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QLineF(tmpValue.p1(), tmpValue.p2()); });
}

void QPainter___drawLines_lines_setList2(void* ptr, void* i)
{
	static_cast<QVector<QLineF>*>(ptr)->append(*static_cast<QLineF*>(i));
}

void* QPainter___drawLines_lines_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QLineF>();
}

void* QPainter___drawLines_pointPairs_atList4(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QPainter___drawLines_pointPairs_setList4(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QPainter___drawLines_pointPairs_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

void* QPainter___drawLines_lines_atList6(void* ptr, int i)
{
	return ({ QLine tmpValue = ({QLine tmp = static_cast<QVector<QLine>*>(ptr)->at(i); if (i == static_cast<QVector<QLine>*>(ptr)->size()-1) { static_cast<QVector<QLine>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QLine(tmpValue.p1(), tmpValue.p2()); });
}

void QPainter___drawLines_lines_setList6(void* ptr, void* i)
{
	static_cast<QVector<QLine>*>(ptr)->append(*static_cast<QLine*>(i));
}

void* QPainter___drawLines_lines_newList6(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QLine>();
}

void* QPainter___drawLines_pointPairs_atList8(void* ptr, int i)
{
	return ({ QPoint tmpValue = ({QPoint tmp = static_cast<QVector<QPoint>*>(ptr)->at(i); if (i == static_cast<QVector<QPoint>*>(ptr)->size()-1) { static_cast<QVector<QPoint>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void QPainter___drawLines_pointPairs_setList8(void* ptr, void* i)
{
	static_cast<QVector<QPoint>*>(ptr)->append(*static_cast<QPoint*>(i));
}

void* QPainter___drawLines_pointPairs_newList8(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPoint>();
}

void* QPainter___drawRects_rectangles_atList2(void* ptr, int i)
{
	return ({ QRectF tmpValue = ({QRectF tmp = static_cast<QVector<QRectF>*>(ptr)->at(i); if (i == static_cast<QVector<QRectF>*>(ptr)->size()-1) { static_cast<QVector<QRectF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QPainter___drawRects_rectangles_setList2(void* ptr, void* i)
{
	static_cast<QVector<QRectF>*>(ptr)->append(*static_cast<QRectF*>(i));
}

void* QPainter___drawRects_rectangles_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRectF>();
}

void* QPainter___drawRects_rectangles_atList4(void* ptr, int i)
{
	return ({ QRect tmpValue = ({QRect tmp = static_cast<QVector<QRect>*>(ptr)->at(i); if (i == static_cast<QVector<QRect>*>(ptr)->size()-1) { static_cast<QVector<QRect>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QPainter___drawRects_rectangles_setList4(void* ptr, void* i)
{
	static_cast<QVector<QRect>*>(ptr)->append(*static_cast<QRect*>(i));
}

void* QPainter___drawRects_rectangles_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRect>();
}

Q_DECLARE_METATYPE(QPainterPath)
Q_DECLARE_METATYPE(QPainterPath*)
void* QPainterPath_NewQPainterPath()
{
	return new QPainterPath();
}

void* QPainterPath_NewQPainterPath2(void* startPoint)
{
	return new QPainterPath(*static_cast<QPointF*>(startPoint));
}

void* QPainterPath_NewQPainterPath3(void* path)
{
	return new QPainterPath(*static_cast<QPainterPath*>(path));
}

void QPainterPath_AddEllipse(void* ptr, void* boundingRectangle)
{
	static_cast<QPainterPath*>(ptr)->addEllipse(*static_cast<QRectF*>(boundingRectangle));
}

void QPainterPath_AddEllipse2(void* ptr, double x, double y, double width, double height)
{
	static_cast<QPainterPath*>(ptr)->addEllipse(x, y, width, height);
}

void QPainterPath_AddEllipse3(void* ptr, void* center, double rx, double ry)
{
	static_cast<QPainterPath*>(ptr)->addEllipse(*static_cast<QPointF*>(center), rx, ry);
}

void QPainterPath_AddPath(void* ptr, void* path)
{
	static_cast<QPainterPath*>(ptr)->addPath(*static_cast<QPainterPath*>(path));
}

void QPainterPath_AddPolygon(void* ptr, void* polygon)
{
	static_cast<QPainterPath*>(ptr)->addPolygon(*static_cast<QPolygonF*>(polygon));
}

void QPainterPath_AddRect(void* ptr, void* rectangle)
{
	static_cast<QPainterPath*>(ptr)->addRect(*static_cast<QRectF*>(rectangle));
}

void QPainterPath_AddRect2(void* ptr, double x, double y, double width, double height)
{
	static_cast<QPainterPath*>(ptr)->addRect(x, y, width, height);
}

void QPainterPath_AddRegion(void* ptr, void* region)
{
	static_cast<QPainterPath*>(ptr)->addRegion(*static_cast<QRegion*>(region));
}

void QPainterPath_AddRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode)
{
	static_cast<QPainterPath*>(ptr)->addRoundedRect(*static_cast<QRectF*>(rect), xRadius, yRadius, static_cast<Qt::SizeMode>(mode));
}

void QPainterPath_AddRoundedRect2(void* ptr, double x, double y, double w, double h, double xRadius, double yRadius, long long mode)
{
	static_cast<QPainterPath*>(ptr)->addRoundedRect(x, y, w, h, xRadius, yRadius, static_cast<Qt::SizeMode>(mode));
}

void QPainterPath_AddText(void* ptr, void* point, void* font, struct QtGui_PackedString text)
{
	static_cast<QPainterPath*>(ptr)->addText(*static_cast<QPointF*>(point), *static_cast<QFont*>(font), QString::fromUtf8(text.data, text.len));
}

void QPainterPath_AddText2(void* ptr, double x, double y, void* font, struct QtGui_PackedString text)
{
	static_cast<QPainterPath*>(ptr)->addText(x, y, *static_cast<QFont*>(font), QString::fromUtf8(text.data, text.len));
}

double QPainterPath_AngleAtPercent(void* ptr, double t)
{
	return static_cast<QPainterPath*>(ptr)->angleAtPercent(t);
}

void QPainterPath_ArcMoveTo(void* ptr, void* rectangle, double angle)
{
	static_cast<QPainterPath*>(ptr)->arcMoveTo(*static_cast<QRectF*>(rectangle), angle);
}

void QPainterPath_ArcMoveTo2(void* ptr, double x, double y, double width, double height, double angle)
{
	static_cast<QPainterPath*>(ptr)->arcMoveTo(x, y, width, height, angle);
}

void QPainterPath_ArcTo(void* ptr, void* rectangle, double startAngle, double sweepLength)
{
	static_cast<QPainterPath*>(ptr)->arcTo(*static_cast<QRectF*>(rectangle), startAngle, sweepLength);
}

void QPainterPath_ArcTo2(void* ptr, double x, double y, double width, double height, double startAngle, double sweepLength)
{
	static_cast<QPainterPath*>(ptr)->arcTo(x, y, width, height, startAngle, sweepLength);
}

void* QPainterPath_BoundingRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPainterPath*>(ptr)->boundingRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

int QPainterPath_Capacity(void* ptr)
{
	return static_cast<QPainterPath*>(ptr)->capacity();
}

void QPainterPath_Clear(void* ptr)
{
	static_cast<QPainterPath*>(ptr)->clear();
}

void QPainterPath_CloseSubpath(void* ptr)
{
	static_cast<QPainterPath*>(ptr)->closeSubpath();
}

void QPainterPath_ConnectPath(void* ptr, void* path)
{
	static_cast<QPainterPath*>(ptr)->connectPath(*static_cast<QPainterPath*>(path));
}

char QPainterPath_Contains(void* ptr, void* point)
{
	return static_cast<QPainterPath*>(ptr)->contains(*static_cast<QPointF*>(point));
}

char QPainterPath_Contains2(void* ptr, void* rectangle)
{
	return static_cast<QPainterPath*>(ptr)->contains(*static_cast<QRectF*>(rectangle));
}

char QPainterPath_Contains3(void* ptr, void* p)
{
	return static_cast<QPainterPath*>(ptr)->contains(*static_cast<QPainterPath*>(p));
}

void* QPainterPath_ControlPointRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPainterPath*>(ptr)->controlPointRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QPainterPath_CubicTo(void* ptr, void* c1, void* c2, void* endPoint)
{
	static_cast<QPainterPath*>(ptr)->cubicTo(*static_cast<QPointF*>(c1), *static_cast<QPointF*>(c2), *static_cast<QPointF*>(endPoint));
}

void QPainterPath_CubicTo2(void* ptr, double c1X, double c1Y, double c2X, double c2Y, double endPointX, double endPointY)
{
	static_cast<QPainterPath*>(ptr)->cubicTo(c1X, c1Y, c2X, c2Y, endPointX, endPointY);
}

void* QPainterPath_CurrentPosition(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QPainterPath*>(ptr)->currentPosition(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

int QPainterPath_ElementCount(void* ptr)
{
	return static_cast<QPainterPath*>(ptr)->elementCount();
}

long long QPainterPath_FillRule(void* ptr)
{
	return static_cast<QPainterPath*>(ptr)->fillRule();
}

void* QPainterPath_Intersected(void* ptr, void* p)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->intersected(*static_cast<QPainterPath*>(p)));
}

char QPainterPath_Intersects(void* ptr, void* rectangle)
{
	return static_cast<QPainterPath*>(ptr)->intersects(*static_cast<QRectF*>(rectangle));
}

char QPainterPath_Intersects2(void* ptr, void* p)
{
	return static_cast<QPainterPath*>(ptr)->intersects(*static_cast<QPainterPath*>(p));
}

char QPainterPath_IsEmpty(void* ptr)
{
	return static_cast<QPainterPath*>(ptr)->isEmpty();
}

double QPainterPath_Length(void* ptr)
{
	return static_cast<QPainterPath*>(ptr)->length();
}

void QPainterPath_LineTo(void* ptr, void* endPoint)
{
	static_cast<QPainterPath*>(ptr)->lineTo(*static_cast<QPointF*>(endPoint));
}

void QPainterPath_LineTo2(void* ptr, double x, double y)
{
	static_cast<QPainterPath*>(ptr)->lineTo(x, y);
}

void QPainterPath_MoveTo(void* ptr, void* point)
{
	static_cast<QPainterPath*>(ptr)->moveTo(*static_cast<QPointF*>(point));
}

void QPainterPath_MoveTo2(void* ptr, double x, double y)
{
	static_cast<QPainterPath*>(ptr)->moveTo(x, y);
}

double QPainterPath_PercentAtLength(void* ptr, double l)
{
	return static_cast<QPainterPath*>(ptr)->percentAtLength(l);
}

void* QPainterPath_PointAtPercent(void* ptr, double t)
{
	return ({ QPointF tmpValue = static_cast<QPainterPath*>(ptr)->pointAtPercent(t); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QPainterPath_QuadTo(void* ptr, void* c, void* endPoint)
{
	static_cast<QPainterPath*>(ptr)->quadTo(*static_cast<QPointF*>(c), *static_cast<QPointF*>(endPoint));
}

void QPainterPath_QuadTo2(void* ptr, double cx, double cy, double endPointX, double endPointY)
{
	static_cast<QPainterPath*>(ptr)->quadTo(cx, cy, endPointX, endPointY);
}

void QPainterPath_Reserve(void* ptr, int size)
{
	static_cast<QPainterPath*>(ptr)->reserve(size);
}

void QPainterPath_SetElementPositionAt(void* ptr, int index, double x, double y)
{
	static_cast<QPainterPath*>(ptr)->setElementPositionAt(index, x, y);
}

void QPainterPath_SetFillRule(void* ptr, long long fillRule)
{
	static_cast<QPainterPath*>(ptr)->setFillRule(static_cast<Qt::FillRule>(fillRule));
}

void* QPainterPath_Simplified(void* ptr)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->simplified());
}

double QPainterPath_SlopeAtPercent(void* ptr, double t)
{
	return static_cast<QPainterPath*>(ptr)->slopeAtPercent(t);
}

void* QPainterPath_Subtracted(void* ptr, void* p)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->subtracted(*static_cast<QPainterPath*>(p)));
}

void QPainterPath_Swap(void* ptr, void* other)
{
	static_cast<QPainterPath*>(ptr)->swap(*static_cast<QPainterPath*>(other));
}

void* QPainterPath_ToFillPolygon(void* ptr, void* matrix)
{
	return new QPolygonF(static_cast<QPainterPath*>(ptr)->toFillPolygon(*static_cast<QTransform*>(matrix)));
}

struct QtGui_PackedList QPainterPath_ToFillPolygons(void* ptr, void* matrix)
{
	return ({ QList<QPolygonF>* tmpValueba9cbe = new QList<QPolygonF>(static_cast<QPainterPath*>(ptr)->toFillPolygons(*static_cast<QTransform*>(matrix))); QtGui_PackedList { tmpValueba9cbe, tmpValueba9cbe->size() }; });
}

void* QPainterPath_ToReversed(void* ptr)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->toReversed());
}

struct QtGui_PackedList QPainterPath_ToSubpathPolygons(void* ptr, void* matrix)
{
	return ({ QList<QPolygonF>* tmpValue6b8e75 = new QList<QPolygonF>(static_cast<QPainterPath*>(ptr)->toSubpathPolygons(*static_cast<QTransform*>(matrix))); QtGui_PackedList { tmpValue6b8e75, tmpValue6b8e75->size() }; });
}

void QPainterPath_Translate(void* ptr, double dx, double dy)
{
	static_cast<QPainterPath*>(ptr)->translate(dx, dy);
}

void QPainterPath_Translate2(void* ptr, void* offset)
{
	static_cast<QPainterPath*>(ptr)->translate(*static_cast<QPointF*>(offset));
}

void* QPainterPath_Translated(void* ptr, double dx, double dy)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->translated(dx, dy));
}

void* QPainterPath_Translated2(void* ptr, void* offset)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->translated(*static_cast<QPointF*>(offset)));
}

void* QPainterPath_United(void* ptr, void* p)
{
	return new QPainterPath(static_cast<QPainterPath*>(ptr)->united(*static_cast<QPainterPath*>(p)));
}

void QPainterPath_DestroyQPainterPath(void* ptr)
{
	static_cast<QPainterPath*>(ptr)->~QPainterPath();
}

void* QPainterPath___toFillPolygons_atList(void* ptr, int i)
{
	return new QPolygonF(({QPolygonF tmp = static_cast<QList<QPolygonF>*>(ptr)->at(i); if (i == static_cast<QList<QPolygonF>*>(ptr)->size()-1) { static_cast<QList<QPolygonF>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPainterPath___toFillPolygons_setList(void* ptr, void* i)
{
	static_cast<QList<QPolygonF>*>(ptr)->append(*static_cast<QPolygonF*>(i));
}

void* QPainterPath___toFillPolygons_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPolygonF>();
}

void* QPainterPath___toFillPolygons_atList2(void* ptr, int i)
{
	return new QPolygonF(({QPolygonF tmp = static_cast<QList<QPolygonF>*>(ptr)->at(i); if (i == static_cast<QList<QPolygonF>*>(ptr)->size()-1) { static_cast<QList<QPolygonF>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPainterPath___toFillPolygons_setList2(void* ptr, void* i)
{
	static_cast<QList<QPolygonF>*>(ptr)->append(*static_cast<QPolygonF*>(i));
}

void* QPainterPath___toFillPolygons_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPolygonF>();
}

void* QPainterPath___toSubpathPolygons_atList(void* ptr, int i)
{
	return new QPolygonF(({QPolygonF tmp = static_cast<QList<QPolygonF>*>(ptr)->at(i); if (i == static_cast<QList<QPolygonF>*>(ptr)->size()-1) { static_cast<QList<QPolygonF>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPainterPath___toSubpathPolygons_setList(void* ptr, void* i)
{
	static_cast<QList<QPolygonF>*>(ptr)->append(*static_cast<QPolygonF*>(i));
}

void* QPainterPath___toSubpathPolygons_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPolygonF>();
}

void* QPainterPath___toSubpathPolygons_atList2(void* ptr, int i)
{
	return new QPolygonF(({QPolygonF tmp = static_cast<QList<QPolygonF>*>(ptr)->at(i); if (i == static_cast<QList<QPolygonF>*>(ptr)->size()-1) { static_cast<QList<QPolygonF>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPainterPath___toSubpathPolygons_setList2(void* ptr, void* i)
{
	static_cast<QList<QPolygonF>*>(ptr)->append(*static_cast<QPolygonF*>(i));
}

void* QPainterPath___toSubpathPolygons_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPolygonF>();
}

Q_DECLARE_METATYPE(QPainterPathStroker*)
void* QPainterPathStroker_NewQPainterPathStroker()
{
	return new QPainterPathStroker();
}

void* QPainterPathStroker_NewQPainterPathStroker2(void* pen)
{
	return new QPainterPathStroker(*static_cast<QPen*>(pen));
}

long long QPainterPathStroker_CapStyle(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->capStyle();
}

void* QPainterPathStroker_CreateStroke(void* ptr, void* path)
{
	return new QPainterPath(static_cast<QPainterPathStroker*>(ptr)->createStroke(*static_cast<QPainterPath*>(path)));
}

double QPainterPathStroker_CurveThreshold(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->curveThreshold();
}

double QPainterPathStroker_DashOffset(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->dashOffset();
}

struct QtGui_PackedList QPainterPathStroker_DashPattern(void* ptr)
{
	return ({ QVector<qreal>* tmpValueffbacb = new QVector<qreal>(static_cast<QPainterPathStroker*>(ptr)->dashPattern()); QtGui_PackedList { tmpValueffbacb, tmpValueffbacb->size() }; });
}

long long QPainterPathStroker_JoinStyle(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->joinStyle();
}

double QPainterPathStroker_MiterLimit(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->miterLimit();
}

void QPainterPathStroker_SetCapStyle(void* ptr, long long style)
{
	static_cast<QPainterPathStroker*>(ptr)->setCapStyle(static_cast<Qt::PenCapStyle>(style));
}

void QPainterPathStroker_SetCurveThreshold(void* ptr, double threshold)
{
	static_cast<QPainterPathStroker*>(ptr)->setCurveThreshold(threshold);
}

void QPainterPathStroker_SetDashOffset(void* ptr, double offset)
{
	static_cast<QPainterPathStroker*>(ptr)->setDashOffset(offset);
}

void QPainterPathStroker_SetDashPattern(void* ptr, long long style)
{
	static_cast<QPainterPathStroker*>(ptr)->setDashPattern(static_cast<Qt::PenStyle>(style));
}

void QPainterPathStroker_SetDashPattern2(void* ptr, void* dashPattern)
{
	static_cast<QPainterPathStroker*>(ptr)->setDashPattern(*static_cast<QVector<qreal>*>(dashPattern));
}

void QPainterPathStroker_SetJoinStyle(void* ptr, long long style)
{
	static_cast<QPainterPathStroker*>(ptr)->setJoinStyle(static_cast<Qt::PenJoinStyle>(style));
}

void QPainterPathStroker_SetMiterLimit(void* ptr, double limit)
{
	static_cast<QPainterPathStroker*>(ptr)->setMiterLimit(limit);
}

void QPainterPathStroker_SetWidth(void* ptr, double width)
{
	static_cast<QPainterPathStroker*>(ptr)->setWidth(width);
}

double QPainterPathStroker_Width(void* ptr)
{
	return static_cast<QPainterPathStroker*>(ptr)->width();
}

void QPainterPathStroker_DestroyQPainterPathStroker(void* ptr)
{
	static_cast<QPainterPathStroker*>(ptr)->~QPainterPathStroker();
}

double QPainterPathStroker___dashPattern_atList(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QVector<qreal>*>(ptr)->at(i); if (i == static_cast<QVector<qreal>*>(ptr)->size()-1) { static_cast<QVector<qreal>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QPainterPathStroker___dashPattern_setList(void* ptr, double i)
{
	static_cast<QVector<qreal>*>(ptr)->append(i);
}

void* QPainterPathStroker___dashPattern_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<qreal>();
}

double QPainterPathStroker___setDashPattern_dashPattern_atList2(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QVector<qreal>*>(ptr)->at(i); if (i == static_cast<QVector<qreal>*>(ptr)->size()-1) { static_cast<QVector<qreal>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QPainterPathStroker___setDashPattern_dashPattern_setList2(void* ptr, double i)
{
	static_cast<QVector<qreal>*>(ptr)->append(i);
}

void* QPainterPathStroker___setDashPattern_dashPattern_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<qreal>();
}

Q_DECLARE_METATYPE(QPalette)
Q_DECLARE_METATYPE(QPalette*)
int QPalette_NColorRoles_Type()
{
	return QPalette::NColorRoles;
}

void* QPalette_NewQPalette()
{
	return new QPalette();
}

void* QPalette_NewQPalette2(void* button)
{
	return new QPalette(*static_cast<QColor*>(button));
}

void* QPalette_NewQPalette3(long long button)
{
	return new QPalette(static_cast<Qt::GlobalColor>(button));
}

void* QPalette_NewQPalette4(void* button, void* window)
{
	return new QPalette(*static_cast<QColor*>(button), *static_cast<QColor*>(window));
}

void* QPalette_NewQPalette5(void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window)
{
	return new QPalette(*static_cast<QBrush*>(windowText), *static_cast<QBrush*>(button), *static_cast<QBrush*>(light), *static_cast<QBrush*>(dark), *static_cast<QBrush*>(mid), *static_cast<QBrush*>(text), *static_cast<QBrush*>(bright_text), *static_cast<QBrush*>(base), *static_cast<QBrush*>(window));
}

void* QPalette_NewQPalette7(void* p)
{
	return new QPalette(*static_cast<QPalette*>(p));
}

void* QPalette_NewQPalette8(void* other)
{
	return new QPalette(*static_cast<QPalette*>(other));
}

void* QPalette_AlternateBase(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->alternateBase());
}

void* QPalette_Base(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->base());
}

void* QPalette_BrightText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->brightText());
}

void* QPalette_Brush(void* ptr, long long group, long long role)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->brush(static_cast<QPalette::ColorGroup>(group), static_cast<QPalette::ColorRole>(role)));
}

void* QPalette_Brush2(void* ptr, long long role)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->brush(static_cast<QPalette::ColorRole>(role)));
}

void* QPalette_Button(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->button());
}

void* QPalette_ButtonText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->buttonText());
}

long long QPalette_CacheKey(void* ptr)
{
	return static_cast<QPalette*>(ptr)->cacheKey();
}

void* QPalette_Color(void* ptr, long long group, long long role)
{
	return const_cast<QColor*>(&static_cast<QPalette*>(ptr)->color(static_cast<QPalette::ColorGroup>(group), static_cast<QPalette::ColorRole>(role)));
}

void* QPalette_Color2(void* ptr, long long role)
{
	return const_cast<QColor*>(&static_cast<QPalette*>(ptr)->color(static_cast<QPalette::ColorRole>(role)));
}

long long QPalette_CurrentColorGroup(void* ptr)
{
	return static_cast<QPalette*>(ptr)->currentColorGroup();
}

void* QPalette_Dark(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->dark());
}

void* QPalette_Highlight(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->highlight());
}

void* QPalette_HighlightedText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->highlightedText());
}

char QPalette_IsBrushSet(void* ptr, long long cg, long long cr)
{
	return static_cast<QPalette*>(ptr)->isBrushSet(static_cast<QPalette::ColorGroup>(cg), static_cast<QPalette::ColorRole>(cr));
}

char QPalette_IsCopyOf(void* ptr, void* p)
{
	return static_cast<QPalette*>(ptr)->isCopyOf(*static_cast<QPalette*>(p));
}

char QPalette_IsEqual(void* ptr, long long cg1, long long cg2)
{
	return static_cast<QPalette*>(ptr)->isEqual(static_cast<QPalette::ColorGroup>(cg1), static_cast<QPalette::ColorGroup>(cg2));
}

void* QPalette_Light(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->light());
}

void* QPalette_Link(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->link());
}

void* QPalette_LinkVisited(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->linkVisited());
}

void* QPalette_Mid(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->mid());
}

void* QPalette_Midlight(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->midlight());
}

void* QPalette_PlaceholderText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->placeholderText());
}

void* QPalette_Resolve(void* ptr, void* other)
{
	return new QPalette(static_cast<QPalette*>(ptr)->resolve(*static_cast<QPalette*>(other)));
}

void QPalette_SetBrush(void* ptr, long long role, void* brush)
{
	static_cast<QPalette*>(ptr)->setBrush(static_cast<QPalette::ColorRole>(role), *static_cast<QBrush*>(brush));
}

void QPalette_SetBrush2(void* ptr, long long group, long long role, void* brush)
{
	static_cast<QPalette*>(ptr)->setBrush(static_cast<QPalette::ColorGroup>(group), static_cast<QPalette::ColorRole>(role), *static_cast<QBrush*>(brush));
}

void QPalette_SetColor(void* ptr, long long group, long long role, void* color)
{
	static_cast<QPalette*>(ptr)->setColor(static_cast<QPalette::ColorGroup>(group), static_cast<QPalette::ColorRole>(role), *static_cast<QColor*>(color));
}

void QPalette_SetColor2(void* ptr, long long role, void* color)
{
	static_cast<QPalette*>(ptr)->setColor(static_cast<QPalette::ColorRole>(role), *static_cast<QColor*>(color));
}

void QPalette_SetColorGroup(void* ptr, long long cg, void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window)
{
	static_cast<QPalette*>(ptr)->setColorGroup(static_cast<QPalette::ColorGroup>(cg), *static_cast<QBrush*>(windowText), *static_cast<QBrush*>(button), *static_cast<QBrush*>(light), *static_cast<QBrush*>(dark), *static_cast<QBrush*>(mid), *static_cast<QBrush*>(text), *static_cast<QBrush*>(bright_text), *static_cast<QBrush*>(base), *static_cast<QBrush*>(window));
}

void QPalette_SetCurrentColorGroup(void* ptr, long long cg)
{
	static_cast<QPalette*>(ptr)->setCurrentColorGroup(static_cast<QPalette::ColorGroup>(cg));
}

void* QPalette_Shadow(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->shadow());
}

void QPalette_Swap(void* ptr, void* other)
{
	static_cast<QPalette*>(ptr)->swap(*static_cast<QPalette*>(other));
}

void* QPalette_Text(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->text());
}

void* QPalette_ToolTipBase(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->toolTipBase());
}

void* QPalette_ToolTipText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->toolTipText());
}

void* QPalette_Window(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->window());
}

void* QPalette_WindowText(void* ptr)
{
	return const_cast<QBrush*>(&static_cast<QPalette*>(ptr)->windowText());
}

void QPalette_DestroyQPalette(void* ptr)
{
	static_cast<QPalette*>(ptr)->~QPalette();
}

class MyQPdfWriter: public QPdfWriter
{
public:
	MyQPdfWriter(const QString &filename) : QPdfWriter(filename) {QPdfWriter_QPdfWriter_QRegisterMetaType();};
	MyQPdfWriter(QIODevice *device) : QPdfWriter(device) {QPdfWriter_QPdfWriter_QRegisterMetaType();};
	bool newPage() { return callbackQPdfWriter_NewPage(this) != 0; };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPdfWriter_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQPdfWriter() { callbackQPdfWriter_DestroyQPdfWriter(this); };
	void childEvent(QChildEvent * event) { callbackQPdfWriter_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQPdfWriter_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQPdfWriter_CustomEvent(this, event); };
	void deleteLater() { callbackQPdfWriter_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQPdfWriter_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQPdfWriter_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQPdfWriter_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQPdfWriter_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQPdfWriter_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQPdfWriter_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQPdfWriter_TimerEvent(this, event); };
	void setPageSize(QPagedPaintDevice::PageSize size) { callbackQPagedPaintDevice_SetPageSize2(this, size); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
};

Q_DECLARE_METATYPE(QPdfWriter*)
Q_DECLARE_METATYPE(MyQPdfWriter*)

int QPdfWriter_QPdfWriter_QRegisterMetaType(){qRegisterMetaType<QPdfWriter*>(); return qRegisterMetaType<MyQPdfWriter*>();}

void* QPdfWriter_NewQPdfWriter(struct QtGui_PackedString filename)
{
	return new MyQPdfWriter(QString::fromUtf8(filename.data, filename.len));
}

void* QPdfWriter_NewQPdfWriter2(void* device)
{
	return new MyQPdfWriter(static_cast<QIODevice*>(device));
}

void QPdfWriter_AddFileAttachment(void* ptr, struct QtGui_PackedString fileName, void* data, struct QtGui_PackedString mimeType)
{
		static_cast<QPdfWriter*>(ptr)->addFileAttachment(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(data), QString::fromUtf8(mimeType.data, mimeType.len));
}

struct QtGui_PackedString QPdfWriter_Creator(void* ptr)
{
		return ({ QByteArray* te95fa2 = new QByteArray(static_cast<QPdfWriter*>(ptr)->creator().toUtf8()); QtGui_PackedString { const_cast<char*>(te95fa2->prepend("WHITESPACE").constData()+10), te95fa2->size()-10, te95fa2 }; });
}

void* QPdfWriter_DocumentXmpMetadata(void* ptr)
{
		return new QByteArray(static_cast<QPdfWriter*>(ptr)->documentXmpMetadata());
}

char QPdfWriter_NewPage(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->newPage();
}

char QPdfWriter_NewPageDefault(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::newPage();
}

void* QPdfWriter_PaintEngine(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->paintEngine();
}

void* QPdfWriter_PaintEngineDefault(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::paintEngine();
}

long long QPdfWriter_PdfVersion(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->pdfVersion();
}

int QPdfWriter_Resolution(void* ptr)
{
		return static_cast<QPdfWriter*>(ptr)->resolution();
}

void QPdfWriter_SetCreator(void* ptr, struct QtGui_PackedString creator)
{
		static_cast<QPdfWriter*>(ptr)->setCreator(QString::fromUtf8(creator.data, creator.len));
}

void QPdfWriter_SetDocumentXmpMetadata(void* ptr, void* xmpMetadata)
{
		static_cast<QPdfWriter*>(ptr)->setDocumentXmpMetadata(*static_cast<QByteArray*>(xmpMetadata));
}

void QPdfWriter_SetPdfVersion(void* ptr, long long version)
{
		static_cast<QPdfWriter*>(ptr)->setPdfVersion(static_cast<QPagedPaintDevice::PdfVersion>(version));
}

void QPdfWriter_SetResolution(void* ptr, int resolution)
{
		static_cast<QPdfWriter*>(ptr)->setResolution(resolution);
}

void QPdfWriter_SetTitle(void* ptr, struct QtGui_PackedString title)
{
		static_cast<QPdfWriter*>(ptr)->setTitle(QString::fromUtf8(title.data, title.len));
}

struct QtGui_PackedString QPdfWriter_Title(void* ptr)
{
		return ({ QByteArray* t5cd62a = new QByteArray(static_cast<QPdfWriter*>(ptr)->title().toUtf8()); QtGui_PackedString { const_cast<char*>(t5cd62a->prepend("WHITESPACE").constData()+10), t5cd62a->size()-10, t5cd62a }; });
}

void QPdfWriter_DestroyQPdfWriter(void* ptr)
{
	static_cast<QPdfWriter*>(ptr)->~QPdfWriter();
}

void QPdfWriter_DestroyQPdfWriterDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPdfWriter___children_atList(void* ptr, int i)
{
		return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPdfWriter___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPdfWriter___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject *>();
}

void* QPdfWriter___dynamicPropertyNames_atList(void* ptr, int i)
{
		return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPdfWriter___dynamicPropertyNames_setList(void* ptr, void* i)
{
		static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPdfWriter___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QByteArray>();
}

void* QPdfWriter___findChildren_atList(void* ptr, int i)
{
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPdfWriter___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPdfWriter___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject*>();
}

void* QPdfWriter___findChildren_atList3(void* ptr, int i)
{
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPdfWriter___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPdfWriter___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
		return new QList<QObject*>();
}

void QPdfWriter_ChildEvent(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
}

void QPdfWriter_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::childEvent(static_cast<QChildEvent*>(event));
}

void QPdfWriter_ConnectNotify(void* ptr, void* sign)
{
		static_cast<QPdfWriter*>(ptr)->connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QPdfWriter_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QPdfWriter_CustomEvent(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->customEvent(static_cast<QEvent*>(event));
}

void QPdfWriter_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::customEvent(static_cast<QEvent*>(event));
}

void QPdfWriter_DeleteLater(void* ptr)
{
		QMetaObject::invokeMethod(static_cast<QPdfWriter*>(ptr), "deleteLater");
}

void QPdfWriter_DeleteLaterDefault(void* ptr)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::deleteLater();
}

void QPdfWriter_DisconnectNotify(void* ptr, void* sign)
{
		static_cast<QPdfWriter*>(ptr)->disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

void QPdfWriter_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QPdfWriter_Event(void* ptr, void* e)
{
		return static_cast<QPdfWriter*>(ptr)->event(static_cast<QEvent*>(e));
}

char QPdfWriter_EventDefault(void* ptr, void* e)
{
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::event(static_cast<QEvent*>(e));
}

char QPdfWriter_EventFilter(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QPdfWriter*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

char QPdfWriter_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QPdfWriter*>(ptr)->QPdfWriter::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QPdfWriter_MetaObject(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QPdfWriter*>(ptr)->metaObject());
}

void* QPdfWriter_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QPdfWriter*>(ptr)->QPdfWriter::metaObject());
}

void QPdfWriter_TimerEvent(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
}

void QPdfWriter_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QPdfWriter*>(ptr)->QPdfWriter::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QPen)
Q_DECLARE_METATYPE(QPen*)
void* QPen_NewQPen()
{
	return new QPen();
}

void* QPen_NewQPen2(long long style)
{
	return new QPen(static_cast<Qt::PenStyle>(style));
}

void* QPen_NewQPen3(void* color)
{
	return new QPen(*static_cast<QColor*>(color));
}

void* QPen_NewQPen4(void* brush, double width, long long style, long long cap, long long join)
{
	return new QPen(*static_cast<QBrush*>(brush), width, static_cast<Qt::PenStyle>(style), static_cast<Qt::PenCapStyle>(cap), static_cast<Qt::PenJoinStyle>(join));
}

void* QPen_NewQPen5(void* pen)
{
	return new QPen(*static_cast<QPen*>(pen));
}

void* QPen_NewQPen6(void* pen)
{
	return new QPen(*static_cast<QPen*>(pen));
}

void* QPen_Brush(void* ptr)
{
	return new QBrush(static_cast<QPen*>(ptr)->brush());
}

long long QPen_CapStyle(void* ptr)
{
	return static_cast<QPen*>(ptr)->capStyle();
}

void* QPen_Color(void* ptr)
{
	return new QColor(static_cast<QPen*>(ptr)->color());
}

double QPen_DashOffset(void* ptr)
{
	return static_cast<QPen*>(ptr)->dashOffset();
}

struct QtGui_PackedList QPen_DashPattern(void* ptr)
{
	return ({ QVector<qreal>* tmpValuec446ec = new QVector<qreal>(static_cast<QPen*>(ptr)->dashPattern()); QtGui_PackedList { tmpValuec446ec, tmpValuec446ec->size() }; });
}

char QPen_IsCosmetic(void* ptr)
{
	return static_cast<QPen*>(ptr)->isCosmetic();
}

char QPen_IsSolid(void* ptr)
{
	return static_cast<QPen*>(ptr)->isSolid();
}

long long QPen_JoinStyle(void* ptr)
{
	return static_cast<QPen*>(ptr)->joinStyle();
}

double QPen_MiterLimit(void* ptr)
{
	return static_cast<QPen*>(ptr)->miterLimit();
}

void QPen_SetBrush(void* ptr, void* brush)
{
	static_cast<QPen*>(ptr)->setBrush(*static_cast<QBrush*>(brush));
}

void QPen_SetCapStyle(void* ptr, long long style)
{
	static_cast<QPen*>(ptr)->setCapStyle(static_cast<Qt::PenCapStyle>(style));
}

void QPen_SetColor(void* ptr, void* color)
{
	static_cast<QPen*>(ptr)->setColor(*static_cast<QColor*>(color));
}

void QPen_SetCosmetic(void* ptr, char cosmetic)
{
	static_cast<QPen*>(ptr)->setCosmetic(cosmetic != 0);
}

void QPen_SetDashOffset(void* ptr, double offset)
{
	static_cast<QPen*>(ptr)->setDashOffset(offset);
}

void QPen_SetDashPattern(void* ptr, void* pattern)
{
	static_cast<QPen*>(ptr)->setDashPattern(*static_cast<QVector<qreal>*>(pattern));
}

void QPen_SetJoinStyle(void* ptr, long long style)
{
	static_cast<QPen*>(ptr)->setJoinStyle(static_cast<Qt::PenJoinStyle>(style));
}

void QPen_SetMiterLimit(void* ptr, double limit)
{
	static_cast<QPen*>(ptr)->setMiterLimit(limit);
}

void QPen_SetStyle(void* ptr, long long style)
{
	static_cast<QPen*>(ptr)->setStyle(static_cast<Qt::PenStyle>(style));
}

void QPen_SetWidth(void* ptr, int width)
{
	static_cast<QPen*>(ptr)->setWidth(width);
}

void QPen_SetWidthF(void* ptr, double width)
{
	static_cast<QPen*>(ptr)->setWidthF(width);
}

long long QPen_Style(void* ptr)
{
	return static_cast<QPen*>(ptr)->style();
}

void QPen_Swap(void* ptr, void* other)
{
	static_cast<QPen*>(ptr)->swap(*static_cast<QPen*>(other));
}

int QPen_Width(void* ptr)
{
	return static_cast<QPen*>(ptr)->width();
}

double QPen_WidthF(void* ptr)
{
	return static_cast<QPen*>(ptr)->widthF();
}

void QPen_DestroyQPen(void* ptr)
{
	static_cast<QPen*>(ptr)->~QPen();
}

double QPen___dashPattern_atList(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QVector<qreal>*>(ptr)->at(i); if (i == static_cast<QVector<qreal>*>(ptr)->size()-1) { static_cast<QVector<qreal>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QPen___dashPattern_setList(void* ptr, double i)
{
	static_cast<QVector<qreal>*>(ptr)->append(i);
}

void* QPen___dashPattern_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<qreal>();
}

double QPen___setDashPattern_pattern_atList(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QVector<qreal>*>(ptr)->at(i); if (i == static_cast<QVector<qreal>*>(ptr)->size()-1) { static_cast<QVector<qreal>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QPen___setDashPattern_pattern_setList(void* ptr, double i)
{
	static_cast<QVector<qreal>*>(ptr)->append(i);
}

void* QPen___setDashPattern_pattern_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<qreal>();
}

class MyQPicture: public QPicture
{
public:
	MyQPicture(int formatVersion = -1) : QPicture(formatVersion) {QPicture_QPicture_QRegisterMetaType();};
	MyQPicture(const QPicture &pic) : QPicture(pic) {QPicture_QPicture_QRegisterMetaType();};
	void setData(const char * data, uint size) { QtGui_PackedString dataPacked = { const_cast<char*>(data), size, NULL };callbackQPicture_SetData(this, dataPacked, size); };
	 ~MyQPicture() { callbackQPicture_DestroyQPicture(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPicture_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QPicture*)
Q_DECLARE_METATYPE(MyQPicture*)

int QPicture_QPicture_QRegisterMetaType(){qRegisterMetaType<QPicture*>(); return qRegisterMetaType<MyQPicture*>();}

void* QPicture_NewQPicture(int formatVersion)
{
	return new MyQPicture(formatVersion);
}

void* QPicture_NewQPicture2(void* pic)
{
	return new MyQPicture(*static_cast<QPicture*>(pic));
}

void* QPicture_BoundingRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPicture*>(ptr)->boundingRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

struct QtGui_PackedString QPicture_Data(void* ptr)
{
	return QtGui_PackedString { const_cast<char*>(static_cast<QPicture*>(ptr)->data()), static_cast<QPicture*>(ptr)->size(), NULL };
}

char QPicture_IsNull(void* ptr)
{
	return static_cast<QPicture*>(ptr)->isNull();
}

char QPicture_Load(void* ptr, struct QtGui_PackedString fileName, char* format)
{
	return static_cast<QPicture*>(ptr)->load(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

char QPicture_Load2(void* ptr, void* dev, char* format)
{
	return static_cast<QPicture*>(ptr)->load(static_cast<QIODevice*>(dev), const_cast<const char*>(format));
}

char QPicture_Play(void* ptr, void* painter)
{
	return static_cast<QPicture*>(ptr)->play(static_cast<QPainter*>(painter));
}

char QPicture_Save(void* ptr, struct QtGui_PackedString fileName, char* format)
{
	return static_cast<QPicture*>(ptr)->save(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

char QPicture_Save2(void* ptr, void* dev, char* format)
{
	return static_cast<QPicture*>(ptr)->save(static_cast<QIODevice*>(dev), const_cast<const char*>(format));
}

void QPicture_SetBoundingRect(void* ptr, void* r)
{
	static_cast<QPicture*>(ptr)->setBoundingRect(*static_cast<QRect*>(r));
}

void QPicture_SetData(void* ptr, char* data, unsigned int size)
{
	static_cast<QPicture*>(ptr)->setData(const_cast<const char*>(data), size);
}

void QPicture_SetDataDefault(void* ptr, char* data, unsigned int size)
{
		static_cast<QPicture*>(ptr)->QPicture::setData(const_cast<const char*>(data), size);
}

unsigned int QPicture_Size(void* ptr)
{
	return static_cast<QPicture*>(ptr)->size();
}

void QPicture_Swap(void* ptr, void* other)
{
	static_cast<QPicture*>(ptr)->swap(*static_cast<QPicture*>(other));
}

void QPicture_DestroyQPicture(void* ptr)
{
	static_cast<QPicture*>(ptr)->~QPicture();
}

void QPicture_DestroyQPictureDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPicture___inputFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPicture___inputFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPicture___inputFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QPicture___outputFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPicture___outputFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPicture___outputFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QPicture_PaintEngine(void* ptr)
{
	return static_cast<QPicture*>(ptr)->paintEngine();
}

void* QPicture_PaintEngineDefault(void* ptr)
{
		return static_cast<QPicture*>(ptr)->QPicture::paintEngine();
}

class MyQPictureFormatPlugin: public QPictureFormatPlugin
{
public:
	MyQPictureFormatPlugin(QObject *parent = Q_NULLPTR) : QPictureFormatPlugin(parent) {QPictureFormatPlugin_QPictureFormatPlugin_QRegisterMetaType();};
	bool installIOHandler(const QString & format) { QByteArray* t785987 = new QByteArray(format.toUtf8()); QtGui_PackedString formatPacked = { const_cast<char*>(t785987->prepend("WHITESPACE").constData()+10), t785987->size()-10, t785987 };return callbackQPictureFormatPlugin_InstallIOHandler(this, formatPacked) != 0; };
	bool loadPicture(const QString & format, const QString & fileName, QPicture * picture) { QByteArray* t785987 = new QByteArray(format.toUtf8()); QtGui_PackedString formatPacked = { const_cast<char*>(t785987->prepend("WHITESPACE").constData()+10), t785987->size()-10, t785987 };QByteArray* td83e09 = new QByteArray(fileName.toUtf8()); QtGui_PackedString fileNamePacked = { const_cast<char*>(td83e09->prepend("WHITESPACE").constData()+10), td83e09->size()-10, td83e09 };return callbackQPictureFormatPlugin_LoadPicture(this, formatPacked, fileNamePacked, picture) != 0; };
	bool savePicture(const QString & format, const QString & fileName, const QPicture & picture) { QByteArray* t785987 = new QByteArray(format.toUtf8()); QtGui_PackedString formatPacked = { const_cast<char*>(t785987->prepend("WHITESPACE").constData()+10), t785987->size()-10, t785987 };QByteArray* td83e09 = new QByteArray(fileName.toUtf8()); QtGui_PackedString fileNamePacked = { const_cast<char*>(td83e09->prepend("WHITESPACE").constData()+10), td83e09->size()-10, td83e09 };return callbackQPictureFormatPlugin_SavePicture(this, formatPacked, fileNamePacked, const_cast<QPicture*>(&picture)) != 0; };
	 ~MyQPictureFormatPlugin() { callbackQPictureFormatPlugin_DestroyQPictureFormatPlugin(this); };
	void childEvent(QChildEvent * event) { callbackQPictureFormatPlugin_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQPictureFormatPlugin_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQPictureFormatPlugin_CustomEvent(this, event); };
	void deleteLater() { callbackQPictureFormatPlugin_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQPictureFormatPlugin_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQPictureFormatPlugin_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQPictureFormatPlugin_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQPictureFormatPlugin_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQPictureFormatPlugin_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQPictureFormatPlugin_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQPictureFormatPlugin_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QPictureFormatPlugin*)
Q_DECLARE_METATYPE(MyQPictureFormatPlugin*)

int QPictureFormatPlugin_QPictureFormatPlugin_QRegisterMetaType(){qRegisterMetaType<QPictureFormatPlugin*>(); return qRegisterMetaType<MyQPictureFormatPlugin*>();}

void* QPictureFormatPlugin_NewQPictureFormatPlugin(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQPictureFormatPlugin(static_cast<QWindow*>(parent));
	} else {
		return new MyQPictureFormatPlugin(static_cast<QObject*>(parent));
	}
}

char QPictureFormatPlugin_InstallIOHandler(void* ptr, struct QtGui_PackedString format)
{
	return static_cast<QPictureFormatPlugin*>(ptr)->installIOHandler(QString::fromUtf8(format.data, format.len));
}

char QPictureFormatPlugin_LoadPicture(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture)
{
	return static_cast<QPictureFormatPlugin*>(ptr)->loadPicture(QString::fromUtf8(format.data, format.len), QString::fromUtf8(fileName.data, fileName.len), static_cast<QPicture*>(picture));
}

char QPictureFormatPlugin_LoadPictureDefault(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture)
{
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::loadPicture(QString::fromUtf8(format.data, format.len), QString::fromUtf8(fileName.data, fileName.len), static_cast<QPicture*>(picture));
}

char QPictureFormatPlugin_SavePicture(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture)
{
	return static_cast<QPictureFormatPlugin*>(ptr)->savePicture(QString::fromUtf8(format.data, format.len), QString::fromUtf8(fileName.data, fileName.len), *static_cast<QPicture*>(picture));
}

char QPictureFormatPlugin_SavePictureDefault(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture)
{
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::savePicture(QString::fromUtf8(format.data, format.len), QString::fromUtf8(fileName.data, fileName.len), *static_cast<QPicture*>(picture));
}

void QPictureFormatPlugin_DestroyQPictureFormatPlugin(void* ptr)
{
	static_cast<QPictureFormatPlugin*>(ptr)->~QPictureFormatPlugin();
}

void QPictureFormatPlugin_DestroyQPictureFormatPluginDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPictureFormatPlugin___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPictureFormatPlugin___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPictureFormatPlugin___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QPictureFormatPlugin___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPictureFormatPlugin___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPictureFormatPlugin___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QPictureFormatPlugin___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPictureFormatPlugin___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPictureFormatPlugin___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPictureFormatPlugin___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPictureFormatPlugin___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPictureFormatPlugin___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QPictureFormatPlugin_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::childEvent(static_cast<QChildEvent*>(event));
}

void QPictureFormatPlugin_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QPictureFormatPlugin_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::customEvent(static_cast<QEvent*>(event));
}

void QPictureFormatPlugin_DeleteLaterDefault(void* ptr)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::deleteLater();
}

void QPictureFormatPlugin_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QPictureFormatPlugin_EventDefault(void* ptr, void* e)
{
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::event(static_cast<QEvent*>(e));
}

char QPictureFormatPlugin_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QPictureFormatPlugin_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::metaObject());
}

void QPictureFormatPlugin_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QPictureFormatPlugin*>(ptr)->QPictureFormatPlugin::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QPictureIO*)
void* QPictureIO_NewQPictureIO()
{
	return new QPictureIO();
}

void* QPictureIO_NewQPictureIO2(void* ioDevice, char* format)
{
	return new QPictureIO(static_cast<QIODevice*>(ioDevice), const_cast<const char*>(format));
}

void* QPictureIO_NewQPictureIO3(struct QtGui_PackedString fileName, char* format)
{
	return new QPictureIO(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format));
}

struct QtGui_PackedString QPictureIO_Description(void* ptr)
{
	return ({ QByteArray* te4ace0 = new QByteArray(static_cast<QPictureIO*>(ptr)->description().toUtf8()); QtGui_PackedString { const_cast<char*>(te4ace0->prepend("WHITESPACE").constData()+10), te4ace0->size()-10, te4ace0 }; });
}

struct QtGui_PackedString QPictureIO_FileName(void* ptr)
{
	return ({ QByteArray* t48ef9a = new QByteArray(static_cast<QPictureIO*>(ptr)->fileName().toUtf8()); QtGui_PackedString { const_cast<char*>(t48ef9a->prepend("WHITESPACE").constData()+10), t48ef9a->size()-10, t48ef9a }; });
}

struct QtGui_PackedString QPictureIO_Format(void* ptr)
{
	return QtGui_PackedString { const_cast<char*>(static_cast<QPictureIO*>(ptr)->format()), -1, NULL };
}

float QPictureIO_Gamma(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->gamma();
}

struct QtGui_PackedList QPictureIO_QPictureIO_InputFormats()
{
	return ({ QList<QByteArray>* tmpValue5b9754 = new QList<QByteArray>(QPictureIO::inputFormats()); QtGui_PackedList { tmpValue5b9754, tmpValue5b9754->size() }; });
}

void* QPictureIO_IoDevice(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->ioDevice();
}

struct QtGui_PackedList QPictureIO_QPictureIO_OutputFormats()
{
	return ({ QList<QByteArray>* tmpValue7d3873 = new QList<QByteArray>(QPictureIO::outputFormats()); QtGui_PackedList { tmpValue7d3873, tmpValue7d3873->size() }; });
}

struct QtGui_PackedString QPictureIO_Parameters(void* ptr)
{
	return QtGui_PackedString { const_cast<char*>(static_cast<QPictureIO*>(ptr)->parameters()), -1, NULL };
}

void* QPictureIO_Picture(void* ptr)
{
	return const_cast<QPicture*>(&static_cast<QPictureIO*>(ptr)->picture());
}

void* QPictureIO_QPictureIO_PictureFormat(struct QtGui_PackedString fileName)
{
	return new QByteArray(QPictureIO::pictureFormat(QString::fromUtf8(fileName.data, fileName.len)));
}

void* QPictureIO_QPictureIO_PictureFormat2(void* d)
{
	return new QByteArray(QPictureIO::pictureFormat(static_cast<QIODevice*>(d)));
}

int QPictureIO_Quality(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->quality();
}

char QPictureIO_Read(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->read();
}

void QPictureIO_SetDescription(void* ptr, struct QtGui_PackedString description)
{
	static_cast<QPictureIO*>(ptr)->setDescription(QString::fromUtf8(description.data, description.len));
}

void QPictureIO_SetFileName(void* ptr, struct QtGui_PackedString fileName)
{
	static_cast<QPictureIO*>(ptr)->setFileName(QString::fromUtf8(fileName.data, fileName.len));
}

void QPictureIO_SetFormat(void* ptr, char* format)
{
	static_cast<QPictureIO*>(ptr)->setFormat(const_cast<const char*>(format));
}

void QPictureIO_SetGamma(void* ptr, float gamma)
{
	static_cast<QPictureIO*>(ptr)->setGamma(gamma);
}

void QPictureIO_SetIODevice(void* ptr, void* ioDevice)
{
	static_cast<QPictureIO*>(ptr)->setIODevice(static_cast<QIODevice*>(ioDevice));
}

void QPictureIO_SetParameters(void* ptr, char* parameters)
{
	static_cast<QPictureIO*>(ptr)->setParameters(const_cast<const char*>(parameters));
}

void QPictureIO_SetPicture(void* ptr, void* picture)
{
	static_cast<QPictureIO*>(ptr)->setPicture(*static_cast<QPicture*>(picture));
}

void QPictureIO_SetQuality(void* ptr, int q)
{
	static_cast<QPictureIO*>(ptr)->setQuality(q);
}

void QPictureIO_SetStatus(void* ptr, int status)
{
	static_cast<QPictureIO*>(ptr)->setStatus(status);
}

int QPictureIO_Status(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->status();
}

char QPictureIO_Write(void* ptr)
{
	return static_cast<QPictureIO*>(ptr)->write();
}

void QPictureIO_DestroyQPictureIO(void* ptr)
{
	static_cast<QPictureIO*>(ptr)->~QPictureIO();
}

void* QPictureIO___inputFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPictureIO___inputFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPictureIO___inputFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QPictureIO___outputFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QPictureIO___outputFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QPictureIO___outputFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

Q_DECLARE_METATYPE(QPixelFormat)
Q_DECLARE_METATYPE(QPixelFormat*)
void* QPixelFormat_NewQPixelFormat()
{
	return new QPixelFormat();
}

void* QPixelFormat_NewQPixelFormat2(long long colorModel, char* firstSize, char* secondSize, char* thirdSize, char* fourthSize, char* fifthSize, char* alphaSize, long long alphaUsage, long long alphaPosition, long long premultiplied, long long typeInterpretation, long long byteOrder, char* subEnum)
{
	return new QPixelFormat(static_cast<QPixelFormat::ColorModel>(colorModel), *static_cast<uchar*>(static_cast<void*>(firstSize)), *static_cast<uchar*>(static_cast<void*>(secondSize)), *static_cast<uchar*>(static_cast<void*>(thirdSize)), *static_cast<uchar*>(static_cast<void*>(fourthSize)), *static_cast<uchar*>(static_cast<void*>(fifthSize)), *static_cast<uchar*>(static_cast<void*>(alphaSize)), static_cast<QPixelFormat::AlphaUsage>(alphaUsage), static_cast<QPixelFormat::AlphaPosition>(alphaPosition), static_cast<QPixelFormat::AlphaPremultiplied>(premultiplied), static_cast<QPixelFormat::TypeInterpretation>(typeInterpretation), static_cast<QPixelFormat::ByteOrder>(byteOrder), *static_cast<uchar*>(static_cast<void*>(subEnum)));
}

long long QPixelFormat_AlphaPosition(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->alphaPosition();
}

struct QtGui_PackedString QPixelFormat_AlphaSize(void* ptr)
{
	return ({ uchar pret9daa6f = static_cast<QPixelFormat*>(ptr)->alphaSize(); char* t9daa6f = static_cast<char*>(static_cast<void*>(&pret9daa6f)); QtGui_PackedString { t9daa6f, -1, NULL }; });
}

long long QPixelFormat_AlphaUsage(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->alphaUsage();
}

struct QtGui_PackedString QPixelFormat_BitsPerPixel(void* ptr)
{
	return ({ uchar preta6a744 = static_cast<QPixelFormat*>(ptr)->bitsPerPixel(); char* ta6a744 = static_cast<char*>(static_cast<void*>(&preta6a744)); QtGui_PackedString { ta6a744, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_BlackSize(void* ptr)
{
	return ({ uchar pretb1416d = static_cast<QPixelFormat*>(ptr)->blackSize(); char* tb1416d = static_cast<char*>(static_cast<void*>(&pretb1416d)); QtGui_PackedString { tb1416d, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_BlueSize(void* ptr)
{
	return ({ uchar pretf9134a = static_cast<QPixelFormat*>(ptr)->blueSize(); char* tf9134a = static_cast<char*>(static_cast<void*>(&pretf9134a)); QtGui_PackedString { tf9134a, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_BrightnessSize(void* ptr)
{
	return ({ uchar pretd53fac = static_cast<QPixelFormat*>(ptr)->brightnessSize(); char* td53fac = static_cast<char*>(static_cast<void*>(&pretd53fac)); QtGui_PackedString { td53fac, -1, NULL }; });
}

long long QPixelFormat_ByteOrder(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->byteOrder();
}

struct QtGui_PackedString QPixelFormat_ChannelCount(void* ptr)
{
	return ({ uchar pret704cf3 = static_cast<QPixelFormat*>(ptr)->channelCount(); char* t704cf3 = static_cast<char*>(static_cast<void*>(&pret704cf3)); QtGui_PackedString { t704cf3, -1, NULL }; });
}

long long QPixelFormat_ColorModel(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->colorModel();
}

struct QtGui_PackedString QPixelFormat_CyanSize(void* ptr)
{
	return ({ uchar pret19e508 = static_cast<QPixelFormat*>(ptr)->cyanSize(); char* t19e508 = static_cast<char*>(static_cast<void*>(&pret19e508)); QtGui_PackedString { t19e508, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_GreenSize(void* ptr)
{
	return ({ uchar pret2cbd5e = static_cast<QPixelFormat*>(ptr)->greenSize(); char* t2cbd5e = static_cast<char*>(static_cast<void*>(&pret2cbd5e)); QtGui_PackedString { t2cbd5e, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_HueSize(void* ptr)
{
	return ({ uchar pret0f029c = static_cast<QPixelFormat*>(ptr)->hueSize(); char* t0f029c = static_cast<char*>(static_cast<void*>(&pret0f029c)); QtGui_PackedString { t0f029c, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_LightnessSize(void* ptr)
{
	return ({ uchar pretdfc9b5 = static_cast<QPixelFormat*>(ptr)->lightnessSize(); char* tdfc9b5 = static_cast<char*>(static_cast<void*>(&pretdfc9b5)); QtGui_PackedString { tdfc9b5, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_MagentaSize(void* ptr)
{
	return ({ uchar pret78ac06 = static_cast<QPixelFormat*>(ptr)->magentaSize(); char* t78ac06 = static_cast<char*>(static_cast<void*>(&pret78ac06)); QtGui_PackedString { t78ac06, -1, NULL }; });
}

long long QPixelFormat_Premultiplied(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->premultiplied();
}

struct QtGui_PackedString QPixelFormat_RedSize(void* ptr)
{
	return ({ uchar pret1a20f5 = static_cast<QPixelFormat*>(ptr)->redSize(); char* t1a20f5 = static_cast<char*>(static_cast<void*>(&pret1a20f5)); QtGui_PackedString { t1a20f5, -1, NULL }; });
}

struct QtGui_PackedString QPixelFormat_SaturationSize(void* ptr)
{
	return ({ uchar pretff1cd0 = static_cast<QPixelFormat*>(ptr)->saturationSize(); char* tff1cd0 = static_cast<char*>(static_cast<void*>(&pretff1cd0)); QtGui_PackedString { tff1cd0, -1, NULL }; });
}

long long QPixelFormat_TypeInterpretation(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->typeInterpretation();
}

struct QtGui_PackedString QPixelFormat_YellowSize(void* ptr)
{
	return ({ uchar pret7b52e4 = static_cast<QPixelFormat*>(ptr)->yellowSize(); char* t7b52e4 = static_cast<char*>(static_cast<void*>(&pret7b52e4)); QtGui_PackedString { t7b52e4, -1, NULL }; });
}

long long QPixelFormat_YuvLayout(void* ptr)
{
	return static_cast<QPixelFormat*>(ptr)->yuvLayout();
}

class MyQPixmap: public QPixmap
{
public:
	MyQPixmap() : QPixmap() {QPixmap_QPixmap_QRegisterMetaType();};
	MyQPixmap(int width, int height) : QPixmap(width, height) {QPixmap_QPixmap_QRegisterMetaType();};
	MyQPixmap(const QSize &size) : QPixmap(size) {QPixmap_QPixmap_QRegisterMetaType();};
	MyQPixmap(const QString &fileName, const char *format = Q_NULLPTR, Qt::ImageConversionFlags flags = Qt::AutoColor) : QPixmap(fileName, format, flags) {QPixmap_QPixmap_QRegisterMetaType();};
	MyQPixmap(const QPixmap &pixmap) : QPixmap(pixmap) {QPixmap_QPixmap_QRegisterMetaType();};
	 ~MyQPixmap() { callbackQPixmap_DestroyQPixmap(this); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPixmap_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QPixmap*)
Q_DECLARE_METATYPE(MyQPixmap*)

int QPixmap_QPixmap_QRegisterMetaType(){qRegisterMetaType<QPixmap*>(); return qRegisterMetaType<MyQPixmap*>();}

void* QPixmap_NewQPixmap()
{
	return new MyQPixmap();
}

void* QPixmap_NewQPixmap2(void* size)
{
	return new MyQPixmap(*static_cast<QSize*>(size));
}

void* QPixmap_NewQPixmap3(struct QtGui_PackedString fileName, char* format, long long flags)
{
	return new MyQPixmap(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format), static_cast<Qt::ImageConversionFlag>(flags));
}

void* QPixmap_NewQPixmap5(void* pixmap)
{
	return new MyQPixmap(*static_cast<QPixmap*>(pixmap));
}

long long QPixmap_CacheKey(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->cacheKey();
}

char QPixmap_ConvertFromImage(void* ptr, void* image, long long flags)
{
	return static_cast<QPixmap*>(ptr)->convertFromImage(*static_cast<QImage*>(image), static_cast<Qt::ImageConversionFlag>(flags));
}

void* QPixmap_Copy(void* ptr, void* rectangle)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->copy(*static_cast<QRect*>(rectangle)));
}

void* QPixmap_Copy2(void* ptr, int x, int y, int width, int height)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->copy(x, y, width, height));
}

void* QPixmap_CreateHeuristicMask(void* ptr, char clipTight)
{
	return new QBitmap(static_cast<QPixmap*>(ptr)->createHeuristicMask(clipTight != 0));
}

void* QPixmap_CreateMaskFromColor(void* ptr, void* maskColor, long long mode)
{
	return new QBitmap(static_cast<QPixmap*>(ptr)->createMaskFromColor(*static_cast<QColor*>(maskColor), static_cast<Qt::MaskMode>(mode)));
}

int QPixmap_QPixmap_DefaultDepth()
{
	return QPixmap::defaultDepth();
}

void QPixmap_Detach(void* ptr)
{
	static_cast<QPixmap*>(ptr)->detach();
}

double QPixmap_DevicePixelRatio(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->devicePixelRatio();
}

void QPixmap_Fill(void* ptr, void* color)
{
	static_cast<QPixmap*>(ptr)->fill(*static_cast<QColor*>(color));
}

void* QPixmap_QPixmap_FromImage(void* image, long long flags)
{
	return new QPixmap(QPixmap::fromImage(*static_cast<QImage*>(image), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QPixmap_QPixmap_FromImage2(void* image, long long flags)
{
	return new QPixmap(QPixmap::fromImage(*static_cast<QImage*>(image), static_cast<Qt::ImageConversionFlag>(flags)));
}

void* QPixmap_QPixmap_FromImageReader(void* imageReader, long long flags)
{
	return new QPixmap(QPixmap::fromImageReader(static_cast<QImageReader*>(imageReader), static_cast<Qt::ImageConversionFlag>(flags)));
}

char QPixmap_HasAlpha(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->hasAlpha();
}

char QPixmap_HasAlphaChannel(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->hasAlphaChannel();
}

char QPixmap_IsNull(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->isNull();
}

char QPixmap_IsQBitmap(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->isQBitmap();
}

char QPixmap_Load(void* ptr, struct QtGui_PackedString fileName, char* format, long long flags)
{
	return static_cast<QPixmap*>(ptr)->load(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format), static_cast<Qt::ImageConversionFlag>(flags));
}

char QPixmap_LoadFromData(void* ptr, char* data, unsigned int l, char* format, long long flags)
{
	return static_cast<QPixmap*>(ptr)->loadFromData(const_cast<const uchar*>(static_cast<uchar*>(static_cast<void*>(data))), l, const_cast<const char*>(format), static_cast<Qt::ImageConversionFlag>(flags));
}

char QPixmap_LoadFromData2(void* ptr, void* data, char* format, long long flags)
{
	return static_cast<QPixmap*>(ptr)->loadFromData(*static_cast<QByteArray*>(data), const_cast<const char*>(format), static_cast<Qt::ImageConversionFlag>(flags));
}

void* QPixmap_Mask(void* ptr)
{
	return new QBitmap(static_cast<QPixmap*>(ptr)->mask());
}

void* QPixmap_Rect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPixmap*>(ptr)->rect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPixmap_Save(void* ptr, struct QtGui_PackedString fileName, char* format, int quality)
{
	return static_cast<QPixmap*>(ptr)->save(QString::fromUtf8(fileName.data, fileName.len), const_cast<const char*>(format), quality);
}

char QPixmap_Save2(void* ptr, void* device, char* format, int quality)
{
	return static_cast<QPixmap*>(ptr)->save(static_cast<QIODevice*>(device), const_cast<const char*>(format), quality);
}

void* QPixmap_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->scaled(*static_cast<QSize*>(size), static_cast<Qt::AspectRatioMode>(aspectRatioMode), static_cast<Qt::TransformationMode>(transformMode)));
}

void* QPixmap_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->scaled(width, height, static_cast<Qt::AspectRatioMode>(aspectRatioMode), static_cast<Qt::TransformationMode>(transformMode)));
}

void* QPixmap_ScaledToHeight(void* ptr, int height, long long mode)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->scaledToHeight(height, static_cast<Qt::TransformationMode>(mode)));
}

void* QPixmap_ScaledToWidth(void* ptr, int width, long long mode)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->scaledToWidth(width, static_cast<Qt::TransformationMode>(mode)));
}

void QPixmap_Scroll(void* ptr, int dx, int dy, int x, int y, int width, int height, void* exposed)
{
	static_cast<QPixmap*>(ptr)->scroll(dx, dy, x, y, width, height, static_cast<QRegion*>(exposed));
}

void QPixmap_Scroll2(void* ptr, int dx, int dy, void* rect, void* exposed)
{
	static_cast<QPixmap*>(ptr)->scroll(dx, dy, *static_cast<QRect*>(rect), static_cast<QRegion*>(exposed));
}

void QPixmap_SetDevicePixelRatio(void* ptr, double scaleFactor)
{
	static_cast<QPixmap*>(ptr)->setDevicePixelRatio(scaleFactor);
}

void QPixmap_SetMask(void* ptr, void* mask)
{
	static_cast<QPixmap*>(ptr)->setMask(*static_cast<QBitmap*>(mask));
}

void* QPixmap_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QPixmap*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QPixmap_Swap(void* ptr, void* other)
{
	static_cast<QPixmap*>(ptr)->swap(*static_cast<QPixmap*>(other));
}

void* QPixmap_ToImage(void* ptr)
{
	return new QImage(static_cast<QPixmap*>(ptr)->toImage());
}

void* QPixmap_Transformed(void* ptr, void* transform, long long mode)
{
	return new QPixmap(static_cast<QPixmap*>(ptr)->transformed(*static_cast<QTransform*>(transform), static_cast<Qt::TransformationMode>(mode)));
}

void* QPixmap_QPixmap_TrueMatrix(void* matrix, int width, int height)
{
	return new QTransform(QPixmap::trueMatrix(*static_cast<QTransform*>(matrix), width, height));
}

void QPixmap_DestroyQPixmap(void* ptr)
{
	static_cast<QPixmap*>(ptr)->~QPixmap();
}

void QPixmap_DestroyQPixmapDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QPixmap_ToVariant(void* ptr)
{
	return new QVariant(*static_cast<QPixmap*>(ptr));
}

void* QPixmap_PaintEngine(void* ptr)
{
	return static_cast<QPixmap*>(ptr)->paintEngine();
}

void* QPixmap_PaintEngineDefault(void* ptr)
{
	if (dynamic_cast<QBitmap*>(static_cast<QPixmap*>(ptr))) {
		return static_cast<QBitmap*>(ptr)->QBitmap::paintEngine();
	} else {
		return static_cast<QPixmap*>(ptr)->QPixmap::paintEngine();
	}
}

int QPixmapCache_QPixmapCache_CacheLimit()
{
	return QPixmapCache::cacheLimit();
}

void QPixmapCache_QPixmapCache_Clear()
{
	QPixmapCache::clear();
}

char QPixmapCache_QPixmapCache_Find3(struct QtGui_PackedString key, void* pixmap)
{
	return QPixmapCache::find(QString::fromUtf8(key.data, key.len), static_cast<QPixmap*>(pixmap));
}

char QPixmapCache_QPixmapCache_Insert(struct QtGui_PackedString key, void* pixmap)
{
	return QPixmapCache::insert(QString::fromUtf8(key.data, key.len), *static_cast<QPixmap*>(pixmap));
}

void QPixmapCache_QPixmapCache_Remove(struct QtGui_PackedString key)
{
	QPixmapCache::remove(QString::fromUtf8(key.data, key.len));
}

void QPixmapCache_QPixmapCache_SetCacheLimit(int n)
{
	QPixmapCache::setCacheLimit(n);
}

class MyQPlatformSurfaceEvent: public QPlatformSurfaceEvent
{
public:
	MyQPlatformSurfaceEvent(QPlatformSurfaceEvent::SurfaceEventType surfaceEventType) : QPlatformSurfaceEvent(surfaceEventType) {QPlatformSurfaceEvent_QPlatformSurfaceEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QPlatformSurfaceEvent*)
Q_DECLARE_METATYPE(MyQPlatformSurfaceEvent*)

int QPlatformSurfaceEvent_QPlatformSurfaceEvent_QRegisterMetaType(){qRegisterMetaType<QPlatformSurfaceEvent*>(); return qRegisterMetaType<MyQPlatformSurfaceEvent*>();}

void* QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(long long surfaceEventType)
{
	return new MyQPlatformSurfaceEvent(static_cast<QPlatformSurfaceEvent::SurfaceEventType>(surfaceEventType));
}

long long QPlatformSurfaceEvent_SurfaceEventType(void* ptr)
{
	return static_cast<QPlatformSurfaceEvent*>(ptr)->surfaceEventType();
}

Q_DECLARE_METATYPE(QPointingDeviceUniqueId)
Q_DECLARE_METATYPE(QPointingDeviceUniqueId*)
void* QPointingDeviceUniqueId_NewQPointingDeviceUniqueId()
{
	return new QPointingDeviceUniqueId();
}

void* QPointingDeviceUniqueId_QPointingDeviceUniqueId_FromNumericId(long long id)
{
	return new QPointingDeviceUniqueId(QPointingDeviceUniqueId::fromNumericId(id));
}

char QPointingDeviceUniqueId_IsValid(void* ptr)
{
	return static_cast<QPointingDeviceUniqueId*>(ptr)->isValid();
}

long long QPointingDeviceUniqueId_NumericId(void* ptr)
{
	return static_cast<QPointingDeviceUniqueId*>(ptr)->numericId();
}

Q_DECLARE_METATYPE(QPolygon)
Q_DECLARE_METATYPE(QPolygon*)
void* QPolygon_NewQPolygon()
{
	return new QPolygon();
}

void* QPolygon_NewQPolygon2(int size)
{
	return new QPolygon(size);
}

void* QPolygon_NewQPolygon3(void* points)
{
	return new QPolygon(*static_cast<QVector<QPoint>*>(points));
}

void* QPolygon_NewQPolygon5(void* rectangle, char closed)
{
	return new QPolygon(*static_cast<QRect*>(rectangle), closed != 0);
}

void* QPolygon_BoundingRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QPolygon*>(ptr)->boundingRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPolygon_ContainsPoint(void* ptr, void* point, long long fillRule)
{
	return static_cast<QPolygon*>(ptr)->containsPoint(*static_cast<QPoint*>(point), static_cast<Qt::FillRule>(fillRule));
}

void* QPolygon_Intersected(void* ptr, void* r)
{
	return new QPolygon(static_cast<QPolygon*>(ptr)->intersected(*static_cast<QPolygon*>(r)));
}

char QPolygon_Intersects(void* ptr, void* p)
{
	return static_cast<QPolygon*>(ptr)->intersects(*static_cast<QPolygon*>(p));
}

void QPolygon_Point(void* ptr, int index, int x, int y)
{
	static_cast<QPolygon*>(ptr)->point(index, &x, &y);
}

void* QPolygon_Point2(void* ptr, int index)
{
	return ({ QPoint tmpValue = static_cast<QPolygon*>(ptr)->point(index); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void QPolygon_PutPoints(void* ptr, int index, int nPoints, void* fromPolygon, int fromIndex)
{
	static_cast<QPolygon*>(ptr)->putPoints(index, nPoints, *static_cast<QPolygon*>(fromPolygon), fromIndex);
}

void QPolygon_SetPoint(void* ptr, int index, int x, int y)
{
	static_cast<QPolygon*>(ptr)->setPoint(index, x, y);
}

void QPolygon_SetPoint2(void* ptr, int index, void* point)
{
	static_cast<QPolygon*>(ptr)->setPoint(index, *static_cast<QPoint*>(point));
}

void QPolygon_SetPoints(void* ptr, int nPoints, int points)
{
	static_cast<QPolygon*>(ptr)->setPoints(nPoints, const_cast<const int*>(&points));
}

void* QPolygon_Subtracted(void* ptr, void* r)
{
	return new QPolygon(static_cast<QPolygon*>(ptr)->subtracted(*static_cast<QPolygon*>(r)));
}

void QPolygon_Swap(void* ptr, void* other)
{
	static_cast<QPolygon*>(ptr)->swap(*static_cast<QPolygon*>(other));
}

void QPolygon_Translate(void* ptr, int dx, int dy)
{
	static_cast<QPolygon*>(ptr)->translate(dx, dy);
}

void QPolygon_Translate2(void* ptr, void* offset)
{
	static_cast<QPolygon*>(ptr)->translate(*static_cast<QPoint*>(offset));
}

void* QPolygon_Translated(void* ptr, int dx, int dy)
{
	return new QPolygon(static_cast<QPolygon*>(ptr)->translated(dx, dy));
}

void* QPolygon_Translated2(void* ptr, void* offset)
{
	return new QPolygon(static_cast<QPolygon*>(ptr)->translated(*static_cast<QPoint*>(offset)));
}

void* QPolygon_United(void* ptr, void* r)
{
	return new QPolygon(static_cast<QPolygon*>(ptr)->united(*static_cast<QPolygon*>(r)));
}

void QPolygon_DestroyQPolygon(void* ptr)
{
	static_cast<QPolygon*>(ptr)->~QPolygon();
}

void* QPolygon___QPolygon_points_atList3(void* ptr, int i)
{
	return ({ QPoint tmpValue = ({QPoint tmp = static_cast<QVector<QPoint>*>(ptr)->at(i); if (i == static_cast<QVector<QPoint>*>(ptr)->size()-1) { static_cast<QVector<QPoint>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void QPolygon___QPolygon_points_setList3(void* ptr, void* i)
{
	static_cast<QVector<QPoint>*>(ptr)->append(*static_cast<QPoint*>(i));
}

void* QPolygon___QPolygon_points_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPoint>();
}

void* QPolygon___QPolygon_v_atList4(void* ptr, int i)
{
	return ({ QPoint tmpValue = ({QPoint tmp = static_cast<QVector<QPoint>*>(ptr)->at(i); if (i == static_cast<QVector<QPoint>*>(ptr)->size()-1) { static_cast<QVector<QPoint>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void QPolygon___QPolygon_v_setList4(void* ptr, void* i)
{
	static_cast<QVector<QPoint>*>(ptr)->append(*static_cast<QPoint*>(i));
}

void* QPolygon___QPolygon_v_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPoint>();
}

void* QPolygon___QVector_other_atList4(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___QVector_other_setList4(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___QVector_other_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___QVector_other_atList5(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___QVector_other_setList5(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___QVector_other_newList5(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___append_value_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___append_value_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___append_value_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___fill_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___fill_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___fill_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___fromList_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___fromList_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___fromList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___fromList_list_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___fromList_list_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___fromList_list_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___fromStdVector_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___fromStdVector_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___fromStdVector_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___mid_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___mid_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___mid_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___swap_other_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___swap_other_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___swap_other_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygon___toList_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygon___toList_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygon___toList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

Q_DECLARE_METATYPE(QPolygonF)
Q_DECLARE_METATYPE(QPolygonF*)
void* QPolygonF_NewQPolygonF()
{
	return new QPolygonF();
}

void* QPolygonF_NewQPolygonF2(int size)
{
	return new QPolygonF(size);
}

void* QPolygonF_NewQPolygonF3(void* points)
{
	return new QPolygonF(*static_cast<QVector<QPointF>*>(points));
}

void* QPolygonF_NewQPolygonF5(void* rectangle)
{
	return new QPolygonF(*static_cast<QRectF*>(rectangle));
}

void* QPolygonF_NewQPolygonF6(void* polygon)
{
	return new QPolygonF(*static_cast<QPolygon*>(polygon));
}

void* QPolygonF_NewQPolygonF7(void* polygon)
{
	return new QPolygonF(*static_cast<QPolygonF*>(polygon));
}

void* QPolygonF_BoundingRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QPolygonF*>(ptr)->boundingRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QPolygonF_ContainsPoint(void* ptr, void* point, long long fillRule)
{
	return static_cast<QPolygonF*>(ptr)->containsPoint(*static_cast<QPointF*>(point), static_cast<Qt::FillRule>(fillRule));
}

void* QPolygonF_Intersected(void* ptr, void* r)
{
	return new QPolygonF(static_cast<QPolygonF*>(ptr)->intersected(*static_cast<QPolygonF*>(r)));
}

char QPolygonF_Intersects(void* ptr, void* p)
{
	return static_cast<QPolygonF*>(ptr)->intersects(*static_cast<QPolygonF*>(p));
}

char QPolygonF_IsClosed(void* ptr)
{
	return static_cast<QPolygonF*>(ptr)->isClosed();
}

void* QPolygonF_Subtracted(void* ptr, void* r)
{
	return new QPolygonF(static_cast<QPolygonF*>(ptr)->subtracted(*static_cast<QPolygonF*>(r)));
}

void QPolygonF_Swap(void* ptr, void* other)
{
	static_cast<QPolygonF*>(ptr)->swap(*static_cast<QPolygonF*>(other));
}

void* QPolygonF_ToPolygon(void* ptr)
{
	return new QPolygon(static_cast<QPolygonF*>(ptr)->toPolygon());
}

void QPolygonF_Translate(void* ptr, void* offset)
{
	static_cast<QPolygonF*>(ptr)->translate(*static_cast<QPointF*>(offset));
}

void QPolygonF_Translate2(void* ptr, double dx, double dy)
{
	static_cast<QPolygonF*>(ptr)->translate(dx, dy);
}

void* QPolygonF_Translated(void* ptr, void* offset)
{
	return new QPolygonF(static_cast<QPolygonF*>(ptr)->translated(*static_cast<QPointF*>(offset)));
}

void* QPolygonF_Translated2(void* ptr, double dx, double dy)
{
	return new QPolygonF(static_cast<QPolygonF*>(ptr)->translated(dx, dy));
}

void* QPolygonF_United(void* ptr, void* r)
{
	return new QPolygonF(static_cast<QPolygonF*>(ptr)->united(*static_cast<QPolygonF*>(r)));
}

void QPolygonF_DestroyQPolygonF(void* ptr)
{
	static_cast<QPolygonF*>(ptr)->~QPolygonF();
}

void* QPolygonF___QPolygonF_points_atList3(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QPolygonF___QPolygonF_points_setList3(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QPolygonF___QPolygonF_points_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

void* QPolygonF___QPolygonF_v_atList4(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QPolygonF___QPolygonF_v_setList4(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QPolygonF___QPolygonF_v_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

void* QPolygonF___QVector_other_atList4(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___QVector_other_setList4(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___QVector_other_newList4(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___QVector_other_atList5(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___QVector_other_setList5(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___QVector_other_newList5(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___append_value_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___append_value_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___append_value_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___fill_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___fill_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___fill_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___fromList_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___fromList_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___fromList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___fromList_list_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___fromList_list_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___fromList_list_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___fromStdVector_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___fromStdVector_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___fromStdVector_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___mid_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___mid_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___mid_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___swap_other_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___swap_other_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___swap_other_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QPolygonF___toList_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QPolygonF___toList_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QPolygonF___toList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

Q_DECLARE_METATYPE(QQuaternion)
Q_DECLARE_METATYPE(QQuaternion*)
void* QQuaternion_NewQQuaternion()
{
	return new QQuaternion();
}

void* QQuaternion_NewQQuaternion3(float scalar, float xpos, float ypos, float zpos)
{
	return new QQuaternion(scalar, xpos, ypos, zpos);
}

void* QQuaternion_NewQQuaternion4(float scalar, void* vector)
{
	return new QQuaternion(scalar, *static_cast<QVector3D*>(vector));
}

void* QQuaternion_NewQQuaternion5(void* vector)
{
	return new QQuaternion(*static_cast<QVector4D*>(vector));
}

void* QQuaternion_Conjugated(void* ptr)
{
	return new QQuaternion(static_cast<QQuaternion*>(ptr)->conjugated());
}

float QQuaternion_QQuaternion_DotProduct(void* q1, void* q2)
{
	return QQuaternion::dotProduct(*static_cast<QQuaternion*>(q1), *static_cast<QQuaternion*>(q2));
}

void* QQuaternion_QQuaternion_FromAxes(void* xAxis, void* yAxis, void* zAxis)
{
	return new QQuaternion(QQuaternion::fromAxes(*static_cast<QVector3D*>(xAxis), *static_cast<QVector3D*>(yAxis), *static_cast<QVector3D*>(zAxis)));
}

void* QQuaternion_QQuaternion_FromAxisAndAngle(void* axis, float angle)
{
	return new QQuaternion(QQuaternion::fromAxisAndAngle(*static_cast<QVector3D*>(axis), angle));
}

void* QQuaternion_QQuaternion_FromAxisAndAngle2(float x, float y, float z, float angle)
{
	return new QQuaternion(QQuaternion::fromAxisAndAngle(x, y, z, angle));
}

void* QQuaternion_QQuaternion_FromDirection(void* direction, void* up)
{
	return new QQuaternion(QQuaternion::fromDirection(*static_cast<QVector3D*>(direction), *static_cast<QVector3D*>(up)));
}

void* QQuaternion_QQuaternion_FromEulerAngles(float pitch, float yaw, float roll)
{
	return new QQuaternion(QQuaternion::fromEulerAngles(pitch, yaw, roll));
}

void* QQuaternion_QQuaternion_FromEulerAngles2(void* eulerAngles)
{
	return new QQuaternion(QQuaternion::fromEulerAngles(*static_cast<QVector3D*>(eulerAngles)));
}

void QQuaternion_GetAxes(void* ptr, void* xAxis, void* yAxis, void* zAxis)
{
	static_cast<QQuaternion*>(ptr)->getAxes(static_cast<QVector3D*>(xAxis), static_cast<QVector3D*>(yAxis), static_cast<QVector3D*>(zAxis));
}

void QQuaternion_GetAxisAndAngle(void* ptr, float x, float y, float z, float angle)
{
	static_cast<QQuaternion*>(ptr)->getAxisAndAngle(&x, &y, &z, &angle);
}

void QQuaternion_GetAxisAndAngle2(void* ptr, void* axis, float angle)
{
	static_cast<QQuaternion*>(ptr)->getAxisAndAngle(static_cast<QVector3D*>(axis), &angle);
}

void QQuaternion_GetEulerAngles(void* ptr, float pitch, float yaw, float roll)
{
	static_cast<QQuaternion*>(ptr)->getEulerAngles(&pitch, &yaw, &roll);
}

void* QQuaternion_Inverted(void* ptr)
{
	return new QQuaternion(static_cast<QQuaternion*>(ptr)->inverted());
}

char QQuaternion_IsIdentity(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->isIdentity();
}

char QQuaternion_IsNull(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->isNull();
}

float QQuaternion_Length(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->length();
}

float QQuaternion_LengthSquared(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->lengthSquared();
}

void* QQuaternion_QQuaternion_Nlerp(void* q1, void* q2, float t)
{
	return new QQuaternion(QQuaternion::nlerp(*static_cast<QQuaternion*>(q1), *static_cast<QQuaternion*>(q2), t));
}

void QQuaternion_Normalize(void* ptr)
{
	static_cast<QQuaternion*>(ptr)->normalize();
}

void* QQuaternion_Normalized(void* ptr)
{
	return new QQuaternion(static_cast<QQuaternion*>(ptr)->normalized());
}

void* QQuaternion_RotatedVector(void* ptr, void* vector)
{
	return new QVector3D(static_cast<QQuaternion*>(ptr)->rotatedVector(*static_cast<QVector3D*>(vector)));
}

void* QQuaternion_QQuaternion_RotationTo(void* from, void* to)
{
	return new QQuaternion(QQuaternion::rotationTo(*static_cast<QVector3D*>(from), *static_cast<QVector3D*>(to)));
}

float QQuaternion_Scalar(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->scalar();
}

void QQuaternion_SetScalar(void* ptr, float scalar)
{
	static_cast<QQuaternion*>(ptr)->setScalar(scalar);
}

void QQuaternion_SetVector(void* ptr, void* vector)
{
	static_cast<QQuaternion*>(ptr)->setVector(*static_cast<QVector3D*>(vector));
}

void QQuaternion_SetVector2(void* ptr, float x, float y, float z)
{
	static_cast<QQuaternion*>(ptr)->setVector(x, y, z);
}

void QQuaternion_SetX(void* ptr, float x)
{
	static_cast<QQuaternion*>(ptr)->setX(x);
}

void QQuaternion_SetY(void* ptr, float y)
{
	static_cast<QQuaternion*>(ptr)->setY(y);
}

void QQuaternion_SetZ(void* ptr, float z)
{
	static_cast<QQuaternion*>(ptr)->setZ(z);
}

void* QQuaternion_QQuaternion_Slerp(void* q1, void* q2, float t)
{
	return new QQuaternion(QQuaternion::slerp(*static_cast<QQuaternion*>(q1), *static_cast<QQuaternion*>(q2), t));
}

void* QQuaternion_ToEulerAngles(void* ptr)
{
	return new QVector3D(static_cast<QQuaternion*>(ptr)->toEulerAngles());
}

void* QQuaternion_ToVector4D(void* ptr)
{
	return new QVector4D(static_cast<QQuaternion*>(ptr)->toVector4D());
}

void* QQuaternion_Vector(void* ptr)
{
	return new QVector3D(static_cast<QQuaternion*>(ptr)->vector());
}

float QQuaternion_X(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->x();
}

float QQuaternion_Y(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->y();
}

float QQuaternion_Z(void* ptr)
{
	return static_cast<QQuaternion*>(ptr)->z();
}

Q_DECLARE_METATYPE(QRadialGradient)
Q_DECLARE_METATYPE(QRadialGradient*)
void* QRadialGradient_NewQRadialGradient()
{
	return new QRadialGradient();
}

void* QRadialGradient_NewQRadialGradient2(void* center, double radius, void* focalPoint)
{
	return new QRadialGradient(*static_cast<QPointF*>(center), radius, *static_cast<QPointF*>(focalPoint));
}

void* QRadialGradient_NewQRadialGradient3(double cx, double cy, double radius, double fx, double fy)
{
	return new QRadialGradient(cx, cy, radius, fx, fy);
}

void* QRadialGradient_NewQRadialGradient4(void* center, double radius)
{
	return new QRadialGradient(*static_cast<QPointF*>(center), radius);
}

void* QRadialGradient_NewQRadialGradient5(double cx, double cy, double radius)
{
	return new QRadialGradient(cx, cy, radius);
}

void* QRadialGradient_NewQRadialGradient6(void* center, double centerRadius, void* focalPoint, double focalRadius)
{
	return new QRadialGradient(*static_cast<QPointF*>(center), centerRadius, *static_cast<QPointF*>(focalPoint), focalRadius);
}

void* QRadialGradient_NewQRadialGradient7(double cx, double cy, double centerRadius, double fx, double fy, double focalRadius)
{
	return new QRadialGradient(cx, cy, centerRadius, fx, fy, focalRadius);
}

void* QRadialGradient_Center(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QRadialGradient*>(ptr)->center(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

double QRadialGradient_CenterRadius(void* ptr)
{
	return static_cast<QRadialGradient*>(ptr)->centerRadius();
}

void* QRadialGradient_FocalPoint(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QRadialGradient*>(ptr)->focalPoint(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

double QRadialGradient_FocalRadius(void* ptr)
{
	return static_cast<QRadialGradient*>(ptr)->focalRadius();
}

double QRadialGradient_Radius(void* ptr)
{
	return static_cast<QRadialGradient*>(ptr)->radius();
}

void QRadialGradient_SetCenter(void* ptr, void* center)
{
	static_cast<QRadialGradient*>(ptr)->setCenter(*static_cast<QPointF*>(center));
}

void QRadialGradient_SetCenter2(void* ptr, double x, double y)
{
	static_cast<QRadialGradient*>(ptr)->setCenter(x, y);
}

void QRadialGradient_SetCenterRadius(void* ptr, double radius)
{
	static_cast<QRadialGradient*>(ptr)->setCenterRadius(radius);
}

void QRadialGradient_SetFocalPoint(void* ptr, void* focalPoint)
{
	static_cast<QRadialGradient*>(ptr)->setFocalPoint(*static_cast<QPointF*>(focalPoint));
}

void QRadialGradient_SetFocalPoint2(void* ptr, double x, double y)
{
	static_cast<QRadialGradient*>(ptr)->setFocalPoint(x, y);
}

void QRadialGradient_SetFocalRadius(void* ptr, double radius)
{
	static_cast<QRadialGradient*>(ptr)->setFocalRadius(radius);
}

void QRadialGradient_SetRadius(void* ptr, double radius)
{
	static_cast<QRadialGradient*>(ptr)->setRadius(radius);
}

class MyQRasterWindow: public QRasterWindow
{
public:
	MyQRasterWindow(QWindow *parent = Q_NULLPTR) : QRasterWindow(parent) {QRasterWindow_QRasterWindow_QRegisterMetaType();};
	void paintEvent(QPaintEvent * event) { callbackQPaintDeviceWindow_PaintEvent(this, event); };
	void update() { callbackQPaintDeviceWindow_Update3(this); };
	void Signal_ActiveChanged() { callbackQWindow_ActiveChanged(this); };
	void alert(int msec) { callbackQWindow_Alert(this, msec); };
	bool close() { return callbackQWindow_Close(this) != 0; };
	void Signal_ContentOrientationChanged(Qt::ScreenOrientation orientation) { callbackQWindow_ContentOrientationChanged(this, orientation); };
	bool event(QEvent * ev) { return callbackQWindow_Event(this, ev) != 0; };
	void exposeEvent(QExposeEvent * ev) { callbackQWindow_ExposeEvent(this, ev); };
	void focusInEvent(QFocusEvent * ev) { callbackQWindow_FocusInEvent(this, ev); };
	QObject * focusObject() const { return static_cast<QObject*>(callbackQWindow_FocusObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_FocusObjectChanged(QObject * object) { callbackQWindow_FocusObjectChanged(this, object); };
	void focusOutEvent(QFocusEvent * ev) { callbackQWindow_FocusOutEvent(this, ev); };
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQWindow_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_HeightChanged(int arg) { callbackQWindow_HeightChanged(this, arg); };
	void hide() { callbackQWindow_Hide(this); };
	void hideEvent(QHideEvent * ev) { callbackQWindow_HideEvent(this, ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQWindow_KeyPressEvent(this, ev); };
	void keyReleaseEvent(QKeyEvent * ev) { callbackQWindow_KeyReleaseEvent(this, ev); };
	void lower() { callbackQWindow_Lower(this); };
	void Signal_MaximumHeightChanged(int arg) { callbackQWindow_MaximumHeightChanged(this, arg); };
	void Signal_MaximumWidthChanged(int arg) { callbackQWindow_MaximumWidthChanged(this, arg); };
	void Signal_MinimumHeightChanged(int arg) { callbackQWindow_MinimumHeightChanged(this, arg); };
	void Signal_MinimumWidthChanged(int arg) { callbackQWindow_MinimumWidthChanged(this, arg); };
	void Signal_ModalityChanged(Qt::WindowModality modality) { callbackQWindow_ModalityChanged(this, modality); };
	void mouseDoubleClickEvent(QMouseEvent * ev) { callbackQWindow_MouseDoubleClickEvent(this, ev); };
	void mouseMoveEvent(QMouseEvent * ev) { callbackQWindow_MouseMoveEvent(this, ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQWindow_MousePressEvent(this, ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQWindow_MouseReleaseEvent(this, ev); };
	void moveEvent(QMoveEvent * ev) { callbackQWindow_MoveEvent(this, ev); };
	bool nativeEvent(const QByteArray & eventType, void * message, long * result) { return callbackQWindow_NativeEvent(this, const_cast<QByteArray*>(&eventType), message, result) != 0; };
	void Signal_OpacityChanged(qreal opacity) { callbackQWindow_OpacityChanged(this, opacity); };
	void raise() { callbackQWindow_Raise(this); };
	void requestActivate() { callbackQWindow_RequestActivate(this); };
	void requestUpdate() { callbackQWindow_RequestUpdate(this); };
	void resizeEvent(QResizeEvent * ev) { callbackQWindow_ResizeEvent(this, ev); };
	void Signal_ScreenChanged(QScreen * screen) { callbackQWindow_ScreenChanged(this, screen); };
	void setGeometry(int posx, int posy, int w, int h) { callbackQWindow_SetGeometry(this, posx, posy, w, h); };
	void setGeometry(const QRect & rect) { callbackQWindow_SetGeometry2(this, const_cast<QRect*>(&rect)); };
	void setHeight(int arg) { callbackQWindow_SetHeight(this, arg); };
	void setMaximumHeight(int h) { callbackQWindow_SetMaximumHeight(this, h); };
	void setMaximumWidth(int w) { callbackQWindow_SetMaximumWidth(this, w); };
	void setMinimumHeight(int h) { callbackQWindow_SetMinimumHeight(this, h); };
	void setMinimumWidth(int w) { callbackQWindow_SetMinimumWidth(this, w); };
	void setTitle(const QString & vqs) { QByteArray* tda39a3 = new QByteArray(vqs.toUtf8()); QtGui_PackedString vqsPacked = { const_cast<char*>(tda39a3->prepend("WHITESPACE").constData()+10), tda39a3->size()-10, tda39a3 };callbackQWindow_SetTitle(this, vqsPacked); };
	void setVisible(bool visible) { callbackQWindow_SetVisible(this, visible); };
	void setWidth(int arg) { callbackQWindow_SetWidth(this, arg); };
	void setX(int arg) { callbackQWindow_SetX(this, arg); };
	void setY(int arg) { callbackQWindow_SetY(this, arg); };
	void show() { callbackQWindow_Show(this); };
	void showEvent(QShowEvent * ev) { callbackQWindow_ShowEvent(this, ev); };
	void showFullScreen() { callbackQWindow_ShowFullScreen(this); };
	void showMaximized() { callbackQWindow_ShowMaximized(this); };
	void showMinimized() { callbackQWindow_ShowMinimized(this); };
	void showNormal() { callbackQWindow_ShowNormal(this); };
	QSize size() const { return *static_cast<QSize*>(callbackQWindow_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	bool startSystemMove() { return callbackQWindow_StartSystemMove(this) != 0; };
	bool startSystemResize(Qt::Edges edges) { return callbackQWindow_StartSystemResize(this, edges) != 0; };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQWindow_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	void tabletEvent(QTabletEvent * ev) { callbackQWindow_TabletEvent(this, ev); };
	void touchEvent(QTouchEvent * ev) { callbackQWindow_TouchEvent(this, ev); };
	void Signal_VisibilityChanged(QWindow::Visibility visibility) { callbackQWindow_VisibilityChanged(this, visibility); };
	void Signal_VisibleChanged(bool arg) { callbackQWindow_VisibleChanged(this, arg); };
	void wheelEvent(QWheelEvent * ev) { callbackQWindow_WheelEvent(this, ev); };
	void Signal_WidthChanged(int arg) { callbackQWindow_WidthChanged(this, arg); };
	void Signal_WindowStateChanged(Qt::WindowState windowState) { callbackQWindow_WindowStateChanged(this, windowState); };
	void Signal_WindowTitleChanged(const QString & title) { QByteArray* t3c6de1 = new QByteArray(title.toUtf8()); QtGui_PackedString titlePacked = { const_cast<char*>(t3c6de1->prepend("WHITESPACE").constData()+10), t3c6de1->size()-10, t3c6de1 };callbackQWindow_WindowTitleChanged(this, titlePacked); };
	void Signal_XChanged(int arg) { callbackQWindow_XChanged(this, arg); };
	void Signal_YChanged(int arg) { callbackQWindow_YChanged(this, arg); };
	void childEvent(QChildEvent * event) { callbackQWindow_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQWindow_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQWindow_CustomEvent(this, event); };
	void deleteLater() { callbackQWindow_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQWindow_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQWindow_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQWindow_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQWindow_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQWindow_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQWindow_TimerEvent(this, event); };
	int metric(QPaintDevice::PaintDeviceMetric metric) const { return callbackQPaintDevice_Metric(const_cast<void*>(static_cast<const void*>(this)), metric); };
	QPaintEngine * paintEngine() const { return static_cast<QPaintEngine*>(callbackQPaintDeviceWindow_PaintEngine(const_cast<void*>(static_cast<const void*>(this)))); };
};

Q_DECLARE_METATYPE(QRasterWindow*)
Q_DECLARE_METATYPE(MyQRasterWindow*)

int QRasterWindow_QRasterWindow_QRegisterMetaType(){qRegisterMetaType<QRasterWindow*>(); return qRegisterMetaType<MyQRasterWindow*>();}

void* QRasterWindow_NewQRasterWindow(void* parent)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRasterWindow(static_cast<QPaintDeviceWindow*>(parent));
	} else {
		return new MyQRasterWindow(static_cast<QWindow*>(parent));
	}
}

Q_DECLARE_METATYPE(QRawFont)
Q_DECLARE_METATYPE(QRawFont*)
void* QRawFont_NewQRawFont()
{
	return new QRawFont();
}

void* QRawFont_NewQRawFont2(struct QtGui_PackedString fileName, double pixelSize, long long hintingPreference)
{
	return new QRawFont(QString::fromUtf8(fileName.data, fileName.len), pixelSize, static_cast<QFont::HintingPreference>(hintingPreference));
}

void* QRawFont_NewQRawFont3(void* fontData, double pixelSize, long long hintingPreference)
{
	return new QRawFont(*static_cast<QByteArray*>(fontData), pixelSize, static_cast<QFont::HintingPreference>(hintingPreference));
}

void* QRawFont_NewQRawFont4(void* other)
{
	return new QRawFont(*static_cast<QRawFont*>(other));
}

struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes(void* ptr, void* glyphIndexes, long long layoutFlags)
{
	return ({ QVector<QPointF>* tmpValue120c50 = new QVector<QPointF>(static_cast<QRawFont*>(ptr)->advancesForGlyphIndexes(*static_cast<QVector<quint32>*>(glyphIndexes), static_cast<QRawFont::LayoutFlag>(layoutFlags))); QtGui_PackedList { tmpValue120c50, tmpValue120c50->size() }; });
}

struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes2(void* ptr, void* glyphIndexes)
{
	return ({ QVector<QPointF>* tmpValuea4108b = new QVector<QPointF>(static_cast<QRawFont*>(ptr)->advancesForGlyphIndexes(*static_cast<QVector<quint32>*>(glyphIndexes))); QtGui_PackedList { tmpValuea4108b, tmpValuea4108b->size() }; });
}

char QRawFont_AdvancesForGlyphIndexes3(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs)
{
	return static_cast<QRawFont*>(ptr)->advancesForGlyphIndexes(const_cast<const quint32*>(&glyphIndexes), static_cast<QPointF*>(advances), numGlyphs);
}

char QRawFont_AdvancesForGlyphIndexes4(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs, long long layoutFlags)
{
	return static_cast<QRawFont*>(ptr)->advancesForGlyphIndexes(const_cast<const quint32*>(&glyphIndexes), static_cast<QPointF*>(advances), numGlyphs, static_cast<QRawFont::LayoutFlag>(layoutFlags));
}

void* QRawFont_AlphaMapForGlyph(void* ptr, unsigned int glyphIndex, long long antialiasingType, void* transform)
{
	return new QImage(static_cast<QRawFont*>(ptr)->alphaMapForGlyph(glyphIndex, static_cast<QRawFont::AntialiasingType>(antialiasingType), *static_cast<QTransform*>(transform)));
}

double QRawFont_Ascent(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->ascent();
}

double QRawFont_AverageCharWidth(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->averageCharWidth();
}

void* QRawFont_BoundingRect(void* ptr, unsigned int glyphIndex)
{
	return ({ QRectF tmpValue = static_cast<QRawFont*>(ptr)->boundingRect(glyphIndex); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

double QRawFont_CapHeight(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->capHeight();
}

double QRawFont_Descent(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->descent();
}

struct QtGui_PackedString QRawFont_FamilyName(void* ptr)
{
	return ({ QByteArray* t8c920d = new QByteArray(static_cast<QRawFont*>(ptr)->familyName().toUtf8()); QtGui_PackedString { const_cast<char*>(t8c920d->prepend("WHITESPACE").constData()+10), t8c920d->size()-10, t8c920d }; });
}

void* QRawFont_FontTable(void* ptr, char* tagName)
{
	return new QByteArray(static_cast<QRawFont*>(ptr)->fontTable(const_cast<const char*>(tagName)));
}

void* QRawFont_QRawFont_FromFont(void* font, long long writingSystem)
{
	return new QRawFont(QRawFont::fromFont(*static_cast<QFont*>(font), static_cast<QFontDatabase::WritingSystem>(writingSystem)));
}

char QRawFont_GlyphIndexesForChars(void* ptr, void* chars, int numChars, unsigned int glyphIndexes, int numGlyphs)
{
	return static_cast<QRawFont*>(ptr)->glyphIndexesForChars(static_cast<QChar*>(chars), numChars, &glyphIndexes, &numGlyphs);
}

struct QtGui_PackedList QRawFont_GlyphIndexesForString(void* ptr, struct QtGui_PackedString text)
{
	return ({ QVector<quint32>* tmpValuefd5581 = new QVector<quint32>(static_cast<QRawFont*>(ptr)->glyphIndexesForString(QString::fromUtf8(text.data, text.len))); QtGui_PackedList { tmpValuefd5581, tmpValuefd5581->size() }; });
}

long long QRawFont_HintingPreference(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->hintingPreference();
}

char QRawFont_IsValid(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->isValid();
}

double QRawFont_Leading(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->leading();
}

double QRawFont_LineThickness(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->lineThickness();
}

void QRawFont_LoadFromData(void* ptr, void* fontData, double pixelSize, long long hintingPreference)
{
	static_cast<QRawFont*>(ptr)->loadFromData(*static_cast<QByteArray*>(fontData), pixelSize, static_cast<QFont::HintingPreference>(hintingPreference));
}

void QRawFont_LoadFromFile(void* ptr, struct QtGui_PackedString fileName, double pixelSize, long long hintingPreference)
{
	static_cast<QRawFont*>(ptr)->loadFromFile(QString::fromUtf8(fileName.data, fileName.len), pixelSize, static_cast<QFont::HintingPreference>(hintingPreference));
}

double QRawFont_MaxCharWidth(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->maxCharWidth();
}

void* QRawFont_PathForGlyph(void* ptr, unsigned int glyphIndex)
{
	return new QPainterPath(static_cast<QRawFont*>(ptr)->pathForGlyph(glyphIndex));
}

double QRawFont_PixelSize(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->pixelSize();
}

void QRawFont_SetPixelSize(void* ptr, double pixelSize)
{
	static_cast<QRawFont*>(ptr)->setPixelSize(pixelSize);
}

long long QRawFont_Style(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->style();
}

struct QtGui_PackedString QRawFont_StyleName(void* ptr)
{
	return ({ QByteArray* t6b9c52 = new QByteArray(static_cast<QRawFont*>(ptr)->styleName().toUtf8()); QtGui_PackedString { const_cast<char*>(t6b9c52->prepend("WHITESPACE").constData()+10), t6b9c52->size()-10, t6b9c52 }; });
}

struct QtGui_PackedList QRawFont_SupportedWritingSystems(void* ptr)
{
	return ({ QList<QFontDatabase::WritingSystem>* tmpValue90f470 = new QList<QFontDatabase::WritingSystem>(static_cast<QRawFont*>(ptr)->supportedWritingSystems()); QtGui_PackedList { tmpValue90f470, tmpValue90f470->size() }; });
}

char QRawFont_SupportsCharacter(void* ptr, void* character)
{
	return static_cast<QRawFont*>(ptr)->supportsCharacter(*static_cast<QChar*>(character));
}

char QRawFont_SupportsCharacter2(void* ptr, unsigned int ucs4)
{
	return static_cast<QRawFont*>(ptr)->supportsCharacter(ucs4);
}

void QRawFont_Swap(void* ptr, void* other)
{
	static_cast<QRawFont*>(ptr)->swap(*static_cast<QRawFont*>(other));
}

double QRawFont_UnderlinePosition(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->underlinePosition();
}

double QRawFont_UnitsPerEm(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->unitsPerEm();
}

int QRawFont_Weight(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->weight();
}

double QRawFont_XHeight(void* ptr)
{
	return static_cast<QRawFont*>(ptr)->xHeight();
}

void QRawFont_DestroyQRawFont(void* ptr)
{
	static_cast<QRawFont*>(ptr)->~QRawFont();
}

void* QRawFont___advancesForGlyphIndexes_atList(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QRawFont___advancesForGlyphIndexes_setList(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QRawFont___advancesForGlyphIndexes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList(void* ptr, int i)
{
	return ({quint32 tmp = static_cast<QVector<quint32>*>(ptr)->at(i); if (i == static_cast<QVector<quint32>*>(ptr)->size()-1) { static_cast<QVector<quint32>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<quint32>*>(ptr)->append(i);
}

void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<quint32>();
}

void* QRawFont___advancesForGlyphIndexes_atList2(void* ptr, int i)
{
	return ({ QPointF tmpValue = ({QPointF tmp = static_cast<QVector<QPointF>*>(ptr)->at(i); if (i == static_cast<QVector<QPointF>*>(ptr)->size()-1) { static_cast<QVector<QPointF>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void QRawFont___advancesForGlyphIndexes_setList2(void* ptr, void* i)
{
	static_cast<QVector<QPointF>*>(ptr)->append(*static_cast<QPointF*>(i));
}

void* QRawFont___advancesForGlyphIndexes_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QPointF>();
}

unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList2(void* ptr, int i)
{
	return ({quint32 tmp = static_cast<QVector<quint32>*>(ptr)->at(i); if (i == static_cast<QVector<quint32>*>(ptr)->size()-1) { static_cast<QVector<quint32>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList2(void* ptr, unsigned int i)
{
	static_cast<QVector<quint32>*>(ptr)->append(i);
}

void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<quint32>();
}

unsigned int QRawFont___glyphIndexesForString_atList(void* ptr, int i)
{
	return ({quint32 tmp = static_cast<QVector<quint32>*>(ptr)->at(i); if (i == static_cast<QVector<quint32>*>(ptr)->size()-1) { static_cast<QVector<quint32>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QRawFont___glyphIndexesForString_setList(void* ptr, unsigned int i)
{
	static_cast<QVector<quint32>*>(ptr)->append(i);
}

void* QRawFont___glyphIndexesForString_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<quint32>();
}

long long QRawFont___supportedWritingSystems_atList(void* ptr, int i)
{
	return ({QFontDatabase::WritingSystem tmp = static_cast<QList<QFontDatabase::WritingSystem>*>(ptr)->at(i); if (i == static_cast<QList<QFontDatabase::WritingSystem>*>(ptr)->size()-1) { static_cast<QList<QFontDatabase::WritingSystem>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QRawFont___supportedWritingSystems_setList(void* ptr, long long i)
{
	static_cast<QList<QFontDatabase::WritingSystem>*>(ptr)->append(static_cast<QFontDatabase::WritingSystem>(i));
}

void* QRawFont___supportedWritingSystems_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QFontDatabase::WritingSystem>();
}

class MyQRegExpValidator: public QRegExpValidator
{
public:
	MyQRegExpValidator(QObject *parent = Q_NULLPTR) : QRegExpValidator(parent) {QRegExpValidator_QRegExpValidator_QRegisterMetaType();};
	MyQRegExpValidator(const QRegExp &rx, QObject *parent = Q_NULLPTR) : QRegExpValidator(rx, parent) {QRegExpValidator_QRegExpValidator_QRegisterMetaType();};
	void Signal_RegExpChanged(const QRegExp & regExp) { callbackQRegExpValidator_RegExpChanged(this, const_cast<QRegExp*>(&regExp)); };
	QValidator::State validate(QString & input, int & pos) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };return static_cast<QValidator::State>(callbackQRegExpValidator_Validate(const_cast<void*>(static_cast<const void*>(this)), inputPacked, pos)); };
	 ~MyQRegExpValidator() { callbackQRegExpValidator_DestroyQRegExpValidator(this); };
	void Signal_Changed() { callbackQValidator_Changed(this); };
	void fixup(QString & input) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };callbackQValidator_Fixup(const_cast<void*>(static_cast<const void*>(this)), inputPacked); };
	void childEvent(QChildEvent * event) { callbackQValidator_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQValidator_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQValidator_CustomEvent(this, event); };
	void deleteLater() { callbackQValidator_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQValidator_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQValidator_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQValidator_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQValidator_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQValidator_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQValidator_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQValidator_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QRegExpValidator*)
Q_DECLARE_METATYPE(MyQRegExpValidator*)

int QRegExpValidator_QRegExpValidator_QRegisterMetaType(){qRegisterMetaType<QRegExpValidator*>(); return qRegisterMetaType<MyQRegExpValidator*>();}

void* QRegExpValidator_NewQRegExpValidator(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(static_cast<QWindow*>(parent));
	} else {
		return new MyQRegExpValidator(static_cast<QObject*>(parent));
	}
}

void* QRegExpValidator_NewQRegExpValidator2(void* rx, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QWindow*>(parent));
	} else {
		return new MyQRegExpValidator(*static_cast<QRegExp*>(rx), static_cast<QObject*>(parent));
	}
}

void* QRegExpValidator_RegExp(void* ptr)
{
	return const_cast<QRegExp*>(&static_cast<QRegExpValidator*>(ptr)->regExp());
}

void QRegExpValidator_ConnectRegExpChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QRegExpValidator*>(ptr), static_cast<void (QRegExpValidator::*)(const QRegExp &)>(&QRegExpValidator::regExpChanged), static_cast<MyQRegExpValidator*>(ptr), static_cast<void (MyQRegExpValidator::*)(const QRegExp &)>(&MyQRegExpValidator::Signal_RegExpChanged), static_cast<Qt::ConnectionType>(t));
}

void QRegExpValidator_DisconnectRegExpChanged(void* ptr)
{
	QObject::disconnect(static_cast<QRegExpValidator*>(ptr), static_cast<void (QRegExpValidator::*)(const QRegExp &)>(&QRegExpValidator::regExpChanged), static_cast<MyQRegExpValidator*>(ptr), static_cast<void (MyQRegExpValidator::*)(const QRegExp &)>(&MyQRegExpValidator::Signal_RegExpChanged));
}

void QRegExpValidator_RegExpChanged(void* ptr, void* regExp)
{
	static_cast<QRegExpValidator*>(ptr)->regExpChanged(*static_cast<QRegExp*>(regExp));
}

void QRegExpValidator_SetRegExp(void* ptr, void* rx)
{
	static_cast<QRegExpValidator*>(ptr)->setRegExp(*static_cast<QRegExp*>(rx));
}

long long QRegExpValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos)
{
	return static_cast<QRegExpValidator*>(ptr)->validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

long long QRegExpValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos)
{
		return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

void QRegExpValidator_DestroyQRegExpValidator(void* ptr)
{
	static_cast<QRegExpValidator*>(ptr)->~QRegExpValidator();
}

void QRegExpValidator_DestroyQRegExpValidatorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QRegion)
Q_DECLARE_METATYPE(QRegion*)
void* QRegion_NewQRegion()
{
	return new QRegion();
}

void* QRegion_NewQRegion2(int x, int y, int w, int h, long long t)
{
	return new QRegion(x, y, w, h, static_cast<QRegion::RegionType>(t));
}

void* QRegion_NewQRegion3(void* r, long long t)
{
	return new QRegion(*static_cast<QRect*>(r), static_cast<QRegion::RegionType>(t));
}

void* QRegion_NewQRegion4(void* a, long long fillRule)
{
	return new QRegion(*static_cast<QPolygon*>(a), static_cast<Qt::FillRule>(fillRule));
}

void* QRegion_NewQRegion5(void* r)
{
	return new QRegion(*static_cast<QRegion*>(r));
}

void* QRegion_NewQRegion6(void* other)
{
	return new QRegion(*static_cast<QRegion*>(other));
}

void* QRegion_NewQRegion7(void* bm)
{
	return new QRegion(*static_cast<QBitmap*>(bm));
}

void* QRegion_BoundingRect(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QRegion*>(ptr)->boundingRect(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QRegion_Contains(void* ptr, void* p)
{
	return static_cast<QRegion*>(ptr)->contains(*static_cast<QPoint*>(p));
}

char QRegion_Contains2(void* ptr, void* r)
{
	return static_cast<QRegion*>(ptr)->contains(*static_cast<QRect*>(r));
}

void* QRegion_Intersected(void* ptr, void* r)
{
	return new QRegion(static_cast<QRegion*>(ptr)->intersected(*static_cast<QRegion*>(r)));
}

void* QRegion_Intersected2(void* ptr, void* rect)
{
	return new QRegion(static_cast<QRegion*>(ptr)->intersected(*static_cast<QRect*>(rect)));
}

char QRegion_Intersects(void* ptr, void* region)
{
	return static_cast<QRegion*>(ptr)->intersects(*static_cast<QRegion*>(region));
}

char QRegion_Intersects2(void* ptr, void* rect)
{
	return static_cast<QRegion*>(ptr)->intersects(*static_cast<QRect*>(rect));
}

char QRegion_IsEmpty(void* ptr)
{
	return static_cast<QRegion*>(ptr)->isEmpty();
}

char QRegion_IsNull(void* ptr)
{
	return static_cast<QRegion*>(ptr)->isNull();
}

int QRegion_RectCount(void* ptr)
{
	return static_cast<QRegion*>(ptr)->rectCount();
}

void QRegion_SetRects(void* ptr, void* rects, int number)
{
	static_cast<QRegion*>(ptr)->setRects(static_cast<QRect*>(rects), number);
}

void* QRegion_Subtracted(void* ptr, void* r)
{
	return new QRegion(static_cast<QRegion*>(ptr)->subtracted(*static_cast<QRegion*>(r)));
}

void QRegion_Swap(void* ptr, void* other)
{
	static_cast<QRegion*>(ptr)->swap(*static_cast<QRegion*>(other));
}

void QRegion_Translate(void* ptr, int dx, int dy)
{
	static_cast<QRegion*>(ptr)->translate(dx, dy);
}

void QRegion_Translate2(void* ptr, void* point)
{
	static_cast<QRegion*>(ptr)->translate(*static_cast<QPoint*>(point));
}

void* QRegion_Translated(void* ptr, int dx, int dy)
{
	return new QRegion(static_cast<QRegion*>(ptr)->translated(dx, dy));
}

void* QRegion_Translated2(void* ptr, void* p)
{
	return new QRegion(static_cast<QRegion*>(ptr)->translated(*static_cast<QPoint*>(p)));
}

void* QRegion_United(void* ptr, void* r)
{
	return new QRegion(static_cast<QRegion*>(ptr)->united(*static_cast<QRegion*>(r)));
}

void* QRegion_United2(void* ptr, void* rect)
{
	return new QRegion(static_cast<QRegion*>(ptr)->united(*static_cast<QRect*>(rect)));
}

void* QRegion_Xored(void* ptr, void* r)
{
	return new QRegion(static_cast<QRegion*>(ptr)->xored(*static_cast<QRegion*>(r)));
}

void* QRegion___rects_atList(void* ptr, int i)
{
	return ({ QRect tmpValue = ({QRect tmp = static_cast<QVector<QRect>*>(ptr)->at(i); if (i == static_cast<QVector<QRect>*>(ptr)->size()-1) { static_cast<QVector<QRect>*>(ptr)->~QVector(); free(ptr); }; tmp; }); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QRegion___rects_setList(void* ptr, void* i)
{
	static_cast<QVector<QRect>*>(ptr)->append(*static_cast<QRect*>(i));
}

void* QRegion___rects_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QRect>();
}

class MyQRegularExpressionValidator: public QRegularExpressionValidator
{
public:
	MyQRegularExpressionValidator(QObject *parent = Q_NULLPTR) : QRegularExpressionValidator(parent) {QRegularExpressionValidator_QRegularExpressionValidator_QRegisterMetaType();};
	MyQRegularExpressionValidator(const QRegularExpression &re, QObject *parent = Q_NULLPTR) : QRegularExpressionValidator(re, parent) {QRegularExpressionValidator_QRegularExpressionValidator_QRegisterMetaType();};
	void Signal_RegularExpressionChanged(const QRegularExpression & re) { callbackQRegularExpressionValidator_RegularExpressionChanged(this, const_cast<QRegularExpression*>(&re)); };
	void setRegularExpression(const QRegularExpression & re) { callbackQRegularExpressionValidator_SetRegularExpression(this, const_cast<QRegularExpression*>(&re)); };
	QValidator::State validate(QString & input, int & pos) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };return static_cast<QValidator::State>(callbackQRegularExpressionValidator_Validate(const_cast<void*>(static_cast<const void*>(this)), inputPacked, pos)); };
	 ~MyQRegularExpressionValidator() { callbackQRegularExpressionValidator_DestroyQRegularExpressionValidator(this); };
	void Signal_Changed() { callbackQValidator_Changed(this); };
	void fixup(QString & input) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };callbackQValidator_Fixup(const_cast<void*>(static_cast<const void*>(this)), inputPacked); };
	void childEvent(QChildEvent * event) { callbackQValidator_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQValidator_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQValidator_CustomEvent(this, event); };
	void deleteLater() { callbackQValidator_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQValidator_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQValidator_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQValidator_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQValidator_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQValidator_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQValidator_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQValidator_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QRegularExpressionValidator*)
Q_DECLARE_METATYPE(MyQRegularExpressionValidator*)

int QRegularExpressionValidator_QRegularExpressionValidator_QRegisterMetaType(){qRegisterMetaType<QRegularExpressionValidator*>(); return qRegisterMetaType<MyQRegularExpressionValidator*>();}

void* QRegularExpressionValidator_NewQRegularExpressionValidator(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(static_cast<QWindow*>(parent));
	} else {
		return new MyQRegularExpressionValidator(static_cast<QObject*>(parent));
	}
}

void* QRegularExpressionValidator_NewQRegularExpressionValidator2(void* re, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QWindow*>(parent));
	} else {
		return new MyQRegularExpressionValidator(*static_cast<QRegularExpression*>(re), static_cast<QObject*>(parent));
	}
}

void* QRegularExpressionValidator_RegularExpression(void* ptr)
{
	return new QRegularExpression(static_cast<QRegularExpressionValidator*>(ptr)->regularExpression());
}

void QRegularExpressionValidator_ConnectRegularExpressionChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QRegularExpressionValidator*>(ptr), static_cast<void (QRegularExpressionValidator::*)(const QRegularExpression &)>(&QRegularExpressionValidator::regularExpressionChanged), static_cast<MyQRegularExpressionValidator*>(ptr), static_cast<void (MyQRegularExpressionValidator::*)(const QRegularExpression &)>(&MyQRegularExpressionValidator::Signal_RegularExpressionChanged), static_cast<Qt::ConnectionType>(t));
}

void QRegularExpressionValidator_DisconnectRegularExpressionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QRegularExpressionValidator*>(ptr), static_cast<void (QRegularExpressionValidator::*)(const QRegularExpression &)>(&QRegularExpressionValidator::regularExpressionChanged), static_cast<MyQRegularExpressionValidator*>(ptr), static_cast<void (MyQRegularExpressionValidator::*)(const QRegularExpression &)>(&MyQRegularExpressionValidator::Signal_RegularExpressionChanged));
}

void QRegularExpressionValidator_RegularExpressionChanged(void* ptr, void* re)
{
	static_cast<QRegularExpressionValidator*>(ptr)->regularExpressionChanged(*static_cast<QRegularExpression*>(re));
}

void QRegularExpressionValidator_SetRegularExpression(void* ptr, void* re)
{
	QMetaObject::invokeMethod(static_cast<QRegularExpressionValidator*>(ptr), "setRegularExpression", Q_ARG(const QRegularExpression, *static_cast<QRegularExpression*>(re)));
}

void QRegularExpressionValidator_SetRegularExpressionDefault(void* ptr, void* re)
{
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::setRegularExpression(*static_cast<QRegularExpression*>(re));
}

long long QRegularExpressionValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos)
{
	return static_cast<QRegularExpressionValidator*>(ptr)->validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

long long QRegularExpressionValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos)
{
		return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

void QRegularExpressionValidator_DestroyQRegularExpressionValidator(void* ptr)
{
	static_cast<QRegularExpressionValidator*>(ptr)->~QRegularExpressionValidator();
}

void QRegularExpressionValidator_DestroyQRegularExpressionValidatorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQResizeEvent: public QResizeEvent
{
public:
	MyQResizeEvent(const QSize &size, const QSize &oldSize) : QResizeEvent(size, oldSize) {QResizeEvent_QResizeEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QResizeEvent*)
Q_DECLARE_METATYPE(MyQResizeEvent*)

int QResizeEvent_QResizeEvent_QRegisterMetaType(){qRegisterMetaType<QResizeEvent*>(); return qRegisterMetaType<MyQResizeEvent*>();}

void* QResizeEvent_NewQResizeEvent(void* size, void* oldSize)
{
	return new MyQResizeEvent(*static_cast<QSize*>(size), *static_cast<QSize*>(oldSize));
}

void* QResizeEvent_OldSize(void* ptr)
{
	return const_cast<QSize*>(&static_cast<QResizeEvent*>(ptr)->oldSize());
}

void* QResizeEvent_Size(void* ptr)
{
	return const_cast<QSize*>(&static_cast<QResizeEvent*>(ptr)->size());
}

unsigned short QRgba64_Alpha(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->alpha();
}

struct QtGui_PackedString QRgba64_Alpha8(void* ptr)
{
	return ({ quint8 pret13de7c = static_cast<QRgba64*>(ptr)->alpha8(); char* t13de7c = static_cast<char*>(static_cast<void*>(&pret13de7c)); QtGui_PackedString { t13de7c, -1, NULL }; });
}

unsigned short QRgba64_Blue(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->blue();
}

struct QtGui_PackedString QRgba64_Blue8(void* ptr)
{
	return ({ quint8 pret2116e7 = static_cast<QRgba64*>(ptr)->blue8(); char* t2116e7 = static_cast<char*>(static_cast<void*>(&pret2116e7)); QtGui_PackedString { t2116e7, -1, NULL }; });
}

unsigned short QRgba64_Green(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->green();
}

struct QtGui_PackedString QRgba64_Green8(void* ptr)
{
	return ({ quint8 pret72b7b3 = static_cast<QRgba64*>(ptr)->green8(); char* t72b7b3 = static_cast<char*>(static_cast<void*>(&pret72b7b3)); QtGui_PackedString { t72b7b3, -1, NULL }; });
}

char QRgba64_IsOpaque(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->isOpaque();
}

char QRgba64_IsTransparent(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->isTransparent();
}

unsigned short QRgba64_Red(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->red();
}

struct QtGui_PackedString QRgba64_Red8(void* ptr)
{
	return ({ quint8 pretd7bc71 = static_cast<QRgba64*>(ptr)->red8(); char* td7bc71 = static_cast<char*>(static_cast<void*>(&pretd7bc71)); QtGui_PackedString { td7bc71, -1, NULL }; });
}

void QRgba64_SetAlpha(void* ptr, unsigned short alpha)
{
	static_cast<QRgba64*>(ptr)->setAlpha(alpha);
}

void QRgba64_SetBlue(void* ptr, unsigned short blue)
{
	static_cast<QRgba64*>(ptr)->setBlue(blue);
}

void QRgba64_SetGreen(void* ptr, unsigned short green)
{
	static_cast<QRgba64*>(ptr)->setGreen(green);
}

void QRgba64_SetRed(void* ptr, unsigned short red)
{
	static_cast<QRgba64*>(ptr)->setRed(red);
}

unsigned int QRgba64_ToArgb32(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->toArgb32();
}

unsigned short QRgba64_ToRgb16(void* ptr)
{
	return static_cast<QRgba64*>(ptr)->toRgb16();
}

class MyQScreen: public QScreen
{
public:
	void Signal_AvailableGeometryChanged(const QRect & geometry) { callbackQScreen_AvailableGeometryChanged(this, const_cast<QRect*>(&geometry)); };
	void Signal_GeometryChanged(const QRect & geometry) { callbackQScreen_GeometryChanged(this, const_cast<QRect*>(&geometry)); };
	void Signal_LogicalDotsPerInchChanged(qreal dpi) { callbackQScreen_LogicalDotsPerInchChanged(this, dpi); };
	void Signal_OrientationChanged(Qt::ScreenOrientation orientation) { callbackQScreen_OrientationChanged(this, orientation); };
	void Signal_PhysicalDotsPerInchChanged(qreal dpi) { callbackQScreen_PhysicalDotsPerInchChanged(this, dpi); };
	void Signal_PhysicalSizeChanged(const QSizeF & size) { callbackQScreen_PhysicalSizeChanged(this, const_cast<QSizeF*>(&size)); };
	void Signal_PrimaryOrientationChanged(Qt::ScreenOrientation orientation) { callbackQScreen_PrimaryOrientationChanged(this, orientation); };
	void Signal_RefreshRateChanged(qreal refreshRate) { callbackQScreen_RefreshRateChanged(this, refreshRate); };
	void Signal_VirtualGeometryChanged(const QRect & rect) { callbackQScreen_VirtualGeometryChanged(this, const_cast<QRect*>(&rect)); };
	 ~MyQScreen() { callbackQScreen_DestroyQScreen(this); };
	void childEvent(QChildEvent * event) { callbackQScreen_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQScreen_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQScreen_CustomEvent(this, event); };
	void deleteLater() { callbackQScreen_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQScreen_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQScreen_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQScreen_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQScreen_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQScreen_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQScreen_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQScreen_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QScreen*)
Q_DECLARE_METATYPE(MyQScreen*)

int QScreen_QScreen_QRegisterMetaType(){qRegisterMetaType<QScreen*>(); return qRegisterMetaType<MyQScreen*>();}

int QScreen_AngleBetween(void* ptr, long long a, long long b)
{
	return static_cast<QScreen*>(ptr)->angleBetween(static_cast<Qt::ScreenOrientation>(a), static_cast<Qt::ScreenOrientation>(b));
}

void* QScreen_AvailableGeometry(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QScreen*>(ptr)->availableGeometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QScreen_ConnectAvailableGeometryChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::availableGeometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_AvailableGeometryChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectAvailableGeometryChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::availableGeometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_AvailableGeometryChanged));
}

void QScreen_AvailableGeometryChanged(void* ptr, void* geometry)
{
	static_cast<QScreen*>(ptr)->availableGeometryChanged(*static_cast<QRect*>(geometry));
}

void* QScreen_AvailableSize(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QScreen*>(ptr)->availableSize(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QScreen_AvailableVirtualGeometry(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QScreen*>(ptr)->availableVirtualGeometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QScreen_AvailableVirtualSize(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QScreen*>(ptr)->availableVirtualSize(); new QSize(tmpValue.width(), tmpValue.height()); });
}

int QScreen_Depth(void* ptr)
{
	return static_cast<QScreen*>(ptr)->depth();
}

double QScreen_DevicePixelRatio(void* ptr)
{
	return static_cast<QScreen*>(ptr)->devicePixelRatio();
}

void* QScreen_Geometry(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QScreen*>(ptr)->geometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QScreen_ConnectGeometryChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::geometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_GeometryChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectGeometryChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::geometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_GeometryChanged));
}

void QScreen_GeometryChanged(void* ptr, void* geometry)
{
	static_cast<QScreen*>(ptr)->geometryChanged(*static_cast<QRect*>(geometry));
}

void* QScreen_GrabWindow(void* ptr, uintptr_t window, int x, int y, int width, int height)
{
	return new QPixmap(static_cast<QScreen*>(ptr)->grabWindow(window, x, y, width, height));
}

char QScreen_IsLandscape(void* ptr, long long o)
{
	return static_cast<QScreen*>(ptr)->isLandscape(static_cast<Qt::ScreenOrientation>(o));
}

char QScreen_IsPortrait(void* ptr, long long o)
{
	return static_cast<QScreen*>(ptr)->isPortrait(static_cast<Qt::ScreenOrientation>(o));
}

double QScreen_LogicalDotsPerInch(void* ptr)
{
	return static_cast<QScreen*>(ptr)->logicalDotsPerInch();
}

void QScreen_ConnectLogicalDotsPerInchChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::logicalDotsPerInchChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_LogicalDotsPerInchChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectLogicalDotsPerInchChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::logicalDotsPerInchChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_LogicalDotsPerInchChanged));
}

void QScreen_LogicalDotsPerInchChanged(void* ptr, double dpi)
{
	static_cast<QScreen*>(ptr)->logicalDotsPerInchChanged(dpi);
}

double QScreen_LogicalDotsPerInchX(void* ptr)
{
	return static_cast<QScreen*>(ptr)->logicalDotsPerInchX();
}

double QScreen_LogicalDotsPerInchY(void* ptr)
{
	return static_cast<QScreen*>(ptr)->logicalDotsPerInchY();
}

struct QtGui_PackedString QScreen_Manufacturer(void* ptr)
{
	return ({ QByteArray* tb12da7 = new QByteArray(static_cast<QScreen*>(ptr)->manufacturer().toUtf8()); QtGui_PackedString { const_cast<char*>(tb12da7->prepend("WHITESPACE").constData()+10), tb12da7->size()-10, tb12da7 }; });
}

void* QScreen_MapBetween(void* ptr, long long a, long long b, void* rect)
{
	return ({ QRect tmpValue = static_cast<QScreen*>(ptr)->mapBetween(static_cast<Qt::ScreenOrientation>(a), static_cast<Qt::ScreenOrientation>(b), *static_cast<QRect*>(rect)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

struct QtGui_PackedString QScreen_Model(void* ptr)
{
#ifndef Q_OS_WIN
	return ({ QByteArray* t131f94 = new QByteArray(static_cast<QScreen*>(ptr)->model().toUtf8()); QtGui_PackedString { const_cast<char*>(t131f94->prepend("WHITESPACE").constData()+10), t131f94->size()-10, t131f94 }; });
#endif
}

struct QtGui_PackedString QScreen_Name(void* ptr)
{
	return ({ QByteArray* tc60f02 = new QByteArray(static_cast<QScreen*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(tc60f02->prepend("WHITESPACE").constData()+10), tc60f02->size()-10, tc60f02 }; });
}

long long QScreen_NativeOrientation(void* ptr)
{
	return static_cast<QScreen*>(ptr)->nativeOrientation();
}

long long QScreen_Orientation(void* ptr)
{
	return static_cast<QScreen*>(ptr)->orientation();
}

void QScreen_ConnectOrientationChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::ScreenOrientation>();
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(Qt::ScreenOrientation)>(&QScreen::orientationChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(Qt::ScreenOrientation)>(&MyQScreen::Signal_OrientationChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectOrientationChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(Qt::ScreenOrientation)>(&QScreen::orientationChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(Qt::ScreenOrientation)>(&MyQScreen::Signal_OrientationChanged));
}

void QScreen_OrientationChanged(void* ptr, long long orientation)
{
	static_cast<QScreen*>(ptr)->orientationChanged(static_cast<Qt::ScreenOrientation>(orientation));
}

long long QScreen_OrientationUpdateMask(void* ptr)
{
	return static_cast<QScreen*>(ptr)->orientationUpdateMask();
}

double QScreen_PhysicalDotsPerInch(void* ptr)
{
	return static_cast<QScreen*>(ptr)->physicalDotsPerInch();
}

void QScreen_ConnectPhysicalDotsPerInchChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::physicalDotsPerInchChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_PhysicalDotsPerInchChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectPhysicalDotsPerInchChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::physicalDotsPerInchChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_PhysicalDotsPerInchChanged));
}

void QScreen_PhysicalDotsPerInchChanged(void* ptr, double dpi)
{
	static_cast<QScreen*>(ptr)->physicalDotsPerInchChanged(dpi);
}

double QScreen_PhysicalDotsPerInchX(void* ptr)
{
	return static_cast<QScreen*>(ptr)->physicalDotsPerInchX();
}

double QScreen_PhysicalDotsPerInchY(void* ptr)
{
	return static_cast<QScreen*>(ptr)->physicalDotsPerInchY();
}

void* QScreen_PhysicalSize(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QScreen*>(ptr)->physicalSize(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QScreen_ConnectPhysicalSizeChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QSizeF &)>(&QScreen::physicalSizeChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QSizeF &)>(&MyQScreen::Signal_PhysicalSizeChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectPhysicalSizeChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QSizeF &)>(&QScreen::physicalSizeChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QSizeF &)>(&MyQScreen::Signal_PhysicalSizeChanged));
}

void QScreen_PhysicalSizeChanged(void* ptr, void* size)
{
	static_cast<QScreen*>(ptr)->physicalSizeChanged(*static_cast<QSizeF*>(size));
}

long long QScreen_PrimaryOrientation(void* ptr)
{
	return static_cast<QScreen*>(ptr)->primaryOrientation();
}

void QScreen_ConnectPrimaryOrientationChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::ScreenOrientation>();
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(Qt::ScreenOrientation)>(&QScreen::primaryOrientationChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(Qt::ScreenOrientation)>(&MyQScreen::Signal_PrimaryOrientationChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectPrimaryOrientationChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(Qt::ScreenOrientation)>(&QScreen::primaryOrientationChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(Qt::ScreenOrientation)>(&MyQScreen::Signal_PrimaryOrientationChanged));
}

void QScreen_PrimaryOrientationChanged(void* ptr, long long orientation)
{
	static_cast<QScreen*>(ptr)->primaryOrientationChanged(static_cast<Qt::ScreenOrientation>(orientation));
}

double QScreen_RefreshRate(void* ptr)
{
	return static_cast<QScreen*>(ptr)->refreshRate();
}

void QScreen_ConnectRefreshRateChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::refreshRateChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_RefreshRateChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectRefreshRateChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(qreal)>(&QScreen::refreshRateChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(qreal)>(&MyQScreen::Signal_RefreshRateChanged));
}

void QScreen_RefreshRateChanged(void* ptr, double refreshRate)
{
	static_cast<QScreen*>(ptr)->refreshRateChanged(refreshRate);
}

struct QtGui_PackedString QScreen_SerialNumber(void* ptr)
{
	return ({ QByteArray* tff6367 = new QByteArray(static_cast<QScreen*>(ptr)->serialNumber().toUtf8()); QtGui_PackedString { const_cast<char*>(tff6367->prepend("WHITESPACE").constData()+10), tff6367->size()-10, tff6367 }; });
}

void QScreen_SetOrientationUpdateMask(void* ptr, long long mask)
{
	static_cast<QScreen*>(ptr)->setOrientationUpdateMask(static_cast<Qt::ScreenOrientation>(mask));
}

void* QScreen_Size(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QScreen*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void* QScreen_TransformBetween(void* ptr, long long a, long long b, void* target)
{
	return new QTransform(static_cast<QScreen*>(ptr)->transformBetween(static_cast<Qt::ScreenOrientation>(a), static_cast<Qt::ScreenOrientation>(b), *static_cast<QRect*>(target)));
}

void* QScreen_VirtualGeometry(void* ptr)
{
	return ({ QRect tmpValue = static_cast<QScreen*>(ptr)->virtualGeometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QScreen_ConnectVirtualGeometryChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::virtualGeometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_VirtualGeometryChanged), static_cast<Qt::ConnectionType>(t));
}

void QScreen_DisconnectVirtualGeometryChanged(void* ptr)
{
	QObject::disconnect(static_cast<QScreen*>(ptr), static_cast<void (QScreen::*)(const QRect &)>(&QScreen::virtualGeometryChanged), static_cast<MyQScreen*>(ptr), static_cast<void (MyQScreen::*)(const QRect &)>(&MyQScreen::Signal_VirtualGeometryChanged));
}

void QScreen_VirtualGeometryChanged(void* ptr, void* rect)
{
	static_cast<QScreen*>(ptr)->virtualGeometryChanged(*static_cast<QRect*>(rect));
}

void* QScreen_VirtualSiblingAt(void* ptr, void* point)
{
	return static_cast<QScreen*>(ptr)->virtualSiblingAt(*static_cast<QPoint*>(point));
}

struct QtGui_PackedList QScreen_VirtualSiblings(void* ptr)
{
	return ({ QList<QScreen *>* tmpValue1258f7 = new QList<QScreen *>(static_cast<QScreen*>(ptr)->virtualSiblings()); QtGui_PackedList { tmpValue1258f7, tmpValue1258f7->size() }; });
}

void* QScreen_VirtualSize(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QScreen*>(ptr)->virtualSize(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QScreen_DestroyQScreen(void* ptr)
{
	static_cast<QScreen*>(ptr)->~QScreen();
}

void QScreen_DestroyQScreenDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QScreen___virtualSiblings_atList(void* ptr, int i)
{
	return ({QScreen * tmp = static_cast<QList<QScreen *>*>(ptr)->at(i); if (i == static_cast<QList<QScreen *>*>(ptr)->size()-1) { static_cast<QList<QScreen *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QScreen___virtualSiblings_setList(void* ptr, void* i)
{
	static_cast<QList<QScreen *>*>(ptr)->append(static_cast<QScreen*>(i));
}

void* QScreen___virtualSiblings_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QScreen *>();
}

void* QScreen___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QScreen___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QScreen___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QScreen___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QScreen___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QScreen___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QScreen___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QScreen___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QScreen___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QScreen___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QScreen___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QScreen___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QScreen_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QScreen*>(ptr)->QScreen::childEvent(static_cast<QChildEvent*>(event));
}

void QScreen_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QScreen*>(ptr)->QScreen::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QScreen_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QScreen*>(ptr)->QScreen::customEvent(static_cast<QEvent*>(event));
}

void QScreen_DeleteLaterDefault(void* ptr)
{
		static_cast<QScreen*>(ptr)->QScreen::deleteLater();
}

void QScreen_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QScreen*>(ptr)->QScreen::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QScreen_EventDefault(void* ptr, void* e)
{
		return static_cast<QScreen*>(ptr)->QScreen::event(static_cast<QEvent*>(e));
}

char QScreen_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QScreen*>(ptr)->QScreen::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QScreen*>(ptr)->QScreen::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QScreen*>(ptr)->QScreen::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QScreen*>(ptr)->QScreen::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QScreen*>(ptr)->QScreen::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QScreen_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QScreen*>(ptr)->QScreen::metaObject());
}

void QScreen_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QScreen*>(ptr)->QScreen::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQScreenOrientationChangeEvent: public QScreenOrientationChangeEvent
{
public:
	MyQScreenOrientationChangeEvent(QScreen *screen, Qt::ScreenOrientation screenOrientation) : QScreenOrientationChangeEvent(screen, screenOrientation) {QScreenOrientationChangeEvent_QScreenOrientationChangeEvent_QRegisterMetaType();};
	 ~MyQScreenOrientationChangeEvent() { callbackQScreenOrientationChangeEvent_DestroyQScreenOrientationChangeEvent(this); };
};

Q_DECLARE_METATYPE(QScreenOrientationChangeEvent*)
Q_DECLARE_METATYPE(MyQScreenOrientationChangeEvent*)

int QScreenOrientationChangeEvent_QScreenOrientationChangeEvent_QRegisterMetaType(){qRegisterMetaType<QScreenOrientationChangeEvent*>(); return qRegisterMetaType<MyQScreenOrientationChangeEvent*>();}

void* QScreenOrientationChangeEvent_NewQScreenOrientationChangeEvent(void* screen, long long screenOrientation)
{
	return new MyQScreenOrientationChangeEvent(static_cast<QScreen*>(screen), static_cast<Qt::ScreenOrientation>(screenOrientation));
}

long long QScreenOrientationChangeEvent_Orientation(void* ptr)
{
	return static_cast<QScreenOrientationChangeEvent*>(ptr)->orientation();
}

void* QScreenOrientationChangeEvent_Screen(void* ptr)
{
	return static_cast<QScreenOrientationChangeEvent*>(ptr)->screen();
}

void QScreenOrientationChangeEvent_DestroyQScreenOrientationChangeEvent(void* ptr)
{
	static_cast<QScreenOrientationChangeEvent*>(ptr)->~QScreenOrientationChangeEvent();
}

void QScreenOrientationChangeEvent_DestroyQScreenOrientationChangeEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQScrollEvent: public QScrollEvent
{
public:
	MyQScrollEvent(const QPointF &contentPos, const QPointF &overshootDistance, QScrollEvent::ScrollState scrollState) : QScrollEvent(contentPos, overshootDistance, scrollState) {QScrollEvent_QScrollEvent_QRegisterMetaType();};
	 ~MyQScrollEvent() { callbackQScrollEvent_DestroyQScrollEvent(this); };
};

Q_DECLARE_METATYPE(QScrollEvent*)
Q_DECLARE_METATYPE(MyQScrollEvent*)

int QScrollEvent_QScrollEvent_QRegisterMetaType(){qRegisterMetaType<QScrollEvent*>(); return qRegisterMetaType<MyQScrollEvent*>();}

void* QScrollEvent_NewQScrollEvent(void* contentPos, void* overshootDistance, long long scrollState)
{
	return new MyQScrollEvent(*static_cast<QPointF*>(contentPos), *static_cast<QPointF*>(overshootDistance), static_cast<QScrollEvent::ScrollState>(scrollState));
}

void* QScrollEvent_ContentPos(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QScrollEvent*>(ptr)->contentPos(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QScrollEvent_OvershootDistance(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QScrollEvent*>(ptr)->overshootDistance(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

long long QScrollEvent_ScrollState(void* ptr)
{
	return static_cast<QScrollEvent*>(ptr)->scrollState();
}

void QScrollEvent_DestroyQScrollEvent(void* ptr)
{
	static_cast<QScrollEvent*>(ptr)->~QScrollEvent();
}

void QScrollEvent_DestroyQScrollEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQScrollPrepareEvent: public QScrollPrepareEvent
{
public:
	MyQScrollPrepareEvent(const QPointF &startPos) : QScrollPrepareEvent(startPos) {QScrollPrepareEvent_QScrollPrepareEvent_QRegisterMetaType();};
	 ~MyQScrollPrepareEvent() { callbackQScrollPrepareEvent_DestroyQScrollPrepareEvent(this); };
};

Q_DECLARE_METATYPE(QScrollPrepareEvent*)
Q_DECLARE_METATYPE(MyQScrollPrepareEvent*)

int QScrollPrepareEvent_QScrollPrepareEvent_QRegisterMetaType(){qRegisterMetaType<QScrollPrepareEvent*>(); return qRegisterMetaType<MyQScrollPrepareEvent*>();}

void* QScrollPrepareEvent_NewQScrollPrepareEvent(void* startPos)
{
	return new MyQScrollPrepareEvent(*static_cast<QPointF*>(startPos));
}

void* QScrollPrepareEvent_ContentPos(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QScrollPrepareEvent*>(ptr)->contentPos(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QScrollPrepareEvent_ContentPosRange(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QScrollPrepareEvent*>(ptr)->contentPosRange(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QScrollPrepareEvent_SetContentPos(void* ptr, void* pos)
{
	static_cast<QScrollPrepareEvent*>(ptr)->setContentPos(*static_cast<QPointF*>(pos));
}

void QScrollPrepareEvent_SetContentPosRange(void* ptr, void* rect)
{
	static_cast<QScrollPrepareEvent*>(ptr)->setContentPosRange(*static_cast<QRectF*>(rect));
}

void QScrollPrepareEvent_SetViewportSize(void* ptr, void* size)
{
	static_cast<QScrollPrepareEvent*>(ptr)->setViewportSize(*static_cast<QSizeF*>(size));
}

void* QScrollPrepareEvent_StartPos(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QScrollPrepareEvent*>(ptr)->startPos(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QScrollPrepareEvent_ViewportSize(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QScrollPrepareEvent*>(ptr)->viewportSize(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QScrollPrepareEvent_DestroyQScrollPrepareEvent(void* ptr)
{
	static_cast<QScrollPrepareEvent*>(ptr)->~QScrollPrepareEvent();
}

void QScrollPrepareEvent_DestroyQScrollPrepareEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQSessionManager: public QSessionManager
{
public:
	void childEvent(QChildEvent * event) { callbackQSessionManager_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQSessionManager_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQSessionManager_CustomEvent(this, event); };
	void deleteLater() { callbackQSessionManager_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQSessionManager_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQSessionManager_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQSessionManager_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQSessionManager_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQSessionManager_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQSessionManager_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQSessionManager_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QSessionManager*)
Q_DECLARE_METATYPE(MyQSessionManager*)

int QSessionManager_QSessionManager_QRegisterMetaType(){qRegisterMetaType<QSessionManager*>(); return qRegisterMetaType<MyQSessionManager*>();}

char QSessionManager_AllowsErrorInteraction(void* ptr)
{
	return static_cast<QSessionManager*>(ptr)->allowsErrorInteraction();
}

char QSessionManager_AllowsInteraction(void* ptr)
{
	return static_cast<QSessionManager*>(ptr)->allowsInteraction();
}

void QSessionManager_Cancel(void* ptr)
{
	static_cast<QSessionManager*>(ptr)->cancel();
}

struct QtGui_PackedString QSessionManager_DiscardCommand(void* ptr)
{
	return ({ QByteArray* t7ed2e8 = new QByteArray(static_cast<QSessionManager*>(ptr)->discardCommand().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t7ed2e8->prepend("WHITESPACE").constData()+10), t7ed2e8->size()-10, t7ed2e8 }; });
}

char QSessionManager_IsPhase2(void* ptr)
{
	return static_cast<QSessionManager*>(ptr)->isPhase2();
}

void QSessionManager_Release(void* ptr)
{
	static_cast<QSessionManager*>(ptr)->release();
}

void QSessionManager_RequestPhase2(void* ptr)
{
	static_cast<QSessionManager*>(ptr)->requestPhase2();
}

struct QtGui_PackedString QSessionManager_RestartCommand(void* ptr)
{
	return ({ QByteArray* t8b3c52 = new QByteArray(static_cast<QSessionManager*>(ptr)->restartCommand().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t8b3c52->prepend("WHITESPACE").constData()+10), t8b3c52->size()-10, t8b3c52 }; });
}

long long QSessionManager_RestartHint(void* ptr)
{
	return static_cast<QSessionManager*>(ptr)->restartHint();
}

struct QtGui_PackedString QSessionManager_SessionId(void* ptr)
{
	return ({ QByteArray* t8eaf8d = new QByteArray(static_cast<QSessionManager*>(ptr)->sessionId().toUtf8()); QtGui_PackedString { const_cast<char*>(t8eaf8d->prepend("WHITESPACE").constData()+10), t8eaf8d->size()-10, t8eaf8d }; });
}

struct QtGui_PackedString QSessionManager_SessionKey(void* ptr)
{
	return ({ QByteArray* tb1e419 = new QByteArray(static_cast<QSessionManager*>(ptr)->sessionKey().toUtf8()); QtGui_PackedString { const_cast<char*>(tb1e419->prepend("WHITESPACE").constData()+10), tb1e419->size()-10, tb1e419 }; });
}

void QSessionManager_SetDiscardCommand(void* ptr, struct QtGui_PackedString command)
{
	static_cast<QSessionManager*>(ptr)->setDiscardCommand(QString::fromUtf8(command.data, command.len).split("¡¦!", QString::SkipEmptyParts));
}

void QSessionManager_SetManagerProperty(void* ptr, struct QtGui_PackedString name, struct QtGui_PackedString value)
{
	static_cast<QSessionManager*>(ptr)->setManagerProperty(QString::fromUtf8(name.data, name.len), QString::fromUtf8(value.data, value.len).split("¡¦!", QString::SkipEmptyParts));
}

void QSessionManager_SetManagerProperty2(void* ptr, struct QtGui_PackedString name, struct QtGui_PackedString value)
{
	static_cast<QSessionManager*>(ptr)->setManagerProperty(QString::fromUtf8(name.data, name.len), QString::fromUtf8(value.data, value.len));
}

void QSessionManager_SetRestartCommand(void* ptr, struct QtGui_PackedString command)
{
	static_cast<QSessionManager*>(ptr)->setRestartCommand(QString::fromUtf8(command.data, command.len).split("¡¦!", QString::SkipEmptyParts));
}

void QSessionManager_SetRestartHint(void* ptr, long long hint)
{
	static_cast<QSessionManager*>(ptr)->setRestartHint(static_cast<QSessionManager::RestartHint>(hint));
}

void* QSessionManager___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSessionManager___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSessionManager___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QSessionManager___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QSessionManager___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QSessionManager___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QSessionManager___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSessionManager___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSessionManager___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QSessionManager___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSessionManager___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSessionManager___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QSessionManager_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::childEvent(static_cast<QChildEvent*>(event));
}

void QSessionManager_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QSessionManager_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::customEvent(static_cast<QEvent*>(event));
}

void QSessionManager_DeleteLaterDefault(void* ptr)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::deleteLater();
}

void QSessionManager_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QSessionManager_EventDefault(void* ptr, void* e)
{
		return static_cast<QSessionManager*>(ptr)->QSessionManager::event(static_cast<QEvent*>(e));
}

char QSessionManager_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QSessionManager*>(ptr)->QSessionManager::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QSessionManager*>(ptr)->QSessionManager::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QSessionManager*>(ptr)->QSessionManager::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QSessionManager*>(ptr)->QSessionManager::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QSessionManager*>(ptr)->QSessionManager::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QSessionManager_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QSessionManager*>(ptr)->QSessionManager::metaObject());
}

void QSessionManager_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QSessionManager*>(ptr)->QSessionManager::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQShortcutEvent: public QShortcutEvent
{
public:
	MyQShortcutEvent(const QKeySequence &key, int id, bool ambiguous = false) : QShortcutEvent(key, id, ambiguous) {QShortcutEvent_QShortcutEvent_QRegisterMetaType();};
	 ~MyQShortcutEvent() { callbackQShortcutEvent_DestroyQShortcutEvent(this); };
};

Q_DECLARE_METATYPE(QShortcutEvent*)
Q_DECLARE_METATYPE(MyQShortcutEvent*)

int QShortcutEvent_QShortcutEvent_QRegisterMetaType(){qRegisterMetaType<QShortcutEvent*>(); return qRegisterMetaType<MyQShortcutEvent*>();}

void* QShortcutEvent_NewQShortcutEvent(void* key, int id, char ambiguous)
{
	return new MyQShortcutEvent(*static_cast<QKeySequence*>(key), id, ambiguous != 0);
}

char QShortcutEvent_IsAmbiguous(void* ptr)
{
	return static_cast<QShortcutEvent*>(ptr)->isAmbiguous();
}

void* QShortcutEvent_Key(void* ptr)
{
	return const_cast<QKeySequence*>(&static_cast<QShortcutEvent*>(ptr)->key());
}

int QShortcutEvent_ShortcutId(void* ptr)
{
	return static_cast<QShortcutEvent*>(ptr)->shortcutId();
}

void QShortcutEvent_DestroyQShortcutEvent(void* ptr)
{
	static_cast<QShortcutEvent*>(ptr)->~QShortcutEvent();
}

void QShortcutEvent_DestroyQShortcutEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

class MyQShowEvent: public QShowEvent
{
public:
	MyQShowEvent() : QShowEvent() {QShowEvent_QShowEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QShowEvent*)
Q_DECLARE_METATYPE(MyQShowEvent*)

int QShowEvent_QShowEvent_QRegisterMetaType(){qRegisterMetaType<QShowEvent*>(); return qRegisterMetaType<MyQShowEvent*>();}

void* QShowEvent_NewQShowEvent()
{
	return new MyQShowEvent();
}

class MyQStandardItem: public QStandardItem
{
public:
	MyQStandardItem() : QStandardItem() {QStandardItem_QStandardItem_QRegisterMetaType();};
	MyQStandardItem(const QString &text) : QStandardItem(text) {QStandardItem_QStandardItem_QRegisterMetaType();};
	MyQStandardItem(const QIcon &icon, const QString &text) : QStandardItem(icon, text) {QStandardItem_QStandardItem_QRegisterMetaType();};
	MyQStandardItem(int rows, int columns = 1) : QStandardItem(rows, columns) {QStandardItem_QStandardItem_QRegisterMetaType();};
	MyQStandardItem(const QStandardItem &other) : QStandardItem(other) {QStandardItem_QStandardItem_QRegisterMetaType();};
	QStandardItem * clone() const { return static_cast<QStandardItem*>(callbackQStandardItem_Clone(const_cast<void*>(static_cast<const void*>(this)))); };
	QVariant data(int role) const { return *static_cast<QVariant*>(callbackQStandardItem_Data(const_cast<void*>(static_cast<const void*>(this)), role)); };
	void read(QDataStream & in) { callbackQStandardItem_Read(this, static_cast<QDataStream*>(&in)); };
	void setData(const QVariant & value, int role) { callbackQStandardItem_SetData(this, const_cast<QVariant*>(&value), role); };
	int type() const { return callbackQStandardItem_Type(const_cast<void*>(static_cast<const void*>(this))); };
	void write(QDataStream & out) const { callbackQStandardItem_Write(const_cast<void*>(static_cast<const void*>(this)), static_cast<QDataStream*>(&out)); };
	 ~MyQStandardItem() { callbackQStandardItem_DestroyQStandardItem(this); };
};

Q_DECLARE_METATYPE(QStandardItem*)
Q_DECLARE_METATYPE(MyQStandardItem*)

int QStandardItem_QStandardItem_QRegisterMetaType(){qRegisterMetaType<QStandardItem*>(); return qRegisterMetaType<MyQStandardItem*>();}

void* QStandardItem_NewQStandardItem()
{
	return new MyQStandardItem();
}

void* QStandardItem_NewQStandardItem2(struct QtGui_PackedString text)
{
	return new MyQStandardItem(QString::fromUtf8(text.data, text.len));
}

void* QStandardItem_NewQStandardItem3(void* icon, struct QtGui_PackedString text)
{
	return new MyQStandardItem(*static_cast<QIcon*>(icon), QString::fromUtf8(text.data, text.len));
}

void* QStandardItem_NewQStandardItem4(int rows, int columns)
{
	return new MyQStandardItem(rows, columns);
}

void* QStandardItem_NewQStandardItem5(void* other)
{
	return new MyQStandardItem(*static_cast<QStandardItem*>(other));
}

struct QtGui_PackedString QStandardItem_AccessibleDescription(void* ptr)
{
	return ({ QByteArray* t03d242 = new QByteArray(static_cast<QStandardItem*>(ptr)->accessibleDescription().toUtf8()); QtGui_PackedString { const_cast<char*>(t03d242->prepend("WHITESPACE").constData()+10), t03d242->size()-10, t03d242 }; });
}

struct QtGui_PackedString QStandardItem_AccessibleText(void* ptr)
{
	return ({ QByteArray* t3ec2e5 = new QByteArray(static_cast<QStandardItem*>(ptr)->accessibleText().toUtf8()); QtGui_PackedString { const_cast<char*>(t3ec2e5->prepend("WHITESPACE").constData()+10), t3ec2e5->size()-10, t3ec2e5 }; });
}

void QStandardItem_AppendColumn(void* ptr, void* items)
{
	static_cast<QStandardItem*>(ptr)->appendColumn(*static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItem_AppendRow(void* ptr, void* items)
{
	static_cast<QStandardItem*>(ptr)->appendRow(*static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItem_AppendRow2(void* ptr, void* item)
{
	static_cast<QStandardItem*>(ptr)->appendRow(static_cast<QStandardItem*>(item));
}

void QStandardItem_AppendRows(void* ptr, void* items)
{
	static_cast<QStandardItem*>(ptr)->appendRows(*static_cast<QList<QStandardItem *>*>(items));
}

void* QStandardItem_Background(void* ptr)
{
	return new QBrush(static_cast<QStandardItem*>(ptr)->background());
}

long long QStandardItem_CheckState(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->checkState();
}

void* QStandardItem_Child(void* ptr, int row, int column)
{
	return static_cast<QStandardItem*>(ptr)->child(row, column);
}

void QStandardItem_ClearData(void* ptr)
{
	static_cast<QStandardItem*>(ptr)->clearData();
}

void* QStandardItem_Clone(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->clone();
}

void* QStandardItem_CloneDefault(void* ptr)
{
		return static_cast<QStandardItem*>(ptr)->QStandardItem::clone();
}

int QStandardItem_Column(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->column();
}

int QStandardItem_ColumnCount(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->columnCount();
}

void* QStandardItem_Data(void* ptr, int role)
{
	return new QVariant(static_cast<QStandardItem*>(ptr)->data(role));
}

void* QStandardItem_DataDefault(void* ptr, int role)
{
		return new QVariant(static_cast<QStandardItem*>(ptr)->QStandardItem::data(role));
}

void QStandardItem_EmitDataChanged(void* ptr)
{
	static_cast<QStandardItem*>(ptr)->emitDataChanged();
}

long long QStandardItem_Flags(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->flags();
}

void* QStandardItem_Font(void* ptr)
{
	return new QFont(static_cast<QStandardItem*>(ptr)->font());
}

void* QStandardItem_Foreground(void* ptr)
{
	return new QBrush(static_cast<QStandardItem*>(ptr)->foreground());
}

char QStandardItem_HasChildren(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->hasChildren();
}

void* QStandardItem_Icon(void* ptr)
{
	return new QIcon(static_cast<QStandardItem*>(ptr)->icon());
}

void* QStandardItem_Index(void* ptr)
{
	return new QModelIndex(static_cast<QStandardItem*>(ptr)->index());
}

void QStandardItem_InsertColumn(void* ptr, int column, void* items)
{
	static_cast<QStandardItem*>(ptr)->insertColumn(column, *static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItem_InsertColumns(void* ptr, int column, int count)
{
	static_cast<QStandardItem*>(ptr)->insertColumns(column, count);
}

void QStandardItem_InsertRow(void* ptr, int row, void* items)
{
	static_cast<QStandardItem*>(ptr)->insertRow(row, *static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItem_InsertRow2(void* ptr, int row, void* item)
{
	static_cast<QStandardItem*>(ptr)->insertRow(row, static_cast<QStandardItem*>(item));
}

void QStandardItem_InsertRows(void* ptr, int row, void* items)
{
	static_cast<QStandardItem*>(ptr)->insertRows(row, *static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItem_InsertRows2(void* ptr, int row, int count)
{
	static_cast<QStandardItem*>(ptr)->insertRows(row, count);
}

char QStandardItem_IsAutoTristate(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isAutoTristate();
}

char QStandardItem_IsCheckable(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isCheckable();
}

char QStandardItem_IsDragEnabled(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isDragEnabled();
}

char QStandardItem_IsDropEnabled(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isDropEnabled();
}

char QStandardItem_IsEditable(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isEditable();
}

char QStandardItem_IsEnabled(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isEnabled();
}

char QStandardItem_IsSelectable(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isSelectable();
}

char QStandardItem_IsUserTristate(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->isUserTristate();
}

void* QStandardItem_Model(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->model();
}

void* QStandardItem_Parent(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->parent();
}

void QStandardItem_Read(void* ptr, void* in)
{
	static_cast<QStandardItem*>(ptr)->read(*static_cast<QDataStream*>(in));
}

void QStandardItem_ReadDefault(void* ptr, void* in)
{
		static_cast<QStandardItem*>(ptr)->QStandardItem::read(*static_cast<QDataStream*>(in));
}

void QStandardItem_RemoveColumn(void* ptr, int column)
{
	static_cast<QStandardItem*>(ptr)->removeColumn(column);
}

void QStandardItem_RemoveColumns(void* ptr, int column, int count)
{
	static_cast<QStandardItem*>(ptr)->removeColumns(column, count);
}

void QStandardItem_RemoveRow(void* ptr, int row)
{
	static_cast<QStandardItem*>(ptr)->removeRow(row);
}

void QStandardItem_RemoveRows(void* ptr, int row, int count)
{
	static_cast<QStandardItem*>(ptr)->removeRows(row, count);
}

int QStandardItem_Row(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->row();
}

int QStandardItem_RowCount(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->rowCount();
}

void QStandardItem_SetAccessibleDescription(void* ptr, struct QtGui_PackedString accessibleDescription)
{
	static_cast<QStandardItem*>(ptr)->setAccessibleDescription(QString::fromUtf8(accessibleDescription.data, accessibleDescription.len));
}

void QStandardItem_SetAccessibleText(void* ptr, struct QtGui_PackedString accessibleText)
{
	static_cast<QStandardItem*>(ptr)->setAccessibleText(QString::fromUtf8(accessibleText.data, accessibleText.len));
}

void QStandardItem_SetAutoTristate(void* ptr, char tristate)
{
	static_cast<QStandardItem*>(ptr)->setAutoTristate(tristate != 0);
}

void QStandardItem_SetBackground(void* ptr, void* brush)
{
	static_cast<QStandardItem*>(ptr)->setBackground(*static_cast<QBrush*>(brush));
}

void QStandardItem_SetCheckState(void* ptr, long long state)
{
	static_cast<QStandardItem*>(ptr)->setCheckState(static_cast<Qt::CheckState>(state));
}

void QStandardItem_SetCheckable(void* ptr, char checkable)
{
	static_cast<QStandardItem*>(ptr)->setCheckable(checkable != 0);
}

void QStandardItem_SetChild(void* ptr, int row, int column, void* item)
{
	static_cast<QStandardItem*>(ptr)->setChild(row, column, static_cast<QStandardItem*>(item));
}

void QStandardItem_SetChild2(void* ptr, int row, void* item)
{
	static_cast<QStandardItem*>(ptr)->setChild(row, static_cast<QStandardItem*>(item));
}

void QStandardItem_SetColumnCount(void* ptr, int columns)
{
	static_cast<QStandardItem*>(ptr)->setColumnCount(columns);
}

void QStandardItem_SetData(void* ptr, void* value, int role)
{
	static_cast<QStandardItem*>(ptr)->setData(*static_cast<QVariant*>(value), role);
}

void QStandardItem_SetDataDefault(void* ptr, void* value, int role)
{
		static_cast<QStandardItem*>(ptr)->QStandardItem::setData(*static_cast<QVariant*>(value), role);
}

void QStandardItem_SetDragEnabled(void* ptr, char dragEnabled)
{
	static_cast<QStandardItem*>(ptr)->setDragEnabled(dragEnabled != 0);
}

void QStandardItem_SetDropEnabled(void* ptr, char dropEnabled)
{
	static_cast<QStandardItem*>(ptr)->setDropEnabled(dropEnabled != 0);
}

void QStandardItem_SetEditable(void* ptr, char editable)
{
	static_cast<QStandardItem*>(ptr)->setEditable(editable != 0);
}

void QStandardItem_SetEnabled(void* ptr, char enabled)
{
	static_cast<QStandardItem*>(ptr)->setEnabled(enabled != 0);
}

void QStandardItem_SetFlags(void* ptr, long long flags)
{
	static_cast<QStandardItem*>(ptr)->setFlags(static_cast<Qt::ItemFlag>(flags));
}

void QStandardItem_SetFont(void* ptr, void* font)
{
	static_cast<QStandardItem*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QStandardItem_SetForeground(void* ptr, void* brush)
{
	static_cast<QStandardItem*>(ptr)->setForeground(*static_cast<QBrush*>(brush));
}

void QStandardItem_SetIcon(void* ptr, void* icon)
{
	static_cast<QStandardItem*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
}

void QStandardItem_SetRowCount(void* ptr, int rows)
{
	static_cast<QStandardItem*>(ptr)->setRowCount(rows);
}

void QStandardItem_SetSelectable(void* ptr, char selectable)
{
	static_cast<QStandardItem*>(ptr)->setSelectable(selectable != 0);
}

void QStandardItem_SetSizeHint(void* ptr, void* size)
{
	static_cast<QStandardItem*>(ptr)->setSizeHint(*static_cast<QSize*>(size));
}

void QStandardItem_SetStatusTip(void* ptr, struct QtGui_PackedString statusTip)
{
	static_cast<QStandardItem*>(ptr)->setStatusTip(QString::fromUtf8(statusTip.data, statusTip.len));
}

void QStandardItem_SetText(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QStandardItem*>(ptr)->setText(QString::fromUtf8(text.data, text.len));
}

void QStandardItem_SetTextAlignment(void* ptr, long long alignment)
{
	static_cast<QStandardItem*>(ptr)->setTextAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QStandardItem_SetToolTip(void* ptr, struct QtGui_PackedString toolTip)
{
	static_cast<QStandardItem*>(ptr)->setToolTip(QString::fromUtf8(toolTip.data, toolTip.len));
}

void QStandardItem_SetUserTristate(void* ptr, char tristate)
{
	static_cast<QStandardItem*>(ptr)->setUserTristate(tristate != 0);
}

void QStandardItem_SetWhatsThis(void* ptr, struct QtGui_PackedString whatsThis)
{
	static_cast<QStandardItem*>(ptr)->setWhatsThis(QString::fromUtf8(whatsThis.data, whatsThis.len));
}

void* QStandardItem_SizeHint(void* ptr)
{
	return ({ QSize tmpValue = static_cast<QStandardItem*>(ptr)->sizeHint(); new QSize(tmpValue.width(), tmpValue.height()); });
}

void QStandardItem_SortChildren(void* ptr, int column, long long order)
{
	static_cast<QStandardItem*>(ptr)->sortChildren(column, static_cast<Qt::SortOrder>(order));
}

struct QtGui_PackedString QStandardItem_StatusTip(void* ptr)
{
	return ({ QByteArray* t534fca = new QByteArray(static_cast<QStandardItem*>(ptr)->statusTip().toUtf8()); QtGui_PackedString { const_cast<char*>(t534fca->prepend("WHITESPACE").constData()+10), t534fca->size()-10, t534fca }; });
}

void* QStandardItem_TakeChild(void* ptr, int row, int column)
{
	return static_cast<QStandardItem*>(ptr)->takeChild(row, column);
}

struct QtGui_PackedList QStandardItem_TakeColumn(void* ptr, int column)
{
	return ({ QList<QStandardItem *>* tmpValue1c492f = new QList<QStandardItem *>(static_cast<QStandardItem*>(ptr)->takeColumn(column)); QtGui_PackedList { tmpValue1c492f, tmpValue1c492f->size() }; });
}

struct QtGui_PackedList QStandardItem_TakeRow(void* ptr, int row)
{
	return ({ QList<QStandardItem *>* tmpValue58484c = new QList<QStandardItem *>(static_cast<QStandardItem*>(ptr)->takeRow(row)); QtGui_PackedList { tmpValue58484c, tmpValue58484c->size() }; });
}

struct QtGui_PackedString QStandardItem_Text(void* ptr)
{
	return ({ QByteArray* t847a7a = new QByteArray(static_cast<QStandardItem*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(t847a7a->prepend("WHITESPACE").constData()+10), t847a7a->size()-10, t847a7a }; });
}

long long QStandardItem_TextAlignment(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->textAlignment();
}

struct QtGui_PackedString QStandardItem_ToolTip(void* ptr)
{
	return ({ QByteArray* t938860 = new QByteArray(static_cast<QStandardItem*>(ptr)->toolTip().toUtf8()); QtGui_PackedString { const_cast<char*>(t938860->prepend("WHITESPACE").constData()+10), t938860->size()-10, t938860 }; });
}

int QStandardItem_Type(void* ptr)
{
	return static_cast<QStandardItem*>(ptr)->type();
}

int QStandardItem_TypeDefault(void* ptr)
{
		return static_cast<QStandardItem*>(ptr)->QStandardItem::type();
}

struct QtGui_PackedString QStandardItem_WhatsThis(void* ptr)
{
	return ({ QByteArray* taa28dd = new QByteArray(static_cast<QStandardItem*>(ptr)->whatsThis().toUtf8()); QtGui_PackedString { const_cast<char*>(taa28dd->prepend("WHITESPACE").constData()+10), taa28dd->size()-10, taa28dd }; });
}

void QStandardItem_Write(void* ptr, void* out)
{
	static_cast<QStandardItem*>(ptr)->write(*static_cast<QDataStream*>(out));
}

void QStandardItem_WriteDefault(void* ptr, void* out)
{
		static_cast<QStandardItem*>(ptr)->QStandardItem::write(*static_cast<QDataStream*>(out));
}

void QStandardItem_DestroyQStandardItem(void* ptr)
{
	static_cast<QStandardItem*>(ptr)->~QStandardItem();
}

void QStandardItem_DestroyQStandardItemDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QStandardItem___appendColumn_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___appendColumn_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___appendColumn_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___appendRow_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___appendRow_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___appendRow_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___appendRows_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___appendRows_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___appendRows_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___insertColumn_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___insertColumn_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___insertColumn_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___insertRow_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___insertRow_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___insertRow_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___insertRows_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___insertRows_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___insertRows_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___takeColumn_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___takeColumn_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___takeColumn_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItem___takeRow_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItem___takeRow_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItem___takeRow_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

class MyQStandardItemModel: public QStandardItemModel
{
public:
	MyQStandardItemModel(QObject *parent = Q_NULLPTR) : QStandardItemModel(parent) {QStandardItemModel_QStandardItemModel_QRegisterMetaType();};
	MyQStandardItemModel(int rows, int columns, QObject *parent = Q_NULLPTR) : QStandardItemModel(rows, columns, parent) {QStandardItemModel_QStandardItemModel_QRegisterMetaType();};
	int columnCount(const QModelIndex & parent) const { return callbackQStandardItemModel_ColumnCount(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&parent)); };
	QVariant data(const QModelIndex & index, int role) const { return *static_cast<QVariant*>(callbackQStandardItemModel_Data(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&index), role)); };
	bool dropMimeData(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent) { return callbackQStandardItemModel_DropMimeData(this, const_cast<QMimeData*>(data), action, row, column, const_cast<QModelIndex*>(&parent)) != 0; };
	Qt::ItemFlags flags(const QModelIndex & index) const { return static_cast<Qt::ItemFlag>(callbackQStandardItemModel_Flags(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&index))); };
	bool hasChildren(const QModelIndex & parent) const { return callbackQStandardItemModel_HasChildren(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&parent)) != 0; };
	QVariant headerData(int section, Qt::Orientation orientation, int role) const { return *static_cast<QVariant*>(callbackQStandardItemModel_HeaderData(const_cast<void*>(static_cast<const void*>(this)), section, orientation, role)); };
	QModelIndex index(int row, int column, const QModelIndex & parent) const { return *static_cast<QModelIndex*>(callbackQStandardItemModel_Index(const_cast<void*>(static_cast<const void*>(this)), row, column, const_cast<QModelIndex*>(&parent))); };
	bool insertColumns(int column, int count, const QModelIndex & parent) { return callbackQStandardItemModel_InsertColumns(this, column, count, const_cast<QModelIndex*>(&parent)) != 0; };
	bool insertRows(int row, int count, const QModelIndex & parent) { return callbackQStandardItemModel_InsertRows(this, row, count, const_cast<QModelIndex*>(&parent)) != 0; };
	void Signal_ItemChanged(QStandardItem * item) { callbackQStandardItemModel_ItemChanged(this, item); };
	QMap<int, QVariant> itemData(const QModelIndex & index) const { return ({ QMap<int, QVariant>* tmpP = static_cast<QMap<int, QVariant>*>(callbackQStandardItemModel_ItemData(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&index))); QMap<int, QVariant> tmpV = *tmpP; tmpP->~QMap(); free(tmpP); tmpV; }); };
	QMimeData * mimeData(const QModelIndexList & indexes) const { return static_cast<QMimeData*>(callbackQStandardItemModel_MimeData(const_cast<void*>(static_cast<const void*>(this)), ({ QList<QModelIndex>* tmpValuee0adf2 = new QList<QModelIndex>(indexes); QtGui_PackedList { tmpValuee0adf2, tmpValuee0adf2->size() }; }))); };
	QStringList mimeTypes() const { return ({ QtGui_PackedString tempVal = callbackQStandardItemModel_MimeTypes(const_cast<void*>(static_cast<const void*>(this))); QStringList ret = QString::fromUtf8(tempVal.data, tempVal.len).split("¡¦!", QString::SkipEmptyParts); free(tempVal.data); ret; }); };
	QModelIndex parent(const QModelIndex & child) const { return *static_cast<QModelIndex*>(callbackQStandardItemModel_Parent(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&child))); };
	bool removeColumns(int column, int count, const QModelIndex & parent) { return callbackQStandardItemModel_RemoveColumns(this, column, count, const_cast<QModelIndex*>(&parent)) != 0; };
	bool removeRows(int row, int count, const QModelIndex & parent) { return callbackQStandardItemModel_RemoveRows(this, row, count, const_cast<QModelIndex*>(&parent)) != 0; };
	int rowCount(const QModelIndex & parent) const { return callbackQStandardItemModel_RowCount(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&parent)); };
	bool setData(const QModelIndex & index, const QVariant & value, int role) { return callbackQStandardItemModel_SetData(this, const_cast<QModelIndex*>(&index), const_cast<QVariant*>(&value), role) != 0; };
	bool setHeaderData(int section, Qt::Orientation orientation, const QVariant & value, int role) { return callbackQStandardItemModel_SetHeaderData(this, section, orientation, const_cast<QVariant*>(&value), role) != 0; };
	bool setItemData(const QModelIndex & index, const QMap<int, QVariant> & roles) { return callbackQStandardItemModel_SetItemData(this, const_cast<QModelIndex*>(&index), ({ QMap<int, QVariant>* tmpValue037c88 = new QMap<int, QVariant>(roles); QtGui_PackedList { tmpValue037c88, tmpValue037c88->size() }; })) != 0; };
	QModelIndex sibling(int row, int column, const QModelIndex & idx) const { return *static_cast<QModelIndex*>(callbackQStandardItemModel_Sibling(const_cast<void*>(static_cast<const void*>(this)), row, column, const_cast<QModelIndex*>(&idx))); };
	void sort(int column, Qt::SortOrder order) { callbackQStandardItemModel_Sort(this, column, order); };
	Qt::DropActions supportedDropActions() const { return static_cast<Qt::DropAction>(callbackQStandardItemModel_SupportedDropActions(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQStandardItemModel() { callbackQStandardItemModel_DestroyQStandardItemModel(this); };
	QModelIndex buddy(const QModelIndex & index) const { return *static_cast<QModelIndex*>(callbackQStandardItemModel_Buddy(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&index))); };
	bool canDropMimeData(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent) const { return callbackQStandardItemModel_CanDropMimeData(const_cast<void*>(static_cast<const void*>(this)), const_cast<QMimeData*>(data), action, row, column, const_cast<QModelIndex*>(&parent)) != 0; };
	bool canFetchMore(const QModelIndex & parent) const { return callbackQStandardItemModel_CanFetchMore(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&parent)) != 0; };
	void Signal_ColumnsAboutToBeInserted(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_ColumnsAboutToBeInserted(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_ColumnsAboutToBeMoved(const QModelIndex & sourceParent, int sourceStart, int sourceEnd, const QModelIndex & destinationParent, int destinationColumn) { callbackQStandardItemModel_ColumnsAboutToBeMoved(this, const_cast<QModelIndex*>(&sourceParent), sourceStart, sourceEnd, const_cast<QModelIndex*>(&destinationParent), destinationColumn); };
	void Signal_ColumnsAboutToBeRemoved(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_ColumnsAboutToBeRemoved(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_ColumnsInserted(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_ColumnsInserted(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_ColumnsMoved(const QModelIndex & parent, int start, int end, const QModelIndex & destination, int column) { callbackQStandardItemModel_ColumnsMoved(this, const_cast<QModelIndex*>(&parent), start, end, const_cast<QModelIndex*>(&destination), column); };
	void Signal_ColumnsRemoved(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_ColumnsRemoved(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_DataChanged(const QModelIndex & topLeft, const QModelIndex & bottomRight, const QVector<int> & roles) { callbackQStandardItemModel_DataChanged(this, const_cast<QModelIndex*>(&topLeft), const_cast<QModelIndex*>(&bottomRight), ({ QVector<int>* tmpValue037c88 = new QVector<int>(roles); QtGui_PackedList { tmpValue037c88, tmpValue037c88->size() }; })); };
	void fetchMore(const QModelIndex & parent) { callbackQStandardItemModel_FetchMore(this, const_cast<QModelIndex*>(&parent)); };
	void Signal_HeaderDataChanged(Qt::Orientation orientation, int first, int last) { callbackQStandardItemModel_HeaderDataChanged(this, orientation, first, last); };
	void Signal_LayoutAboutToBeChanged(const QList<QPersistentModelIndex> & parents, QAbstractItemModel::LayoutChangeHint hint) { callbackQStandardItemModel_LayoutAboutToBeChanged(this, ({ QList<QPersistentModelIndex>* tmpValuea664f1 = new QList<QPersistentModelIndex>(parents); QtGui_PackedList { tmpValuea664f1, tmpValuea664f1->size() }; }), hint); };
	void Signal_LayoutChanged(const QList<QPersistentModelIndex> & parents, QAbstractItemModel::LayoutChangeHint hint) { callbackQStandardItemModel_LayoutChanged(this, ({ QList<QPersistentModelIndex>* tmpValuea664f1 = new QList<QPersistentModelIndex>(parents); QtGui_PackedList { tmpValuea664f1, tmpValuea664f1->size() }; }), hint); };
	QList<QModelIndex> match(const QModelIndex & start, int role, const QVariant & value, int hits, Qt::MatchFlags flags) const { return ({ QList<QModelIndex>* tmpP = static_cast<QList<QModelIndex>*>(callbackQStandardItemModel_Match(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&start), role, const_cast<QVariant*>(&value), hits, flags)); QList<QModelIndex> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }); };
	void Signal_ModelAboutToBeReset() { callbackQStandardItemModel_ModelAboutToBeReset(this); };
	void Signal_ModelReset() { callbackQStandardItemModel_ModelReset(this); };
	bool moveColumns(const QModelIndex & sourceParent, int sourceColumn, int count, const QModelIndex & destinationParent, int destinationChild) { return callbackQStandardItemModel_MoveColumns(this, const_cast<QModelIndex*>(&sourceParent), sourceColumn, count, const_cast<QModelIndex*>(&destinationParent), destinationChild) != 0; };
	bool moveRows(const QModelIndex & sourceParent, int sourceRow, int count, const QModelIndex & destinationParent, int destinationChild) { return callbackQStandardItemModel_MoveRows(this, const_cast<QModelIndex*>(&sourceParent), sourceRow, count, const_cast<QModelIndex*>(&destinationParent), destinationChild) != 0; };
	void resetInternalData() { callbackQStandardItemModel_ResetInternalData(this); };
	void revert() { callbackQStandardItemModel_Revert(this); };
	QHash<int, QByteArray> roleNames() const { return ({ QHash<int, QByteArray>* tmpP = static_cast<QHash<int, QByteArray>*>(callbackQStandardItemModel_RoleNames(const_cast<void*>(static_cast<const void*>(this)))); QHash<int, QByteArray> tmpV = *tmpP; tmpP->~QHash(); free(tmpP); tmpV; }); };
	void Signal_RowsAboutToBeInserted(const QModelIndex & parent, int start, int end) { callbackQStandardItemModel_RowsAboutToBeInserted(this, const_cast<QModelIndex*>(&parent), start, end); };
	void Signal_RowsAboutToBeMoved(const QModelIndex & sourceParent, int sourceStart, int sourceEnd, const QModelIndex & destinationParent, int destinationRow) { callbackQStandardItemModel_RowsAboutToBeMoved(this, const_cast<QModelIndex*>(&sourceParent), sourceStart, sourceEnd, const_cast<QModelIndex*>(&destinationParent), destinationRow); };
	void Signal_RowsAboutToBeRemoved(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_RowsAboutToBeRemoved(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_RowsInserted(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_RowsInserted(this, const_cast<QModelIndex*>(&parent), first, last); };
	void Signal_RowsMoved(const QModelIndex & parent, int start, int end, const QModelIndex & destination, int row) { callbackQStandardItemModel_RowsMoved(this, const_cast<QModelIndex*>(&parent), start, end, const_cast<QModelIndex*>(&destination), row); };
	void Signal_RowsRemoved(const QModelIndex & parent, int first, int last) { callbackQStandardItemModel_RowsRemoved(this, const_cast<QModelIndex*>(&parent), first, last); };
	QSize span(const QModelIndex & index) const { return *static_cast<QSize*>(callbackQStandardItemModel_Span(const_cast<void*>(static_cast<const void*>(this)), const_cast<QModelIndex*>(&index))); };
	bool submit() { return callbackQStandardItemModel_Submit(this) != 0; };
	Qt::DropActions supportedDragActions() const { return static_cast<Qt::DropAction>(callbackQStandardItemModel_SupportedDragActions(const_cast<void*>(static_cast<const void*>(this)))); };
	void childEvent(QChildEvent * event) { callbackQStandardItemModel_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQStandardItemModel_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQStandardItemModel_CustomEvent(this, event); };
	void deleteLater() { callbackQStandardItemModel_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQStandardItemModel_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQStandardItemModel_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQStandardItemModel_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQStandardItemModel_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQStandardItemModel_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQStandardItemModel_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQStandardItemModel_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QStandardItemModel*)
Q_DECLARE_METATYPE(MyQStandardItemModel*)

int QStandardItemModel_QStandardItemModel_QRegisterMetaType(){qRegisterMetaType<QStandardItemModel*>(); return qRegisterMetaType<MyQStandardItemModel*>();}

void* QStandardItemModel_NewQStandardItemModel(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(static_cast<QWindow*>(parent));
	} else {
		return new MyQStandardItemModel(static_cast<QObject*>(parent));
	}
}

void* QStandardItemModel_NewQStandardItemModel2(int rows, int columns, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQStandardItemModel(rows, columns, static_cast<QWindow*>(parent));
	} else {
		return new MyQStandardItemModel(rows, columns, static_cast<QObject*>(parent));
	}
}

void QStandardItemModel_AppendColumn(void* ptr, void* items)
{
	static_cast<QStandardItemModel*>(ptr)->appendColumn(*static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItemModel_AppendRow(void* ptr, void* items)
{
	static_cast<QStandardItemModel*>(ptr)->appendRow(*static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItemModel_AppendRow2(void* ptr, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->appendRow(static_cast<QStandardItem*>(item));
}

void QStandardItemModel_Clear(void* ptr)
{
	static_cast<QStandardItemModel*>(ptr)->clear();
}

char QStandardItemModel_ClearItemData(void* ptr, void* index)
{
	return static_cast<QStandardItemModel*>(ptr)->clearItemData(*static_cast<QModelIndex*>(index));
}

int QStandardItemModel_ColumnCount(void* ptr, void* parent)
{
	return static_cast<QStandardItemModel*>(ptr)->columnCount(*static_cast<QModelIndex*>(parent));
}

int QStandardItemModel_ColumnCountDefault(void* ptr, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::columnCount(*static_cast<QModelIndex*>(parent));
}

void* QStandardItemModel_Data(void* ptr, void* index, int role)
{
	return new QVariant(static_cast<QStandardItemModel*>(ptr)->data(*static_cast<QModelIndex*>(index), role));
}

void* QStandardItemModel_DataDefault(void* ptr, void* index, int role)
{
		return new QVariant(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::data(*static_cast<QModelIndex*>(index), role));
}

char QStandardItemModel_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::dropMimeData(static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action), row, column, *static_cast<QModelIndex*>(parent));
}

struct QtGui_PackedList QStandardItemModel_FindItems(void* ptr, struct QtGui_PackedString text, long long flags, int column)
{
	return ({ QList<QStandardItem *>* tmpValue345f6e = new QList<QStandardItem *>(static_cast<QStandardItemModel*>(ptr)->findItems(QString::fromUtf8(text.data, text.len), static_cast<Qt::MatchFlag>(flags), column)); QtGui_PackedList { tmpValue345f6e, tmpValue345f6e->size() }; });
}

long long QStandardItemModel_FlagsDefault(void* ptr, void* index)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::flags(*static_cast<QModelIndex*>(index));
}

char QStandardItemModel_HasChildrenDefault(void* ptr, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::hasChildren(*static_cast<QModelIndex*>(parent));
}

void* QStandardItemModel_HeaderDataDefault(void* ptr, int section, long long orientation, int role)
{
		return new QVariant(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::headerData(section, static_cast<Qt::Orientation>(orientation), role));
}

void* QStandardItemModel_HorizontalHeaderItem(void* ptr, int column)
{
	return static_cast<QStandardItemModel*>(ptr)->horizontalHeaderItem(column);
}

void* QStandardItemModel_Index(void* ptr, int row, int column, void* parent)
{
	return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->index(row, column, *static_cast<QModelIndex*>(parent)));
}

void* QStandardItemModel_IndexDefault(void* ptr, int row, int column, void* parent)
{
		return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::index(row, column, *static_cast<QModelIndex*>(parent)));
}

void* QStandardItemModel_IndexFromItem(void* ptr, void* item)
{
	return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->indexFromItem(static_cast<QStandardItem*>(item)));
}

void QStandardItemModel_InsertColumn(void* ptr, int column, void* items)
{
	static_cast<QStandardItemModel*>(ptr)->insertColumn(column, *static_cast<QList<QStandardItem *>*>(items));
}

char QStandardItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::insertColumns(column, count, *static_cast<QModelIndex*>(parent));
}

void QStandardItemModel_InsertRow(void* ptr, int row, void* items)
{
	static_cast<QStandardItemModel*>(ptr)->insertRow(row, *static_cast<QList<QStandardItem *>*>(items));
}

void QStandardItemModel_InsertRow2(void* ptr, int row, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->insertRow(row, static_cast<QStandardItem*>(item));
}

char QStandardItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::insertRows(row, count, *static_cast<QModelIndex*>(parent));
}

void* QStandardItemModel_InvisibleRootItem(void* ptr)
{
	return static_cast<QStandardItemModel*>(ptr)->invisibleRootItem();
}

void* QStandardItemModel_Item(void* ptr, int row, int column)
{
	return static_cast<QStandardItemModel*>(ptr)->item(row, column);
}

void QStandardItemModel_ConnectItemChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStandardItemModel*>(ptr), static_cast<void (QStandardItemModel::*)(QStandardItem *)>(&QStandardItemModel::itemChanged), static_cast<MyQStandardItemModel*>(ptr), static_cast<void (MyQStandardItemModel::*)(QStandardItem *)>(&MyQStandardItemModel::Signal_ItemChanged), static_cast<Qt::ConnectionType>(t));
}

void QStandardItemModel_DisconnectItemChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStandardItemModel*>(ptr), static_cast<void (QStandardItemModel::*)(QStandardItem *)>(&QStandardItemModel::itemChanged), static_cast<MyQStandardItemModel*>(ptr), static_cast<void (MyQStandardItemModel::*)(QStandardItem *)>(&MyQStandardItemModel::Signal_ItemChanged));
}

void QStandardItemModel_ItemChanged(void* ptr, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->itemChanged(static_cast<QStandardItem*>(item));
}

struct QtGui_PackedList QStandardItemModel_ItemDataDefault(void* ptr, void* index)
{
		return ({ QMap<int, QVariant>* tmpValuea1d4ef = new QMap<int, QVariant>(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::itemData(*static_cast<QModelIndex*>(index))); QtGui_PackedList { tmpValuea1d4ef, tmpValuea1d4ef->size() }; });
}

void* QStandardItemModel_ItemFromIndex(void* ptr, void* index)
{
	return static_cast<QStandardItemModel*>(ptr)->itemFromIndex(*static_cast<QModelIndex*>(index));
}

void* QStandardItemModel_ItemPrototype(void* ptr)
{
	return const_cast<QStandardItem*>(static_cast<QStandardItemModel*>(ptr)->itemPrototype());
}

void* QStandardItemModel_MimeDataDefault(void* ptr, void* indexes)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::mimeData(({ QList<QModelIndex>* tmpP = static_cast<QList<QModelIndex>*>(indexes); QList<QModelIndex> tmpV = *tmpP; tmpP->~QList(); free(tmpP); tmpV; }));
}

struct QtGui_PackedString QStandardItemModel_MimeTypesDefault(void* ptr)
{
		return ({ QByteArray* t83a37d = new QByteArray(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::mimeTypes().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t83a37d->prepend("WHITESPACE").constData()+10), t83a37d->size()-10, t83a37d }; });
}

void* QStandardItemModel_Parent(void* ptr, void* child)
{
	return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->parent(*static_cast<QModelIndex*>(child)));
}

void* QStandardItemModel_ParentDefault(void* ptr, void* child)
{
		return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::parent(*static_cast<QModelIndex*>(child)));
}

char QStandardItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::removeColumns(column, count, *static_cast<QModelIndex*>(parent));
}

char QStandardItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::removeRows(row, count, *static_cast<QModelIndex*>(parent));
}

int QStandardItemModel_RowCount(void* ptr, void* parent)
{
	return static_cast<QStandardItemModel*>(ptr)->rowCount(*static_cast<QModelIndex*>(parent));
}

int QStandardItemModel_RowCountDefault(void* ptr, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::rowCount(*static_cast<QModelIndex*>(parent));
}

void QStandardItemModel_SetColumnCount(void* ptr, int columns)
{
	static_cast<QStandardItemModel*>(ptr)->setColumnCount(columns);
}

char QStandardItemModel_SetDataDefault(void* ptr, void* index, void* value, int role)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::setData(*static_cast<QModelIndex*>(index), *static_cast<QVariant*>(value), role);
}

char QStandardItemModel_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::setHeaderData(section, static_cast<Qt::Orientation>(orientation), *static_cast<QVariant*>(value), role);
}

void QStandardItemModel_SetHorizontalHeaderItem(void* ptr, int column, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->setHorizontalHeaderItem(column, static_cast<QStandardItem*>(item));
}

void QStandardItemModel_SetHorizontalHeaderLabels(void* ptr, struct QtGui_PackedString labels)
{
	static_cast<QStandardItemModel*>(ptr)->setHorizontalHeaderLabels(QString::fromUtf8(labels.data, labels.len).split("¡¦!", QString::SkipEmptyParts));
}

void QStandardItemModel_SetItem(void* ptr, int row, int column, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->setItem(row, column, static_cast<QStandardItem*>(item));
}

void QStandardItemModel_SetItem2(void* ptr, int row, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->setItem(row, static_cast<QStandardItem*>(item));
}

char QStandardItemModel_SetItemDataDefault(void* ptr, void* index, void* roles)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::setItemData(*static_cast<QModelIndex*>(index), *static_cast<QMap<int, QVariant>*>(roles));
}

void QStandardItemModel_SetItemPrototype(void* ptr, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->setItemPrototype(static_cast<QStandardItem*>(item));
}

void QStandardItemModel_SetItemRoleNames(void* ptr, void* roleNames)
{
	static_cast<QStandardItemModel*>(ptr)->setItemRoleNames(*static_cast<QHash<int, QByteArray>*>(roleNames));
}

void QStandardItemModel_SetRowCount(void* ptr, int rows)
{
	static_cast<QStandardItemModel*>(ptr)->setRowCount(rows);
}

void QStandardItemModel_SetSortRole(void* ptr, int role)
{
	static_cast<QStandardItemModel*>(ptr)->setSortRole(role);
}

void QStandardItemModel_SetVerticalHeaderItem(void* ptr, int row, void* item)
{
	static_cast<QStandardItemModel*>(ptr)->setVerticalHeaderItem(row, static_cast<QStandardItem*>(item));
}

void QStandardItemModel_SetVerticalHeaderLabels(void* ptr, struct QtGui_PackedString labels)
{
	static_cast<QStandardItemModel*>(ptr)->setVerticalHeaderLabels(QString::fromUtf8(labels.data, labels.len).split("¡¦!", QString::SkipEmptyParts));
}

void* QStandardItemModel_SiblingDefault(void* ptr, int row, int column, void* idx)
{
		return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::sibling(row, column, *static_cast<QModelIndex*>(idx)));
}

void QStandardItemModel_SortDefault(void* ptr, int column, long long order)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::sort(column, static_cast<Qt::SortOrder>(order));
}

int QStandardItemModel_SortRole(void* ptr)
{
	return static_cast<QStandardItemModel*>(ptr)->sortRole();
}

long long QStandardItemModel_SupportedDropActionsDefault(void* ptr)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::supportedDropActions();
}

struct QtGui_PackedList QStandardItemModel_TakeColumn(void* ptr, int column)
{
	return ({ QList<QStandardItem *>* tmpValuecf2c85 = new QList<QStandardItem *>(static_cast<QStandardItemModel*>(ptr)->takeColumn(column)); QtGui_PackedList { tmpValuecf2c85, tmpValuecf2c85->size() }; });
}

void* QStandardItemModel_TakeHorizontalHeaderItem(void* ptr, int column)
{
	return static_cast<QStandardItemModel*>(ptr)->takeHorizontalHeaderItem(column);
}

void* QStandardItemModel_TakeItem(void* ptr, int row, int column)
{
	return static_cast<QStandardItemModel*>(ptr)->takeItem(row, column);
}

struct QtGui_PackedList QStandardItemModel_TakeRow(void* ptr, int row)
{
	return ({ QList<QStandardItem *>* tmpValue064593 = new QList<QStandardItem *>(static_cast<QStandardItemModel*>(ptr)->takeRow(row)); QtGui_PackedList { tmpValue064593, tmpValue064593->size() }; });
}

void* QStandardItemModel_TakeVerticalHeaderItem(void* ptr, int row)
{
	return static_cast<QStandardItemModel*>(ptr)->takeVerticalHeaderItem(row);
}

void* QStandardItemModel_VerticalHeaderItem(void* ptr, int row)
{
	return static_cast<QStandardItemModel*>(ptr)->verticalHeaderItem(row);
}

void QStandardItemModel_DestroyQStandardItemModel(void* ptr)
{
	static_cast<QStandardItemModel*>(ptr)->~QStandardItemModel();
}

void QStandardItemModel_DestroyQStandardItemModelDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QStandardItemModel___appendColumn_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___appendColumn_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___appendColumn_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___appendRow_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___appendRow_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___appendRow_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___findItems_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___findItems_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___findItems_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___insertColumn_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___insertColumn_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___insertColumn_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___insertRow_items_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___insertRow_items_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___insertRow_items_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___itemData_atList(void* ptr, int v, int i)
{
	return new QVariant(({ QVariant tmp = static_cast<QMap<int, QVariant>*>(ptr)->value(v); if (i == static_cast<QMap<int, QVariant>*>(ptr)->size()-1) { static_cast<QMap<int, QVariant>*>(ptr)->~QMap(); free(ptr); }; tmp; }));
}

void QStandardItemModel___itemData_setList(void* ptr, int key, void* i)
{
	static_cast<QMap<int, QVariant>*>(ptr)->insert(key, *static_cast<QVariant*>(i));
}

void* QStandardItemModel___itemData_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QMap<int, QVariant>();
}

struct QtGui_PackedList QStandardItemModel___itemData_keyList(void* ptr)
{
	return ({ QList<int>* tmpValue249128 = new QList<int>(static_cast<QMap<int, QVariant>*>(ptr)->keys()); QtGui_PackedList { tmpValue249128, tmpValue249128->size() }; });
}

void* QStandardItemModel___mimeData_indexes_atList(void* ptr, int i)
{
	return new QModelIndex(({QModelIndex tmp = static_cast<QList<QModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QModelIndex>*>(ptr)->size()-1) { static_cast<QList<QModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___mimeData_indexes_setList(void* ptr, void* i)
{
	static_cast<QList<QModelIndex>*>(ptr)->append(*static_cast<QModelIndex*>(i));
}

void* QStandardItemModel___mimeData_indexes_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QModelIndex>();
}

void* QStandardItemModel___setItemData_roles_atList(void* ptr, int v, int i)
{
	return new QVariant(({ QVariant tmp = static_cast<QMap<int, QVariant>*>(ptr)->value(v); if (i == static_cast<QMap<int, QVariant>*>(ptr)->size()-1) { static_cast<QMap<int, QVariant>*>(ptr)->~QMap(); free(ptr); }; tmp; }));
}

void QStandardItemModel___setItemData_roles_setList(void* ptr, int key, void* i)
{
	static_cast<QMap<int, QVariant>*>(ptr)->insert(key, *static_cast<QVariant*>(i));
}

void* QStandardItemModel___setItemData_roles_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QMap<int, QVariant>();
}

struct QtGui_PackedList QStandardItemModel___setItemData_roles_keyList(void* ptr)
{
	return ({ QList<int>* tmpValue249128 = new QList<int>(static_cast<QMap<int, QVariant>*>(ptr)->keys()); QtGui_PackedList { tmpValue249128, tmpValue249128->size() }; });
}

void* QStandardItemModel___setItemRoleNames_roleNames_atList(void* ptr, int v, int i)
{
	return new QByteArray(({ QByteArray tmp = static_cast<QHash<int, QByteArray>*>(ptr)->value(v); if (i == static_cast<QHash<int, QByteArray>*>(ptr)->size()-1) { static_cast<QHash<int, QByteArray>*>(ptr)->~QHash(); free(ptr); }; tmp; }));
}

void QStandardItemModel___setItemRoleNames_roleNames_setList(void* ptr, int key, void* i)
{
	static_cast<QHash<int, QByteArray>*>(ptr)->insert(key, *static_cast<QByteArray*>(i));
}

void* QStandardItemModel___setItemRoleNames_roleNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QHash<int, QByteArray>();
}

struct QtGui_PackedList QStandardItemModel___setItemRoleNames_roleNames_keyList(void* ptr)
{
	return ({ QList<int>* tmpValue7fc3bb = new QList<int>(static_cast<QHash<int, QByteArray>*>(ptr)->keys()); QtGui_PackedList { tmpValue7fc3bb, tmpValue7fc3bb->size() }; });
}

void* QStandardItemModel___takeColumn_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___takeColumn_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___takeColumn_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

void* QStandardItemModel___takeRow_atList(void* ptr, int i)
{
	return ({QStandardItem * tmp = static_cast<QList<QStandardItem *>*>(ptr)->at(i); if (i == static_cast<QList<QStandardItem *>*>(ptr)->size()-1) { static_cast<QList<QStandardItem *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___takeRow_setList(void* ptr, void* i)
{
	static_cast<QList<QStandardItem *>*>(ptr)->append(static_cast<QStandardItem*>(i));
}

void* QStandardItemModel___takeRow_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QStandardItem *>();
}

int QStandardItemModel_____itemData_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____itemData_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____itemData_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QStandardItemModel_____setItemData_roles_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____setItemData_roles_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____setItemData_roles_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QStandardItemModel_____setItemRoleNames_roleNames_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____setItemRoleNames_roleNames_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____setItemRoleNames_roleNames_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

void* QStandardItemModel___changePersistentIndexList_from_atList(void* ptr, int i)
{
	return new QModelIndex(({QModelIndex tmp = static_cast<QList<QModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QModelIndex>*>(ptr)->size()-1) { static_cast<QList<QModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___changePersistentIndexList_from_setList(void* ptr, void* i)
{
	static_cast<QList<QModelIndex>*>(ptr)->append(*static_cast<QModelIndex*>(i));
}

void* QStandardItemModel___changePersistentIndexList_from_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QModelIndex>();
}

void* QStandardItemModel___changePersistentIndexList_to_atList(void* ptr, int i)
{
	return new QModelIndex(({QModelIndex tmp = static_cast<QList<QModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QModelIndex>*>(ptr)->size()-1) { static_cast<QList<QModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___changePersistentIndexList_to_setList(void* ptr, void* i)
{
	static_cast<QList<QModelIndex>*>(ptr)->append(*static_cast<QModelIndex*>(i));
}

void* QStandardItemModel___changePersistentIndexList_to_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QModelIndex>();
}

int QStandardItemModel___dataChanged_roles_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QVector<int>*>(ptr)->at(i); if (i == static_cast<QVector<int>*>(ptr)->size()-1) { static_cast<QVector<int>*>(ptr)->~QVector(); free(ptr); }; tmp; });
}

void QStandardItemModel___dataChanged_roles_setList(void* ptr, int i)
{
	static_cast<QVector<int>*>(ptr)->append(i);
}

void* QStandardItemModel___dataChanged_roles_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<int>();
}

void* QStandardItemModel___layoutAboutToBeChanged_parents_atList(void* ptr, int i)
{
	return new QPersistentModelIndex(({QPersistentModelIndex tmp = static_cast<QList<QPersistentModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QPersistentModelIndex>*>(ptr)->size()-1) { static_cast<QList<QPersistentModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___layoutAboutToBeChanged_parents_setList(void* ptr, void* i)
{
	static_cast<QList<QPersistentModelIndex>*>(ptr)->append(*static_cast<QPersistentModelIndex*>(i));
}

void* QStandardItemModel___layoutAboutToBeChanged_parents_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPersistentModelIndex>();
}

void* QStandardItemModel___layoutChanged_parents_atList(void* ptr, int i)
{
	return new QPersistentModelIndex(({QPersistentModelIndex tmp = static_cast<QList<QPersistentModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QPersistentModelIndex>*>(ptr)->size()-1) { static_cast<QList<QPersistentModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___layoutChanged_parents_setList(void* ptr, void* i)
{
	static_cast<QList<QPersistentModelIndex>*>(ptr)->append(*static_cast<QPersistentModelIndex*>(i));
}

void* QStandardItemModel___layoutChanged_parents_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QPersistentModelIndex>();
}

void* QStandardItemModel___match_atList(void* ptr, int i)
{
	return new QModelIndex(({QModelIndex tmp = static_cast<QList<QModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QModelIndex>*>(ptr)->size()-1) { static_cast<QList<QModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___match_setList(void* ptr, void* i)
{
	static_cast<QList<QModelIndex>*>(ptr)->append(*static_cast<QModelIndex*>(i));
}

void* QStandardItemModel___match_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QModelIndex>();
}

void* QStandardItemModel___persistentIndexList_atList(void* ptr, int i)
{
	return new QModelIndex(({QModelIndex tmp = static_cast<QList<QModelIndex>*>(ptr)->at(i); if (i == static_cast<QList<QModelIndex>*>(ptr)->size()-1) { static_cast<QList<QModelIndex>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___persistentIndexList_setList(void* ptr, void* i)
{
	static_cast<QList<QModelIndex>*>(ptr)->append(*static_cast<QModelIndex*>(i));
}

void* QStandardItemModel___persistentIndexList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QModelIndex>();
}

void* QStandardItemModel___roleNames_atList(void* ptr, int v, int i)
{
	return new QByteArray(({ QByteArray tmp = static_cast<QHash<int, QByteArray>*>(ptr)->value(v); if (i == static_cast<QHash<int, QByteArray>*>(ptr)->size()-1) { static_cast<QHash<int, QByteArray>*>(ptr)->~QHash(); free(ptr); }; tmp; }));
}

void QStandardItemModel___roleNames_setList(void* ptr, int key, void* i)
{
	static_cast<QHash<int, QByteArray>*>(ptr)->insert(key, *static_cast<QByteArray*>(i));
}

void* QStandardItemModel___roleNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QHash<int, QByteArray>();
}

struct QtGui_PackedList QStandardItemModel___roleNames_keyList(void* ptr)
{
	return ({ QList<int>* tmpValue7fc3bb = new QList<int>(static_cast<QHash<int, QByteArray>*>(ptr)->keys()); QtGui_PackedList { tmpValue7fc3bb, tmpValue7fc3bb->size() }; });
}

int QStandardItemModel_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____doSetRoleNames_roleNames_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QStandardItemModel_____roleNames_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____roleNames_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____roleNames_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

int QStandardItemModel_____setRoleNames_roleNames_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel_____setRoleNames_roleNames_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QStandardItemModel_____setRoleNames_roleNames_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

void* QStandardItemModel___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStandardItemModel___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QStandardItemModel___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStandardItemModel___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QStandardItemModel___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QStandardItemModel___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStandardItemModel___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QStandardItemModel___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStandardItemModel___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStandardItemModel___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QStandardItemModel_BuddyDefault(void* ptr, void* index)
{
		return new QModelIndex(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::buddy(*static_cast<QModelIndex*>(index)));
}

char QStandardItemModel_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::canDropMimeData(static_cast<QMimeData*>(data), static_cast<Qt::DropAction>(action), row, column, *static_cast<QModelIndex*>(parent));
}

char QStandardItemModel_CanFetchMoreDefault(void* ptr, void* parent)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::canFetchMore(*static_cast<QModelIndex*>(parent));
}

void QStandardItemModel_FetchMoreDefault(void* ptr, void* parent)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::fetchMore(*static_cast<QModelIndex*>(parent));
}

struct QtGui_PackedList QStandardItemModel_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags)
{
		return ({ QList<QModelIndex>* tmpValue0c2bda = new QList<QModelIndex>(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::match(*static_cast<QModelIndex*>(start), role, *static_cast<QVariant*>(value), hits, static_cast<Qt::MatchFlag>(flags))); QtGui_PackedList { tmpValue0c2bda, tmpValue0c2bda->size() }; });
}

char QStandardItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::moveColumns(*static_cast<QModelIndex*>(sourceParent), sourceColumn, count, *static_cast<QModelIndex*>(destinationParent), destinationChild);
}

char QStandardItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::moveRows(*static_cast<QModelIndex*>(sourceParent), sourceRow, count, *static_cast<QModelIndex*>(destinationParent), destinationChild);
}

void QStandardItemModel_ResetInternalDataDefault(void* ptr)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::resetInternalData();
}

void QStandardItemModel_RevertDefault(void* ptr)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::revert();
}

struct QtGui_PackedList QStandardItemModel_RoleNamesDefault(void* ptr)
{
		return ({ QHash<int, QByteArray>* tmpValuece7c38 = new QHash<int, QByteArray>(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::roleNames()); QtGui_PackedList { tmpValuece7c38, tmpValuece7c38->size() }; });
}

void* QStandardItemModel_SpanDefault(void* ptr, void* index)
{
		return ({ QSize tmpValue = static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::span(*static_cast<QModelIndex*>(index)); new QSize(tmpValue.width(), tmpValue.height()); });
}

char QStandardItemModel_SubmitDefault(void* ptr)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::submit();
}

long long QStandardItemModel_SupportedDragActionsDefault(void* ptr)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::supportedDragActions();
}

void QStandardItemModel_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::childEvent(static_cast<QChildEvent*>(event));
}

void QStandardItemModel_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QStandardItemModel_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::customEvent(static_cast<QEvent*>(event));
}

void QStandardItemModel_DeleteLaterDefault(void* ptr)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::deleteLater();
}

void QStandardItemModel_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QStandardItemModel_EventDefault(void* ptr, void* e)
{
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::event(static_cast<QEvent*>(e));
}

char QStandardItemModel_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QStandardItemModel_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::metaObject());
}

void QStandardItemModel_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QStandardItemModel*>(ptr)->QStandardItemModel::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QStaticText*)
void* QStaticText_NewQStaticText()
{
	return new QStaticText();
}

void* QStaticText_NewQStaticText2(struct QtGui_PackedString text)
{
	return new QStaticText(QString::fromUtf8(text.data, text.len));
}

void* QStaticText_NewQStaticText3(void* other)
{
	return new QStaticText(*static_cast<QStaticText*>(other));
}

long long QStaticText_PerformanceHint(void* ptr)
{
	return static_cast<QStaticText*>(ptr)->performanceHint();
}

void QStaticText_Prepare(void* ptr, void* matrix, void* font)
{
	static_cast<QStaticText*>(ptr)->prepare(*static_cast<QTransform*>(matrix), *static_cast<QFont*>(font));
}

void QStaticText_SetPerformanceHint(void* ptr, long long performanceHint)
{
	static_cast<QStaticText*>(ptr)->setPerformanceHint(static_cast<QStaticText::PerformanceHint>(performanceHint));
}

void QStaticText_SetText(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QStaticText*>(ptr)->setText(QString::fromUtf8(text.data, text.len));
}

void QStaticText_SetTextFormat(void* ptr, long long textFormat)
{
	static_cast<QStaticText*>(ptr)->setTextFormat(static_cast<Qt::TextFormat>(textFormat));
}

void QStaticText_SetTextOption(void* ptr, void* textOption)
{
	static_cast<QStaticText*>(ptr)->setTextOption(*static_cast<QTextOption*>(textOption));
}

void QStaticText_SetTextWidth(void* ptr, double textWidth)
{
	static_cast<QStaticText*>(ptr)->setTextWidth(textWidth);
}

void* QStaticText_Size(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QStaticText*>(ptr)->size(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QStaticText_Swap(void* ptr, void* other)
{
	static_cast<QStaticText*>(ptr)->swap(*static_cast<QStaticText*>(other));
}

struct QtGui_PackedString QStaticText_Text(void* ptr)
{
	return ({ QByteArray* t6fe556 = new QByteArray(static_cast<QStaticText*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(t6fe556->prepend("WHITESPACE").constData()+10), t6fe556->size()-10, t6fe556 }; });
}

long long QStaticText_TextFormat(void* ptr)
{
	return static_cast<QStaticText*>(ptr)->textFormat();
}

void* QStaticText_TextOption(void* ptr)
{
	return new QTextOption(static_cast<QStaticText*>(ptr)->textOption());
}

double QStaticText_TextWidth(void* ptr)
{
	return static_cast<QStaticText*>(ptr)->textWidth();
}

void QStaticText_DestroyQStaticText(void* ptr)
{
	static_cast<QStaticText*>(ptr)->~QStaticText();
}

class MyQStatusTipEvent: public QStatusTipEvent
{
public:
	MyQStatusTipEvent(const QString &tip) : QStatusTipEvent(tip) {QStatusTipEvent_QStatusTipEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QStatusTipEvent*)
Q_DECLARE_METATYPE(MyQStatusTipEvent*)

int QStatusTipEvent_QStatusTipEvent_QRegisterMetaType(){qRegisterMetaType<QStatusTipEvent*>(); return qRegisterMetaType<MyQStatusTipEvent*>();}

void* QStatusTipEvent_NewQStatusTipEvent(struct QtGui_PackedString tip)
{
	return new MyQStatusTipEvent(QString::fromUtf8(tip.data, tip.len));
}

struct QtGui_PackedString QStatusTipEvent_Tip(void* ptr)
{
	return ({ QByteArray* t663d3b = new QByteArray(static_cast<QStatusTipEvent*>(ptr)->tip().toUtf8()); QtGui_PackedString { const_cast<char*>(t663d3b->prepend("WHITESPACE").constData()+10), t663d3b->size()-10, t663d3b }; });
}

class MyQStyleHints: public QStyleHints
{
public:
	void Signal_CursorFlashTimeChanged(int cursorFlashTime) { callbackQStyleHints_CursorFlashTimeChanged(this, cursorFlashTime); };
	void Signal_KeyboardInputIntervalChanged(int keyboardInputInterval) { callbackQStyleHints_KeyboardInputIntervalChanged(this, keyboardInputInterval); };
	void Signal_MouseDoubleClickIntervalChanged(int mouseDoubleClickInterval) { callbackQStyleHints_MouseDoubleClickIntervalChanged(this, mouseDoubleClickInterval); };
	void Signal_MousePressAndHoldIntervalChanged(int mousePressAndHoldInterval) { callbackQStyleHints_MousePressAndHoldIntervalChanged(this, mousePressAndHoldInterval); };
	void Signal_MouseQuickSelectionThresholdChanged(int threshold) { callbackQStyleHints_MouseQuickSelectionThresholdChanged(this, threshold); };
	void Signal_ShowShortcutsInContextMenusChanged(bool vbo) { callbackQStyleHints_ShowShortcutsInContextMenusChanged(this, vbo); };
	void Signal_StartDragDistanceChanged(int startDragDistance) { callbackQStyleHints_StartDragDistanceChanged(this, startDragDistance); };
	void Signal_StartDragTimeChanged(int startDragTime) { callbackQStyleHints_StartDragTimeChanged(this, startDragTime); };
	void Signal_TabFocusBehaviorChanged(Qt::TabFocusBehavior tabFocusBehavior) { callbackQStyleHints_TabFocusBehaviorChanged(this, tabFocusBehavior); };
	void Signal_UseHoverEffectsChanged(bool useHoverEffects) { callbackQStyleHints_UseHoverEffectsChanged(this, useHoverEffects); };
	void Signal_WheelScrollLinesChanged(int scrollLines) { callbackQStyleHints_WheelScrollLinesChanged(this, scrollLines); };
	void childEvent(QChildEvent * event) { callbackQStyleHints_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQStyleHints_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQStyleHints_CustomEvent(this, event); };
	void deleteLater() { callbackQStyleHints_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQStyleHints_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQStyleHints_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQStyleHints_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQStyleHints_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQStyleHints_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQStyleHints_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQStyleHints_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QStyleHints*)
Q_DECLARE_METATYPE(MyQStyleHints*)

int QStyleHints_QStyleHints_QRegisterMetaType(){qRegisterMetaType<QStyleHints*>(); return qRegisterMetaType<MyQStyleHints*>();}

int QStyleHints_CursorFlashTime(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->cursorFlashTime();
}

void QStyleHints_ConnectCursorFlashTimeChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::cursorFlashTimeChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_CursorFlashTimeChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectCursorFlashTimeChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::cursorFlashTimeChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_CursorFlashTimeChanged));
}

void QStyleHints_CursorFlashTimeChanged(void* ptr, int cursorFlashTime)
{
	static_cast<QStyleHints*>(ptr)->cursorFlashTimeChanged(cursorFlashTime);
}

double QStyleHints_FontSmoothingGamma(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->fontSmoothingGamma();
}

int QStyleHints_KeyboardAutoRepeatRate(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->keyboardAutoRepeatRate();
}

int QStyleHints_KeyboardInputInterval(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->keyboardInputInterval();
}

void QStyleHints_ConnectKeyboardInputIntervalChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::keyboardInputIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_KeyboardInputIntervalChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectKeyboardInputIntervalChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::keyboardInputIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_KeyboardInputIntervalChanged));
}

void QStyleHints_KeyboardInputIntervalChanged(void* ptr, int keyboardInputInterval)
{
	static_cast<QStyleHints*>(ptr)->keyboardInputIntervalChanged(keyboardInputInterval);
}

int QStyleHints_MouseDoubleClickDistance(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->mouseDoubleClickDistance();
}

int QStyleHints_MouseDoubleClickInterval(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->mouseDoubleClickInterval();
}

void QStyleHints_ConnectMouseDoubleClickIntervalChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mouseDoubleClickIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MouseDoubleClickIntervalChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectMouseDoubleClickIntervalChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mouseDoubleClickIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MouseDoubleClickIntervalChanged));
}

void QStyleHints_MouseDoubleClickIntervalChanged(void* ptr, int mouseDoubleClickInterval)
{
	static_cast<QStyleHints*>(ptr)->mouseDoubleClickIntervalChanged(mouseDoubleClickInterval);
}

int QStyleHints_MousePressAndHoldInterval(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->mousePressAndHoldInterval();
}

void QStyleHints_ConnectMousePressAndHoldIntervalChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mousePressAndHoldIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MousePressAndHoldIntervalChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectMousePressAndHoldIntervalChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mousePressAndHoldIntervalChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MousePressAndHoldIntervalChanged));
}

void QStyleHints_MousePressAndHoldIntervalChanged(void* ptr, int mousePressAndHoldInterval)
{
	static_cast<QStyleHints*>(ptr)->mousePressAndHoldIntervalChanged(mousePressAndHoldInterval);
}

int QStyleHints_MouseQuickSelectionThreshold(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->mouseQuickSelectionThreshold();
}

void QStyleHints_ConnectMouseQuickSelectionThresholdChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mouseQuickSelectionThresholdChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MouseQuickSelectionThresholdChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectMouseQuickSelectionThresholdChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::mouseQuickSelectionThresholdChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_MouseQuickSelectionThresholdChanged));
}

void QStyleHints_MouseQuickSelectionThresholdChanged(void* ptr, int threshold)
{
	static_cast<QStyleHints*>(ptr)->mouseQuickSelectionThresholdChanged(threshold);
}

void* QStyleHints_PasswordMaskCharacter(void* ptr)
{
	return new QChar(static_cast<QStyleHints*>(ptr)->passwordMaskCharacter());
}

int QStyleHints_PasswordMaskDelay(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->passwordMaskDelay();
}

char QStyleHints_SetFocusOnTouchRelease(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->setFocusOnTouchRelease();
}

void QStyleHints_SetShowShortcutsInContextMenus(void* ptr, char showShortcutsInContextMenus)
{
	static_cast<QStyleHints*>(ptr)->setShowShortcutsInContextMenus(showShortcutsInContextMenus != 0);
}

void QStyleHints_SetUseHoverEffects(void* ptr, char useHoverEffects)
{
	static_cast<QStyleHints*>(ptr)->setUseHoverEffects(useHoverEffects != 0);
}

char QStyleHints_ShowIsFullScreen(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->showIsFullScreen();
}

char QStyleHints_ShowIsMaximized(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->showIsMaximized();
}

char QStyleHints_ShowShortcutsInContextMenus(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->showShortcutsInContextMenus();
}

void QStyleHints_ConnectShowShortcutsInContextMenusChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(bool)>(&QStyleHints::showShortcutsInContextMenusChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(bool)>(&MyQStyleHints::Signal_ShowShortcutsInContextMenusChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectShowShortcutsInContextMenusChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(bool)>(&QStyleHints::showShortcutsInContextMenusChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(bool)>(&MyQStyleHints::Signal_ShowShortcutsInContextMenusChanged));
}

void QStyleHints_ShowShortcutsInContextMenusChanged(void* ptr, char vbo)
{
	static_cast<QStyleHints*>(ptr)->showShortcutsInContextMenusChanged(vbo != 0);
}

char QStyleHints_SingleClickActivation(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->singleClickActivation();
}

int QStyleHints_StartDragDistance(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->startDragDistance();
}

void QStyleHints_ConnectStartDragDistanceChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::startDragDistanceChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_StartDragDistanceChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectStartDragDistanceChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::startDragDistanceChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_StartDragDistanceChanged));
}

void QStyleHints_StartDragDistanceChanged(void* ptr, int startDragDistance)
{
	static_cast<QStyleHints*>(ptr)->startDragDistanceChanged(startDragDistance);
}

int QStyleHints_StartDragTime(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->startDragTime();
}

void QStyleHints_ConnectStartDragTimeChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::startDragTimeChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_StartDragTimeChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectStartDragTimeChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::startDragTimeChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_StartDragTimeChanged));
}

void QStyleHints_StartDragTimeChanged(void* ptr, int startDragTime)
{
	static_cast<QStyleHints*>(ptr)->startDragTimeChanged(startDragTime);
}

int QStyleHints_StartDragVelocity(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->startDragVelocity();
}

long long QStyleHints_TabFocusBehavior(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->tabFocusBehavior();
}

void QStyleHints_ConnectTabFocusBehaviorChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::TabFocusBehavior>();
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(Qt::TabFocusBehavior)>(&QStyleHints::tabFocusBehaviorChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(Qt::TabFocusBehavior)>(&MyQStyleHints::Signal_TabFocusBehaviorChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectTabFocusBehaviorChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(Qt::TabFocusBehavior)>(&QStyleHints::tabFocusBehaviorChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(Qt::TabFocusBehavior)>(&MyQStyleHints::Signal_TabFocusBehaviorChanged));
}

void QStyleHints_TabFocusBehaviorChanged(void* ptr, long long tabFocusBehavior)
{
	static_cast<QStyleHints*>(ptr)->tabFocusBehaviorChanged(static_cast<Qt::TabFocusBehavior>(tabFocusBehavior));
}

int QStyleHints_TouchDoubleTapDistance(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->touchDoubleTapDistance();
}

char QStyleHints_UseHoverEffects(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->useHoverEffects();
}

void QStyleHints_ConnectUseHoverEffectsChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(bool)>(&QStyleHints::useHoverEffectsChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(bool)>(&MyQStyleHints::Signal_UseHoverEffectsChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectUseHoverEffectsChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(bool)>(&QStyleHints::useHoverEffectsChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(bool)>(&MyQStyleHints::Signal_UseHoverEffectsChanged));
}

void QStyleHints_UseHoverEffectsChanged(void* ptr, char useHoverEffects)
{
	static_cast<QStyleHints*>(ptr)->useHoverEffectsChanged(useHoverEffects != 0);
}

char QStyleHints_UseRtlExtensions(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->useRtlExtensions();
}

int QStyleHints_WheelScrollLines(void* ptr)
{
	return static_cast<QStyleHints*>(ptr)->wheelScrollLines();
}

void QStyleHints_ConnectWheelScrollLinesChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::wheelScrollLinesChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_WheelScrollLinesChanged), static_cast<Qt::ConnectionType>(t));
}

void QStyleHints_DisconnectWheelScrollLinesChanged(void* ptr)
{
	QObject::disconnect(static_cast<QStyleHints*>(ptr), static_cast<void (QStyleHints::*)(int)>(&QStyleHints::wheelScrollLinesChanged), static_cast<MyQStyleHints*>(ptr), static_cast<void (MyQStyleHints::*)(int)>(&MyQStyleHints::Signal_WheelScrollLinesChanged));
}

void QStyleHints_WheelScrollLinesChanged(void* ptr, int scrollLines)
{
	static_cast<QStyleHints*>(ptr)->wheelScrollLinesChanged(scrollLines);
}

void* QStyleHints___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStyleHints___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStyleHints___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QStyleHints___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QStyleHints___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QStyleHints___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QStyleHints___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStyleHints___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStyleHints___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QStyleHints___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QStyleHints___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QStyleHints___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QStyleHints_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::childEvent(static_cast<QChildEvent*>(event));
}

void QStyleHints_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QStyleHints_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::customEvent(static_cast<QEvent*>(event));
}

void QStyleHints_DeleteLaterDefault(void* ptr)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::deleteLater();
}

void QStyleHints_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QStyleHints_EventDefault(void* ptr, void* e)
{
		return static_cast<QStyleHints*>(ptr)->QStyleHints::event(static_cast<QEvent*>(e));
}

char QStyleHints_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QStyleHints*>(ptr)->QStyleHints::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QStyleHints*>(ptr)->QStyleHints::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QStyleHints*>(ptr)->QStyleHints::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QStyleHints*>(ptr)->QStyleHints::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QStyleHints*>(ptr)->QStyleHints::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QStyleHints_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QStyleHints*>(ptr)->QStyleHints::metaObject());
}

void QStyleHints_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QStyleHints*>(ptr)->QStyleHints::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQSurface: public QSurface
{
public:
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQSurface_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	QSize size() const { return *static_cast<QSize*>(callbackQSurface_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQSurface_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	 ~MyQSurface() { callbackQSurface_DestroyQSurface(this); };
};

Q_DECLARE_METATYPE(MyQSurface*)

int QSurface_QSurface_QRegisterMetaType(){qRegisterMetaType<QSurface*>(); return qRegisterMetaType<MyQSurface*>();}

void* QSurface_Format(void* ptr)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QOffscreenSurface*>(ptr)->format());
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QPaintDeviceWindow*>(ptr)->format());
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QWindow*>(ptr)->format());
	} else {
		return new QSurfaceFormat(static_cast<QSurface*>(ptr)->format());
	}
}

void* QSurface_Size(void* ptr)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QOffscreenSurface*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QSurface*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

char QSurface_SupportsOpenGL(void* ptr)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOffscreenSurface*>(ptr)->supportsOpenGL();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->supportsOpenGL();
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QWindow*>(ptr)->supportsOpenGL();
	} else {
		return static_cast<QSurface*>(ptr)->supportsOpenGL();
	}
}

long long QSurface_SurfaceClass(void* ptr)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOffscreenSurface*>(ptr)->surfaceClass();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->surfaceClass();
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QWindow*>(ptr)->surfaceClass();
	} else {
		return static_cast<QSurface*>(ptr)->surfaceClass();
	}
}

long long QSurface_SurfaceType(void* ptr)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOffscreenSurface*>(ptr)->surfaceType();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->surfaceType();
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QWindow*>(ptr)->surfaceType();
	} else {
		return static_cast<QSurface*>(ptr)->surfaceType();
	}
}

void QSurface_DestroyQSurface(void* ptr)
{
	static_cast<QSurface*>(ptr)->~QSurface();
}

void QSurface_DestroyQSurfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QSurfaceFormat)
Q_DECLARE_METATYPE(QSurfaceFormat*)
void* QSurfaceFormat_NewQSurfaceFormat()
{
	return new QSurfaceFormat();
}

void* QSurfaceFormat_NewQSurfaceFormat2(long long options)
{
	return new QSurfaceFormat(static_cast<QSurfaceFormat::FormatOption>(options));
}

void* QSurfaceFormat_NewQSurfaceFormat3(void* other)
{
	return new QSurfaceFormat(*static_cast<QSurfaceFormat*>(other));
}

int QSurfaceFormat_AlphaBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->alphaBufferSize();
}

int QSurfaceFormat_BlueBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->blueBufferSize();
}

long long QSurfaceFormat_ColorSpace(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->colorSpace();
}

void* QSurfaceFormat_QSurfaceFormat_DefaultFormat()
{
	return new QSurfaceFormat(QSurfaceFormat::defaultFormat());
}

int QSurfaceFormat_DepthBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->depthBufferSize();
}

int QSurfaceFormat_GreenBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->greenBufferSize();
}

char QSurfaceFormat_HasAlpha(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->hasAlpha();
}

int QSurfaceFormat_MajorVersion(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->majorVersion();
}

int QSurfaceFormat_MinorVersion(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->minorVersion();
}

long long QSurfaceFormat_Options(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->options();
}

long long QSurfaceFormat_Profile(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->profile();
}

int QSurfaceFormat_RedBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->redBufferSize();
}

long long QSurfaceFormat_RenderableType(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->renderableType();
}

int QSurfaceFormat_Samples(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->samples();
}

void QSurfaceFormat_SetAlphaBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setAlphaBufferSize(size);
}

void QSurfaceFormat_SetBlueBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setBlueBufferSize(size);
}

void QSurfaceFormat_SetColorSpace(void* ptr, long long colorSpace)
{
	static_cast<QSurfaceFormat*>(ptr)->setColorSpace(static_cast<QSurfaceFormat::ColorSpace>(colorSpace));
}

void QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(void* format)
{
	QSurfaceFormat::setDefaultFormat(*static_cast<QSurfaceFormat*>(format));
}

void QSurfaceFormat_SetDepthBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setDepthBufferSize(size);
}

void QSurfaceFormat_SetGreenBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setGreenBufferSize(size);
}

void QSurfaceFormat_SetMajorVersion(void* ptr, int major)
{
	static_cast<QSurfaceFormat*>(ptr)->setMajorVersion(major);
}

void QSurfaceFormat_SetMinorVersion(void* ptr, int minor)
{
	static_cast<QSurfaceFormat*>(ptr)->setMinorVersion(minor);
}

void QSurfaceFormat_SetOption(void* ptr, long long option, char on)
{
	static_cast<QSurfaceFormat*>(ptr)->setOption(static_cast<QSurfaceFormat::FormatOption>(option), on != 0);
}

void QSurfaceFormat_SetOptions(void* ptr, long long options)
{
	static_cast<QSurfaceFormat*>(ptr)->setOptions(static_cast<QSurfaceFormat::FormatOption>(options));
}

void QSurfaceFormat_SetProfile(void* ptr, long long profile)
{
	static_cast<QSurfaceFormat*>(ptr)->setProfile(static_cast<QSurfaceFormat::OpenGLContextProfile>(profile));
}

void QSurfaceFormat_SetRedBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setRedBufferSize(size);
}

void QSurfaceFormat_SetRenderableType(void* ptr, long long ty)
{
	static_cast<QSurfaceFormat*>(ptr)->setRenderableType(static_cast<QSurfaceFormat::RenderableType>(ty));
}

void QSurfaceFormat_SetSamples(void* ptr, int numSamples)
{
	static_cast<QSurfaceFormat*>(ptr)->setSamples(numSamples);
}

void QSurfaceFormat_SetStencilBufferSize(void* ptr, int size)
{
	static_cast<QSurfaceFormat*>(ptr)->setStencilBufferSize(size);
}

void QSurfaceFormat_SetStereo(void* ptr, char enable)
{
	static_cast<QSurfaceFormat*>(ptr)->setStereo(enable != 0);
}

void QSurfaceFormat_SetSwapBehavior(void* ptr, long long behavior)
{
	static_cast<QSurfaceFormat*>(ptr)->setSwapBehavior(static_cast<QSurfaceFormat::SwapBehavior>(behavior));
}

void QSurfaceFormat_SetSwapInterval(void* ptr, int interval)
{
	static_cast<QSurfaceFormat*>(ptr)->setSwapInterval(interval);
}

void QSurfaceFormat_SetVersion(void* ptr, int major, int minor)
{
	static_cast<QSurfaceFormat*>(ptr)->setVersion(major, minor);
}

int QSurfaceFormat_StencilBufferSize(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->stencilBufferSize();
}

char QSurfaceFormat_Stereo(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->stereo();
}

long long QSurfaceFormat_SwapBehavior(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->swapBehavior();
}

int QSurfaceFormat_SwapInterval(void* ptr)
{
	return static_cast<QSurfaceFormat*>(ptr)->swapInterval();
}

char QSurfaceFormat_TestOption(void* ptr, long long option)
{
	return static_cast<QSurfaceFormat*>(ptr)->testOption(static_cast<QSurfaceFormat::FormatOption>(option));
}

void QSurfaceFormat_DestroyQSurfaceFormat(void* ptr)
{
	static_cast<QSurfaceFormat*>(ptr)->~QSurfaceFormat();
}

class MyQSyntaxHighlighter: public QSyntaxHighlighter
{
public:
	MyQSyntaxHighlighter(QObject *parent) : QSyntaxHighlighter(parent) {QSyntaxHighlighter_QSyntaxHighlighter_QRegisterMetaType();};
	MyQSyntaxHighlighter(QTextDocument *parent) : QSyntaxHighlighter(parent) {QSyntaxHighlighter_QSyntaxHighlighter_QRegisterMetaType();};
	void highlightBlock(const QString & text) { QByteArray* t372ea0 = new QByteArray(text.toUtf8()); QtGui_PackedString textPacked = { const_cast<char*>(t372ea0->prepend("WHITESPACE").constData()+10), t372ea0->size()-10, t372ea0 };callbackQSyntaxHighlighter_HighlightBlock(this, textPacked); };
	void rehighlight() { callbackQSyntaxHighlighter_Rehighlight(this); };
	void rehighlightBlock(const QTextBlock & block) { callbackQSyntaxHighlighter_RehighlightBlock(this, const_cast<QTextBlock*>(&block)); };
	 ~MyQSyntaxHighlighter() { callbackQSyntaxHighlighter_DestroyQSyntaxHighlighter(this); };
	void childEvent(QChildEvent * event) { callbackQSyntaxHighlighter_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQSyntaxHighlighter_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQSyntaxHighlighter_CustomEvent(this, event); };
	void deleteLater() { callbackQSyntaxHighlighter_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQSyntaxHighlighter_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQSyntaxHighlighter_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQSyntaxHighlighter_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQSyntaxHighlighter_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQSyntaxHighlighter_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQSyntaxHighlighter_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQSyntaxHighlighter_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QSyntaxHighlighter*)
Q_DECLARE_METATYPE(MyQSyntaxHighlighter*)

int QSyntaxHighlighter_QSyntaxHighlighter_QRegisterMetaType(){qRegisterMetaType<QSyntaxHighlighter*>(); return qRegisterMetaType<MyQSyntaxHighlighter*>();}

void* QSyntaxHighlighter_NewQSyntaxHighlighter(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQSyntaxHighlighter(static_cast<QWindow*>(parent));
	} else {
		return new MyQSyntaxHighlighter(static_cast<QObject*>(parent));
	}
}

void* QSyntaxHighlighter_NewQSyntaxHighlighter2(void* parent)
{
	return new MyQSyntaxHighlighter(static_cast<QTextDocument*>(parent));
}

void* QSyntaxHighlighter_CurrentBlock(void* ptr)
{
	return new QTextBlock(static_cast<QSyntaxHighlighter*>(ptr)->currentBlock());
}

int QSyntaxHighlighter_CurrentBlockState(void* ptr)
{
	return static_cast<QSyntaxHighlighter*>(ptr)->currentBlockState();
}

void* QSyntaxHighlighter_CurrentBlockUserData(void* ptr)
{
	return static_cast<QSyntaxHighlighter*>(ptr)->currentBlockUserData();
}

void* QSyntaxHighlighter_Document(void* ptr)
{
	return static_cast<QSyntaxHighlighter*>(ptr)->document();
}

void* QSyntaxHighlighter_Format(void* ptr, int position)
{
	return new QTextCharFormat(static_cast<QSyntaxHighlighter*>(ptr)->format(position));
}

void QSyntaxHighlighter_HighlightBlock(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QSyntaxHighlighter*>(ptr)->highlightBlock(QString::fromUtf8(text.data, text.len));
}

int QSyntaxHighlighter_PreviousBlockState(void* ptr)
{
	return static_cast<QSyntaxHighlighter*>(ptr)->previousBlockState();
}

void QSyntaxHighlighter_Rehighlight(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QSyntaxHighlighter*>(ptr), "rehighlight");
}

void QSyntaxHighlighter_RehighlightDefault(void* ptr)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::rehighlight();
}

void QSyntaxHighlighter_RehighlightBlock(void* ptr, void* block)
{
	QMetaObject::invokeMethod(static_cast<QSyntaxHighlighter*>(ptr), "rehighlightBlock", Q_ARG(const QTextBlock, *static_cast<QTextBlock*>(block)));
}

void QSyntaxHighlighter_RehighlightBlockDefault(void* ptr, void* block)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::rehighlightBlock(*static_cast<QTextBlock*>(block));
}

void QSyntaxHighlighter_SetCurrentBlockState(void* ptr, int newState)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setCurrentBlockState(newState);
}

void QSyntaxHighlighter_SetCurrentBlockUserData(void* ptr, void* data)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setCurrentBlockUserData(static_cast<QTextBlockUserData*>(data));
}

void QSyntaxHighlighter_SetDocument(void* ptr, void* doc)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setDocument(static_cast<QTextDocument*>(doc));
}

void QSyntaxHighlighter_SetFormat(void* ptr, int start, int count, void* format)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setFormat(start, count, *static_cast<QTextCharFormat*>(format));
}

void QSyntaxHighlighter_SetFormat2(void* ptr, int start, int count, void* color)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setFormat(start, count, *static_cast<QColor*>(color));
}

void QSyntaxHighlighter_SetFormat3(void* ptr, int start, int count, void* font)
{
	static_cast<QSyntaxHighlighter*>(ptr)->setFormat(start, count, *static_cast<QFont*>(font));
}

void QSyntaxHighlighter_DestroyQSyntaxHighlighter(void* ptr)
{
	static_cast<QSyntaxHighlighter*>(ptr)->~QSyntaxHighlighter();
}

void QSyntaxHighlighter_DestroyQSyntaxHighlighterDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QSyntaxHighlighter___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSyntaxHighlighter___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSyntaxHighlighter___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QSyntaxHighlighter___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QSyntaxHighlighter___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QSyntaxHighlighter___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QSyntaxHighlighter___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSyntaxHighlighter___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSyntaxHighlighter___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QSyntaxHighlighter___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QSyntaxHighlighter___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QSyntaxHighlighter___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QSyntaxHighlighter_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::childEvent(static_cast<QChildEvent*>(event));
}

void QSyntaxHighlighter_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QSyntaxHighlighter_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::customEvent(static_cast<QEvent*>(event));
}

void QSyntaxHighlighter_DeleteLaterDefault(void* ptr)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::deleteLater();
}

void QSyntaxHighlighter_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QSyntaxHighlighter_EventDefault(void* ptr, void* e)
{
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::event(static_cast<QEvent*>(e));
}

char QSyntaxHighlighter_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QSyntaxHighlighter_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::metaObject());
}

void QSyntaxHighlighter_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QSyntaxHighlighter*>(ptr)->QSyntaxHighlighter::timerEvent(static_cast<QTimerEvent*>(event));
}

class MyQTabletEvent: public QTabletEvent
{
public:
	MyQTabletEvent(QEvent::Type ty, const QPointF &pos, const QPointF &globalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID, Qt::MouseButton button, Qt::MouseButtons buttons) : QTabletEvent(ty, pos, globalPos, device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, keyState, uniqueID, button, buttons) {QTabletEvent_QTabletEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QTabletEvent*)
Q_DECLARE_METATYPE(MyQTabletEvent*)

int QTabletEvent_QTabletEvent_QRegisterMetaType(){qRegisterMetaType<QTabletEvent*>(); return qRegisterMetaType<MyQTabletEvent*>();}

void* QTabletEvent_NewQTabletEvent2(long long ty, void* pos, void* globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, long long keyState, long long uniqueID, long long button, long long buttons)
{
	return new MyQTabletEvent(static_cast<QEvent::Type>(ty), *static_cast<QPointF*>(pos), *static_cast<QPointF*>(globalPos), device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, static_cast<Qt::KeyboardModifier>(keyState), uniqueID, static_cast<Qt::MouseButton>(button), static_cast<Qt::MouseButton>(buttons));
}

long long QTabletEvent_Button(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->button();
}

long long QTabletEvent_Buttons(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->buttons();
}

long long QTabletEvent_DeviceType(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->deviceType();
}

void* QTabletEvent_GlobalPos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QTabletEvent*>(ptr)->globalPos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QTabletEvent_GlobalPosF(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QTabletEvent*>(ptr)->globalPosF());
}

int QTabletEvent_GlobalX(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->globalX();
}

int QTabletEvent_GlobalY(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->globalY();
}

long long QTabletEvent_PointerType(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->pointerType();
}

void* QTabletEvent_Pos(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QTabletEvent*>(ptr)->pos(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QTabletEvent_PosF(void* ptr)
{
	return const_cast<QPointF*>(&static_cast<QTabletEvent*>(ptr)->posF());
}

double QTabletEvent_Pressure(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->pressure();
}

double QTabletEvent_Rotation(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->rotation();
}

double QTabletEvent_TangentialPressure(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->tangentialPressure();
}

long long QTabletEvent_UniqueId(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->uniqueId();
}

int QTabletEvent_X(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->x();
}

int QTabletEvent_XTilt(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->xTilt();
}

int QTabletEvent_Y(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->y();
}

int QTabletEvent_YTilt(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->yTilt();
}

int QTabletEvent_Z(void* ptr)
{
	return static_cast<QTabletEvent*>(ptr)->z();
}

Q_DECLARE_METATYPE(QTextBlock*)
void* QTextBlock_NewQTextBlock3(void* other)
{
	return new QTextBlock(*static_cast<QTextBlock*>(other));
}

void* QTextBlock_BlockFormat(void* ptr)
{
	return new QTextBlockFormat(static_cast<QTextBlock*>(ptr)->blockFormat());
}

int QTextBlock_BlockFormatIndex(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->blockFormatIndex();
}

int QTextBlock_BlockNumber(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->blockNumber();
}

void* QTextBlock_CharFormat(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextBlock*>(ptr)->charFormat());
}

int QTextBlock_CharFormatIndex(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->charFormatIndex();
}

void QTextBlock_ClearLayout(void* ptr)
{
	static_cast<QTextBlock*>(ptr)->clearLayout();
}

char QTextBlock_Contains(void* ptr, int position)
{
	return static_cast<QTextBlock*>(ptr)->contains(position);
}

void* QTextBlock_Document(void* ptr)
{
	return const_cast<QTextDocument*>(static_cast<QTextBlock*>(ptr)->document());
}

int QTextBlock_FirstLineNumber(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->firstLineNumber();
}

char QTextBlock_IsValid(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->isValid();
}

char QTextBlock_IsVisible(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->isVisible();
}

void* QTextBlock_Layout(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->layout();
}

int QTextBlock_Length(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->length();
}

int QTextBlock_LineCount(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->lineCount();
}

void* QTextBlock_Next(void* ptr)
{
	return new QTextBlock(static_cast<QTextBlock*>(ptr)->next());
}

int QTextBlock_Position(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->position();
}

void* QTextBlock_Previous(void* ptr)
{
	return new QTextBlock(static_cast<QTextBlock*>(ptr)->previous());
}

int QTextBlock_Revision(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->revision();
}

void QTextBlock_SetLineCount(void* ptr, int count)
{
	static_cast<QTextBlock*>(ptr)->setLineCount(count);
}

void QTextBlock_SetRevision(void* ptr, int rev)
{
	static_cast<QTextBlock*>(ptr)->setRevision(rev);
}

void QTextBlock_SetUserData(void* ptr, void* data)
{
	static_cast<QTextBlock*>(ptr)->setUserData(static_cast<QTextBlockUserData*>(data));
}

void QTextBlock_SetUserState(void* ptr, int state)
{
	static_cast<QTextBlock*>(ptr)->setUserState(state);
}

void QTextBlock_SetVisible(void* ptr, char visible)
{
	static_cast<QTextBlock*>(ptr)->setVisible(visible != 0);
}

struct QtGui_PackedString QTextBlock_Text(void* ptr)
{
	return ({ QByteArray* t4bcf6c = new QByteArray(static_cast<QTextBlock*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(t4bcf6c->prepend("WHITESPACE").constData()+10), t4bcf6c->size()-10, t4bcf6c }; });
}

long long QTextBlock_TextDirection(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->textDirection();
}

void* QTextBlock_UserData(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->userData();
}

int QTextBlock_UserState(void* ptr)
{
	return static_cast<QTextBlock*>(ptr)->userState();
}

void* QTextBlock___textFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLayout::FormatRange>();
}

Q_DECLARE_METATYPE(QTextBlockFormat)
Q_DECLARE_METATYPE(QTextBlockFormat*)
void* QTextBlockFormat_NewQTextBlockFormat()
{
	return new QTextBlockFormat();
}

long long QTextBlockFormat_Alignment(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->alignment();
}

double QTextBlockFormat_BottomMargin(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->bottomMargin();
}

int QTextBlockFormat_HeadingLevel(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->headingLevel();
}

int QTextBlockFormat_Indent(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->indent();
}

double QTextBlockFormat_LeftMargin(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->leftMargin();
}

double QTextBlockFormat_LineHeight(void* ptr, double scriptLineHeight, double scaling)
{
	return static_cast<QTextBlockFormat*>(ptr)->lineHeight(scriptLineHeight, scaling);
}

double QTextBlockFormat_LineHeight2(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->lineHeight();
}

int QTextBlockFormat_LineHeightType(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->lineHeightType();
}

long long QTextBlockFormat_Marker(void* ptr)
{
	return static_cast<qint64>(static_cast<QTextBlockFormat*>(ptr)->marker());
}

char QTextBlockFormat_NonBreakableLines(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->nonBreakableLines();
}

long long QTextBlockFormat_PageBreakPolicy(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->pageBreakPolicy();
}

double QTextBlockFormat_RightMargin(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->rightMargin();
}

void QTextBlockFormat_SetAlignment(void* ptr, long long alignment)
{
	static_cast<QTextBlockFormat*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QTextBlockFormat_SetBottomMargin(void* ptr, double margin)
{
	static_cast<QTextBlockFormat*>(ptr)->setBottomMargin(margin);
}

void QTextBlockFormat_SetHeadingLevel(void* ptr, int level)
{
	static_cast<QTextBlockFormat*>(ptr)->setHeadingLevel(level);
}

void QTextBlockFormat_SetIndent(void* ptr, int indentation)
{
	static_cast<QTextBlockFormat*>(ptr)->setIndent(indentation);
}

void QTextBlockFormat_SetLeftMargin(void* ptr, double margin)
{
	static_cast<QTextBlockFormat*>(ptr)->setLeftMargin(margin);
}

void QTextBlockFormat_SetLineHeight(void* ptr, double height, int heightType)
{
	static_cast<QTextBlockFormat*>(ptr)->setLineHeight(height, heightType);
}

void QTextBlockFormat_SetMarker(void* ptr, long long marker)
{
	static_cast<QTextBlockFormat*>(ptr)->setMarker(static_cast<QTextBlockFormat::MarkerType>(marker));
}

void QTextBlockFormat_SetNonBreakableLines(void* ptr, char b)
{
	static_cast<QTextBlockFormat*>(ptr)->setNonBreakableLines(b != 0);
}

void QTextBlockFormat_SetPageBreakPolicy(void* ptr, long long policy)
{
	static_cast<QTextBlockFormat*>(ptr)->setPageBreakPolicy(static_cast<QTextFormat::PageBreakFlag>(policy));
}

void QTextBlockFormat_SetRightMargin(void* ptr, double margin)
{
	static_cast<QTextBlockFormat*>(ptr)->setRightMargin(margin);
}

void QTextBlockFormat_SetTextIndent(void* ptr, double indent)
{
	static_cast<QTextBlockFormat*>(ptr)->setTextIndent(indent);
}

void QTextBlockFormat_SetTopMargin(void* ptr, double margin)
{
	static_cast<QTextBlockFormat*>(ptr)->setTopMargin(margin);
}

double QTextBlockFormat_TextIndent(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->textIndent();
}

double QTextBlockFormat_TopMargin(void* ptr)
{
	return static_cast<QTextBlockFormat*>(ptr)->topMargin();
}

void* QTextBlockFormat___setTabPositions_tabs_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTextOption::Tab>();
}

void* QTextBlockFormat___tabPositions_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTextOption::Tab>();
}

class MyQTextBlockGroup: public QTextBlockGroup
{
public:
	MyQTextBlockGroup(QTextDocument *document) : QTextBlockGroup(document) {QTextBlockGroup_QTextBlockGroup_QRegisterMetaType();};
	void blockFormatChanged(const QTextBlock & block) { callbackQTextBlockGroup_BlockFormatChanged(this, const_cast<QTextBlock*>(&block)); };
	void blockInserted(const QTextBlock & block) { callbackQTextBlockGroup_BlockInserted(this, const_cast<QTextBlock*>(&block)); };
	void blockRemoved(const QTextBlock & block) { callbackQTextBlockGroup_BlockRemoved(this, const_cast<QTextBlock*>(&block)); };
	 ~MyQTextBlockGroup() { callbackQTextBlockGroup_DestroyQTextBlockGroup(this); };
	void childEvent(QChildEvent * event) { callbackQTextObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextObject_CustomEvent(this, event); };
	void deleteLater() { callbackQTextObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextBlockGroup*)
Q_DECLARE_METATYPE(MyQTextBlockGroup*)

int QTextBlockGroup_QTextBlockGroup_QRegisterMetaType(){qRegisterMetaType<QTextBlockGroup*>(); return qRegisterMetaType<MyQTextBlockGroup*>();}

void* QTextBlockGroup_NewQTextBlockGroup(void* document)
{
	return new MyQTextBlockGroup(static_cast<QTextDocument*>(document));
}

void QTextBlockGroup_BlockFormatChanged(void* ptr, void* block)
{
	static_cast<QTextBlockGroup*>(ptr)->blockFormatChanged(*static_cast<QTextBlock*>(block));
}

void QTextBlockGroup_BlockFormatChangedDefault(void* ptr, void* block)
{
	if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::blockFormatChanged(*static_cast<QTextBlock*>(block));
	} else {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::blockFormatChanged(*static_cast<QTextBlock*>(block));
	}
}

void QTextBlockGroup_BlockInserted(void* ptr, void* block)
{
	static_cast<QTextBlockGroup*>(ptr)->blockInserted(*static_cast<QTextBlock*>(block));
}

void QTextBlockGroup_BlockInsertedDefault(void* ptr, void* block)
{
	if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::blockInserted(*static_cast<QTextBlock*>(block));
	} else {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::blockInserted(*static_cast<QTextBlock*>(block));
	}
}

struct QtGui_PackedList QTextBlockGroup_BlockList(void* ptr)
{
	return ({ QList<QTextBlock>* tmpValue9018b9 = new QList<QTextBlock>(static_cast<QTextBlockGroup*>(ptr)->blockList()); QtGui_PackedList { tmpValue9018b9, tmpValue9018b9->size() }; });
}

void QTextBlockGroup_BlockRemoved(void* ptr, void* block)
{
	static_cast<QTextBlockGroup*>(ptr)->blockRemoved(*static_cast<QTextBlock*>(block));
}

void QTextBlockGroup_BlockRemovedDefault(void* ptr, void* block)
{
	if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::blockRemoved(*static_cast<QTextBlock*>(block));
	} else {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::blockRemoved(*static_cast<QTextBlock*>(block));
	}
}

void QTextBlockGroup_DestroyQTextBlockGroup(void* ptr)
{
	static_cast<QTextBlockGroup*>(ptr)->~QTextBlockGroup();
}

void QTextBlockGroup_DestroyQTextBlockGroupDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QTextBlockGroup___blockList_atList(void* ptr, int i)
{
	return new QTextBlock(({QTextBlock tmp = static_cast<QList<QTextBlock>*>(ptr)->at(i); if (i == static_cast<QList<QTextBlock>*>(ptr)->size()-1) { static_cast<QList<QTextBlock>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextBlockGroup___blockList_setList(void* ptr, void* i)
{
	static_cast<QList<QTextBlock>*>(ptr)->append(*static_cast<QTextBlock*>(i));
}

void* QTextBlockGroup___blockList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTextBlock>();
}

class MyQTextBlockUserData: public QTextBlockUserData
{
public:
	 ~MyQTextBlockUserData() { callbackQTextBlockUserData_DestroyQTextBlockUserData(this); };
};

Q_DECLARE_METATYPE(QTextBlockUserData*)
Q_DECLARE_METATYPE(MyQTextBlockUserData*)

int QTextBlockUserData_QTextBlockUserData_QRegisterMetaType(){qRegisterMetaType<QTextBlockUserData*>(); return qRegisterMetaType<MyQTextBlockUserData*>();}

void QTextBlockUserData_DestroyQTextBlockUserData(void* ptr)
{
	static_cast<QTextBlockUserData*>(ptr)->~QTextBlockUserData();
}

void QTextBlockUserData_DestroyQTextBlockUserDataDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QTextCharFormat)
Q_DECLARE_METATYPE(QTextCharFormat*)
void* QTextCharFormat_NewQTextCharFormat()
{
	return new QTextCharFormat();
}

struct QtGui_PackedString QTextCharFormat_AnchorHref(void* ptr)
{
	return ({ QByteArray* t7b8d88 = new QByteArray(static_cast<QTextCharFormat*>(ptr)->anchorHref().toUtf8()); QtGui_PackedString { const_cast<char*>(t7b8d88->prepend("WHITESPACE").constData()+10), t7b8d88->size()-10, t7b8d88 }; });
}

struct QtGui_PackedString QTextCharFormat_AnchorNames(void* ptr)
{
	return ({ QByteArray* t55bd77 = new QByteArray(static_cast<QTextCharFormat*>(ptr)->anchorNames().join("¡¦!").toUtf8()); QtGui_PackedString { const_cast<char*>(t55bd77->prepend("WHITESPACE").constData()+10), t55bd77->size()-10, t55bd77 }; });
}

void* QTextCharFormat_Font(void* ptr)
{
	return new QFont(static_cast<QTextCharFormat*>(ptr)->font());
}

long long QTextCharFormat_FontCapitalization(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontCapitalization();
}

void* QTextCharFormat_FontFamilies(void* ptr)
{
	return new QVariant(static_cast<QTextCharFormat*>(ptr)->fontFamilies());
}

struct QtGui_PackedString QTextCharFormat_FontFamily(void* ptr)
{
	return ({ QByteArray* t087f3f = new QByteArray(static_cast<QTextCharFormat*>(ptr)->fontFamily().toUtf8()); QtGui_PackedString { const_cast<char*>(t087f3f->prepend("WHITESPACE").constData()+10), t087f3f->size()-10, t087f3f }; });
}

char QTextCharFormat_FontFixedPitch(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontFixedPitch();
}

long long QTextCharFormat_FontHintingPreference(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontHintingPreference();
}

char QTextCharFormat_FontItalic(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontItalic();
}

char QTextCharFormat_FontKerning(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontKerning();
}

double QTextCharFormat_FontLetterSpacing(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontLetterSpacing();
}

long long QTextCharFormat_FontLetterSpacingType(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontLetterSpacingType();
}

char QTextCharFormat_FontOverline(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontOverline();
}

double QTextCharFormat_FontPointSize(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontPointSize();
}

int QTextCharFormat_FontStretch(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontStretch();
}

char QTextCharFormat_FontStrikeOut(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontStrikeOut();
}

long long QTextCharFormat_FontStyleHint(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontStyleHint();
}

void* QTextCharFormat_FontStyleName(void* ptr)
{
	return new QVariant(static_cast<QTextCharFormat*>(ptr)->fontStyleName());
}

long long QTextCharFormat_FontStyleStrategy(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontStyleStrategy();
}

char QTextCharFormat_FontUnderline(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontUnderline();
}

int QTextCharFormat_FontWeight(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontWeight();
}

double QTextCharFormat_FontWordSpacing(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->fontWordSpacing();
}

char QTextCharFormat_IsAnchor(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->isAnchor();
}

void QTextCharFormat_SetAnchor(void* ptr, char anchor)
{
	static_cast<QTextCharFormat*>(ptr)->setAnchor(anchor != 0);
}

void QTextCharFormat_SetAnchorHref(void* ptr, struct QtGui_PackedString value)
{
	static_cast<QTextCharFormat*>(ptr)->setAnchorHref(QString::fromUtf8(value.data, value.len));
}

void QTextCharFormat_SetAnchorNames(void* ptr, struct QtGui_PackedString names)
{
	static_cast<QTextCharFormat*>(ptr)->setAnchorNames(QString::fromUtf8(names.data, names.len).split("¡¦!", QString::SkipEmptyParts));
}

void QTextCharFormat_SetFont(void* ptr, void* font, long long behavior)
{
	static_cast<QTextCharFormat*>(ptr)->setFont(*static_cast<QFont*>(font), static_cast<QTextCharFormat::FontPropertiesInheritanceBehavior>(behavior));
}

void QTextCharFormat_SetFont2(void* ptr, void* font)
{
	static_cast<QTextCharFormat*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QTextCharFormat_SetFontCapitalization(void* ptr, long long capitalization)
{
	static_cast<QTextCharFormat*>(ptr)->setFontCapitalization(static_cast<QFont::Capitalization>(capitalization));
}

void QTextCharFormat_SetFontFamilies(void* ptr, struct QtGui_PackedString families)
{
	static_cast<QTextCharFormat*>(ptr)->setFontFamilies(QString::fromUtf8(families.data, families.len).split("¡¦!", QString::SkipEmptyParts));
}

void QTextCharFormat_SetFontFamily(void* ptr, struct QtGui_PackedString family)
{
	static_cast<QTextCharFormat*>(ptr)->setFontFamily(QString::fromUtf8(family.data, family.len));
}

void QTextCharFormat_SetFontFixedPitch(void* ptr, char fixedPitch)
{
	static_cast<QTextCharFormat*>(ptr)->setFontFixedPitch(fixedPitch != 0);
}

void QTextCharFormat_SetFontHintingPreference(void* ptr, long long hintingPreference)
{
	static_cast<QTextCharFormat*>(ptr)->setFontHintingPreference(static_cast<QFont::HintingPreference>(hintingPreference));
}

void QTextCharFormat_SetFontItalic(void* ptr, char italic)
{
	static_cast<QTextCharFormat*>(ptr)->setFontItalic(italic != 0);
}

void QTextCharFormat_SetFontKerning(void* ptr, char enable)
{
	static_cast<QTextCharFormat*>(ptr)->setFontKerning(enable != 0);
}

void QTextCharFormat_SetFontLetterSpacing(void* ptr, double spacing)
{
	static_cast<QTextCharFormat*>(ptr)->setFontLetterSpacing(spacing);
}

void QTextCharFormat_SetFontLetterSpacingType(void* ptr, long long letterSpacingType)
{
	static_cast<QTextCharFormat*>(ptr)->setFontLetterSpacingType(static_cast<QFont::SpacingType>(letterSpacingType));
}

void QTextCharFormat_SetFontOverline(void* ptr, char overline)
{
	static_cast<QTextCharFormat*>(ptr)->setFontOverline(overline != 0);
}

void QTextCharFormat_SetFontPointSize(void* ptr, double size)
{
	static_cast<QTextCharFormat*>(ptr)->setFontPointSize(size);
}

void QTextCharFormat_SetFontStretch(void* ptr, int factor)
{
	static_cast<QTextCharFormat*>(ptr)->setFontStretch(factor);
}

void QTextCharFormat_SetFontStrikeOut(void* ptr, char strikeOut)
{
	static_cast<QTextCharFormat*>(ptr)->setFontStrikeOut(strikeOut != 0);
}

void QTextCharFormat_SetFontStyleHint(void* ptr, long long hint, long long strategy)
{
	static_cast<QTextCharFormat*>(ptr)->setFontStyleHint(static_cast<QFont::StyleHint>(hint), static_cast<QFont::StyleStrategy>(strategy));
}

void QTextCharFormat_SetFontStyleName(void* ptr, struct QtGui_PackedString styleName)
{
	static_cast<QTextCharFormat*>(ptr)->setFontStyleName(QString::fromUtf8(styleName.data, styleName.len));
}

void QTextCharFormat_SetFontStyleStrategy(void* ptr, long long strategy)
{
	static_cast<QTextCharFormat*>(ptr)->setFontStyleStrategy(static_cast<QFont::StyleStrategy>(strategy));
}

void QTextCharFormat_SetFontUnderline(void* ptr, char underline)
{
	static_cast<QTextCharFormat*>(ptr)->setFontUnderline(underline != 0);
}

void QTextCharFormat_SetFontWeight(void* ptr, int weight)
{
	static_cast<QTextCharFormat*>(ptr)->setFontWeight(weight);
}

void QTextCharFormat_SetFontWordSpacing(void* ptr, double spacing)
{
	static_cast<QTextCharFormat*>(ptr)->setFontWordSpacing(spacing);
}

void QTextCharFormat_SetTextOutline(void* ptr, void* pen)
{
	static_cast<QTextCharFormat*>(ptr)->setTextOutline(*static_cast<QPen*>(pen));
}

void QTextCharFormat_SetToolTip(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QTextCharFormat*>(ptr)->setToolTip(QString::fromUtf8(text.data, text.len));
}

void QTextCharFormat_SetUnderlineColor(void* ptr, void* color)
{
	static_cast<QTextCharFormat*>(ptr)->setUnderlineColor(*static_cast<QColor*>(color));
}

void QTextCharFormat_SetUnderlineStyle(void* ptr, long long style)
{
	static_cast<QTextCharFormat*>(ptr)->setUnderlineStyle(static_cast<QTextCharFormat::UnderlineStyle>(style));
}

void QTextCharFormat_SetVerticalAlignment(void* ptr, long long alignment)
{
	static_cast<QTextCharFormat*>(ptr)->setVerticalAlignment(static_cast<QTextCharFormat::VerticalAlignment>(alignment));
}

void* QTextCharFormat_TextOutline(void* ptr)
{
	return new QPen(static_cast<QTextCharFormat*>(ptr)->textOutline());
}

struct QtGui_PackedString QTextCharFormat_ToolTip(void* ptr)
{
	return ({ QByteArray* t7e7f7f = new QByteArray(static_cast<QTextCharFormat*>(ptr)->toolTip().toUtf8()); QtGui_PackedString { const_cast<char*>(t7e7f7f->prepend("WHITESPACE").constData()+10), t7e7f7f->size()-10, t7e7f7f }; });
}

void* QTextCharFormat_UnderlineColor(void* ptr)
{
	return new QColor(static_cast<QTextCharFormat*>(ptr)->underlineColor());
}

long long QTextCharFormat_UnderlineStyle(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->underlineStyle();
}

long long QTextCharFormat_VerticalAlignment(void* ptr)
{
	return static_cast<QTextCharFormat*>(ptr)->verticalAlignment();
}

Q_DECLARE_METATYPE(QTextCursor)
Q_DECLARE_METATYPE(QTextCursor*)
void* QTextCursor_NewQTextCursor()
{
	return new QTextCursor();
}

void* QTextCursor_NewQTextCursor2(void* document)
{
	return new QTextCursor(static_cast<QTextDocument*>(document));
}

void* QTextCursor_NewQTextCursor3(void* frame)
{
	return new QTextCursor(static_cast<QTextFrame*>(frame));
}

void* QTextCursor_NewQTextCursor4(void* block)
{
	return new QTextCursor(*static_cast<QTextBlock*>(block));
}

void* QTextCursor_NewQTextCursor5(void* cursor)
{
	return new QTextCursor(*static_cast<QTextCursor*>(cursor));
}

int QTextCursor_Anchor(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->anchor();
}

char QTextCursor_AtBlockEnd(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->atBlockEnd();
}

char QTextCursor_AtBlockStart(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->atBlockStart();
}

char QTextCursor_AtEnd(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->atEnd();
}

char QTextCursor_AtStart(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->atStart();
}

void QTextCursor_BeginEditBlock(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->beginEditBlock();
}

void* QTextCursor_Block(void* ptr)
{
	return new QTextBlock(static_cast<QTextCursor*>(ptr)->block());
}

void* QTextCursor_BlockCharFormat(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextCursor*>(ptr)->blockCharFormat());
}

void* QTextCursor_BlockFormat(void* ptr)
{
	return new QTextBlockFormat(static_cast<QTextCursor*>(ptr)->blockFormat());
}

int QTextCursor_BlockNumber(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->blockNumber();
}

void* QTextCursor_CharFormat(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextCursor*>(ptr)->charFormat());
}

void QTextCursor_ClearSelection(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->clearSelection();
}

int QTextCursor_ColumnNumber(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->columnNumber();
}

void* QTextCursor_CreateList(void* ptr, void* format)
{
	return static_cast<QTextCursor*>(ptr)->createList(*static_cast<QTextListFormat*>(format));
}

void* QTextCursor_CreateList2(void* ptr, long long style)
{
	return static_cast<QTextCursor*>(ptr)->createList(static_cast<QTextListFormat::Style>(style));
}

void* QTextCursor_CurrentFrame(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->currentFrame();
}

void* QTextCursor_CurrentList(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->currentList();
}

void* QTextCursor_CurrentTable(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->currentTable();
}

void QTextCursor_DeleteChar(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->deleteChar();
}

void QTextCursor_DeletePreviousChar(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->deletePreviousChar();
}

void* QTextCursor_Document(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->document();
}

void QTextCursor_EndEditBlock(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->endEditBlock();
}

char QTextCursor_HasComplexSelection(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->hasComplexSelection();
}

char QTextCursor_HasSelection(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->hasSelection();
}

void QTextCursor_InsertBlock(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->insertBlock();
}

void QTextCursor_InsertBlock2(void* ptr, void* format)
{
	static_cast<QTextCursor*>(ptr)->insertBlock(*static_cast<QTextBlockFormat*>(format));
}

void QTextCursor_InsertBlock3(void* ptr, void* format, void* charFormat)
{
	static_cast<QTextCursor*>(ptr)->insertBlock(*static_cast<QTextBlockFormat*>(format), *static_cast<QTextCharFormat*>(charFormat));
}

void QTextCursor_InsertFragment(void* ptr, void* fragment)
{
	static_cast<QTextCursor*>(ptr)->insertFragment(*static_cast<QTextDocumentFragment*>(fragment));
}

void* QTextCursor_InsertFrame(void* ptr, void* format)
{
	return static_cast<QTextCursor*>(ptr)->insertFrame(*static_cast<QTextFrameFormat*>(format));
}

void QTextCursor_InsertHtml(void* ptr, struct QtGui_PackedString html)
{
	static_cast<QTextCursor*>(ptr)->insertHtml(QString::fromUtf8(html.data, html.len));
}

void QTextCursor_InsertImage(void* ptr, void* format)
{
	static_cast<QTextCursor*>(ptr)->insertImage(*static_cast<QTextImageFormat*>(format));
}

void QTextCursor_InsertImage2(void* ptr, void* format, long long alignment)
{
	static_cast<QTextCursor*>(ptr)->insertImage(*static_cast<QTextImageFormat*>(format), static_cast<QTextFrameFormat::Position>(alignment));
}

void QTextCursor_InsertImage3(void* ptr, struct QtGui_PackedString name)
{
	static_cast<QTextCursor*>(ptr)->insertImage(QString::fromUtf8(name.data, name.len));
}

void QTextCursor_InsertImage4(void* ptr, void* image, struct QtGui_PackedString name)
{
	static_cast<QTextCursor*>(ptr)->insertImage(*static_cast<QImage*>(image), QString::fromUtf8(name.data, name.len));
}

void* QTextCursor_InsertList(void* ptr, void* format)
{
	return static_cast<QTextCursor*>(ptr)->insertList(*static_cast<QTextListFormat*>(format));
}

void* QTextCursor_InsertList2(void* ptr, long long style)
{
	return static_cast<QTextCursor*>(ptr)->insertList(static_cast<QTextListFormat::Style>(style));
}

void* QTextCursor_InsertTable(void* ptr, int rows, int columns, void* format)
{
	return static_cast<QTextCursor*>(ptr)->insertTable(rows, columns, *static_cast<QTextTableFormat*>(format));
}

void* QTextCursor_InsertTable2(void* ptr, int rows, int columns)
{
	return static_cast<QTextCursor*>(ptr)->insertTable(rows, columns);
}

void QTextCursor_InsertText(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QTextCursor*>(ptr)->insertText(QString::fromUtf8(text.data, text.len));
}

void QTextCursor_InsertText2(void* ptr, struct QtGui_PackedString text, void* format)
{
	static_cast<QTextCursor*>(ptr)->insertText(QString::fromUtf8(text.data, text.len), *static_cast<QTextCharFormat*>(format));
}

char QTextCursor_IsCopyOf(void* ptr, void* other)
{
	return static_cast<QTextCursor*>(ptr)->isCopyOf(*static_cast<QTextCursor*>(other));
}

char QTextCursor_IsNull(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->isNull();
}

void QTextCursor_JoinPreviousEditBlock(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->joinPreviousEditBlock();
}

char QTextCursor_KeepPositionOnInsert(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->keepPositionOnInsert();
}

void QTextCursor_MergeBlockCharFormat(void* ptr, void* modifier)
{
	static_cast<QTextCursor*>(ptr)->mergeBlockCharFormat(*static_cast<QTextCharFormat*>(modifier));
}

void QTextCursor_MergeBlockFormat(void* ptr, void* modifier)
{
	static_cast<QTextCursor*>(ptr)->mergeBlockFormat(*static_cast<QTextBlockFormat*>(modifier));
}

void QTextCursor_MergeCharFormat(void* ptr, void* modifier)
{
	static_cast<QTextCursor*>(ptr)->mergeCharFormat(*static_cast<QTextCharFormat*>(modifier));
}

char QTextCursor_MovePosition(void* ptr, long long operation, long long mode, int n)
{
	return static_cast<QTextCursor*>(ptr)->movePosition(static_cast<QTextCursor::MoveOperation>(operation), static_cast<QTextCursor::MoveMode>(mode), n);
}

int QTextCursor_Position(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->position();
}

int QTextCursor_PositionInBlock(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->positionInBlock();
}

void QTextCursor_RemoveSelectedText(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->removeSelectedText();
}

void QTextCursor_Select(void* ptr, long long selection)
{
	static_cast<QTextCursor*>(ptr)->select(static_cast<QTextCursor::SelectionType>(selection));
}

void QTextCursor_SelectedTableCells(void* ptr, int firstRow, int numRows, int firstColumn, int numColumns)
{
	static_cast<QTextCursor*>(ptr)->selectedTableCells(&firstRow, &numRows, &firstColumn, &numColumns);
}

struct QtGui_PackedString QTextCursor_SelectedText(void* ptr)
{
	return ({ QByteArray* t495ef8 = new QByteArray(static_cast<QTextCursor*>(ptr)->selectedText().toUtf8()); QtGui_PackedString { const_cast<char*>(t495ef8->prepend("WHITESPACE").constData()+10), t495ef8->size()-10, t495ef8 }; });
}

void* QTextCursor_Selection(void* ptr)
{
	return new QTextDocumentFragment(static_cast<QTextCursor*>(ptr)->selection());
}

int QTextCursor_SelectionEnd(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->selectionEnd();
}

int QTextCursor_SelectionStart(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->selectionStart();
}

void QTextCursor_SetBlockCharFormat(void* ptr, void* format)
{
	static_cast<QTextCursor*>(ptr)->setBlockCharFormat(*static_cast<QTextCharFormat*>(format));
}

void QTextCursor_SetBlockFormat(void* ptr, void* format)
{
	static_cast<QTextCursor*>(ptr)->setBlockFormat(*static_cast<QTextBlockFormat*>(format));
}

void QTextCursor_SetCharFormat(void* ptr, void* format)
{
	static_cast<QTextCursor*>(ptr)->setCharFormat(*static_cast<QTextCharFormat*>(format));
}

void QTextCursor_SetKeepPositionOnInsert(void* ptr, char b)
{
	static_cast<QTextCursor*>(ptr)->setKeepPositionOnInsert(b != 0);
}

void QTextCursor_SetPosition(void* ptr, int pos, long long m)
{
	static_cast<QTextCursor*>(ptr)->setPosition(pos, static_cast<QTextCursor::MoveMode>(m));
}

void QTextCursor_SetVerticalMovementX(void* ptr, int x)
{
	static_cast<QTextCursor*>(ptr)->setVerticalMovementX(x);
}

void QTextCursor_SetVisualNavigation(void* ptr, char b)
{
	static_cast<QTextCursor*>(ptr)->setVisualNavigation(b != 0);
}

void QTextCursor_Swap(void* ptr, void* other)
{
	static_cast<QTextCursor*>(ptr)->swap(*static_cast<QTextCursor*>(other));
}

int QTextCursor_VerticalMovementX(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->verticalMovementX();
}

char QTextCursor_VisualNavigation(void* ptr)
{
	return static_cast<QTextCursor*>(ptr)->visualNavigation();
}

void QTextCursor_DestroyQTextCursor(void* ptr)
{
	static_cast<QTextCursor*>(ptr)->~QTextCursor();
}

class MyQTextDocument: public QTextDocument
{
public:
	MyQTextDocument(QObject *parent = Q_NULLPTR) : QTextDocument(parent) {QTextDocument_QTextDocument_QRegisterMetaType();};
	MyQTextDocument(const QString &text, QObject *parent = Q_NULLPTR) : QTextDocument(text, parent) {QTextDocument_QTextDocument_QRegisterMetaType();};
	void Signal_BaseUrlChanged(const QUrl & url) { callbackQTextDocument_BaseUrlChanged(this, const_cast<QUrl*>(&url)); };
	void Signal_BlockCountChanged(int newBlockCount) { callbackQTextDocument_BlockCountChanged(this, newBlockCount); };
	void clear() { callbackQTextDocument_Clear(this); };
	void Signal_ContentsChange(int position, int charsRemoved, int charsAdded) { callbackQTextDocument_ContentsChange(this, position, charsRemoved, charsAdded); };
	void Signal_ContentsChanged() { callbackQTextDocument_ContentsChanged(this); };
	QTextObject * createObject(const QTextFormat & format) { return static_cast<QTextObject*>(callbackQTextDocument_CreateObject(this, const_cast<QTextFormat*>(&format))); };
	void Signal_CursorPositionChanged(const QTextCursor & cursor) { callbackQTextDocument_CursorPositionChanged(this, const_cast<QTextCursor*>(&cursor)); };
	void Signal_DocumentLayoutChanged() { callbackQTextDocument_DocumentLayoutChanged(this); };
	QVariant loadResource(int ty, const QUrl & name) { return *static_cast<QVariant*>(callbackQTextDocument_LoadResource(this, ty, const_cast<QUrl*>(&name))); };
	void Signal_ModificationChanged(bool changed) { callbackQTextDocument_ModificationChanged(this, changed); };
	void redo() { callbackQTextDocument_Redo2(this); };
	void Signal_RedoAvailable(bool available) { callbackQTextDocument_RedoAvailable(this, available); };
	void setModified(bool m) { callbackQTextDocument_SetModified(this, m); };
	void undo() { callbackQTextDocument_Undo2(this); };
	void Signal_UndoAvailable(bool available) { callbackQTextDocument_UndoAvailable(this, available); };
	void Signal_UndoCommandAdded() { callbackQTextDocument_UndoCommandAdded(this); };
	 ~MyQTextDocument() { callbackQTextDocument_DestroyQTextDocument(this); };
	void childEvent(QChildEvent * event) { callbackQTextDocument_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextDocument_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextDocument_CustomEvent(this, event); };
	void deleteLater() { callbackQTextDocument_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextDocument_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextDocument_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextDocument_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextDocument_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextDocument_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextDocument_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextDocument_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextDocument*)
Q_DECLARE_METATYPE(MyQTextDocument*)

int QTextDocument_QTextDocument_QRegisterMetaType(){qRegisterMetaType<QTextDocument*>(); return qRegisterMetaType<MyQTextDocument*>();}

void* QTextDocument_NewQTextDocument(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(static_cast<QWindow*>(parent));
	} else {
		return new MyQTextDocument(static_cast<QObject*>(parent));
	}
}

void* QTextDocument_NewQTextDocument2(struct QtGui_PackedString text, void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QWindow*>(parent));
	} else {
		return new MyQTextDocument(QString::fromUtf8(text.data, text.len), static_cast<QObject*>(parent));
	}
}

void QTextDocument_AddResource(void* ptr, int ty, void* name, void* resource)
{
	static_cast<QTextDocument*>(ptr)->addResource(ty, *static_cast<QUrl*>(name), *static_cast<QVariant*>(resource));
}

void QTextDocument_AdjustSize(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->adjustSize();
}

struct QtGui_PackedList QTextDocument_AllFormats(void* ptr)
{
	return ({ QVector<QTextFormat>* tmpValued4e73f = new QVector<QTextFormat>(static_cast<QTextDocument*>(ptr)->allFormats()); QtGui_PackedList { tmpValued4e73f, tmpValued4e73f->size() }; });
}

int QTextDocument_AvailableRedoSteps(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->availableRedoSteps();
}

int QTextDocument_AvailableUndoSteps(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->availableUndoSteps();
}

void* QTextDocument_BaseUrl(void* ptr)
{
	return new QUrl(static_cast<QTextDocument*>(ptr)->baseUrl());
}

void QTextDocument_ConnectBaseUrlChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(const QUrl &)>(&QTextDocument::baseUrlChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(const QUrl &)>(&MyQTextDocument::Signal_BaseUrlChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectBaseUrlChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(const QUrl &)>(&QTextDocument::baseUrlChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(const QUrl &)>(&MyQTextDocument::Signal_BaseUrlChanged));
}

void QTextDocument_BaseUrlChanged(void* ptr, void* url)
{
	static_cast<QTextDocument*>(ptr)->baseUrlChanged(*static_cast<QUrl*>(url));
}

void* QTextDocument_Begin(void* ptr)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->begin());
}

int QTextDocument_BlockCount(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->blockCount();
}

void QTextDocument_ConnectBlockCountChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(int)>(&QTextDocument::blockCountChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(int)>(&MyQTextDocument::Signal_BlockCountChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectBlockCountChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(int)>(&QTextDocument::blockCountChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(int)>(&MyQTextDocument::Signal_BlockCountChanged));
}

void QTextDocument_BlockCountChanged(void* ptr, int newBlockCount)
{
	static_cast<QTextDocument*>(ptr)->blockCountChanged(newBlockCount);
}

void* QTextDocument_CharacterAt(void* ptr, int pos)
{
	return new QChar(static_cast<QTextDocument*>(ptr)->characterAt(pos));
}

int QTextDocument_CharacterCount(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->characterCount();
}

void QTextDocument_Clear(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->clear();
}

void QTextDocument_ClearDefault(void* ptr)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::clear();
}

void QTextDocument_ClearUndoRedoStacks(void* ptr, long long stacksToClear)
{
	static_cast<QTextDocument*>(ptr)->clearUndoRedoStacks(static_cast<QTextDocument::Stacks>(stacksToClear));
}

void* QTextDocument_Clone(void* ptr, void* parent)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return static_cast<QTextDocument*>(ptr)->clone(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return static_cast<QTextDocument*>(ptr)->clone(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return static_cast<QTextDocument*>(ptr)->clone(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return static_cast<QTextDocument*>(ptr)->clone(static_cast<QWindow*>(parent));
	} else {
		return static_cast<QTextDocument*>(ptr)->clone(static_cast<QObject*>(parent));
	}
}

void QTextDocument_ConnectContentsChange(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(int, int, int)>(&QTextDocument::contentsChange), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(int, int, int)>(&MyQTextDocument::Signal_ContentsChange), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectContentsChange(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(int, int, int)>(&QTextDocument::contentsChange), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(int, int, int)>(&MyQTextDocument::Signal_ContentsChange));
}

void QTextDocument_ContentsChange(void* ptr, int position, int charsRemoved, int charsAdded)
{
	static_cast<QTextDocument*>(ptr)->contentsChange(position, charsRemoved, charsAdded);
}

void QTextDocument_ConnectContentsChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::contentsChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_ContentsChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectContentsChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::contentsChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_ContentsChanged));
}

void QTextDocument_ContentsChanged(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->contentsChanged();
}

void* QTextDocument_CreateObject(void* ptr, void* format)
{
	return static_cast<QTextDocument*>(ptr)->createObject(*static_cast<QTextFormat*>(format));
}

void* QTextDocument_CreateObjectDefault(void* ptr, void* format)
{
		return static_cast<QTextDocument*>(ptr)->QTextDocument::createObject(*static_cast<QTextFormat*>(format));
}

void QTextDocument_ConnectCursorPositionChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(const QTextCursor &)>(&QTextDocument::cursorPositionChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(const QTextCursor &)>(&MyQTextDocument::Signal_CursorPositionChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectCursorPositionChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(const QTextCursor &)>(&QTextDocument::cursorPositionChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(const QTextCursor &)>(&MyQTextDocument::Signal_CursorPositionChanged));
}

void QTextDocument_CursorPositionChanged(void* ptr, void* cursor)
{
	static_cast<QTextDocument*>(ptr)->cursorPositionChanged(*static_cast<QTextCursor*>(cursor));
}

long long QTextDocument_DefaultCursorMoveStyle(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->defaultCursorMoveStyle();
}

void* QTextDocument_DefaultFont(void* ptr)
{
	return new QFont(static_cast<QTextDocument*>(ptr)->defaultFont());
}

struct QtGui_PackedString QTextDocument_DefaultStyleSheet(void* ptr)
{
	return ({ QByteArray* t95f0f4 = new QByteArray(static_cast<QTextDocument*>(ptr)->defaultStyleSheet().toUtf8()); QtGui_PackedString { const_cast<char*>(t95f0f4->prepend("WHITESPACE").constData()+10), t95f0f4->size()-10, t95f0f4 }; });
}

void* QTextDocument_DefaultTextOption(void* ptr)
{
	return new QTextOption(static_cast<QTextDocument*>(ptr)->defaultTextOption());
}

void* QTextDocument_DocumentLayout(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->documentLayout();
}

void QTextDocument_ConnectDocumentLayoutChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::documentLayoutChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_DocumentLayoutChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectDocumentLayoutChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::documentLayoutChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_DocumentLayoutChanged));
}

void QTextDocument_DocumentLayoutChanged(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->documentLayoutChanged();
}

double QTextDocument_DocumentMargin(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->documentMargin();
}

void QTextDocument_DrawContents(void* ptr, void* p, void* rect)
{
	static_cast<QTextDocument*>(ptr)->drawContents(static_cast<QPainter*>(p), *static_cast<QRectF*>(rect));
}

void* QTextDocument_End(void* ptr)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->end());
}

void* QTextDocument_Find(void* ptr, struct QtGui_PackedString subString, void* cursor, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(QString::fromUtf8(subString.data, subString.len), *static_cast<QTextCursor*>(cursor), static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_Find2(void* ptr, struct QtGui_PackedString subString, int position, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(QString::fromUtf8(subString.data, subString.len), position, static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_Find3(void* ptr, void* expr, int from, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(*static_cast<QRegExp*>(expr), from, static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_Find4(void* ptr, void* expr, void* cursor, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(*static_cast<QRegExp*>(expr), *static_cast<QTextCursor*>(cursor), static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_Find5(void* ptr, void* expr, int from, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(*static_cast<QRegularExpression*>(expr), from, static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_Find6(void* ptr, void* expr, void* cursor, long long options)
{
	return new QTextCursor(static_cast<QTextDocument*>(ptr)->find(*static_cast<QRegularExpression*>(expr), *static_cast<QTextCursor*>(cursor), static_cast<QTextDocument::FindFlag>(options)));
}

void* QTextDocument_FindBlock(void* ptr, int pos)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->findBlock(pos));
}

void* QTextDocument_FindBlockByLineNumber(void* ptr, int lineNumber)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->findBlockByLineNumber(lineNumber));
}

void* QTextDocument_FindBlockByNumber(void* ptr, int blockNumber)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->findBlockByNumber(blockNumber));
}

void* QTextDocument_FirstBlock(void* ptr)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->firstBlock());
}

double QTextDocument_IdealWidth(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->idealWidth();
}

double QTextDocument_IndentWidth(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->indentWidth();
}

char QTextDocument_IsEmpty(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->isEmpty();
}

char QTextDocument_IsModified(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->isModified();
}

char QTextDocument_IsRedoAvailable(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->isRedoAvailable();
}

char QTextDocument_IsUndoAvailable(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->isUndoAvailable();
}

char QTextDocument_IsUndoRedoEnabled(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->isUndoRedoEnabled();
}

void* QTextDocument_LastBlock(void* ptr)
{
	return new QTextBlock(static_cast<QTextDocument*>(ptr)->lastBlock());
}

int QTextDocument_LineCount(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->lineCount();
}

void* QTextDocument_LoadResource(void* ptr, int ty, void* name)
{
	return new QVariant(static_cast<QTextDocument*>(ptr)->loadResource(ty, *static_cast<QUrl*>(name)));
}

void* QTextDocument_LoadResourceDefault(void* ptr, int ty, void* name)
{
		return new QVariant(static_cast<QTextDocument*>(ptr)->QTextDocument::loadResource(ty, *static_cast<QUrl*>(name)));
}

void QTextDocument_MarkContentsDirty(void* ptr, int position, int length)
{
	static_cast<QTextDocument*>(ptr)->markContentsDirty(position, length);
}

int QTextDocument_MaximumBlockCount(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->maximumBlockCount();
}

struct QtGui_PackedString QTextDocument_MetaInformation(void* ptr, long long info)
{
	return ({ QByteArray* ta91ae2 = new QByteArray(static_cast<QTextDocument*>(ptr)->metaInformation(static_cast<QTextDocument::MetaInformation>(info)).toUtf8()); QtGui_PackedString { const_cast<char*>(ta91ae2->prepend("WHITESPACE").constData()+10), ta91ae2->size()-10, ta91ae2 }; });
}

void QTextDocument_ConnectModificationChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::modificationChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_ModificationChanged), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectModificationChanged(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::modificationChanged), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_ModificationChanged));
}

void QTextDocument_ModificationChanged(void* ptr, char changed)
{
	static_cast<QTextDocument*>(ptr)->modificationChanged(changed != 0);
}

void* QTextDocument_Object(void* ptr, int objectIndex)
{
	return static_cast<QTextDocument*>(ptr)->object(objectIndex);
}

void* QTextDocument_ObjectForFormat(void* ptr, void* ff)
{
	return static_cast<QTextDocument*>(ptr)->objectForFormat(*static_cast<QTextFormat*>(ff));
}

int QTextDocument_PageCount(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->pageCount();
}

void* QTextDocument_PageSize(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QTextDocument*>(ptr)->pageSize(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QTextDocument_Print(void* ptr, void* printer)
{
#ifndef Q_OS_IOS
	if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(printer))) {
		static_cast<QTextDocument*>(ptr)->print(static_cast<QPdfWriter*>(printer));
	} else {
		static_cast<QTextDocument*>(ptr)->print(static_cast<QPagedPaintDevice*>(printer));
	}
#endif
}

void QTextDocument_Redo(void* ptr, void* cursor)
{
	static_cast<QTextDocument*>(ptr)->redo(static_cast<QTextCursor*>(cursor));
}

void QTextDocument_Redo2(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QTextDocument*>(ptr), "redo");
}

void QTextDocument_Redo2Default(void* ptr)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::redo();
}

void QTextDocument_ConnectRedoAvailable(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::redoAvailable), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_RedoAvailable), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectRedoAvailable(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::redoAvailable), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_RedoAvailable));
}

void QTextDocument_RedoAvailable(void* ptr, char available)
{
	static_cast<QTextDocument*>(ptr)->redoAvailable(available != 0);
}

void* QTextDocument_Resource(void* ptr, int ty, void* name)
{
	return new QVariant(static_cast<QTextDocument*>(ptr)->resource(ty, *static_cast<QUrl*>(name)));
}

int QTextDocument_Revision(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->revision();
}

void* QTextDocument_RootFrame(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->rootFrame();
}

void QTextDocument_SetBaseUrl(void* ptr, void* url)
{
	static_cast<QTextDocument*>(ptr)->setBaseUrl(*static_cast<QUrl*>(url));
}

void QTextDocument_SetDefaultCursorMoveStyle(void* ptr, long long style)
{
	static_cast<QTextDocument*>(ptr)->setDefaultCursorMoveStyle(static_cast<Qt::CursorMoveStyle>(style));
}

void QTextDocument_SetDefaultFont(void* ptr, void* font)
{
	static_cast<QTextDocument*>(ptr)->setDefaultFont(*static_cast<QFont*>(font));
}

void QTextDocument_SetDefaultStyleSheet(void* ptr, struct QtGui_PackedString sheet)
{
	static_cast<QTextDocument*>(ptr)->setDefaultStyleSheet(QString::fromUtf8(sheet.data, sheet.len));
}

void QTextDocument_SetDefaultTextOption(void* ptr, void* option)
{
	static_cast<QTextDocument*>(ptr)->setDefaultTextOption(*static_cast<QTextOption*>(option));
}

void QTextDocument_SetDocumentLayout(void* ptr, void* layout)
{
	static_cast<QTextDocument*>(ptr)->setDocumentLayout(static_cast<QAbstractTextDocumentLayout*>(layout));
}

void QTextDocument_SetDocumentMargin(void* ptr, double margin)
{
	static_cast<QTextDocument*>(ptr)->setDocumentMargin(margin);
}

void QTextDocument_SetHtml(void* ptr, struct QtGui_PackedString html)
{
	static_cast<QTextDocument*>(ptr)->setHtml(QString::fromUtf8(html.data, html.len));
}

void QTextDocument_SetIndentWidth(void* ptr, double width)
{
	static_cast<QTextDocument*>(ptr)->setIndentWidth(width);
}

void QTextDocument_SetMaximumBlockCount(void* ptr, int maximum)
{
	static_cast<QTextDocument*>(ptr)->setMaximumBlockCount(maximum);
}

void QTextDocument_SetMetaInformation(void* ptr, long long info, struct QtGui_PackedString stri)
{
	static_cast<QTextDocument*>(ptr)->setMetaInformation(static_cast<QTextDocument::MetaInformation>(info), QString::fromUtf8(stri.data, stri.len));
}

void QTextDocument_SetModified(void* ptr, char m)
{
	QMetaObject::invokeMethod(static_cast<QTextDocument*>(ptr), "setModified", Q_ARG(bool, m != 0));
}

void QTextDocument_SetModifiedDefault(void* ptr, char m)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::setModified(m != 0);
}

void QTextDocument_SetPageSize(void* ptr, void* size)
{
	static_cast<QTextDocument*>(ptr)->setPageSize(*static_cast<QSizeF*>(size));
}

void QTextDocument_SetPlainText(void* ptr, struct QtGui_PackedString text)
{
	static_cast<QTextDocument*>(ptr)->setPlainText(QString::fromUtf8(text.data, text.len));
}

void QTextDocument_SetTextWidth(void* ptr, double width)
{
	static_cast<QTextDocument*>(ptr)->setTextWidth(width);
}

void QTextDocument_SetUndoRedoEnabled(void* ptr, char enable)
{
	static_cast<QTextDocument*>(ptr)->setUndoRedoEnabled(enable != 0);
}

void QTextDocument_SetUseDesignMetrics(void* ptr, char b)
{
	static_cast<QTextDocument*>(ptr)->setUseDesignMetrics(b != 0);
}

void* QTextDocument_Size(void* ptr)
{
	return ({ QSizeF tmpValue = static_cast<QTextDocument*>(ptr)->size(); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

double QTextDocument_TextWidth(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->textWidth();
}

struct QtGui_PackedString QTextDocument_ToHtml(void* ptr, void* encoding)
{
	return ({ QByteArray* t48be10 = new QByteArray(static_cast<QTextDocument*>(ptr)->toHtml(*static_cast<QByteArray*>(encoding)).toUtf8()); QtGui_PackedString { const_cast<char*>(t48be10->prepend("WHITESPACE").constData()+10), t48be10->size()-10, t48be10 }; });
}

struct QtGui_PackedString QTextDocument_ToPlainText(void* ptr)
{
	return ({ QByteArray* t7d8da3 = new QByteArray(static_cast<QTextDocument*>(ptr)->toPlainText().toUtf8()); QtGui_PackedString { const_cast<char*>(t7d8da3->prepend("WHITESPACE").constData()+10), t7d8da3->size()-10, t7d8da3 }; });
}

struct QtGui_PackedString QTextDocument_ToRawText(void* ptr)
{
	return ({ QByteArray* td710b1 = new QByteArray(static_cast<QTextDocument*>(ptr)->toRawText().toUtf8()); QtGui_PackedString { const_cast<char*>(td710b1->prepend("WHITESPACE").constData()+10), td710b1->size()-10, td710b1 }; });
}

void QTextDocument_Undo(void* ptr, void* cursor)
{
	static_cast<QTextDocument*>(ptr)->undo(static_cast<QTextCursor*>(cursor));
}

void QTextDocument_Undo2(void* ptr)
{
	QMetaObject::invokeMethod(static_cast<QTextDocument*>(ptr), "undo");
}

void QTextDocument_Undo2Default(void* ptr)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::undo();
}

void QTextDocument_ConnectUndoAvailable(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::undoAvailable), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_UndoAvailable), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectUndoAvailable(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)(bool)>(&QTextDocument::undoAvailable), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)(bool)>(&MyQTextDocument::Signal_UndoAvailable));
}

void QTextDocument_UndoAvailable(void* ptr, char available)
{
	static_cast<QTextDocument*>(ptr)->undoAvailable(available != 0);
}

void QTextDocument_ConnectUndoCommandAdded(void* ptr, long long t)
{
	QObject::connect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::undoCommandAdded), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_UndoCommandAdded), static_cast<Qt::ConnectionType>(t));
}

void QTextDocument_DisconnectUndoCommandAdded(void* ptr)
{
	QObject::disconnect(static_cast<QTextDocument*>(ptr), static_cast<void (QTextDocument::*)()>(&QTextDocument::undoCommandAdded), static_cast<MyQTextDocument*>(ptr), static_cast<void (MyQTextDocument::*)()>(&MyQTextDocument::Signal_UndoCommandAdded));
}

void QTextDocument_UndoCommandAdded(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->undoCommandAdded();
}

char QTextDocument_UseDesignMetrics(void* ptr)
{
	return static_cast<QTextDocument*>(ptr)->useDesignMetrics();
}

void QTextDocument_DestroyQTextDocument(void* ptr)
{
	static_cast<QTextDocument*>(ptr)->~QTextDocument();
}

void QTextDocument_DestroyQTextDocumentDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QTextDocument___allFormats_atList(void* ptr, int i)
{
	return new QTextFormat(({QTextFormat tmp = static_cast<QVector<QTextFormat>*>(ptr)->at(i); if (i == static_cast<QVector<QTextFormat>*>(ptr)->size()-1) { static_cast<QVector<QTextFormat>*>(ptr)->~QVector(); free(ptr); }; tmp; }));
}

void QTextDocument___allFormats_setList(void* ptr, void* i)
{
	static_cast<QVector<QTextFormat>*>(ptr)->append(*static_cast<QTextFormat*>(i));
}

void* QTextDocument___allFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextFormat>();
}

void* QTextDocument___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextDocument___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextDocument___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QTextDocument___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextDocument___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QTextDocument___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QTextDocument___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextDocument___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextDocument___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QTextDocument___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextDocument___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextDocument___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QTextDocument_ChildEventDefault(void* ptr, void* event)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::childEvent(static_cast<QChildEvent*>(event));
}

void QTextDocument_ConnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::connectNotify(*static_cast<QMetaMethod*>(sign));
}

void QTextDocument_CustomEventDefault(void* ptr, void* event)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::customEvent(static_cast<QEvent*>(event));
}

void QTextDocument_DeleteLaterDefault(void* ptr)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::deleteLater();
}

void QTextDocument_DisconnectNotifyDefault(void* ptr, void* sign)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::disconnectNotify(*static_cast<QMetaMethod*>(sign));
}

char QTextDocument_EventDefault(void* ptr, void* e)
{
		return static_cast<QTextDocument*>(ptr)->QTextDocument::event(static_cast<QEvent*>(e));
}

char QTextDocument_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
		return static_cast<QTextDocument*>(ptr)->QTextDocument::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QTextDocument*>(ptr)->QTextDocument::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
		return static_cast<QTextDocument*>(ptr)->QTextDocument::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
		return static_cast<QTextDocument*>(ptr)->QTextDocument::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
	} else {
		return static_cast<QTextDocument*>(ptr)->QTextDocument::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
	}
}

void* QTextDocument_MetaObjectDefault(void* ptr)
{
		return const_cast<QMetaObject*>(static_cast<QTextDocument*>(ptr)->QTextDocument::metaObject());
}

void QTextDocument_TimerEventDefault(void* ptr, void* event)
{
		static_cast<QTextDocument*>(ptr)->QTextDocument::timerEvent(static_cast<QTimerEvent*>(event));
}

Q_DECLARE_METATYPE(QTextDocumentFragment)
Q_DECLARE_METATYPE(QTextDocumentFragment*)
void* QTextDocumentFragment_NewQTextDocumentFragment()
{
	return new QTextDocumentFragment();
}

void* QTextDocumentFragment_NewQTextDocumentFragment2(void* document)
{
	return new QTextDocumentFragment(static_cast<QTextDocument*>(document));
}

void* QTextDocumentFragment_NewQTextDocumentFragment3(void* cursor)
{
	return new QTextDocumentFragment(*static_cast<QTextCursor*>(cursor));
}

void* QTextDocumentFragment_NewQTextDocumentFragment4(void* other)
{
	return new QTextDocumentFragment(*static_cast<QTextDocumentFragment*>(other));
}

void* QTextDocumentFragment_QTextDocumentFragment_FromHtml(struct QtGui_PackedString text)
{
	return new QTextDocumentFragment(QTextDocumentFragment::fromHtml(QString::fromUtf8(text.data, text.len)));
}

void* QTextDocumentFragment_QTextDocumentFragment_FromHtml2(struct QtGui_PackedString text, void* resourceProvider)
{
	return new QTextDocumentFragment(QTextDocumentFragment::fromHtml(QString::fromUtf8(text.data, text.len), static_cast<QTextDocument*>(resourceProvider)));
}

void* QTextDocumentFragment_QTextDocumentFragment_FromPlainText(struct QtGui_PackedString plainText)
{
	return new QTextDocumentFragment(QTextDocumentFragment::fromPlainText(QString::fromUtf8(plainText.data, plainText.len)));
}

char QTextDocumentFragment_IsEmpty(void* ptr)
{
	return static_cast<QTextDocumentFragment*>(ptr)->isEmpty();
}

struct QtGui_PackedString QTextDocumentFragment_ToHtml(void* ptr, void* encoding)
{
	return ({ QByteArray* t6dea0f = new QByteArray(static_cast<QTextDocumentFragment*>(ptr)->toHtml(*static_cast<QByteArray*>(encoding)).toUtf8()); QtGui_PackedString { const_cast<char*>(t6dea0f->prepend("WHITESPACE").constData()+10), t6dea0f->size()-10, t6dea0f }; });
}

struct QtGui_PackedString QTextDocumentFragment_ToPlainText(void* ptr)
{
	return ({ QByteArray* td3666e = new QByteArray(static_cast<QTextDocumentFragment*>(ptr)->toPlainText().toUtf8()); QtGui_PackedString { const_cast<char*>(td3666e->prepend("WHITESPACE").constData()+10), td3666e->size()-10, td3666e }; });
}

void QTextDocumentFragment_DestroyQTextDocumentFragment(void* ptr)
{
	static_cast<QTextDocumentFragment*>(ptr)->~QTextDocumentFragment();
}

Q_DECLARE_METATYPE(QTextDocumentWriter*)
void* QTextDocumentWriter_NewQTextDocumentWriter()
{
	return new QTextDocumentWriter();
}

void* QTextDocumentWriter_NewQTextDocumentWriter2(void* device, void* format)
{
	return new QTextDocumentWriter(static_cast<QIODevice*>(device), *static_cast<QByteArray*>(format));
}

void* QTextDocumentWriter_NewQTextDocumentWriter3(struct QtGui_PackedString fileName, void* format)
{
	return new QTextDocumentWriter(QString::fromUtf8(fileName.data, fileName.len), *static_cast<QByteArray*>(format));
}

void* QTextDocumentWriter_Codec(void* ptr)
{
	return static_cast<QTextDocumentWriter*>(ptr)->codec();
}

void* QTextDocumentWriter_Device(void* ptr)
{
	return static_cast<QTextDocumentWriter*>(ptr)->device();
}

struct QtGui_PackedString QTextDocumentWriter_FileName(void* ptr)
{
	return ({ QByteArray* tbc6b5c = new QByteArray(static_cast<QTextDocumentWriter*>(ptr)->fileName().toUtf8()); QtGui_PackedString { const_cast<char*>(tbc6b5c->prepend("WHITESPACE").constData()+10), tbc6b5c->size()-10, tbc6b5c }; });
}

void* QTextDocumentWriter_Format(void* ptr)
{
	return new QByteArray(static_cast<QTextDocumentWriter*>(ptr)->format());
}

void QTextDocumentWriter_SetCodec(void* ptr, void* codec)
{
	static_cast<QTextDocumentWriter*>(ptr)->setCodec(static_cast<QTextCodec*>(codec));
}

void QTextDocumentWriter_SetDevice(void* ptr, void* device)
{
	static_cast<QTextDocumentWriter*>(ptr)->setDevice(static_cast<QIODevice*>(device));
}

void QTextDocumentWriter_SetFileName(void* ptr, struct QtGui_PackedString fileName)
{
	static_cast<QTextDocumentWriter*>(ptr)->setFileName(QString::fromUtf8(fileName.data, fileName.len));
}

void QTextDocumentWriter_SetFormat(void* ptr, void* format)
{
	static_cast<QTextDocumentWriter*>(ptr)->setFormat(*static_cast<QByteArray*>(format));
}

struct QtGui_PackedList QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats()
{
	return ({ QList<QByteArray>* tmpValue35469a = new QList<QByteArray>(QTextDocumentWriter::supportedDocumentFormats()); QtGui_PackedList { tmpValue35469a, tmpValue35469a->size() }; });
}

char QTextDocumentWriter_Write(void* ptr, void* document)
{
	return static_cast<QTextDocumentWriter*>(ptr)->write(static_cast<QTextDocument*>(document));
}

char QTextDocumentWriter_Write2(void* ptr, void* fragment)
{
	return static_cast<QTextDocumentWriter*>(ptr)->write(*static_cast<QTextDocumentFragment*>(fragment));
}

void QTextDocumentWriter_DestroyQTextDocumentWriter(void* ptr)
{
	static_cast<QTextDocumentWriter*>(ptr)->~QTextDocumentWriter();
}

void* QTextDocumentWriter___supportedDocumentFormats_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextDocumentWriter___supportedDocumentFormats_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QTextDocumentWriter___supportedDocumentFormats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

Q_DECLARE_METATYPE(QTextFormat)
Q_DECLARE_METATYPE(QTextFormat*)
void* QTextFormat_NewQTextFormat()
{
	return new QTextFormat();
}

void* QTextFormat_NewQTextFormat2(int ty)
{
	return new QTextFormat(ty);
}

void* QTextFormat_NewQTextFormat3(void* other)
{
	return new QTextFormat(*static_cast<QTextFormat*>(other));
}

void* QTextFormat_Background(void* ptr)
{
	return new QBrush(static_cast<QTextFormat*>(ptr)->background());
}

char QTextFormat_BoolProperty(void* ptr, int propertyId)
{
	return static_cast<QTextFormat*>(ptr)->boolProperty(propertyId);
}

void* QTextFormat_BrushProperty(void* ptr, int propertyId)
{
	return new QBrush(static_cast<QTextFormat*>(ptr)->brushProperty(propertyId));
}

void QTextFormat_ClearBackground(void* ptr)
{
	static_cast<QTextFormat*>(ptr)->clearBackground();
}

void QTextFormat_ClearForeground(void* ptr)
{
	static_cast<QTextFormat*>(ptr)->clearForeground();
}

void QTextFormat_ClearProperty(void* ptr, int propertyId)
{
	static_cast<QTextFormat*>(ptr)->clearProperty(propertyId);
}

void* QTextFormat_ColorProperty(void* ptr, int propertyId)
{
	return new QColor(static_cast<QTextFormat*>(ptr)->colorProperty(propertyId));
}

double QTextFormat_DoubleProperty(void* ptr, int propertyId)
{
	return static_cast<QTextFormat*>(ptr)->doubleProperty(propertyId);
}

void* QTextFormat_Foreground(void* ptr)
{
	return new QBrush(static_cast<QTextFormat*>(ptr)->foreground());
}

char QTextFormat_HasProperty(void* ptr, int propertyId)
{
	return static_cast<QTextFormat*>(ptr)->hasProperty(propertyId);
}

int QTextFormat_IntProperty(void* ptr, int propertyId)
{
	return static_cast<QTextFormat*>(ptr)->intProperty(propertyId);
}

char QTextFormat_IsBlockFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isBlockFormat();
}

char QTextFormat_IsCharFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isCharFormat();
}

char QTextFormat_IsEmpty(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isEmpty();
}

char QTextFormat_IsFrameFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isFrameFormat();
}

char QTextFormat_IsImageFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isImageFormat();
}

char QTextFormat_IsListFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isListFormat();
}

char QTextFormat_IsTableCellFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isTableCellFormat();
}

char QTextFormat_IsTableFormat(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isTableFormat();
}

char QTextFormat_IsValid(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->isValid();
}

long long QTextFormat_LayoutDirection(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->layoutDirection();
}

void* QTextFormat_LengthProperty(void* ptr, int propertyId)
{
	return new QTextLength(static_cast<QTextFormat*>(ptr)->lengthProperty(propertyId));
}

void QTextFormat_Merge(void* ptr, void* other)
{
	static_cast<QTextFormat*>(ptr)->merge(*static_cast<QTextFormat*>(other));
}

int QTextFormat_ObjectIndex(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->objectIndex();
}

int QTextFormat_ObjectType(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->objectType();
}

void* QTextFormat_PenProperty(void* ptr, int propertyId)
{
	return new QPen(static_cast<QTextFormat*>(ptr)->penProperty(propertyId));
}

struct QtGui_PackedList QTextFormat_Properties(void* ptr)
{
	return ({ QMap<int, QVariant>* tmpValue43f710 = new QMap<int, QVariant>(static_cast<QTextFormat*>(ptr)->properties()); QtGui_PackedList { tmpValue43f710, tmpValue43f710->size() }; });
}

void* QTextFormat_Property(void* ptr, int propertyId)
{
	return new QVariant(static_cast<QTextFormat*>(ptr)->property(propertyId));
}

int QTextFormat_PropertyCount(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->propertyCount();
}

void QTextFormat_SetBackground(void* ptr, void* brush)
{
	static_cast<QTextFormat*>(ptr)->setBackground(*static_cast<QBrush*>(brush));
}

void QTextFormat_SetForeground(void* ptr, void* brush)
{
	static_cast<QTextFormat*>(ptr)->setForeground(*static_cast<QBrush*>(brush));
}

void QTextFormat_SetLayoutDirection(void* ptr, long long direction)
{
	static_cast<QTextFormat*>(ptr)->setLayoutDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QTextFormat_SetObjectIndex(void* ptr, int index)
{
	static_cast<QTextFormat*>(ptr)->setObjectIndex(index);
}

void QTextFormat_SetObjectType(void* ptr, int ty)
{
	static_cast<QTextFormat*>(ptr)->setObjectType(ty);
}

void QTextFormat_SetProperty(void* ptr, int propertyId, void* value)
{
	static_cast<QTextFormat*>(ptr)->setProperty(propertyId, *static_cast<QVariant*>(value));
}

void QTextFormat_SetProperty2(void* ptr, int propertyId, void* value)
{
	static_cast<QTextFormat*>(ptr)->setProperty(propertyId, *static_cast<QVector<QTextLength>*>(value));
}

struct QtGui_PackedString QTextFormat_StringProperty(void* ptr, int propertyId)
{
	return ({ QByteArray* tb40d27 = new QByteArray(static_cast<QTextFormat*>(ptr)->stringProperty(propertyId).toUtf8()); QtGui_PackedString { const_cast<char*>(tb40d27->prepend("WHITESPACE").constData()+10), tb40d27->size()-10, tb40d27 }; });
}

void QTextFormat_Swap(void* ptr, void* other)
{
	static_cast<QTextFormat*>(ptr)->swap(*static_cast<QTextFormat*>(other));
}

void* QTextFormat_ToBlockFormat(void* ptr)
{
	return new QTextBlockFormat(static_cast<QTextFormat*>(ptr)->toBlockFormat());
}

void* QTextFormat_ToCharFormat(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextFormat*>(ptr)->toCharFormat());
}

void* QTextFormat_ToFrameFormat(void* ptr)
{
	return new QTextFrameFormat(static_cast<QTextFormat*>(ptr)->toFrameFormat());
}

void* QTextFormat_ToImageFormat(void* ptr)
{
	return new QTextImageFormat(static_cast<QTextFormat*>(ptr)->toImageFormat());
}

void* QTextFormat_ToListFormat(void* ptr)
{
	return new QTextListFormat(static_cast<QTextFormat*>(ptr)->toListFormat());
}

void* QTextFormat_ToTableCellFormat(void* ptr)
{
	return new QTextTableCellFormat(static_cast<QTextFormat*>(ptr)->toTableCellFormat());
}

void* QTextFormat_ToTableFormat(void* ptr)
{
	return new QTextTableFormat(static_cast<QTextFormat*>(ptr)->toTableFormat());
}

int QTextFormat_Type(void* ptr)
{
	return static_cast<QTextFormat*>(ptr)->type();
}

void QTextFormat_DestroyQTextFormat(void* ptr)
{
	static_cast<QTextFormat*>(ptr)->~QTextFormat();
}

void* QTextFormat___lengthVectorProperty_atList(void* ptr, int i)
{
	return new QTextLength(({QTextLength tmp = static_cast<QVector<QTextLength>*>(ptr)->at(i); if (i == static_cast<QVector<QTextLength>*>(ptr)->size()-1) { static_cast<QVector<QTextLength>*>(ptr)->~QVector(); free(ptr); }; tmp; }));
}

void QTextFormat___lengthVectorProperty_setList(void* ptr, void* i)
{
	static_cast<QVector<QTextLength>*>(ptr)->append(*static_cast<QTextLength*>(i));
}

void* QTextFormat___lengthVectorProperty_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLength>();
}

void* QTextFormat___properties_atList(void* ptr, int v, int i)
{
	return new QVariant(({ QVariant tmp = static_cast<QMap<int, QVariant>*>(ptr)->value(v); if (i == static_cast<QMap<int, QVariant>*>(ptr)->size()-1) { static_cast<QMap<int, QVariant>*>(ptr)->~QMap(); free(ptr); }; tmp; }));
}

void QTextFormat___properties_setList(void* ptr, int key, void* i)
{
	static_cast<QMap<int, QVariant>*>(ptr)->insert(key, *static_cast<QVariant*>(i));
}

void* QTextFormat___properties_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QMap<int, QVariant>();
}

struct QtGui_PackedList QTextFormat___properties_keyList(void* ptr)
{
	return ({ QList<int>* tmpValue249128 = new QList<int>(static_cast<QMap<int, QVariant>*>(ptr)->keys()); QtGui_PackedList { tmpValue249128, tmpValue249128->size() }; });
}

void* QTextFormat___setProperty_value_atList2(void* ptr, int i)
{
	return new QTextLength(({QTextLength tmp = static_cast<QVector<QTextLength>*>(ptr)->at(i); if (i == static_cast<QVector<QTextLength>*>(ptr)->size()-1) { static_cast<QVector<QTextLength>*>(ptr)->~QVector(); free(ptr); }; tmp; }));
}

void QTextFormat___setProperty_value_setList2(void* ptr, void* i)
{
	static_cast<QVector<QTextLength>*>(ptr)->append(*static_cast<QTextLength*>(i));
}

void* QTextFormat___setProperty_value_newList2(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLength>();
}

int QTextFormat_____properties_keyList_atList(void* ptr, int i)
{
	return ({int tmp = static_cast<QList<int>*>(ptr)->at(i); if (i == static_cast<QList<int>*>(ptr)->size()-1) { static_cast<QList<int>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextFormat_____properties_keyList_setList(void* ptr, int i)
{
	static_cast<QList<int>*>(ptr)->append(i);
}

void* QTextFormat_____properties_keyList_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<int>();
}

Q_DECLARE_METATYPE(QTextFragment)
Q_DECLARE_METATYPE(QTextFragment*)
void* QTextFragment_NewQTextFragment2()
{
	return new QTextFragment();
}

void* QTextFragment_NewQTextFragment3(void* other)
{
	return new QTextFragment(*static_cast<QTextFragment*>(other));
}

void* QTextFragment_CharFormat(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextFragment*>(ptr)->charFormat());
}

int QTextFragment_CharFormatIndex(void* ptr)
{
	return static_cast<QTextFragment*>(ptr)->charFormatIndex();
}

char QTextFragment_Contains(void* ptr, int position)
{
	return static_cast<QTextFragment*>(ptr)->contains(position);
}

struct QtGui_PackedList QTextFragment_GlyphRuns(void* ptr, int pos, int l)
{
	return ({ QList<QGlyphRun>* tmpValue2a9765 = new QList<QGlyphRun>(static_cast<QTextFragment*>(ptr)->glyphRuns(pos, l)); QtGui_PackedList { tmpValue2a9765, tmpValue2a9765->size() }; });
}

char QTextFragment_IsValid(void* ptr)
{
	return static_cast<QTextFragment*>(ptr)->isValid();
}

int QTextFragment_Length(void* ptr)
{
	return static_cast<QTextFragment*>(ptr)->length();
}

int QTextFragment_Position(void* ptr)
{
	return static_cast<QTextFragment*>(ptr)->position();
}

struct QtGui_PackedString QTextFragment_Text(void* ptr)
{
	return ({ QByteArray* t644af9 = new QByteArray(static_cast<QTextFragment*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(t644af9->prepend("WHITESPACE").constData()+10), t644af9->size()-10, t644af9 }; });
}

void* QTextFragment___glyphRuns_atList(void* ptr, int i)
{
	return new QGlyphRun(({QGlyphRun tmp = static_cast<QList<QGlyphRun>*>(ptr)->at(i); if (i == static_cast<QList<QGlyphRun>*>(ptr)->size()-1) { static_cast<QList<QGlyphRun>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextFragment___glyphRuns_setList(void* ptr, void* i)
{
	static_cast<QList<QGlyphRun>*>(ptr)->append(*static_cast<QGlyphRun*>(i));
}

void* QTextFragment___glyphRuns_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QGlyphRun>();
}

class MyQTextFrame: public QTextFrame
{
public:
	MyQTextFrame(QTextDocument *document) : QTextFrame(document) {QTextFrame_QTextFrame_QRegisterMetaType();};
	 ~MyQTextFrame() { callbackQTextFrame_DestroyQTextFrame(this); };
	void childEvent(QChildEvent * event) { callbackQTextObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextObject_CustomEvent(this, event); };
	void deleteLater() { callbackQTextObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextFrame*)
Q_DECLARE_METATYPE(MyQTextFrame*)

int QTextFrame_QTextFrame_QRegisterMetaType(){qRegisterMetaType<QTextFrame*>(); return qRegisterMetaType<MyQTextFrame*>();}

void* QTextFrame_NewQTextFrame(void* document)
{
	return new MyQTextFrame(static_cast<QTextDocument*>(document));
}

struct QtGui_PackedList QTextFrame_ChildFrames(void* ptr)
{
	return ({ QList<QTextFrame *>* tmpValue45166f = new QList<QTextFrame *>(static_cast<QTextFrame*>(ptr)->childFrames()); QtGui_PackedList { tmpValue45166f, tmpValue45166f->size() }; });
}

void* QTextFrame_FirstCursorPosition(void* ptr)
{
	return new QTextCursor(static_cast<QTextFrame*>(ptr)->firstCursorPosition());
}

int QTextFrame_FirstPosition(void* ptr)
{
	return static_cast<QTextFrame*>(ptr)->firstPosition();
}

void* QTextFrame_FrameFormat(void* ptr)
{
	return new QTextFrameFormat(static_cast<QTextFrame*>(ptr)->frameFormat());
}

void* QTextFrame_LastCursorPosition(void* ptr)
{
	return new QTextCursor(static_cast<QTextFrame*>(ptr)->lastCursorPosition());
}

int QTextFrame_LastPosition(void* ptr)
{
	return static_cast<QTextFrame*>(ptr)->lastPosition();
}

void* QTextFrame_ParentFrame(void* ptr)
{
	return static_cast<QTextFrame*>(ptr)->parentFrame();
}

void QTextFrame_SetFrameFormat(void* ptr, void* format)
{
	static_cast<QTextFrame*>(ptr)->setFrameFormat(*static_cast<QTextFrameFormat*>(format));
}

void QTextFrame_DestroyQTextFrame(void* ptr)
{
	static_cast<QTextFrame*>(ptr)->~QTextFrame();
}

void QTextFrame_DestroyQTextFrameDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QTextFrame___childFrames_atList(void* ptr, int i)
{
	return ({QTextFrame * tmp = static_cast<QList<QTextFrame *>*>(ptr)->at(i); if (i == static_cast<QList<QTextFrame *>*>(ptr)->size()-1) { static_cast<QList<QTextFrame *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextFrame___childFrames_setList(void* ptr, void* i)
{
	static_cast<QList<QTextFrame *>*>(ptr)->append(static_cast<QTextFrame*>(i));
}

void* QTextFrame___childFrames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTextFrame *>();
}

Q_DECLARE_METATYPE(QTextFrameFormat)
Q_DECLARE_METATYPE(QTextFrameFormat*)
void* QTextFrameFormat_NewQTextFrameFormat()
{
	return new QTextFrameFormat();
}

double QTextFrameFormat_Border(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->border();
}

void* QTextFrameFormat_BorderBrush(void* ptr)
{
	return new QBrush(static_cast<QTextFrameFormat*>(ptr)->borderBrush());
}

long long QTextFrameFormat_BorderStyle(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->borderStyle();
}

double QTextFrameFormat_BottomMargin(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->bottomMargin();
}

void* QTextFrameFormat_Height(void* ptr)
{
	return new QTextLength(static_cast<QTextFrameFormat*>(ptr)->height());
}

double QTextFrameFormat_LeftMargin(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->leftMargin();
}

double QTextFrameFormat_Margin(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->margin();
}

double QTextFrameFormat_Padding(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->padding();
}

long long QTextFrameFormat_PageBreakPolicy(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->pageBreakPolicy();
}

long long QTextFrameFormat_Position(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->position();
}

double QTextFrameFormat_RightMargin(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->rightMargin();
}

void QTextFrameFormat_SetBorder(void* ptr, double width)
{
	static_cast<QTextFrameFormat*>(ptr)->setBorder(width);
}

void QTextFrameFormat_SetBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextFrameFormat*>(ptr)->setBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextFrameFormat_SetBorderStyle(void* ptr, long long style)
{
	static_cast<QTextFrameFormat*>(ptr)->setBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextFrameFormat_SetBottomMargin(void* ptr, double margin)
{
	static_cast<QTextFrameFormat*>(ptr)->setBottomMargin(margin);
}

void QTextFrameFormat_SetHeight(void* ptr, void* height)
{
	static_cast<QTextFrameFormat*>(ptr)->setHeight(*static_cast<QTextLength*>(height));
}

void QTextFrameFormat_SetHeight2(void* ptr, double height)
{
	static_cast<QTextFrameFormat*>(ptr)->setHeight(height);
}

void QTextFrameFormat_SetLeftMargin(void* ptr, double margin)
{
	static_cast<QTextFrameFormat*>(ptr)->setLeftMargin(margin);
}

void QTextFrameFormat_SetMargin(void* ptr, double margin)
{
	static_cast<QTextFrameFormat*>(ptr)->setMargin(margin);
}

void QTextFrameFormat_SetPadding(void* ptr, double width)
{
	static_cast<QTextFrameFormat*>(ptr)->setPadding(width);
}

void QTextFrameFormat_SetPageBreakPolicy(void* ptr, long long policy)
{
	static_cast<QTextFrameFormat*>(ptr)->setPageBreakPolicy(static_cast<QTextFormat::PageBreakFlag>(policy));
}

void QTextFrameFormat_SetPosition(void* ptr, long long policy)
{
	static_cast<QTextFrameFormat*>(ptr)->setPosition(static_cast<QTextFrameFormat::Position>(policy));
}

void QTextFrameFormat_SetRightMargin(void* ptr, double margin)
{
	static_cast<QTextFrameFormat*>(ptr)->setRightMargin(margin);
}

void QTextFrameFormat_SetTopMargin(void* ptr, double margin)
{
	static_cast<QTextFrameFormat*>(ptr)->setTopMargin(margin);
}

void QTextFrameFormat_SetWidth(void* ptr, void* width)
{
	static_cast<QTextFrameFormat*>(ptr)->setWidth(*static_cast<QTextLength*>(width));
}

void QTextFrameFormat_SetWidth2(void* ptr, double width)
{
	static_cast<QTextFrameFormat*>(ptr)->setWidth(width);
}

double QTextFrameFormat_TopMargin(void* ptr)
{
	return static_cast<QTextFrameFormat*>(ptr)->topMargin();
}

void* QTextFrameFormat_Width(void* ptr)
{
	return new QTextLength(static_cast<QTextFrameFormat*>(ptr)->width());
}

Q_DECLARE_METATYPE(QTextImageFormat)
Q_DECLARE_METATYPE(QTextImageFormat*)
void* QTextImageFormat_NewQTextImageFormat()
{
	return new QTextImageFormat();
}

double QTextImageFormat_Height(void* ptr)
{
	return static_cast<QTextImageFormat*>(ptr)->height();
}

struct QtGui_PackedString QTextImageFormat_Name(void* ptr)
{
	return ({ QByteArray* t290038 = new QByteArray(static_cast<QTextImageFormat*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(t290038->prepend("WHITESPACE").constData()+10), t290038->size()-10, t290038 }; });
}

int QTextImageFormat_Quality(void* ptr)
{
	return static_cast<QTextImageFormat*>(ptr)->quality();
}

void QTextImageFormat_SetHeight(void* ptr, double height)
{
	static_cast<QTextImageFormat*>(ptr)->setHeight(height);
}

void QTextImageFormat_SetName(void* ptr, struct QtGui_PackedString name)
{
	static_cast<QTextImageFormat*>(ptr)->setName(QString::fromUtf8(name.data, name.len));
}

void QTextImageFormat_SetQuality(void* ptr, int quality)
{
	static_cast<QTextImageFormat*>(ptr)->setQuality(quality);
}

void QTextImageFormat_SetWidth(void* ptr, double width)
{
	static_cast<QTextImageFormat*>(ptr)->setWidth(width);
}

double QTextImageFormat_Width(void* ptr)
{
	return static_cast<QTextImageFormat*>(ptr)->width();
}

double QTextInlineObject_Ascent(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->ascent();
}

double QTextInlineObject_Descent(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->descent();
}

void* QTextInlineObject_Format(void* ptr)
{
	return new QTextFormat(static_cast<QTextInlineObject*>(ptr)->format());
}

int QTextInlineObject_FormatIndex(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->formatIndex();
}

double QTextInlineObject_Height(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->height();
}

char QTextInlineObject_IsValid(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->isValid();
}

void* QTextInlineObject_Rect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QTextInlineObject*>(ptr)->rect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QTextInlineObject_SetAscent(void* ptr, double a)
{
	static_cast<QTextInlineObject*>(ptr)->setAscent(a);
}

void QTextInlineObject_SetDescent(void* ptr, double d)
{
	static_cast<QTextInlineObject*>(ptr)->setDescent(d);
}

void QTextInlineObject_SetWidth(void* ptr, double w)
{
	static_cast<QTextInlineObject*>(ptr)->setWidth(w);
}

long long QTextInlineObject_TextDirection(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->textDirection();
}

int QTextInlineObject_TextPosition(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->textPosition();
}

double QTextInlineObject_Width(void* ptr)
{
	return static_cast<QTextInlineObject*>(ptr)->width();
}

double QTextItem_Ascent(void* ptr)
{
	return static_cast<QTextItem*>(ptr)->ascent();
}

double QTextItem_Descent(void* ptr)
{
	return static_cast<QTextItem*>(ptr)->descent();
}

void* QTextItem_Font(void* ptr)
{
	return new QFont(static_cast<QTextItem*>(ptr)->font());
}

long long QTextItem_RenderFlags(void* ptr)
{
	return static_cast<QTextItem*>(ptr)->renderFlags();
}

struct QtGui_PackedString QTextItem_Text(void* ptr)
{
	return ({ QByteArray* te8cb06 = new QByteArray(static_cast<QTextItem*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(te8cb06->prepend("WHITESPACE").constData()+10), te8cb06->size()-10, te8cb06 }; });
}

double QTextItem_Width(void* ptr)
{
	return static_cast<QTextItem*>(ptr)->width();
}

Q_DECLARE_METATYPE(QTextLayout*)
void* QTextLayout_NewQTextLayout()
{
	return new QTextLayout();
}

void* QTextLayout_NewQTextLayout2(struct QtGui_PackedString text)
{
	return new QTextLayout(QString::fromUtf8(text.data, text.len));
}

void* QTextLayout_NewQTextLayout4(struct QtGui_PackedString text, void* font, void* paintdevice)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(paintdevice))) {
		return new QTextLayout(QString::fromUtf8(text.data, text.len), *static_cast<QFont*>(font), static_cast<QPaintDeviceWindow*>(paintdevice));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(paintdevice))) {
		return new QTextLayout(QString::fromUtf8(text.data, text.len), *static_cast<QFont*>(font), static_cast<QPdfWriter*>(paintdevice));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(paintdevice))) {
		return new QTextLayout(QString::fromUtf8(text.data, text.len), *static_cast<QFont*>(font), static_cast<QWidget*>(paintdevice));
	} else {
		return new QTextLayout(QString::fromUtf8(text.data, text.len), *static_cast<QFont*>(font), static_cast<QPaintDevice*>(paintdevice));
	}
}

void QTextLayout_BeginLayout(void* ptr)
{
	static_cast<QTextLayout*>(ptr)->beginLayout();
}

void* QTextLayout_BoundingRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QTextLayout*>(ptr)->boundingRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

char QTextLayout_CacheEnabled(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->cacheEnabled();
}

void QTextLayout_ClearFormats(void* ptr)
{
	static_cast<QTextLayout*>(ptr)->clearFormats();
}

void QTextLayout_ClearLayout(void* ptr)
{
	static_cast<QTextLayout*>(ptr)->clearLayout();
}

void* QTextLayout_CreateLine(void* ptr)
{
	return new QTextLine(static_cast<QTextLayout*>(ptr)->createLine());
}

long long QTextLayout_CursorMoveStyle(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->cursorMoveStyle();
}

void QTextLayout_DrawCursor(void* ptr, void* painter, void* position, int cursorPosition, int width)
{
	static_cast<QTextLayout*>(ptr)->drawCursor(static_cast<QPainter*>(painter), *static_cast<QPointF*>(position), cursorPosition, width);
}

void QTextLayout_DrawCursor2(void* ptr, void* painter, void* position, int cursorPosition)
{
	static_cast<QTextLayout*>(ptr)->drawCursor(static_cast<QPainter*>(painter), *static_cast<QPointF*>(position), cursorPosition);
}

void QTextLayout_EndLayout(void* ptr)
{
	static_cast<QTextLayout*>(ptr)->endLayout();
}

void* QTextLayout_Font(void* ptr)
{
	return new QFont(static_cast<QTextLayout*>(ptr)->font());
}

struct QtGui_PackedList QTextLayout_GlyphRuns(void* ptr, int from, int length)
{
	return ({ QList<QGlyphRun>* tmpValueac7edb = new QList<QGlyphRun>(static_cast<QTextLayout*>(ptr)->glyphRuns(from, length)); QtGui_PackedList { tmpValueac7edb, tmpValueac7edb->size() }; });
}

char QTextLayout_IsValidCursorPosition(void* ptr, int pos)
{
	return static_cast<QTextLayout*>(ptr)->isValidCursorPosition(pos);
}

int QTextLayout_LeftCursorPosition(void* ptr, int oldPos)
{
	return static_cast<QTextLayout*>(ptr)->leftCursorPosition(oldPos);
}

void* QTextLayout_LineAt(void* ptr, int i)
{
	return new QTextLine(static_cast<QTextLayout*>(ptr)->lineAt(i));
}

int QTextLayout_LineCount(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->lineCount();
}

void* QTextLayout_LineForTextPosition(void* ptr, int pos)
{
	return new QTextLine(static_cast<QTextLayout*>(ptr)->lineForTextPosition(pos));
}

double QTextLayout_MaximumWidth(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->maximumWidth();
}

double QTextLayout_MinimumWidth(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->minimumWidth();
}

int QTextLayout_NextCursorPosition(void* ptr, int oldPos, long long mode)
{
	return static_cast<QTextLayout*>(ptr)->nextCursorPosition(oldPos, static_cast<QTextLayout::CursorMode>(mode));
}

void* QTextLayout_Position(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QTextLayout*>(ptr)->position(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

int QTextLayout_PreeditAreaPosition(void* ptr)
{
	return static_cast<QTextLayout*>(ptr)->preeditAreaPosition();
}

struct QtGui_PackedString QTextLayout_PreeditAreaText(void* ptr)
{
	return ({ QByteArray* t04bdaa = new QByteArray(static_cast<QTextLayout*>(ptr)->preeditAreaText().toUtf8()); QtGui_PackedString { const_cast<char*>(t04bdaa->prepend("WHITESPACE").constData()+10), t04bdaa->size()-10, t04bdaa }; });
}

int QTextLayout_PreviousCursorPosition(void* ptr, int oldPos, long long mode)
{
	return static_cast<QTextLayout*>(ptr)->previousCursorPosition(oldPos, static_cast<QTextLayout::CursorMode>(mode));
}

int QTextLayout_RightCursorPosition(void* ptr, int oldPos)
{
	return static_cast<QTextLayout*>(ptr)->rightCursorPosition(oldPos);
}

void QTextLayout_SetCacheEnabled(void* ptr, char enable)
{
	static_cast<QTextLayout*>(ptr)->setCacheEnabled(enable != 0);
}

void QTextLayout_SetCursorMoveStyle(void* ptr, long long style)
{
	static_cast<QTextLayout*>(ptr)->setCursorMoveStyle(static_cast<Qt::CursorMoveStyle>(style));
}

void QTextLayout_SetFont(void* ptr, void* font)
{
	static_cast<QTextLayout*>(ptr)->setFont(*static_cast<QFont*>(font));
}

void QTextLayout_SetPosition(void* ptr, void* p)
{
	static_cast<QTextLayout*>(ptr)->setPosition(*static_cast<QPointF*>(p));
}

void QTextLayout_SetPreeditArea(void* ptr, int position, struct QtGui_PackedString text)
{
	static_cast<QTextLayout*>(ptr)->setPreeditArea(position, QString::fromUtf8(text.data, text.len));
}

void QTextLayout_SetText(void* ptr, struct QtGui_PackedString stri)
{
	static_cast<QTextLayout*>(ptr)->setText(QString::fromUtf8(stri.data, stri.len));
}

void QTextLayout_SetTextOption(void* ptr, void* option)
{
	static_cast<QTextLayout*>(ptr)->setTextOption(*static_cast<QTextOption*>(option));
}

struct QtGui_PackedString QTextLayout_Text(void* ptr)
{
	return ({ QByteArray* t7e8d3c = new QByteArray(static_cast<QTextLayout*>(ptr)->text().toUtf8()); QtGui_PackedString { const_cast<char*>(t7e8d3c->prepend("WHITESPACE").constData()+10), t7e8d3c->size()-10, t7e8d3c }; });
}

void* QTextLayout_TextOption(void* ptr)
{
	return const_cast<QTextOption*>(&static_cast<QTextLayout*>(ptr)->textOption());
}

void QTextLayout_DestroyQTextLayout(void* ptr)
{
	static_cast<QTextLayout*>(ptr)->~QTextLayout();
}

void* QTextLayout___formats_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLayout::FormatRange>();
}

void* QTextLayout___glyphRuns_atList(void* ptr, int i)
{
	return new QGlyphRun(({QGlyphRun tmp = static_cast<QList<QGlyphRun>*>(ptr)->at(i); if (i == static_cast<QList<QGlyphRun>*>(ptr)->size()-1) { static_cast<QList<QGlyphRun>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextLayout___glyphRuns_setList(void* ptr, void* i)
{
	static_cast<QList<QGlyphRun>*>(ptr)->append(*static_cast<QGlyphRun*>(i));
}

void* QTextLayout___glyphRuns_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QGlyphRun>();
}

Q_DECLARE_METATYPE(QTextLength)
Q_DECLARE_METATYPE(QTextLength*)
void* QTextLength_NewQTextLength()
{
	return new QTextLength();
}

void* QTextLength_NewQTextLength2(long long ty, double value)
{
	return new QTextLength(static_cast<QTextLength::Type>(ty), value);
}

double QTextLength_RawValue(void* ptr)
{
	return static_cast<QTextLength*>(ptr)->rawValue();
}

long long QTextLength_Type(void* ptr)
{
	return static_cast<QTextLength*>(ptr)->type();
}

double QTextLength_Value(void* ptr, double maximumLength)
{
	return static_cast<QTextLength*>(ptr)->value(maximumLength);
}

Q_DECLARE_METATYPE(QTextLine)
Q_DECLARE_METATYPE(QTextLine*)
void* QTextLine_NewQTextLine()
{
	return new QTextLine();
}

double QTextLine_Ascent(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->ascent();
}

double QTextLine_CursorToX(void* ptr, int cursorPos, long long edge)
{
	return static_cast<QTextLine*>(ptr)->cursorToX(&cursorPos, static_cast<QTextLine::Edge>(edge));
}

double QTextLine_CursorToX2(void* ptr, int cursorPos, long long edge)
{
	return static_cast<QTextLine*>(ptr)->cursorToX(cursorPos, static_cast<QTextLine::Edge>(edge));
}

double QTextLine_Descent(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->descent();
}

struct QtGui_PackedList QTextLine_GlyphRuns(void* ptr, int from, int length)
{
	return ({ QList<QGlyphRun>* tmpValue88c652 = new QList<QGlyphRun>(static_cast<QTextLine*>(ptr)->glyphRuns(from, length)); QtGui_PackedList { tmpValue88c652, tmpValue88c652->size() }; });
}

double QTextLine_Height(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->height();
}

double QTextLine_HorizontalAdvance(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->horizontalAdvance();
}

char QTextLine_IsValid(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->isValid();
}

double QTextLine_Leading(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->leading();
}

char QTextLine_LeadingIncluded(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->leadingIncluded();
}

int QTextLine_LineNumber(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->lineNumber();
}

void* QTextLine_NaturalTextRect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QTextLine*>(ptr)->naturalTextRect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

double QTextLine_NaturalTextWidth(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->naturalTextWidth();
}

void* QTextLine_Position(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QTextLine*>(ptr)->position(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QTextLine_Rect(void* ptr)
{
	return ({ QRectF tmpValue = static_cast<QTextLine*>(ptr)->rect(); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void QTextLine_SetLeadingIncluded(void* ptr, char included)
{
	static_cast<QTextLine*>(ptr)->setLeadingIncluded(included != 0);
}

void QTextLine_SetLineWidth(void* ptr, double width)
{
	static_cast<QTextLine*>(ptr)->setLineWidth(width);
}

void QTextLine_SetNumColumns(void* ptr, int numColumns)
{
	static_cast<QTextLine*>(ptr)->setNumColumns(numColumns);
}

void QTextLine_SetNumColumns2(void* ptr, int numColumns, double alignmentWidth)
{
	static_cast<QTextLine*>(ptr)->setNumColumns(numColumns, alignmentWidth);
}

void QTextLine_SetPosition(void* ptr, void* pos)
{
	static_cast<QTextLine*>(ptr)->setPosition(*static_cast<QPointF*>(pos));
}

int QTextLine_TextLength(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->textLength();
}

int QTextLine_TextStart(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->textStart();
}

double QTextLine_Width(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->width();
}

double QTextLine_X(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->x();
}

int QTextLine_XToCursor(void* ptr, double x, long long cpos)
{
	return static_cast<QTextLine*>(ptr)->xToCursor(x, static_cast<QTextLine::CursorPosition>(cpos));
}

double QTextLine_Y(void* ptr)
{
	return static_cast<QTextLine*>(ptr)->y();
}

void* QTextLine___glyphRuns_atList(void* ptr, int i)
{
	return new QGlyphRun(({QGlyphRun tmp = static_cast<QList<QGlyphRun>*>(ptr)->at(i); if (i == static_cast<QList<QGlyphRun>*>(ptr)->size()-1) { static_cast<QList<QGlyphRun>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextLine___glyphRuns_setList(void* ptr, void* i)
{
	static_cast<QList<QGlyphRun>*>(ptr)->append(*static_cast<QGlyphRun*>(i));
}

void* QTextLine___glyphRuns_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QGlyphRun>();
}

class MyQTextList: public QTextList
{
public:
	void blockFormatChanged(const QTextBlock & block) { callbackQTextBlockGroup_BlockFormatChanged(this, const_cast<QTextBlock*>(&block)); };
	void blockInserted(const QTextBlock & block) { callbackQTextBlockGroup_BlockInserted(this, const_cast<QTextBlock*>(&block)); };
	void blockRemoved(const QTextBlock & block) { callbackQTextBlockGroup_BlockRemoved(this, const_cast<QTextBlock*>(&block)); };
	void childEvent(QChildEvent * event) { callbackQTextObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextObject_CustomEvent(this, event); };
	void deleteLater() { callbackQTextObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextList*)
Q_DECLARE_METATYPE(MyQTextList*)

int QTextList_QTextList_QRegisterMetaType(){qRegisterMetaType<QTextList*>(); return qRegisterMetaType<MyQTextList*>();}

void QTextList_Add(void* ptr, void* block)
{
	static_cast<QTextList*>(ptr)->add(*static_cast<QTextBlock*>(block));
}

int QTextList_Count(void* ptr)
{
	return static_cast<QTextList*>(ptr)->count();
}

void* QTextList_Format(void* ptr)
{
	return new QTextListFormat(static_cast<QTextList*>(ptr)->format());
}

void* QTextList_Item(void* ptr, int i)
{
	return new QTextBlock(static_cast<QTextList*>(ptr)->item(i));
}

int QTextList_ItemNumber(void* ptr, void* block)
{
	return static_cast<QTextList*>(ptr)->itemNumber(*static_cast<QTextBlock*>(block));
}

struct QtGui_PackedString QTextList_ItemText(void* ptr, void* block)
{
	return ({ QByteArray* tedd0af = new QByteArray(static_cast<QTextList*>(ptr)->itemText(*static_cast<QTextBlock*>(block)).toUtf8()); QtGui_PackedString { const_cast<char*>(tedd0af->prepend("WHITESPACE").constData()+10), tedd0af->size()-10, tedd0af }; });
}

void QTextList_Remove(void* ptr, void* block)
{
	static_cast<QTextList*>(ptr)->remove(*static_cast<QTextBlock*>(block));
}

void QTextList_RemoveItem(void* ptr, int i)
{
	static_cast<QTextList*>(ptr)->removeItem(i);
}

void QTextList_SetFormat(void* ptr, void* format)
{
	static_cast<QTextList*>(ptr)->setFormat(*static_cast<QTextListFormat*>(format));
}

Q_DECLARE_METATYPE(QTextListFormat)
Q_DECLARE_METATYPE(QTextListFormat*)
void* QTextListFormat_NewQTextListFormat()
{
	return new QTextListFormat();
}

int QTextListFormat_Indent(void* ptr)
{
	return static_cast<QTextListFormat*>(ptr)->indent();
}

struct QtGui_PackedString QTextListFormat_NumberPrefix(void* ptr)
{
	return ({ QByteArray* t46a4a3 = new QByteArray(static_cast<QTextListFormat*>(ptr)->numberPrefix().toUtf8()); QtGui_PackedString { const_cast<char*>(t46a4a3->prepend("WHITESPACE").constData()+10), t46a4a3->size()-10, t46a4a3 }; });
}

struct QtGui_PackedString QTextListFormat_NumberSuffix(void* ptr)
{
	return ({ QByteArray* t6ba6a5 = new QByteArray(static_cast<QTextListFormat*>(ptr)->numberSuffix().toUtf8()); QtGui_PackedString { const_cast<char*>(t6ba6a5->prepend("WHITESPACE").constData()+10), t6ba6a5->size()-10, t6ba6a5 }; });
}

void QTextListFormat_SetIndent(void* ptr, int indentation)
{
	static_cast<QTextListFormat*>(ptr)->setIndent(indentation);
}

void QTextListFormat_SetNumberPrefix(void* ptr, struct QtGui_PackedString numberPrefix)
{
	static_cast<QTextListFormat*>(ptr)->setNumberPrefix(QString::fromUtf8(numberPrefix.data, numberPrefix.len));
}

void QTextListFormat_SetNumberSuffix(void* ptr, struct QtGui_PackedString numberSuffix)
{
	static_cast<QTextListFormat*>(ptr)->setNumberSuffix(QString::fromUtf8(numberSuffix.data, numberSuffix.len));
}

void QTextListFormat_SetStyle(void* ptr, long long style)
{
	static_cast<QTextListFormat*>(ptr)->setStyle(static_cast<QTextListFormat::Style>(style));
}

long long QTextListFormat_Style(void* ptr)
{
	return static_cast<QTextListFormat*>(ptr)->style();
}

class MyQTextObject: public QTextObject
{
public:
	MyQTextObject(QTextDocument *document) : QTextObject(document) {QTextObject_QTextObject_QRegisterMetaType();};
	 ~MyQTextObject() { callbackQTextObject_DestroyQTextObject(this); };
	void childEvent(QChildEvent * event) { callbackQTextObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextObject_CustomEvent(this, event); };
	void deleteLater() { callbackQTextObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextObject*)
Q_DECLARE_METATYPE(MyQTextObject*)

int QTextObject_QTextObject_QRegisterMetaType(){qRegisterMetaType<QTextObject*>(); return qRegisterMetaType<MyQTextObject*>();}

void* QTextObject_NewQTextObject(void* document)
{
	return new MyQTextObject(static_cast<QTextDocument*>(document));
}

void* QTextObject_Document(void* ptr)
{
	return static_cast<QTextObject*>(ptr)->document();
}

void* QTextObject_Format(void* ptr)
{
	return new QTextFormat(static_cast<QTextObject*>(ptr)->format());
}

int QTextObject_FormatIndex(void* ptr)
{
	return static_cast<QTextObject*>(ptr)->formatIndex();
}

int QTextObject_ObjectIndex(void* ptr)
{
	return static_cast<QTextObject*>(ptr)->objectIndex();
}

void QTextObject_SetFormat(void* ptr, void* format)
{
	static_cast<QTextObject*>(ptr)->setFormat(*static_cast<QTextFormat*>(format));
}

void QTextObject_DestroyQTextObject(void* ptr)
{
	static_cast<QTextObject*>(ptr)->~QTextObject();
}

void QTextObject_DestroyQTextObjectDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QTextObject___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextObject___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextObject___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QTextObject___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTextObject___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QTextObject___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QTextObject___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextObject___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextObject___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QTextObject___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextObject___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QTextObject___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QTextObject_ChildEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::childEvent(static_cast<QChildEvent*>(event));
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::childEvent(static_cast<QChildEvent*>(event));
	}
}

void QTextObject_ConnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::connectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

void QTextObject_CustomEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::customEvent(static_cast<QEvent*>(event));
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::customEvent(static_cast<QEvent*>(event));
	}
}

void QTextObject_DeleteLaterDefault(void* ptr)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::deleteLater();
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::deleteLater();
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::deleteLater();
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::deleteLater();
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::deleteLater();
	}
}

void QTextObject_DisconnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

char QTextObject_EventDefault(void* ptr, void* e)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		return static_cast<QTextTable*>(ptr)->QTextTable::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		return static_cast<QTextFrame*>(ptr)->QTextFrame::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		return static_cast<QTextList*>(ptr)->QTextList::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::event(static_cast<QEvent*>(e));
	} else {
		return static_cast<QTextObject*>(ptr)->QTextObject::event(static_cast<QEvent*>(e));
	}
}

char QTextObject_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextTable*>(ptr)->QTextTable::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextTable*>(ptr)->QTextTable::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextTable*>(ptr)->QTextTable::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextTable*>(ptr)->QTextTable::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QTextTable*>(ptr)->QTextTable::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextFrame*>(ptr)->QTextFrame::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextFrame*>(ptr)->QTextFrame::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextFrame*>(ptr)->QTextFrame::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextFrame*>(ptr)->QTextFrame::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QTextFrame*>(ptr)->QTextFrame::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextList*>(ptr)->QTextList::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextList*>(ptr)->QTextList::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextList*>(ptr)->QTextList::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextList*>(ptr)->QTextList::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QTextList*>(ptr)->QTextList::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextObject*>(ptr)->QTextObject::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextObject*>(ptr)->QTextObject::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextObject*>(ptr)->QTextObject::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QTextObject*>(ptr)->QTextObject::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QTextObject*>(ptr)->QTextObject::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	}
}

void* QTextObject_MetaObjectDefault(void* ptr)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QTextTable*>(ptr)->QTextTable::metaObject());
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QTextFrame*>(ptr)->QTextFrame::metaObject());
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QTextList*>(ptr)->QTextList::metaObject());
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::metaObject());
	} else {
		return const_cast<QMetaObject*>(static_cast<QTextObject*>(ptr)->QTextObject::metaObject());
	}
}

void QTextObject_TimerEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QTextTable*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextTable*>(ptr)->QTextTable::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QTextFrame*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextFrame*>(ptr)->QTextFrame::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QTextList*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextList*>(ptr)->QTextList::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QTextBlockGroup*>(static_cast<QObject*>(ptr))) {
		static_cast<QTextBlockGroup*>(ptr)->QTextBlockGroup::timerEvent(static_cast<QTimerEvent*>(event));
	} else {
		static_cast<QTextObject*>(ptr)->QTextObject::timerEvent(static_cast<QTimerEvent*>(event));
	}
}

class MyQTextObjectInterface: public QTextObjectInterface
{
public:
	void drawObject(QPainter * painter, const QRectF & rect, QTextDocument * doc, int posInDocument, const QTextFormat & format) { callbackQTextObjectInterface_DrawObject(this, painter, const_cast<QRectF*>(&rect), doc, posInDocument, const_cast<QTextFormat*>(&format)); };
	QSizeF intrinsicSize(QTextDocument * doc, int posInDocument, const QTextFormat & format) { return *static_cast<QSizeF*>(callbackQTextObjectInterface_IntrinsicSize(this, doc, posInDocument, const_cast<QTextFormat*>(&format))); };
	 ~MyQTextObjectInterface() { callbackQTextObjectInterface_DestroyQTextObjectInterface(this); };
};

Q_DECLARE_METATYPE(QTextObjectInterface*)
Q_DECLARE_METATYPE(MyQTextObjectInterface*)

int QTextObjectInterface_QTextObjectInterface_QRegisterMetaType(){qRegisterMetaType<QTextObjectInterface*>(); return qRegisterMetaType<MyQTextObjectInterface*>();}

void QTextObjectInterface_DrawObject(void* ptr, void* painter, void* rect, void* doc, int posInDocument, void* format)
{
	static_cast<QTextObjectInterface*>(ptr)->drawObject(static_cast<QPainter*>(painter), *static_cast<QRectF*>(rect), static_cast<QTextDocument*>(doc), posInDocument, *static_cast<QTextFormat*>(format));
}

void* QTextObjectInterface_IntrinsicSize(void* ptr, void* doc, int posInDocument, void* format)
{
	return ({ QSizeF tmpValue = static_cast<QTextObjectInterface*>(ptr)->intrinsicSize(static_cast<QTextDocument*>(doc), posInDocument, *static_cast<QTextFormat*>(format)); new QSizeF(tmpValue.width(), tmpValue.height()); });
}

void QTextObjectInterface_DestroyQTextObjectInterface(void* ptr)
{
	static_cast<QTextObjectInterface*>(ptr)->~QTextObjectInterface();
}

void QTextObjectInterface_DestroyQTextObjectInterfaceDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

Q_DECLARE_METATYPE(QTextOption)
Q_DECLARE_METATYPE(QTextOption*)
void* QTextOption_NewQTextOption()
{
	return new QTextOption();
}

void* QTextOption_NewQTextOption2(long long alignment)
{
	return new QTextOption(static_cast<Qt::AlignmentFlag>(alignment));
}

void* QTextOption_NewQTextOption3(void* other)
{
	return new QTextOption(*static_cast<QTextOption*>(other));
}

long long QTextOption_Alignment(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->alignment();
}

long long QTextOption_Flags(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->flags();
}

void QTextOption_SetAlignment(void* ptr, long long alignment)
{
	static_cast<QTextOption*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QTextOption_SetFlags(void* ptr, long long flags)
{
	static_cast<QTextOption*>(ptr)->setFlags(static_cast<QTextOption::Flag>(flags));
}

void QTextOption_SetTabArray(void* ptr, void* tabStops)
{
	static_cast<QTextOption*>(ptr)->setTabArray(*static_cast<QList<qreal>*>(tabStops));
}

void QTextOption_SetTabStopDistance(void* ptr, double tabStopDistance)
{
	static_cast<QTextOption*>(ptr)->setTabStopDistance(tabStopDistance);
}

void QTextOption_SetTextDirection(void* ptr, long long direction)
{
	static_cast<QTextOption*>(ptr)->setTextDirection(static_cast<Qt::LayoutDirection>(direction));
}

void QTextOption_SetUseDesignMetrics(void* ptr, char enable)
{
	static_cast<QTextOption*>(ptr)->setUseDesignMetrics(enable != 0);
}

void QTextOption_SetWrapMode(void* ptr, long long mode)
{
	static_cast<QTextOption*>(ptr)->setWrapMode(static_cast<QTextOption::WrapMode>(mode));
}

struct QtGui_PackedList QTextOption_TabArray(void* ptr)
{
	return ({ QList<qreal>* tmpValue64baae = new QList<qreal>(static_cast<QTextOption*>(ptr)->tabArray()); QtGui_PackedList { tmpValue64baae, tmpValue64baae->size() }; });
}

double QTextOption_TabStopDistance(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->tabStopDistance();
}

long long QTextOption_TextDirection(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->textDirection();
}

char QTextOption_UseDesignMetrics(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->useDesignMetrics();
}

long long QTextOption_WrapMode(void* ptr)
{
	return static_cast<QTextOption*>(ptr)->wrapMode();
}

void QTextOption_DestroyQTextOption(void* ptr)
{
	static_cast<QTextOption*>(ptr)->~QTextOption();
}

double QTextOption___setTabArray_tabStops_atList(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QList<qreal>*>(ptr)->at(i); if (i == static_cast<QList<qreal>*>(ptr)->size()-1) { static_cast<QList<qreal>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextOption___setTabArray_tabStops_setList(void* ptr, double i)
{
	static_cast<QList<qreal>*>(ptr)->append(i);
}

void* QTextOption___setTabArray_tabStops_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<qreal>();
}

double QTextOption___tabArray_atList(void* ptr, int i)
{
	return ({qreal tmp = static_cast<QList<qreal>*>(ptr)->at(i); if (i == static_cast<QList<qreal>*>(ptr)->size()-1) { static_cast<QList<qreal>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QTextOption___tabArray_setList(void* ptr, double i)
{
	static_cast<QList<qreal>*>(ptr)->append(i);
}

void* QTextOption___tabArray_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<qreal>();
}

class MyQTextTable: public QTextTable
{
public:
	void childEvent(QChildEvent * event) { callbackQTextObject_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQTextObject_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQTextObject_CustomEvent(this, event); };
	void deleteLater() { callbackQTextObject_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQTextObject_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQTextObject_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQTextObject_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQTextObject_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQTextObject_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQTextObject_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQTextObject_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QTextTable*)
Q_DECLARE_METATYPE(MyQTextTable*)

int QTextTable_QTextTable_QRegisterMetaType(){qRegisterMetaType<QTextTable*>(); return qRegisterMetaType<MyQTextTable*>();}

void QTextTable_AppendColumns(void* ptr, int count)
{
	static_cast<QTextTable*>(ptr)->appendColumns(count);
}

void QTextTable_AppendRows(void* ptr, int count)
{
	static_cast<QTextTable*>(ptr)->appendRows(count);
}

void* QTextTable_CellAt(void* ptr, int row, int column)
{
	return new QTextTableCell(static_cast<QTextTable*>(ptr)->cellAt(row, column));
}

void* QTextTable_CellAt2(void* ptr, int position)
{
	return new QTextTableCell(static_cast<QTextTable*>(ptr)->cellAt(position));
}

void* QTextTable_CellAt3(void* ptr, void* cursor)
{
	return new QTextTableCell(static_cast<QTextTable*>(ptr)->cellAt(*static_cast<QTextCursor*>(cursor)));
}

int QTextTable_Columns(void* ptr)
{
	return static_cast<QTextTable*>(ptr)->columns();
}

void* QTextTable_Format(void* ptr)
{
	return new QTextTableFormat(static_cast<QTextTable*>(ptr)->format());
}

void QTextTable_InsertColumns(void* ptr, int index, int columns)
{
	static_cast<QTextTable*>(ptr)->insertColumns(index, columns);
}

void QTextTable_InsertRows(void* ptr, int index, int rows)
{
	static_cast<QTextTable*>(ptr)->insertRows(index, rows);
}

void QTextTable_MergeCells(void* ptr, int row, int column, int numRows, int numCols)
{
	static_cast<QTextTable*>(ptr)->mergeCells(row, column, numRows, numCols);
}

void QTextTable_MergeCells2(void* ptr, void* cursor)
{
	static_cast<QTextTable*>(ptr)->mergeCells(*static_cast<QTextCursor*>(cursor));
}

void QTextTable_RemoveColumns(void* ptr, int index, int columns)
{
	static_cast<QTextTable*>(ptr)->removeColumns(index, columns);
}

void QTextTable_RemoveRows(void* ptr, int index, int rows)
{
	static_cast<QTextTable*>(ptr)->removeRows(index, rows);
}

void QTextTable_Resize(void* ptr, int rows, int columns)
{
	static_cast<QTextTable*>(ptr)->resize(rows, columns);
}

void* QTextTable_RowEnd(void* ptr, void* cursor)
{
	return new QTextCursor(static_cast<QTextTable*>(ptr)->rowEnd(*static_cast<QTextCursor*>(cursor)));
}

void* QTextTable_RowStart(void* ptr, void* cursor)
{
	return new QTextCursor(static_cast<QTextTable*>(ptr)->rowStart(*static_cast<QTextCursor*>(cursor)));
}

int QTextTable_Rows(void* ptr)
{
	return static_cast<QTextTable*>(ptr)->rows();
}

void QTextTable_SetFormat(void* ptr, void* format)
{
	static_cast<QTextTable*>(ptr)->setFormat(*static_cast<QTextTableFormat*>(format));
}

void QTextTable_SplitCell(void* ptr, int row, int column, int numRows, int numCols)
{
	static_cast<QTextTable*>(ptr)->splitCell(row, column, numRows, numCols);
}

Q_DECLARE_METATYPE(QTextTableCell)
Q_DECLARE_METATYPE(QTextTableCell*)
void* QTextTableCell_NewQTextTableCell()
{
	return new QTextTableCell();
}

void* QTextTableCell_NewQTextTableCell2(void* other)
{
	return new QTextTableCell(*static_cast<QTextTableCell*>(other));
}

int QTextTableCell_Column(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->column();
}

int QTextTableCell_ColumnSpan(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->columnSpan();
}

void* QTextTableCell_FirstCursorPosition(void* ptr)
{
	return new QTextCursor(static_cast<QTextTableCell*>(ptr)->firstCursorPosition());
}

void* QTextTableCell_Format(void* ptr)
{
	return new QTextCharFormat(static_cast<QTextTableCell*>(ptr)->format());
}

char QTextTableCell_IsValid(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->isValid();
}

void* QTextTableCell_LastCursorPosition(void* ptr)
{
	return new QTextCursor(static_cast<QTextTableCell*>(ptr)->lastCursorPosition());
}

int QTextTableCell_Row(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->row();
}

int QTextTableCell_RowSpan(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->rowSpan();
}

void QTextTableCell_SetFormat(void* ptr, void* format)
{
	static_cast<QTextTableCell*>(ptr)->setFormat(*static_cast<QTextCharFormat*>(format));
}

int QTextTableCell_TableCellFormatIndex(void* ptr)
{
	return static_cast<QTextTableCell*>(ptr)->tableCellFormatIndex();
}

void QTextTableCell_DestroyQTextTableCell(void* ptr)
{
	static_cast<QTextTableCell*>(ptr)->~QTextTableCell();
}

Q_DECLARE_METATYPE(QTextTableCellFormat)
Q_DECLARE_METATYPE(QTextTableCellFormat*)
void* QTextTableCellFormat_NewQTextTableCellFormat()
{
	return new QTextTableCellFormat();
}

double QTextTableCellFormat_BottomBorder(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->bottomBorder();
}

void* QTextTableCellFormat_BottomBorderBrush(void* ptr)
{
	return new QBrush(static_cast<QTextTableCellFormat*>(ptr)->bottomBorderBrush());
}

long long QTextTableCellFormat_BottomBorderStyle(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->bottomBorderStyle();
}

double QTextTableCellFormat_BottomPadding(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->bottomPadding();
}

double QTextTableCellFormat_LeftBorder(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->leftBorder();
}

void* QTextTableCellFormat_LeftBorderBrush(void* ptr)
{
	return new QBrush(static_cast<QTextTableCellFormat*>(ptr)->leftBorderBrush());
}

long long QTextTableCellFormat_LeftBorderStyle(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->leftBorderStyle();
}

double QTextTableCellFormat_LeftPadding(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->leftPadding();
}

double QTextTableCellFormat_RightBorder(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->rightBorder();
}

void* QTextTableCellFormat_RightBorderBrush(void* ptr)
{
	return new QBrush(static_cast<QTextTableCellFormat*>(ptr)->rightBorderBrush());
}

long long QTextTableCellFormat_RightBorderStyle(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->rightBorderStyle();
}

double QTextTableCellFormat_RightPadding(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->rightPadding();
}

void QTextTableCellFormat_SetBorder(void* ptr, double width)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBorder(width);
}

void QTextTableCellFormat_SetBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextTableCellFormat_SetBorderStyle(void* ptr, long long style)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextTableCellFormat_SetBottomBorder(void* ptr, double width)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBottomBorder(width);
}

void QTextTableCellFormat_SetBottomBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBottomBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextTableCellFormat_SetBottomBorderStyle(void* ptr, long long style)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBottomBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextTableCellFormat_SetBottomPadding(void* ptr, double padding)
{
	static_cast<QTextTableCellFormat*>(ptr)->setBottomPadding(padding);
}

void QTextTableCellFormat_SetLeftBorder(void* ptr, double width)
{
	static_cast<QTextTableCellFormat*>(ptr)->setLeftBorder(width);
}

void QTextTableCellFormat_SetLeftBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextTableCellFormat*>(ptr)->setLeftBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextTableCellFormat_SetLeftBorderStyle(void* ptr, long long style)
{
	static_cast<QTextTableCellFormat*>(ptr)->setLeftBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextTableCellFormat_SetLeftPadding(void* ptr, double padding)
{
	static_cast<QTextTableCellFormat*>(ptr)->setLeftPadding(padding);
}

void QTextTableCellFormat_SetPadding(void* ptr, double padding)
{
	static_cast<QTextTableCellFormat*>(ptr)->setPadding(padding);
}

void QTextTableCellFormat_SetRightBorder(void* ptr, double width)
{
	static_cast<QTextTableCellFormat*>(ptr)->setRightBorder(width);
}

void QTextTableCellFormat_SetRightBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextTableCellFormat*>(ptr)->setRightBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextTableCellFormat_SetRightBorderStyle(void* ptr, long long style)
{
	static_cast<QTextTableCellFormat*>(ptr)->setRightBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextTableCellFormat_SetRightPadding(void* ptr, double padding)
{
	static_cast<QTextTableCellFormat*>(ptr)->setRightPadding(padding);
}

void QTextTableCellFormat_SetTopBorder(void* ptr, double width)
{
	static_cast<QTextTableCellFormat*>(ptr)->setTopBorder(width);
}

void QTextTableCellFormat_SetTopBorderBrush(void* ptr, void* brush)
{
	static_cast<QTextTableCellFormat*>(ptr)->setTopBorderBrush(*static_cast<QBrush*>(brush));
}

void QTextTableCellFormat_SetTopBorderStyle(void* ptr, long long style)
{
	static_cast<QTextTableCellFormat*>(ptr)->setTopBorderStyle(static_cast<QTextFrameFormat::BorderStyle>(style));
}

void QTextTableCellFormat_SetTopPadding(void* ptr, double padding)
{
	static_cast<QTextTableCellFormat*>(ptr)->setTopPadding(padding);
}

double QTextTableCellFormat_TopBorder(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->topBorder();
}

void* QTextTableCellFormat_TopBorderBrush(void* ptr)
{
	return new QBrush(static_cast<QTextTableCellFormat*>(ptr)->topBorderBrush());
}

long long QTextTableCellFormat_TopBorderStyle(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->topBorderStyle();
}

double QTextTableCellFormat_TopPadding(void* ptr)
{
	return static_cast<QTextTableCellFormat*>(ptr)->topPadding();
}

Q_DECLARE_METATYPE(QTextTableFormat)
Q_DECLARE_METATYPE(QTextTableFormat*)
void* QTextTableFormat_NewQTextTableFormat()
{
	return new QTextTableFormat();
}

long long QTextTableFormat_Alignment(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->alignment();
}

char QTextTableFormat_BorderCollapse(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->borderCollapse();
}

double QTextTableFormat_CellPadding(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->cellPadding();
}

double QTextTableFormat_CellSpacing(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->cellSpacing();
}

void QTextTableFormat_ClearColumnWidthConstraints(void* ptr)
{
	static_cast<QTextTableFormat*>(ptr)->clearColumnWidthConstraints();
}

int QTextTableFormat_Columns(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->columns();
}

int QTextTableFormat_HeaderRowCount(void* ptr)
{
	return static_cast<QTextTableFormat*>(ptr)->headerRowCount();
}

void QTextTableFormat_SetAlignment(void* ptr, long long alignment)
{
	static_cast<QTextTableFormat*>(ptr)->setAlignment(static_cast<Qt::AlignmentFlag>(alignment));
}

void QTextTableFormat_SetBorderCollapse(void* ptr, char borderCollapse)
{
	static_cast<QTextTableFormat*>(ptr)->setBorderCollapse(borderCollapse != 0);
}

void QTextTableFormat_SetCellPadding(void* ptr, double padding)
{
	static_cast<QTextTableFormat*>(ptr)->setCellPadding(padding);
}

void QTextTableFormat_SetCellSpacing(void* ptr, double spacing)
{
	static_cast<QTextTableFormat*>(ptr)->setCellSpacing(spacing);
}

void QTextTableFormat_SetColumnWidthConstraints(void* ptr, void* constraints)
{
	static_cast<QTextTableFormat*>(ptr)->setColumnWidthConstraints(*static_cast<QVector<QTextLength>*>(constraints));
}

void QTextTableFormat_SetHeaderRowCount(void* ptr, int count)
{
	static_cast<QTextTableFormat*>(ptr)->setHeaderRowCount(count);
}

void* QTextTableFormat___columnWidthConstraints_atList(void* ptr, int i)
{
	return new QTextLength(({QTextLength tmp = static_cast<QVector<QTextLength>*>(ptr)->at(i); if (i == static_cast<QVector<QTextLength>*>(ptr)->size()-1) { static_cast<QVector<QTextLength>*>(ptr)->~QVector(); free(ptr); }; tmp; }));
}

void QTextTableFormat___columnWidthConstraints_setList(void* ptr, void* i)
{
	static_cast<QVector<QTextLength>*>(ptr)->append(*static_cast<QTextLength*>(i));
}

void* QTextTableFormat___columnWidthConstraints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLength>();
}

void* QTextTableFormat___setColumnWidthConstraints_constraints_atList(void* ptr, int i)
{
	return new QTextLength(({QTextLength tmp = static_cast<QVector<QTextLength>*>(ptr)->at(i); if (i == static_cast<QVector<QTextLength>*>(ptr)->size()-1) { static_cast<QVector<QTextLength>*>(ptr)->~QVector(); free(ptr); }; tmp; }));
}

void QTextTableFormat___setColumnWidthConstraints_constraints_setList(void* ptr, void* i)
{
	static_cast<QVector<QTextLength>*>(ptr)->append(*static_cast<QTextLength*>(i));
}

void* QTextTableFormat___setColumnWidthConstraints_constraints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QVector<QTextLength>();
}

Q_DECLARE_METATYPE(QTouchDevice)
Q_DECLARE_METATYPE(QTouchDevice*)
void* QTouchDevice_NewQTouchDevice()
{
	return new QTouchDevice();
}

long long QTouchDevice_Capabilities(void* ptr)
{
	return static_cast<QTouchDevice*>(ptr)->capabilities();
}

struct QtGui_PackedList QTouchDevice_QTouchDevice_Devices()
{
	return ({ QList<const QTouchDevice *>* tmpValueaad5dc = new QList<const QTouchDevice *>(QTouchDevice::devices()); QtGui_PackedList { tmpValueaad5dc, tmpValueaad5dc->size() }; });
}

int QTouchDevice_MaximumTouchPoints(void* ptr)
{
	return static_cast<QTouchDevice*>(ptr)->maximumTouchPoints();
}

struct QtGui_PackedString QTouchDevice_Name(void* ptr)
{
	return ({ QByteArray* td71303 = new QByteArray(static_cast<QTouchDevice*>(ptr)->name().toUtf8()); QtGui_PackedString { const_cast<char*>(td71303->prepend("WHITESPACE").constData()+10), td71303->size()-10, td71303 }; });
}

void QTouchDevice_SetCapabilities(void* ptr, long long caps)
{
	static_cast<QTouchDevice*>(ptr)->setCapabilities(static_cast<QTouchDevice::CapabilityFlag>(caps));
}

void QTouchDevice_SetMaximumTouchPoints(void* ptr, int max)
{
	static_cast<QTouchDevice*>(ptr)->setMaximumTouchPoints(max);
}

void QTouchDevice_SetName(void* ptr, struct QtGui_PackedString name)
{
	static_cast<QTouchDevice*>(ptr)->setName(QString::fromUtf8(name.data, name.len));
}

void QTouchDevice_SetType(void* ptr, long long devType)
{
	static_cast<QTouchDevice*>(ptr)->setType(static_cast<QTouchDevice::DeviceType>(devType));
}

long long QTouchDevice_Type(void* ptr)
{
	return static_cast<QTouchDevice*>(ptr)->type();
}

void QTouchDevice_DestroyQTouchDevice(void* ptr)
{
	static_cast<QTouchDevice*>(ptr)->~QTouchDevice();
}

void* QTouchDevice___devices_atList(void* ptr, int i)
{
	return const_cast<QTouchDevice*>(({const QTouchDevice * tmp = static_cast<QList<QTouchDevice *>*>(ptr)->at(i); if (i == static_cast<QList<QTouchDevice *>*>(ptr)->size()-1) { static_cast<QList<QTouchDevice *>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QTouchDevice___devices_setList(void* ptr, void* i)
{
	static_cast<QList<QTouchDevice *>*>(ptr)->append(static_cast<QTouchDevice*>(i));
}

void* QTouchDevice___devices_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<const QTouchDevice *>();
}

class MyQTouchEvent: public QTouchEvent
{
public:
	 ~MyQTouchEvent() { callbackQTouchEvent_DestroyQTouchEvent(this); };
};

Q_DECLARE_METATYPE(QTouchEvent*)
Q_DECLARE_METATYPE(MyQTouchEvent*)

int QTouchEvent_QTouchEvent_QRegisterMetaType(){qRegisterMetaType<QTouchEvent*>(); return qRegisterMetaType<MyQTouchEvent*>();}

void* QTouchEvent_Device(void* ptr)
{
	return static_cast<QTouchEvent*>(ptr)->device();
}

void* QTouchEvent_Target(void* ptr)
{
	return static_cast<QTouchEvent*>(ptr)->target();
}

long long QTouchEvent_TouchPointStates(void* ptr)
{
	return static_cast<QTouchEvent*>(ptr)->touchPointStates();
}

void* QTouchEvent_Window(void* ptr)
{
	return static_cast<QTouchEvent*>(ptr)->window();
}

void QTouchEvent_DestroyQTouchEvent(void* ptr)
{
	static_cast<QTouchEvent*>(ptr)->~QTouchEvent();
}

void QTouchEvent_DestroyQTouchEventDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QTouchEvent___QTouchEvent_touchPoints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTouchEvent::TouchPoint>();
}

void* QTouchEvent___setTouchPoints_atouchPoints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTouchEvent::TouchPoint>();
}

void* QTouchEvent___touchPoints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTouchEvent::TouchPoint>();
}

void* QTouchEvent____touchPoints_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTouchEvent::TouchPoint>();
}

void* QTouchEvent___set_touchPoints__newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QTouchEvent::TouchPoint>();
}

Q_DECLARE_METATYPE(QTransform)
Q_DECLARE_METATYPE(QTransform*)
void* QTransform_NewQTransform2()
{
	return new QTransform();
}

void* QTransform_NewQTransform3(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33)
{
	return new QTransform(m11, m12, m13, m21, m22, m23, m31, m32, m33);
}

void* QTransform_NewQTransform4(double m11, double m12, double m21, double m22, double dx, double dy)
{
	return new QTransform(m11, m12, m21, m22, dx, dy);
}

void* QTransform_Adjoint(void* ptr)
{
	return new QTransform(static_cast<QTransform*>(ptr)->adjoint());
}

double QTransform_Determinant(void* ptr)
{
	return static_cast<QTransform*>(ptr)->determinant();
}

double QTransform_Dx(void* ptr)
{
	return static_cast<QTransform*>(ptr)->dx();
}

double QTransform_Dy(void* ptr)
{
	return static_cast<QTransform*>(ptr)->dy();
}

void* QTransform_QTransform_FromScale(double sx, double sy)
{
	return new QTransform(QTransform::fromScale(sx, sy));
}

void* QTransform_QTransform_FromTranslate(double dx, double dy)
{
	return new QTransform(QTransform::fromTranslate(dx, dy));
}

void* QTransform_Inverted(void* ptr, char* invertible)
{
	return new QTransform(static_cast<QTransform*>(ptr)->inverted(reinterpret_cast<bool*>(invertible)));
}

char QTransform_IsAffine(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isAffine();
}

char QTransform_IsIdentity(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isIdentity();
}

char QTransform_IsInvertible(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isInvertible();
}

char QTransform_IsRotating(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isRotating();
}

char QTransform_IsScaling(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isScaling();
}

char QTransform_IsTranslating(void* ptr)
{
	return static_cast<QTransform*>(ptr)->isTranslating();
}

double QTransform_M11(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m11();
}

double QTransform_M12(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m12();
}

double QTransform_M13(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m13();
}

double QTransform_M21(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m21();
}

double QTransform_M22(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m22();
}

double QTransform_M23(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m23();
}

double QTransform_M31(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m31();
}

double QTransform_M32(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m32();
}

double QTransform_M33(void* ptr)
{
	return static_cast<QTransform*>(ptr)->m33();
}

void QTransform_Map(void* ptr, double x, double y, double tx, double ty)
{
	static_cast<QTransform*>(ptr)->map(x, y, &tx, &ty);
}

void* QTransform_Map2(void* ptr, void* point)
{
	return ({ QPoint tmpValue = static_cast<QTransform*>(ptr)->map(*static_cast<QPoint*>(point)); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QTransform_Map3(void* ptr, void* p)
{
	return ({ QPointF tmpValue = static_cast<QTransform*>(ptr)->map(*static_cast<QPointF*>(p)); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QTransform_Map4(void* ptr, void* l)
{
	return ({ QLine tmpValue = static_cast<QTransform*>(ptr)->map(*static_cast<QLine*>(l)); new QLine(tmpValue.p1(), tmpValue.p2()); });
}

void* QTransform_Map5(void* ptr, void* line)
{
	return ({ QLineF tmpValue = static_cast<QTransform*>(ptr)->map(*static_cast<QLineF*>(line)); new QLineF(tmpValue.p1(), tmpValue.p2()); });
}

void* QTransform_Map6(void* ptr, void* polygon)
{
	return new QPolygonF(static_cast<QTransform*>(ptr)->map(*static_cast<QPolygonF*>(polygon)));
}

void* QTransform_Map7(void* ptr, void* polygon)
{
	return new QPolygon(static_cast<QTransform*>(ptr)->map(*static_cast<QPolygon*>(polygon)));
}

void* QTransform_Map8(void* ptr, void* region)
{
	return new QRegion(static_cast<QTransform*>(ptr)->map(*static_cast<QRegion*>(region)));
}

void* QTransform_Map9(void* ptr, void* path)
{
	return new QPainterPath(static_cast<QTransform*>(ptr)->map(*static_cast<QPainterPath*>(path)));
}

void QTransform_Map10(void* ptr, int x, int y, int tx, int ty)
{
	static_cast<QTransform*>(ptr)->map(x, y, &tx, &ty);
}

void* QTransform_MapRect(void* ptr, void* rectangle)
{
	return ({ QRectF tmpValue = static_cast<QTransform*>(ptr)->mapRect(*static_cast<QRectF*>(rectangle)); new QRectF(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QTransform_MapRect2(void* ptr, void* rectangle)
{
	return ({ QRect tmpValue = static_cast<QTransform*>(ptr)->mapRect(*static_cast<QRect*>(rectangle)); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
}

void* QTransform_MapToPolygon(void* ptr, void* rectangle)
{
	return new QPolygon(static_cast<QTransform*>(ptr)->mapToPolygon(*static_cast<QRect*>(rectangle)));
}

char QTransform_QTransform_QuadToQuad(void* one, void* two, void* trans)
{
	return QTransform::quadToQuad(*static_cast<QPolygonF*>(one), *static_cast<QPolygonF*>(two), *static_cast<QTransform*>(trans));
}

char QTransform_QTransform_QuadToSquare(void* quad, void* trans)
{
	return QTransform::quadToSquare(*static_cast<QPolygonF*>(quad), *static_cast<QTransform*>(trans));
}

void QTransform_Reset(void* ptr)
{
	static_cast<QTransform*>(ptr)->reset();
}

void* QTransform_Rotate(void* ptr, double angle, long long axis)
{
	return new QTransform(static_cast<QTransform*>(ptr)->rotate(angle, static_cast<Qt::Axis>(axis)));
}

void* QTransform_RotateRadians(void* ptr, double angle, long long axis)
{
	return new QTransform(static_cast<QTransform*>(ptr)->rotateRadians(angle, static_cast<Qt::Axis>(axis)));
}

void* QTransform_Scale(void* ptr, double sx, double sy)
{
	return new QTransform(static_cast<QTransform*>(ptr)->scale(sx, sy));
}

void QTransform_SetMatrix(void* ptr, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33)
{
	static_cast<QTransform*>(ptr)->setMatrix(m11, m12, m13, m21, m22, m23, m31, m32, m33);
}

void* QTransform_Shear(void* ptr, double sh, double sv)
{
	return new QTransform(static_cast<QTransform*>(ptr)->shear(sh, sv));
}

char QTransform_QTransform_SquareToQuad(void* quad, void* trans)
{
	return QTransform::squareToQuad(*static_cast<QPolygonF*>(quad), *static_cast<QTransform*>(trans));
}

void* QTransform_Translate(void* ptr, double dx, double dy)
{
	return new QTransform(static_cast<QTransform*>(ptr)->translate(dx, dy));
}

void* QTransform_Transposed(void* ptr)
{
	return new QTransform(static_cast<QTransform*>(ptr)->transposed());
}

long long QTransform_Type(void* ptr)
{
	return static_cast<QTransform*>(ptr)->type();
}

class MyQValidator: public QValidator
{
public:
	MyQValidator(QObject *parent = Q_NULLPTR) : QValidator(parent) {QValidator_QValidator_QRegisterMetaType();};
	void Signal_Changed() { callbackQValidator_Changed(this); };
	void fixup(QString & input) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };callbackQValidator_Fixup(const_cast<void*>(static_cast<const void*>(this)), inputPacked); };
	QValidator::State validate(QString & input, int & pos) const { QByteArray* t140f86 = new QByteArray(input.toUtf8()); QtGui_PackedString inputPacked = { const_cast<char*>(t140f86->prepend("WHITESPACE").constData()+10), t140f86->size()-10, t140f86 };return static_cast<QValidator::State>(callbackQValidator_Validate(const_cast<void*>(static_cast<const void*>(this)), inputPacked, pos)); };
	 ~MyQValidator() { callbackQValidator_DestroyQValidator(this); };
	void childEvent(QChildEvent * event) { callbackQValidator_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQValidator_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQValidator_CustomEvent(this, event); };
	void deleteLater() { callbackQValidator_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQValidator_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQValidator_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool event(QEvent * e) { return callbackQValidator_Event(this, e) != 0; };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQValidator_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQValidator_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQValidator_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQValidator_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QValidator*)
Q_DECLARE_METATYPE(MyQValidator*)

int QValidator_QValidator_QRegisterMetaType(){qRegisterMetaType<QValidator*>(); return qRegisterMetaType<MyQValidator*>();}

void* QValidator_NewQValidator(void* parent)
{
	if (dynamic_cast<QCameraImageCapture*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QCameraImageCapture*>(parent));
	} else if (dynamic_cast<QDBusPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QDBusPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QExtensionFactory*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QExtensionFactory*>(parent));
	} else if (dynamic_cast<QExtensionManager*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QExtensionManager*>(parent));
	} else if (dynamic_cast<QGraphicsObject*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QGraphicsObject*>(parent));
	} else if (dynamic_cast<QGraphicsWidget*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QGraphicsWidget*>(parent));
	} else if (dynamic_cast<QLayout*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QLayout*>(parent));
	} else if (dynamic_cast<QMediaPlaylist*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QMediaPlaylist*>(parent));
	} else if (dynamic_cast<QMediaRecorder*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QMediaRecorder*>(parent));
	} else if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QOffscreenSurface*>(parent));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QPaintDeviceWindow*>(parent));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QPdfWriter*>(parent));
	} else if (dynamic_cast<QQuickItem*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QQuickItem*>(parent));
	} else if (dynamic_cast<QRadioData*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QRadioData*>(parent));
	} else if (dynamic_cast<QRemoteObjectPendingCallWatcher*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QRemoteObjectPendingCallWatcher*>(parent));
	} else if (dynamic_cast<QWidget*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QWidget*>(parent));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(parent))) {
		return new MyQValidator(static_cast<QWindow*>(parent));
	} else {
		return new MyQValidator(static_cast<QObject*>(parent));
	}
}

void QValidator_ConnectChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QValidator*>(ptr), static_cast<void (QValidator::*)()>(&QValidator::changed), static_cast<MyQValidator*>(ptr), static_cast<void (MyQValidator::*)()>(&MyQValidator::Signal_Changed), static_cast<Qt::ConnectionType>(t));
}

void QValidator_DisconnectChanged(void* ptr)
{
	QObject::disconnect(static_cast<QValidator*>(ptr), static_cast<void (QValidator::*)()>(&QValidator::changed), static_cast<MyQValidator*>(ptr), static_cast<void (MyQValidator::*)()>(&MyQValidator::Signal_Changed));
}

void QValidator_Changed(void* ptr)
{
	static_cast<QValidator*>(ptr)->changed();
}

void QValidator_Fixup(void* ptr, struct QtGui_PackedString input)
{
	static_cast<QValidator*>(ptr)->fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
}

void QValidator_FixupDefault(void* ptr, struct QtGui_PackedString input)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::fixup(*(new QString(QString::fromUtf8(input.data, input.len))));
	}
}

void* QValidator_Locale(void* ptr)
{
	return new QLocale(static_cast<QValidator*>(ptr)->locale());
}

void QValidator_SetLocale(void* ptr, void* locale)
{
	static_cast<QValidator*>(ptr)->setLocale(*static_cast<QLocale*>(locale));
}

long long QValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos)
{
	return static_cast<QValidator*>(ptr)->validate(*(new QString(QString::fromUtf8(input.data, input.len))), pos);
}

void QValidator_DestroyQValidator(void* ptr)
{
	static_cast<QValidator*>(ptr)->~QValidator();
}

void QValidator_DestroyQValidatorDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QValidator___children_atList(void* ptr, int i)
{
	return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QValidator___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QValidator___children_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject *>();
}

void* QValidator___dynamicPropertyNames_atList(void* ptr, int i)
{
	return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
}

void QValidator___dynamicPropertyNames_setList(void* ptr, void* i)
{
	static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
}

void* QValidator___dynamicPropertyNames_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QByteArray>();
}

void* QValidator___findChildren_atList(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QValidator___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QValidator___findChildren_newList(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void* QValidator___findChildren_atList3(void* ptr, int i)
{
	return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
}

void QValidator___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
	} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
	} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
	} else {
		static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
	}
}

void* QValidator___findChildren_newList3(void* ptr)
{
	Q_UNUSED(ptr);
	return new QList<QObject*>();
}

void QValidator_ChildEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::childEvent(static_cast<QChildEvent*>(event));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::childEvent(static_cast<QChildEvent*>(event));
	}
}

void QValidator_ConnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::connectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

void QValidator_CustomEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::customEvent(static_cast<QEvent*>(event));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::customEvent(static_cast<QEvent*>(event));
	}
}

void QValidator_DeleteLaterDefault(void* ptr)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::deleteLater();
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::deleteLater();
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::deleteLater();
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::deleteLater();
	} else {
		static_cast<QValidator*>(ptr)->QValidator::deleteLater();
	}
}

void QValidator_DisconnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

char QValidator_EventDefault(void* ptr, void* e)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		return static_cast<QIntValidator*>(ptr)->QIntValidator::event(static_cast<QEvent*>(e));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::event(static_cast<QEvent*>(e));
	} else {
		return static_cast<QValidator*>(ptr)->QValidator::event(static_cast<QEvent*>(e));
	}
}

char QValidator_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QIntValidator*>(ptr)->QIntValidator::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QIntValidator*>(ptr)->QIntValidator::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QIntValidator*>(ptr)->QIntValidator::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QIntValidator*>(ptr)->QIntValidator::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QIntValidator*>(ptr)->QIntValidator::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QValidator*>(ptr)->QValidator::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QValidator*>(ptr)->QValidator::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QValidator*>(ptr)->QValidator::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QValidator*>(ptr)->QValidator::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QValidator*>(ptr)->QValidator::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	}
}

void* QValidator_MetaObjectDefault(void* ptr)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::metaObject());
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::metaObject());
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QIntValidator*>(ptr)->QIntValidator::metaObject());
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::metaObject());
	} else {
		return const_cast<QMetaObject*>(static_cast<QValidator*>(ptr)->QValidator::metaObject());
	}
}

void QValidator_TimerEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRegularExpressionValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegularExpressionValidator*>(ptr)->QRegularExpressionValidator::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QRegExpValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QRegExpValidator*>(ptr)->QRegExpValidator::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QIntValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QIntValidator*>(ptr)->QIntValidator::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QDoubleValidator*>(static_cast<QObject*>(ptr))) {
		static_cast<QDoubleValidator*>(ptr)->QDoubleValidator::timerEvent(static_cast<QTimerEvent*>(event));
	} else {
		static_cast<QValidator*>(ptr)->QValidator::timerEvent(static_cast<QTimerEvent*>(event));
	}
}

Q_DECLARE_METATYPE(QVector2D)
Q_DECLARE_METATYPE(QVector2D*)
void* QVector2D_NewQVector2D()
{
	return new QVector2D();
}

void* QVector2D_NewQVector2D3(float xpos, float ypos)
{
	return new QVector2D(xpos, ypos);
}

void* QVector2D_NewQVector2D4(void* point)
{
	return new QVector2D(*static_cast<QPoint*>(point));
}

void* QVector2D_NewQVector2D5(void* point)
{
	return new QVector2D(*static_cast<QPointF*>(point));
}

void* QVector2D_NewQVector2D6(void* vector)
{
	return new QVector2D(*static_cast<QVector3D*>(vector));
}

void* QVector2D_NewQVector2D7(void* vector)
{
	return new QVector2D(*static_cast<QVector4D*>(vector));
}

float QVector2D_DistanceToLine(void* ptr, void* point, void* direction)
{
	return static_cast<QVector2D*>(ptr)->distanceToLine(*static_cast<QVector2D*>(point), *static_cast<QVector2D*>(direction));
}

float QVector2D_DistanceToPoint(void* ptr, void* point)
{
	return static_cast<QVector2D*>(ptr)->distanceToPoint(*static_cast<QVector2D*>(point));
}

float QVector2D_QVector2D_DotProduct(void* v1, void* v2)
{
	return QVector2D::dotProduct(*static_cast<QVector2D*>(v1), *static_cast<QVector2D*>(v2));
}

char QVector2D_IsNull(void* ptr)
{
	return static_cast<QVector2D*>(ptr)->isNull();
}

float QVector2D_Length(void* ptr)
{
	return static_cast<QVector2D*>(ptr)->length();
}

float QVector2D_LengthSquared(void* ptr)
{
	return static_cast<QVector2D*>(ptr)->lengthSquared();
}

void QVector2D_Normalize(void* ptr)
{
	static_cast<QVector2D*>(ptr)->normalize();
}

void* QVector2D_Normalized(void* ptr)
{
	return new QVector2D(static_cast<QVector2D*>(ptr)->normalized());
}

void QVector2D_SetX(void* ptr, float x)
{
	static_cast<QVector2D*>(ptr)->setX(x);
}

void QVector2D_SetY(void* ptr, float y)
{
	static_cast<QVector2D*>(ptr)->setY(y);
}

void* QVector2D_ToPoint(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QVector2D*>(ptr)->toPoint(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QVector2D_ToPointF(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QVector2D*>(ptr)->toPointF(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QVector2D_ToVector3D(void* ptr)
{
	return new QVector3D(static_cast<QVector2D*>(ptr)->toVector3D());
}

void* QVector2D_ToVector4D(void* ptr)
{
	return new QVector4D(static_cast<QVector2D*>(ptr)->toVector4D());
}

float QVector2D_X(void* ptr)
{
	return static_cast<QVector2D*>(ptr)->x();
}

float QVector2D_Y(void* ptr)
{
	return static_cast<QVector2D*>(ptr)->y();
}

Q_DECLARE_METATYPE(QVector3D)
Q_DECLARE_METATYPE(QVector3D*)
void* QVector3D_NewQVector3D()
{
	return new QVector3D();
}

void* QVector3D_NewQVector3D3(float xpos, float ypos, float zpos)
{
	return new QVector3D(xpos, ypos, zpos);
}

void* QVector3D_NewQVector3D4(void* point)
{
	return new QVector3D(*static_cast<QPoint*>(point));
}

void* QVector3D_NewQVector3D5(void* point)
{
	return new QVector3D(*static_cast<QPointF*>(point));
}

void* QVector3D_NewQVector3D6(void* vector)
{
	return new QVector3D(*static_cast<QVector2D*>(vector));
}

void* QVector3D_NewQVector3D7(void* vector, float zpos)
{
	return new QVector3D(*static_cast<QVector2D*>(vector), zpos);
}

void* QVector3D_NewQVector3D8(void* vector)
{
	return new QVector3D(*static_cast<QVector4D*>(vector));
}

void* QVector3D_QVector3D_CrossProduct(void* v1, void* v2)
{
	return new QVector3D(QVector3D::crossProduct(*static_cast<QVector3D*>(v1), *static_cast<QVector3D*>(v2)));
}

float QVector3D_DistanceToLine(void* ptr, void* point, void* direction)
{
	return static_cast<QVector3D*>(ptr)->distanceToLine(*static_cast<QVector3D*>(point), *static_cast<QVector3D*>(direction));
}

float QVector3D_DistanceToPlane(void* ptr, void* plane, void* normal)
{
	return static_cast<QVector3D*>(ptr)->distanceToPlane(*static_cast<QVector3D*>(plane), *static_cast<QVector3D*>(normal));
}

float QVector3D_DistanceToPlane2(void* ptr, void* plane1, void* plane2, void* plane3)
{
	return static_cast<QVector3D*>(ptr)->distanceToPlane(*static_cast<QVector3D*>(plane1), *static_cast<QVector3D*>(plane2), *static_cast<QVector3D*>(plane3));
}

float QVector3D_DistanceToPoint(void* ptr, void* point)
{
	return static_cast<QVector3D*>(ptr)->distanceToPoint(*static_cast<QVector3D*>(point));
}

float QVector3D_QVector3D_DotProduct(void* v1, void* v2)
{
	return QVector3D::dotProduct(*static_cast<QVector3D*>(v1), *static_cast<QVector3D*>(v2));
}

char QVector3D_IsNull(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->isNull();
}

float QVector3D_Length(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->length();
}

float QVector3D_LengthSquared(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->lengthSquared();
}

void* QVector3D_QVector3D_Normal(void* v1, void* v2)
{
	return new QVector3D(QVector3D::normal(*static_cast<QVector3D*>(v1), *static_cast<QVector3D*>(v2)));
}

void* QVector3D_QVector3D_Normal2(void* v1, void* v2, void* v3)
{
	return new QVector3D(QVector3D::normal(*static_cast<QVector3D*>(v1), *static_cast<QVector3D*>(v2), *static_cast<QVector3D*>(v3)));
}

void QVector3D_Normalize(void* ptr)
{
	static_cast<QVector3D*>(ptr)->normalize();
}

void* QVector3D_Normalized(void* ptr)
{
	return new QVector3D(static_cast<QVector3D*>(ptr)->normalized());
}

void* QVector3D_Project(void* ptr, void* modelView, void* projection, void* viewport)
{
	return new QVector3D(static_cast<QVector3D*>(ptr)->project(*static_cast<QMatrix4x4*>(modelView), *static_cast<QMatrix4x4*>(projection), *static_cast<QRect*>(viewport)));
}

void QVector3D_SetX(void* ptr, float x)
{
	static_cast<QVector3D*>(ptr)->setX(x);
}

void QVector3D_SetY(void* ptr, float y)
{
	static_cast<QVector3D*>(ptr)->setY(y);
}

void QVector3D_SetZ(void* ptr, float z)
{
	static_cast<QVector3D*>(ptr)->setZ(z);
}

void* QVector3D_ToPoint(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QVector3D*>(ptr)->toPoint(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QVector3D_ToPointF(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QVector3D*>(ptr)->toPointF(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QVector3D_ToVector2D(void* ptr)
{
	return new QVector2D(static_cast<QVector3D*>(ptr)->toVector2D());
}

void* QVector3D_ToVector4D(void* ptr)
{
	return new QVector4D(static_cast<QVector3D*>(ptr)->toVector4D());
}

void* QVector3D_Unproject(void* ptr, void* modelView, void* projection, void* viewport)
{
	return new QVector3D(static_cast<QVector3D*>(ptr)->unproject(*static_cast<QMatrix4x4*>(modelView), *static_cast<QMatrix4x4*>(projection), *static_cast<QRect*>(viewport)));
}

float QVector3D_X(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->x();
}

float QVector3D_Y(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->y();
}

float QVector3D_Z(void* ptr)
{
	return static_cast<QVector3D*>(ptr)->z();
}

Q_DECLARE_METATYPE(QVector4D)
Q_DECLARE_METATYPE(QVector4D*)
void* QVector4D_NewQVector4D()
{
	return new QVector4D();
}

void* QVector4D_NewQVector4D3(float xpos, float ypos, float zpos, float wpos)
{
	return new QVector4D(xpos, ypos, zpos, wpos);
}

void* QVector4D_NewQVector4D4(void* point)
{
	return new QVector4D(*static_cast<QPoint*>(point));
}

void* QVector4D_NewQVector4D5(void* point)
{
	return new QVector4D(*static_cast<QPointF*>(point));
}

void* QVector4D_NewQVector4D6(void* vector)
{
	return new QVector4D(*static_cast<QVector2D*>(vector));
}

void* QVector4D_NewQVector4D7(void* vector, float zpos, float wpos)
{
	return new QVector4D(*static_cast<QVector2D*>(vector), zpos, wpos);
}

void* QVector4D_NewQVector4D8(void* vector)
{
	return new QVector4D(*static_cast<QVector3D*>(vector));
}

void* QVector4D_NewQVector4D9(void* vector, float wpos)
{
	return new QVector4D(*static_cast<QVector3D*>(vector), wpos);
}

float QVector4D_QVector4D_DotProduct(void* v1, void* v2)
{
	return QVector4D::dotProduct(*static_cast<QVector4D*>(v1), *static_cast<QVector4D*>(v2));
}

char QVector4D_IsNull(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->isNull();
}

float QVector4D_Length(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->length();
}

float QVector4D_LengthSquared(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->lengthSquared();
}

void QVector4D_Normalize(void* ptr)
{
	static_cast<QVector4D*>(ptr)->normalize();
}

void* QVector4D_Normalized(void* ptr)
{
	return new QVector4D(static_cast<QVector4D*>(ptr)->normalized());
}

void QVector4D_SetW(void* ptr, float w)
{
	static_cast<QVector4D*>(ptr)->setW(w);
}

void QVector4D_SetX(void* ptr, float x)
{
	static_cast<QVector4D*>(ptr)->setX(x);
}

void QVector4D_SetY(void* ptr, float y)
{
	static_cast<QVector4D*>(ptr)->setY(y);
}

void QVector4D_SetZ(void* ptr, float z)
{
	static_cast<QVector4D*>(ptr)->setZ(z);
}

void* QVector4D_ToPoint(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QVector4D*>(ptr)->toPoint(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QVector4D_ToPointF(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QVector4D*>(ptr)->toPointF(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

void* QVector4D_ToVector2D(void* ptr)
{
	return new QVector2D(static_cast<QVector4D*>(ptr)->toVector2D());
}

void* QVector4D_ToVector2DAffine(void* ptr)
{
	return new QVector2D(static_cast<QVector4D*>(ptr)->toVector2DAffine());
}

void* QVector4D_ToVector3D(void* ptr)
{
	return new QVector3D(static_cast<QVector4D*>(ptr)->toVector3D());
}

void* QVector4D_ToVector3DAffine(void* ptr)
{
	return new QVector3D(static_cast<QVector4D*>(ptr)->toVector3DAffine());
}

float QVector4D_W(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->w();
}

float QVector4D_X(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->x();
}

float QVector4D_Y(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->y();
}

float QVector4D_Z(void* ptr)
{
	return static_cast<QVector4D*>(ptr)->z();
}

class MyQWhatsThisClickedEvent: public QWhatsThisClickedEvent
{
public:
	MyQWhatsThisClickedEvent(const QString &href) : QWhatsThisClickedEvent(href) {QWhatsThisClickedEvent_QWhatsThisClickedEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QWhatsThisClickedEvent*)
Q_DECLARE_METATYPE(MyQWhatsThisClickedEvent*)

int QWhatsThisClickedEvent_QWhatsThisClickedEvent_QRegisterMetaType(){qRegisterMetaType<QWhatsThisClickedEvent*>(); return qRegisterMetaType<MyQWhatsThisClickedEvent*>();}

void* QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(struct QtGui_PackedString href)
{
	return new MyQWhatsThisClickedEvent(QString::fromUtf8(href.data, href.len));
}

struct QtGui_PackedString QWhatsThisClickedEvent_Href(void* ptr)
{
	return ({ QByteArray* tc87a51 = new QByteArray(static_cast<QWhatsThisClickedEvent*>(ptr)->href().toUtf8()); QtGui_PackedString { const_cast<char*>(tc87a51->prepend("WHITESPACE").constData()+10), tc87a51->size()-10, tc87a51 }; });
}

class MyQWheelEvent: public QWheelEvent
{
public:
	MyQWheelEvent(QPointF pos, QPointF globalPos, QPoint pixelDelta, QPoint angleDelta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase, bool inverted, Qt::MouseEventSource source = Qt::MouseEventNotSynthesized) : QWheelEvent(pos, globalPos, pixelDelta, angleDelta, buttons, modifiers, phase, inverted, source) {QWheelEvent_QWheelEvent_QRegisterMetaType();};
};

Q_DECLARE_METATYPE(QWheelEvent*)
Q_DECLARE_METATYPE(MyQWheelEvent*)

int QWheelEvent_QWheelEvent_QRegisterMetaType(){qRegisterMetaType<QWheelEvent*>(); return qRegisterMetaType<MyQWheelEvent*>();}

void* QWheelEvent_NewQWheelEvent7(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, long long buttons, long long modifiers, long long phase, char inverted, long long source)
{
	return new MyQWheelEvent(*static_cast<QPointF*>(pos), *static_cast<QPointF*>(globalPos), *static_cast<QPoint*>(pixelDelta), *static_cast<QPoint*>(angleDelta), static_cast<Qt::MouseButton>(buttons), static_cast<Qt::KeyboardModifier>(modifiers), static_cast<Qt::ScrollPhase>(phase), inverted != 0, static_cast<Qt::MouseEventSource>(source));
}

void* QWheelEvent_AngleDelta(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QWheelEvent*>(ptr)->angleDelta(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

long long QWheelEvent_Buttons(void* ptr)
{
	return static_cast<QWheelEvent*>(ptr)->buttons();
}

void* QWheelEvent_GlobalPosition(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QWheelEvent*>(ptr)->globalPosition(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

char QWheelEvent_Inverted(void* ptr)
{
	return static_cast<QWheelEvent*>(ptr)->inverted();
}

long long QWheelEvent_Phase(void* ptr)
{
	return static_cast<QWheelEvent*>(ptr)->phase();
}

void* QWheelEvent_PixelDelta(void* ptr)
{
	return ({ QPoint tmpValue = static_cast<QWheelEvent*>(ptr)->pixelDelta(); new QPoint(tmpValue.x(), tmpValue.y()); });
}

void* QWheelEvent_Position(void* ptr)
{
	return ({ QPointF tmpValue = static_cast<QWheelEvent*>(ptr)->position(); new QPointF(tmpValue.x(), tmpValue.y()); });
}

long long QWheelEvent_Source(void* ptr)
{
	return static_cast<QWheelEvent*>(ptr)->source();
}

class MyQWindow: public QWindow
{
public:
	MyQWindow(QScreen *targetScreen = Q_NULLPTR) : QWindow(targetScreen) {QWindow_QWindow_QRegisterMetaType();};
	MyQWindow(QWindow *parent) : QWindow(parent) {QWindow_QWindow_QRegisterMetaType();};
	void Signal_ActiveChanged() { callbackQWindow_ActiveChanged(this); };
	void alert(int msec) { callbackQWindow_Alert(this, msec); };
	bool close() { return callbackQWindow_Close(this) != 0; };
	void Signal_ContentOrientationChanged(Qt::ScreenOrientation orientation) { callbackQWindow_ContentOrientationChanged(this, orientation); };
	bool event(QEvent * ev) { return callbackQWindow_Event(this, ev) != 0; };
	void exposeEvent(QExposeEvent * ev) { callbackQWindow_ExposeEvent(this, ev); };
	void focusInEvent(QFocusEvent * ev) { callbackQWindow_FocusInEvent(this, ev); };
	QObject * focusObject() const { return static_cast<QObject*>(callbackQWindow_FocusObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_FocusObjectChanged(QObject * object) { callbackQWindow_FocusObjectChanged(this, object); };
	void focusOutEvent(QFocusEvent * ev) { callbackQWindow_FocusOutEvent(this, ev); };
	QSurfaceFormat format() const { return *static_cast<QSurfaceFormat*>(callbackQWindow_Format(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_HeightChanged(int arg) { callbackQWindow_HeightChanged(this, arg); };
	void hide() { callbackQWindow_Hide(this); };
	void hideEvent(QHideEvent * ev) { callbackQWindow_HideEvent(this, ev); };
	void keyPressEvent(QKeyEvent * ev) { callbackQWindow_KeyPressEvent(this, ev); };
	void keyReleaseEvent(QKeyEvent * ev) { callbackQWindow_KeyReleaseEvent(this, ev); };
	void lower() { callbackQWindow_Lower(this); };
	void Signal_MaximumHeightChanged(int arg) { callbackQWindow_MaximumHeightChanged(this, arg); };
	void Signal_MaximumWidthChanged(int arg) { callbackQWindow_MaximumWidthChanged(this, arg); };
	void Signal_MinimumHeightChanged(int arg) { callbackQWindow_MinimumHeightChanged(this, arg); };
	void Signal_MinimumWidthChanged(int arg) { callbackQWindow_MinimumWidthChanged(this, arg); };
	void Signal_ModalityChanged(Qt::WindowModality modality) { callbackQWindow_ModalityChanged(this, modality); };
	void mouseDoubleClickEvent(QMouseEvent * ev) { callbackQWindow_MouseDoubleClickEvent(this, ev); };
	void mouseMoveEvent(QMouseEvent * ev) { callbackQWindow_MouseMoveEvent(this, ev); };
	void mousePressEvent(QMouseEvent * ev) { callbackQWindow_MousePressEvent(this, ev); };
	void mouseReleaseEvent(QMouseEvent * ev) { callbackQWindow_MouseReleaseEvent(this, ev); };
	void moveEvent(QMoveEvent * ev) { callbackQWindow_MoveEvent(this, ev); };
	bool nativeEvent(const QByteArray & eventType, void * message, long * result) { return callbackQWindow_NativeEvent(this, const_cast<QByteArray*>(&eventType), message, result) != 0; };
	void Signal_OpacityChanged(qreal opacity) { callbackQWindow_OpacityChanged(this, opacity); };
	void raise() { callbackQWindow_Raise(this); };
	void requestActivate() { callbackQWindow_RequestActivate(this); };
	void requestUpdate() { callbackQWindow_RequestUpdate(this); };
	void resizeEvent(QResizeEvent * ev) { callbackQWindow_ResizeEvent(this, ev); };
	void Signal_ScreenChanged(QScreen * screen) { callbackQWindow_ScreenChanged(this, screen); };
	void setGeometry(int posx, int posy, int w, int h) { callbackQWindow_SetGeometry(this, posx, posy, w, h); };
	void setGeometry(const QRect & rect) { callbackQWindow_SetGeometry2(this, const_cast<QRect*>(&rect)); };
	void setHeight(int arg) { callbackQWindow_SetHeight(this, arg); };
	void setMaximumHeight(int h) { callbackQWindow_SetMaximumHeight(this, h); };
	void setMaximumWidth(int w) { callbackQWindow_SetMaximumWidth(this, w); };
	void setMinimumHeight(int h) { callbackQWindow_SetMinimumHeight(this, h); };
	void setMinimumWidth(int w) { callbackQWindow_SetMinimumWidth(this, w); };
	void setTitle(const QString & vqs) { QByteArray* tda39a3 = new QByteArray(vqs.toUtf8()); QtGui_PackedString vqsPacked = { const_cast<char*>(tda39a3->prepend("WHITESPACE").constData()+10), tda39a3->size()-10, tda39a3 };callbackQWindow_SetTitle(this, vqsPacked); };
	void setVisible(bool visible) { callbackQWindow_SetVisible(this, visible); };
	void setWidth(int arg) { callbackQWindow_SetWidth(this, arg); };
	void setX(int arg) { callbackQWindow_SetX(this, arg); };
	void setY(int arg) { callbackQWindow_SetY(this, arg); };
	void show() { callbackQWindow_Show(this); };
	void showEvent(QShowEvent * ev) { callbackQWindow_ShowEvent(this, ev); };
	void showFullScreen() { callbackQWindow_ShowFullScreen(this); };
	void showMaximized() { callbackQWindow_ShowMaximized(this); };
	void showMinimized() { callbackQWindow_ShowMinimized(this); };
	void showNormal() { callbackQWindow_ShowNormal(this); };
	QSize size() const { return *static_cast<QSize*>(callbackQWindow_Size(const_cast<void*>(static_cast<const void*>(this)))); };
	bool startSystemMove() { return callbackQWindow_StartSystemMove(this) != 0; };
	bool startSystemResize(Qt::Edges edges) { return callbackQWindow_StartSystemResize(this, edges) != 0; };
	QSurface::SurfaceType surfaceType() const { return static_cast<QSurface::SurfaceType>(callbackQWindow_SurfaceType(const_cast<void*>(static_cast<const void*>(this)))); };
	void tabletEvent(QTabletEvent * ev) { callbackQWindow_TabletEvent(this, ev); };
	void touchEvent(QTouchEvent * ev) { callbackQWindow_TouchEvent(this, ev); };
	void Signal_VisibilityChanged(QWindow::Visibility visibility) { callbackQWindow_VisibilityChanged(this, visibility); };
	void Signal_VisibleChanged(bool arg) { callbackQWindow_VisibleChanged(this, arg); };
	void wheelEvent(QWheelEvent * ev) { callbackQWindow_WheelEvent(this, ev); };
	void Signal_WidthChanged(int arg) { callbackQWindow_WidthChanged(this, arg); };
	void Signal_WindowStateChanged(Qt::WindowState windowState) { callbackQWindow_WindowStateChanged(this, windowState); };
	void Signal_WindowTitleChanged(const QString & title) { QByteArray* t3c6de1 = new QByteArray(title.toUtf8()); QtGui_PackedString titlePacked = { const_cast<char*>(t3c6de1->prepend("WHITESPACE").constData()+10), t3c6de1->size()-10, t3c6de1 };callbackQWindow_WindowTitleChanged(this, titlePacked); };
	void Signal_XChanged(int arg) { callbackQWindow_XChanged(this, arg); };
	void Signal_YChanged(int arg) { callbackQWindow_YChanged(this, arg); };
	 ~MyQWindow() { callbackQWindow_DestroyQWindow(this); };
	void childEvent(QChildEvent * event) { callbackQWindow_ChildEvent(this, event); };
	void connectNotify(const QMetaMethod & sign) { callbackQWindow_ConnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	void customEvent(QEvent * event) { callbackQWindow_CustomEvent(this, event); };
	void deleteLater() { callbackQWindow_DeleteLater(this); };
	void Signal_Destroyed(QObject * obj) { callbackQWindow_Destroyed(this, obj); };
	void disconnectNotify(const QMetaMethod & sign) { callbackQWindow_DisconnectNotify(this, const_cast<QMetaMethod*>(&sign)); };
	bool eventFilter(QObject * watched, QEvent * event) { return callbackQWindow_EventFilter(this, watched, event) != 0; };
	const QMetaObject * metaObject() const { return static_cast<QMetaObject*>(callbackQWindow_MetaObject(const_cast<void*>(static_cast<const void*>(this)))); };
	void Signal_ObjectNameChanged(const QString & objectName) { QByteArray* taa2c4f = new QByteArray(objectName.toUtf8()); QtGui_PackedString objectNamePacked = { const_cast<char*>(taa2c4f->prepend("WHITESPACE").constData()+10), taa2c4f->size()-10, taa2c4f };callbackQWindow_ObjectNameChanged(this, objectNamePacked); };
	void timerEvent(QTimerEvent * event) { callbackQWindow_TimerEvent(this, event); };
};

Q_DECLARE_METATYPE(QWindow*)
Q_DECLARE_METATYPE(MyQWindow*)

int QWindow_QWindow_QRegisterMetaType(){qRegisterMetaType<QWindow*>(); return qRegisterMetaType<MyQWindow*>();}

void* QWindow_NewQWindow(void* targetScreen)
{
	return new MyQWindow(static_cast<QScreen*>(targetScreen));
}

void* QWindow_NewQWindow2(void* parent)
{
	return new MyQWindow(static_cast<QWindow*>(parent));
}

void QWindow_ConnectActiveChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)()>(&QWindow::activeChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)()>(&MyQWindow::Signal_ActiveChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectActiveChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)()>(&QWindow::activeChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)()>(&MyQWindow::Signal_ActiveChanged));
}

void QWindow_ActiveChanged(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->activeChanged();
	} else {
		static_cast<QWindow*>(ptr)->activeChanged();
	}
}

void QWindow_Alert(void* ptr, int msec)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "alert", Q_ARG(int, msec));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "alert", Q_ARG(int, msec));
	}
}

void QWindow_AlertDefault(void* ptr, int msec)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::alert(msec);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::alert(msec);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::alert(msec);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::alert(msec);
	}
}

void* QWindow_BaseSize(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->baseSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->baseSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

char QWindow_Close(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
			bool returnArg;
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "close", Q_RETURN_ARG(bool, returnArg));
		return returnArg;
	} else {
			bool returnArg;
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "close", Q_RETURN_ARG(bool, returnArg));
		return returnArg;
	}
}

char QWindow_CloseDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::close();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::close();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::close();
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::close();
	}
}

long long QWindow_ContentOrientation(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->contentOrientation();
	} else {
		return static_cast<QWindow*>(ptr)->contentOrientation();
	}
}

void QWindow_ConnectContentOrientationChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::ScreenOrientation>();
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::ScreenOrientation)>(&QWindow::contentOrientationChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::ScreenOrientation)>(&MyQWindow::Signal_ContentOrientationChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectContentOrientationChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::ScreenOrientation)>(&QWindow::contentOrientationChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::ScreenOrientation)>(&MyQWindow::Signal_ContentOrientationChanged));
}

void QWindow_ContentOrientationChanged(void* ptr, long long orientation)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->contentOrientationChanged(static_cast<Qt::ScreenOrientation>(orientation));
	} else {
		static_cast<QWindow*>(ptr)->contentOrientationChanged(static_cast<Qt::ScreenOrientation>(orientation));
	}
}

void QWindow_Create(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->create();
	} else {
		static_cast<QWindow*>(ptr)->create();
	}
}

void* QWindow_Cursor(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QCursor(static_cast<QPaintDeviceWindow*>(ptr)->cursor());
	} else {
		return new QCursor(static_cast<QWindow*>(ptr)->cursor());
	}
}

void QWindow_Destroy(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->destroy();
	} else {
		static_cast<QWindow*>(ptr)->destroy();
	}
}

double QWindow_DevicePixelRatio(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->devicePixelRatio();
	} else {
		return static_cast<QWindow*>(ptr)->devicePixelRatio();
	}
}

char QWindow_Event(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->event(static_cast<QEvent*>(ev));
	} else {
		return static_cast<QWindow*>(ptr)->event(static_cast<QEvent*>(ev));
	}
}

char QWindow_EventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::event(static_cast<QEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::event(static_cast<QEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::event(static_cast<QEvent*>(ev));
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::event(static_cast<QEvent*>(ev));
	}
}

void QWindow_ExposeEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->exposeEvent(static_cast<QExposeEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->exposeEvent(static_cast<QExposeEvent*>(ev));
	}
}

void QWindow_ExposeEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::exposeEvent(static_cast<QExposeEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::exposeEvent(static_cast<QExposeEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::exposeEvent(static_cast<QExposeEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::exposeEvent(static_cast<QExposeEvent*>(ev));
	}
}

struct QtGui_PackedString QWindow_FilePath(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QByteArray* t7116fb = new QByteArray(static_cast<QPaintDeviceWindow*>(ptr)->filePath().toUtf8()); QtGui_PackedString { const_cast<char*>(t7116fb->prepend("WHITESPACE").constData()+10), t7116fb->size()-10, t7116fb }; });
	} else {
		return ({ QByteArray* t7116fb = new QByteArray(static_cast<QWindow*>(ptr)->filePath().toUtf8()); QtGui_PackedString { const_cast<char*>(t7116fb->prepend("WHITESPACE").constData()+10), t7116fb->size()-10, t7116fb }; });
	}
}

long long QWindow_Flags(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->flags();
	} else {
		return static_cast<QWindow*>(ptr)->flags();
	}
}

void QWindow_FocusInEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->focusInEvent(static_cast<QFocusEvent*>(ev));
	}
}

void QWindow_FocusInEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::focusInEvent(static_cast<QFocusEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::focusInEvent(static_cast<QFocusEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::focusInEvent(static_cast<QFocusEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::focusInEvent(static_cast<QFocusEvent*>(ev));
	}
}

void* QWindow_FocusObject(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->focusObject();
	} else {
		return static_cast<QWindow*>(ptr)->focusObject();
	}
}

void* QWindow_FocusObjectDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::focusObject();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::focusObject();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::focusObject();
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::focusObject();
	}
}

void QWindow_ConnectFocusObjectChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QObject *)>(&QWindow::focusObjectChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QObject *)>(&MyQWindow::Signal_FocusObjectChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectFocusObjectChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QObject *)>(&QWindow::focusObjectChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QObject *)>(&MyQWindow::Signal_FocusObjectChanged));
}

void QWindow_FocusObjectChanged(void* ptr, void* object)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
			static_cast<QPaintDeviceWindow*>(ptr)->focusObjectChanged(static_cast<QOffscreenSurface*>(object));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
			static_cast<QPaintDeviceWindow*>(ptr)->focusObjectChanged(static_cast<QPaintDeviceWindow*>(object));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
			static_cast<QPaintDeviceWindow*>(ptr)->focusObjectChanged(static_cast<QPdfWriter*>(object));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
			static_cast<QPaintDeviceWindow*>(ptr)->focusObjectChanged(static_cast<QWindow*>(object));
		} else {
			static_cast<QPaintDeviceWindow*>(ptr)->focusObjectChanged(static_cast<QObject*>(object));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(object))) {
			static_cast<QWindow*>(ptr)->focusObjectChanged(static_cast<QOffscreenSurface*>(object));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(object))) {
			static_cast<QWindow*>(ptr)->focusObjectChanged(static_cast<QPaintDeviceWindow*>(object));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(object))) {
			static_cast<QWindow*>(ptr)->focusObjectChanged(static_cast<QPdfWriter*>(object));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(object))) {
			static_cast<QWindow*>(ptr)->focusObjectChanged(static_cast<QWindow*>(object));
		} else {
			static_cast<QWindow*>(ptr)->focusObjectChanged(static_cast<QObject*>(object));
		}
	}
}

void QWindow_FocusOutEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->focusOutEvent(static_cast<QFocusEvent*>(ev));
	}
}

void QWindow_FocusOutEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::focusOutEvent(static_cast<QFocusEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::focusOutEvent(static_cast<QFocusEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::focusOutEvent(static_cast<QFocusEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::focusOutEvent(static_cast<QFocusEvent*>(ev));
	}
}

void* QWindow_Format(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QPaintDeviceWindow*>(ptr)->format());
	} else {
		return new QSurfaceFormat(static_cast<QWindow*>(ptr)->format());
	}
}

void* QWindow_FormatDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QRasterWindow*>(ptr)->QRasterWindow::format());
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::format());
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::format());
	} else {
		return new QSurfaceFormat(static_cast<QWindow*>(ptr)->QWindow::format());
	}
}

void* QWindow_FrameGeometry(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QRect tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->frameGeometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QRect tmpValue = static_cast<QWindow*>(ptr)->frameGeometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
	}
}

void* QWindow_FrameMargins(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QMargins tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->frameMargins(); new QMargins(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
	} else {
		return ({ QMargins tmpValue = static_cast<QWindow*>(ptr)->frameMargins(); new QMargins(tmpValue.left(), tmpValue.top(), tmpValue.right(), tmpValue.bottom()); });
	}
}

void* QWindow_FramePosition(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QPoint tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->framePosition(); new QPoint(tmpValue.x(), tmpValue.y()); });
	} else {
		return ({ QPoint tmpValue = static_cast<QWindow*>(ptr)->framePosition(); new QPoint(tmpValue.x(), tmpValue.y()); });
	}
}

void* QWindow_QWindow_FromWinId(uintptr_t id)
{
		return QWindow::fromWinId(id);
}

void* QWindow_Geometry(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QRect tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->geometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QRect tmpValue = static_cast<QWindow*>(ptr)->geometry(); new QRect(tmpValue.x(), tmpValue.y(), tmpValue.width(), tmpValue.height()); });
	}
}

int QWindow_Height(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->height();
	} else {
		return static_cast<QWindow*>(ptr)->height();
	}
}

void QWindow_ConnectHeightChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::heightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_HeightChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectHeightChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::heightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_HeightChanged));
}

void QWindow_HeightChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->heightChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->heightChanged(arg);
	}
}

void QWindow_Hide(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "hide");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "hide");
	}
}

void QWindow_HideDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::hide();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::hide();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::hide();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::hide();
	}
}

void QWindow_HideEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->hideEvent(static_cast<QHideEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->hideEvent(static_cast<QHideEvent*>(ev));
	}
}

void QWindow_HideEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::hideEvent(static_cast<QHideEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::hideEvent(static_cast<QHideEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::hideEvent(static_cast<QHideEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::hideEvent(static_cast<QHideEvent*>(ev));
	}
}

void* QWindow_Icon(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QIcon(static_cast<QPaintDeviceWindow*>(ptr)->icon());
	} else {
		return new QIcon(static_cast<QWindow*>(ptr)->icon());
	}
}

char QWindow_IsActive(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->isActive();
	} else {
		return static_cast<QWindow*>(ptr)->isActive();
	}
}

char QWindow_IsAncestorOf(void* ptr, void* child, long long mode)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(child))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->isAncestorOf(static_cast<QPaintDeviceWindow*>(child), static_cast<QWindow::AncestorMode>(mode));
		} else {
			return static_cast<QPaintDeviceWindow*>(ptr)->isAncestorOf(static_cast<QWindow*>(child), static_cast<QWindow::AncestorMode>(mode));
		}
	} else {
		if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(child))) {
			return static_cast<QWindow*>(ptr)->isAncestorOf(static_cast<QPaintDeviceWindow*>(child), static_cast<QWindow::AncestorMode>(mode));
		} else {
			return static_cast<QWindow*>(ptr)->isAncestorOf(static_cast<QWindow*>(child), static_cast<QWindow::AncestorMode>(mode));
		}
	}
}

char QWindow_IsExposed(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->isExposed();
	} else {
		return static_cast<QWindow*>(ptr)->isExposed();
	}
}

char QWindow_IsModal(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->isModal();
	} else {
		return static_cast<QWindow*>(ptr)->isModal();
	}
}

char QWindow_IsTopLevel(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->isTopLevel();
	} else {
		return static_cast<QWindow*>(ptr)->isTopLevel();
	}
}

char QWindow_IsVisible(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->isVisible();
	} else {
		return static_cast<QWindow*>(ptr)->isVisible();
	}
}

void QWindow_KeyPressEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->keyPressEvent(static_cast<QKeyEvent*>(ev));
	}
}

void QWindow_KeyPressEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::keyPressEvent(static_cast<QKeyEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::keyPressEvent(static_cast<QKeyEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::keyPressEvent(static_cast<QKeyEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::keyPressEvent(static_cast<QKeyEvent*>(ev));
	}
}

void QWindow_KeyReleaseEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	}
}

void QWindow_KeyReleaseEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::keyReleaseEvent(static_cast<QKeyEvent*>(ev));
	}
}

void QWindow_Lower(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "lower");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "lower");
	}
}

void QWindow_LowerDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::lower();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::lower();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::lower();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::lower();
	}
}

void* QWindow_MapFromGlobal(void* ptr, void* pos)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QPoint tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->mapFromGlobal(*static_cast<QPoint*>(pos)); new QPoint(tmpValue.x(), tmpValue.y()); });
	} else {
		return ({ QPoint tmpValue = static_cast<QWindow*>(ptr)->mapFromGlobal(*static_cast<QPoint*>(pos)); new QPoint(tmpValue.x(), tmpValue.y()); });
	}
}

void* QWindow_MapToGlobal(void* ptr, void* pos)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QPoint tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->mapToGlobal(*static_cast<QPoint*>(pos)); new QPoint(tmpValue.x(), tmpValue.y()); });
	} else {
		return ({ QPoint tmpValue = static_cast<QWindow*>(ptr)->mapToGlobal(*static_cast<QPoint*>(pos)); new QPoint(tmpValue.x(), tmpValue.y()); });
	}
}

void* QWindow_Mask(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QRegion(static_cast<QPaintDeviceWindow*>(ptr)->mask());
	} else {
		return new QRegion(static_cast<QWindow*>(ptr)->mask());
	}
}

int QWindow_MaximumHeight(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->maximumHeight();
	} else {
		return static_cast<QWindow*>(ptr)->maximumHeight();
	}
}

void QWindow_ConnectMaximumHeightChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::maximumHeightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MaximumHeightChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectMaximumHeightChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::maximumHeightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MaximumHeightChanged));
}

void QWindow_MaximumHeightChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->maximumHeightChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->maximumHeightChanged(arg);
	}
}

void* QWindow_MaximumSize(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->maximumSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->maximumSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

int QWindow_MaximumWidth(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->maximumWidth();
	} else {
		return static_cast<QWindow*>(ptr)->maximumWidth();
	}
}

void QWindow_ConnectMaximumWidthChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::maximumWidthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MaximumWidthChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectMaximumWidthChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::maximumWidthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MaximumWidthChanged));
}

void QWindow_MaximumWidthChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->maximumWidthChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->maximumWidthChanged(arg);
	}
}

int QWindow_MinimumHeight(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->minimumHeight();
	} else {
		return static_cast<QWindow*>(ptr)->minimumHeight();
	}
}

void QWindow_ConnectMinimumHeightChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::minimumHeightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MinimumHeightChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectMinimumHeightChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::minimumHeightChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MinimumHeightChanged));
}

void QWindow_MinimumHeightChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->minimumHeightChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->minimumHeightChanged(arg);
	}
}

void* QWindow_MinimumSize(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->minimumSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->minimumSize(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

int QWindow_MinimumWidth(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->minimumWidth();
	} else {
		return static_cast<QWindow*>(ptr)->minimumWidth();
	}
}

void QWindow_ConnectMinimumWidthChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::minimumWidthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MinimumWidthChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectMinimumWidthChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::minimumWidthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_MinimumWidthChanged));
}

void QWindow_MinimumWidthChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->minimumWidthChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->minimumWidthChanged(arg);
	}
}

long long QWindow_Modality(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->modality();
	} else {
		return static_cast<QWindow*>(ptr)->modality();
	}
}

void QWindow_ConnectModalityChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::WindowModality>();
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::WindowModality)>(&QWindow::modalityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::WindowModality)>(&MyQWindow::Signal_ModalityChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectModalityChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::WindowModality)>(&QWindow::modalityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::WindowModality)>(&MyQWindow::Signal_ModalityChanged));
}

void QWindow_ModalityChanged(void* ptr, long long modality)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->modalityChanged(static_cast<Qt::WindowModality>(modality));
	} else {
		static_cast<QWindow*>(ptr)->modalityChanged(static_cast<Qt::WindowModality>(modality));
	}
}

void QWindow_MouseDoubleClickEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MouseDoubleClickEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::mouseDoubleClickEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MouseMoveEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MouseMoveEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::mouseMoveEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MousePressEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->mousePressEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MousePressEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::mousePressEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::mousePressEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::mousePressEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::mousePressEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MouseReleaseEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MouseReleaseEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::mouseReleaseEvent(static_cast<QMouseEvent*>(ev));
	}
}

void QWindow_MoveEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->moveEvent(static_cast<QMoveEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->moveEvent(static_cast<QMoveEvent*>(ev));
	}
}

void QWindow_MoveEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::moveEvent(static_cast<QMoveEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::moveEvent(static_cast<QMoveEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::moveEvent(static_cast<QMoveEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::moveEvent(static_cast<QMoveEvent*>(ev));
	}
}

char QWindow_NativeEvent(void* ptr, void* eventType, void* message, long* result)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	} else {
		return static_cast<QWindow*>(ptr)->nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	}
}

char QWindow_NativeEventDefault(void* ptr, void* eventType, void* message, long* result)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::nativeEvent(*static_cast<QByteArray*>(eventType), message, result);
	}
}

double QWindow_Opacity(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->opacity();
	} else {
		return static_cast<QWindow*>(ptr)->opacity();
	}
}

void QWindow_ConnectOpacityChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(qreal)>(&QWindow::opacityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(qreal)>(&MyQWindow::Signal_OpacityChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectOpacityChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(qreal)>(&QWindow::opacityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(qreal)>(&MyQWindow::Signal_OpacityChanged));
}

void QWindow_OpacityChanged(void* ptr, double opacity)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->opacityChanged(opacity);
	} else {
		static_cast<QWindow*>(ptr)->opacityChanged(opacity);
	}
}

void* QWindow_Parent(void* ptr, long long mode)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->parent(static_cast<QWindow::AncestorMode>(mode));
	} else {
		return static_cast<QWindow*>(ptr)->parent(static_cast<QWindow::AncestorMode>(mode));
	}
}

void* QWindow_Parent2(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->parent();
	} else {
		return static_cast<QWindow*>(ptr)->parent();
	}
}

void* QWindow_Position(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QPoint tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->position(); new QPoint(tmpValue.x(), tmpValue.y()); });
	} else {
		return ({ QPoint tmpValue = static_cast<QWindow*>(ptr)->position(); new QPoint(tmpValue.x(), tmpValue.y()); });
	}
}

void QWindow_Raise(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "raise");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "raise");
	}
}

void QWindow_RaiseDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::raise();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::raise();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::raise();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::raise();
	}
}

void QWindow_ReportContentOrientationChange(void* ptr, long long orientation)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->reportContentOrientationChange(static_cast<Qt::ScreenOrientation>(orientation));
	} else {
		static_cast<QWindow*>(ptr)->reportContentOrientationChange(static_cast<Qt::ScreenOrientation>(orientation));
	}
}

void QWindow_RequestActivate(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "requestActivate");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "requestActivate");
	}
}

void QWindow_RequestActivateDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::requestActivate();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::requestActivate();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::requestActivate();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::requestActivate();
	}
}

void QWindow_RequestUpdate(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "requestUpdate");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "requestUpdate");
	}
}

void QWindow_RequestUpdateDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::requestUpdate();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::requestUpdate();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::requestUpdate();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::requestUpdate();
	}
}

void* QWindow_RequestedFormat(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QSurfaceFormat(static_cast<QPaintDeviceWindow*>(ptr)->requestedFormat());
	} else {
		return new QSurfaceFormat(static_cast<QWindow*>(ptr)->requestedFormat());
	}
}

void QWindow_Resize(void* ptr, void* newSize)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->resize(*static_cast<QSize*>(newSize));
	} else {
		static_cast<QWindow*>(ptr)->resize(*static_cast<QSize*>(newSize));
	}
}

void QWindow_Resize2(void* ptr, int w, int h)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->resize(w, h);
	} else {
		static_cast<QWindow*>(ptr)->resize(w, h);
	}
}

void QWindow_ResizeEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->resizeEvent(static_cast<QResizeEvent*>(ev));
	}
}

void QWindow_ResizeEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::resizeEvent(static_cast<QResizeEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::resizeEvent(static_cast<QResizeEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::resizeEvent(static_cast<QResizeEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::resizeEvent(static_cast<QResizeEvent*>(ev));
	}
}

void* QWindow_Screen(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->screen();
	} else {
		return static_cast<QWindow*>(ptr)->screen();
	}
}

void QWindow_ConnectScreenChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QScreen *)>(&QWindow::screenChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QScreen *)>(&MyQWindow::Signal_ScreenChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectScreenChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QScreen *)>(&QWindow::screenChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QScreen *)>(&MyQWindow::Signal_ScreenChanged));
}

void QWindow_ScreenChanged(void* ptr, void* screen)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->screenChanged(static_cast<QScreen*>(screen));
	} else {
		static_cast<QWindow*>(ptr)->screenChanged(static_cast<QScreen*>(screen));
	}
}

void QWindow_SetBaseSize(void* ptr, void* size)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setBaseSize(*static_cast<QSize*>(size));
	} else {
		static_cast<QWindow*>(ptr)->setBaseSize(*static_cast<QSize*>(size));
	}
}

void QWindow_SetCursor(void* ptr, void* cursor)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setCursor(*static_cast<QCursor*>(cursor));
	} else {
		static_cast<QWindow*>(ptr)->setCursor(*static_cast<QCursor*>(cursor));
	}
}

void QWindow_SetFilePath(void* ptr, struct QtGui_PackedString filePath)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setFilePath(QString::fromUtf8(filePath.data, filePath.len));
	} else {
		static_cast<QWindow*>(ptr)->setFilePath(QString::fromUtf8(filePath.data, filePath.len));
	}
}

void QWindow_SetFlag(void* ptr, long long flag, char on)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setFlag(static_cast<Qt::WindowType>(flag), on != 0);
	} else {
		static_cast<QWindow*>(ptr)->setFlag(static_cast<Qt::WindowType>(flag), on != 0);
	}
}

void QWindow_SetFlags(void* ptr, long long flags)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setFlags(static_cast<Qt::WindowType>(flags));
	} else {
		static_cast<QWindow*>(ptr)->setFlags(static_cast<Qt::WindowType>(flags));
	}
}

void QWindow_SetFormat(void* ptr, void* format)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setFormat(*static_cast<QSurfaceFormat*>(format));
	} else {
		static_cast<QWindow*>(ptr)->setFormat(*static_cast<QSurfaceFormat*>(format));
	}
}

void QWindow_SetFramePosition(void* ptr, void* point)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setFramePosition(*static_cast<QPoint*>(point));
	} else {
		static_cast<QWindow*>(ptr)->setFramePosition(*static_cast<QPoint*>(point));
	}
}

void QWindow_SetGeometry(void* ptr, int posx, int posy, int w, int h)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setGeometry", Q_ARG(int, posx), Q_ARG(int, posy), Q_ARG(int, w), Q_ARG(int, h));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setGeometry", Q_ARG(int, posx), Q_ARG(int, posy), Q_ARG(int, w), Q_ARG(int, h));
	}
}

void QWindow_SetGeometryDefault(void* ptr, int posx, int posy, int w, int h)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setGeometry(posx, posy, w, h);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setGeometry(posx, posy, w, h);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setGeometry(posx, posy, w, h);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setGeometry(posx, posy, w, h);
	}
}

void QWindow_SetGeometry2(void* ptr, void* rect)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setGeometry", Q_ARG(const QRect, *static_cast<QRect*>(rect)));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setGeometry", Q_ARG(const QRect, *static_cast<QRect*>(rect)));
	}
}

void QWindow_SetGeometry2Default(void* ptr, void* rect)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setGeometry(*static_cast<QRect*>(rect));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setGeometry(*static_cast<QRect*>(rect));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setGeometry(*static_cast<QRect*>(rect));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setGeometry(*static_cast<QRect*>(rect));
	}
}

void QWindow_SetHeight(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setHeight", Q_ARG(int, arg));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setHeight", Q_ARG(int, arg));
	}
}

void QWindow_SetHeightDefault(void* ptr, int arg)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setHeight(arg);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setHeight(arg);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setHeight(arg);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setHeight(arg);
	}
}

void QWindow_SetIcon(void* ptr, void* icon)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
	} else {
		static_cast<QWindow*>(ptr)->setIcon(*static_cast<QIcon*>(icon));
	}
}

char QWindow_SetKeyboardGrabEnabled(void* ptr, char grab)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->setKeyboardGrabEnabled(grab != 0);
	} else {
		return static_cast<QWindow*>(ptr)->setKeyboardGrabEnabled(grab != 0);
	}
}

void QWindow_SetMask(void* ptr, void* region)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setMask(*static_cast<QRegion*>(region));
	} else {
		static_cast<QWindow*>(ptr)->setMask(*static_cast<QRegion*>(region));
	}
}

void QWindow_SetMaximumHeight(void* ptr, int h)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setMaximumHeight", Q_ARG(int, h));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setMaximumHeight", Q_ARG(int, h));
	}
}

void QWindow_SetMaximumHeightDefault(void* ptr, int h)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setMaximumHeight(h);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setMaximumHeight(h);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setMaximumHeight(h);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setMaximumHeight(h);
	}
}

void QWindow_SetMaximumSize(void* ptr, void* size)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setMaximumSize(*static_cast<QSize*>(size));
	} else {
		static_cast<QWindow*>(ptr)->setMaximumSize(*static_cast<QSize*>(size));
	}
}

void QWindow_SetMaximumWidth(void* ptr, int w)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setMaximumWidth", Q_ARG(int, w));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setMaximumWidth", Q_ARG(int, w));
	}
}

void QWindow_SetMaximumWidthDefault(void* ptr, int w)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setMaximumWidth(w);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setMaximumWidth(w);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setMaximumWidth(w);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setMaximumWidth(w);
	}
}

void QWindow_SetMinimumHeight(void* ptr, int h)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setMinimumHeight", Q_ARG(int, h));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setMinimumHeight", Q_ARG(int, h));
	}
}

void QWindow_SetMinimumHeightDefault(void* ptr, int h)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setMinimumHeight(h);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setMinimumHeight(h);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setMinimumHeight(h);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setMinimumHeight(h);
	}
}

void QWindow_SetMinimumSize(void* ptr, void* size)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setMinimumSize(*static_cast<QSize*>(size));
	} else {
		static_cast<QWindow*>(ptr)->setMinimumSize(*static_cast<QSize*>(size));
	}
}

void QWindow_SetMinimumWidth(void* ptr, int w)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setMinimumWidth", Q_ARG(int, w));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setMinimumWidth", Q_ARG(int, w));
	}
}

void QWindow_SetMinimumWidthDefault(void* ptr, int w)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setMinimumWidth(w);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setMinimumWidth(w);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setMinimumWidth(w);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setMinimumWidth(w);
	}
}

void QWindow_SetModality(void* ptr, long long modality)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setModality(static_cast<Qt::WindowModality>(modality));
	} else {
		static_cast<QWindow*>(ptr)->setModality(static_cast<Qt::WindowModality>(modality));
	}
}

char QWindow_SetMouseGrabEnabled(void* ptr, char grab)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->setMouseGrabEnabled(grab != 0);
	} else {
		return static_cast<QWindow*>(ptr)->setMouseGrabEnabled(grab != 0);
	}
}

void QWindow_SetOpacity(void* ptr, double level)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setOpacity(level);
	} else {
		static_cast<QWindow*>(ptr)->setOpacity(level);
	}
}

void QWindow_SetParent(void* ptr, void* parent)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
			static_cast<QPaintDeviceWindow*>(ptr)->setParent(static_cast<QPaintDeviceWindow*>(parent));
		} else {
			static_cast<QPaintDeviceWindow*>(ptr)->setParent(static_cast<QWindow*>(parent));
		}
	} else {
		if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(parent))) {
			static_cast<QWindow*>(ptr)->setParent(static_cast<QPaintDeviceWindow*>(parent));
		} else {
			static_cast<QWindow*>(ptr)->setParent(static_cast<QWindow*>(parent));
		}
	}
}

void QWindow_SetPosition(void* ptr, void* pt)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setPosition(*static_cast<QPoint*>(pt));
	} else {
		static_cast<QWindow*>(ptr)->setPosition(*static_cast<QPoint*>(pt));
	}
}

void QWindow_SetPosition2(void* ptr, int posx, int posy)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setPosition(posx, posy);
	} else {
		static_cast<QWindow*>(ptr)->setPosition(posx, posy);
	}
}

void QWindow_SetScreen(void* ptr, void* newScreen)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setScreen(static_cast<QScreen*>(newScreen));
	} else {
		static_cast<QWindow*>(ptr)->setScreen(static_cast<QScreen*>(newScreen));
	}
}

void QWindow_SetSizeIncrement(void* ptr, void* size)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setSizeIncrement(*static_cast<QSize*>(size));
	} else {
		static_cast<QWindow*>(ptr)->setSizeIncrement(*static_cast<QSize*>(size));
	}
}

void QWindow_SetSurfaceType(void* ptr, long long surfaceType)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setSurfaceType(static_cast<QSurface::SurfaceType>(surfaceType));
	} else {
		static_cast<QWindow*>(ptr)->setSurfaceType(static_cast<QSurface::SurfaceType>(surfaceType));
	}
}

void QWindow_SetTitle(void* ptr, struct QtGui_PackedString vqs)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setTitle", Q_ARG(const QString, QString::fromUtf8(vqs.data, vqs.len)));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setTitle", Q_ARG(const QString, QString::fromUtf8(vqs.data, vqs.len)));
	}
}

void QWindow_SetTitleDefault(void* ptr, struct QtGui_PackedString vqs)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setTitle(QString::fromUtf8(vqs.data, vqs.len));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setTitle(QString::fromUtf8(vqs.data, vqs.len));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setTitle(QString::fromUtf8(vqs.data, vqs.len));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setTitle(QString::fromUtf8(vqs.data, vqs.len));
	}
}

void QWindow_SetVisibility(void* ptr, long long v)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setVisibility(static_cast<QWindow::Visibility>(v));
	} else {
		static_cast<QWindow*>(ptr)->setVisibility(static_cast<QWindow::Visibility>(v));
	}
}

void QWindow_SetVisible(void* ptr, char visible)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setVisible", Q_ARG(bool, visible != 0));
	}
}

void QWindow_SetVisibleDefault(void* ptr, char visible)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setVisible(visible != 0);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setVisible(visible != 0);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setVisible(visible != 0);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setVisible(visible != 0);
	}
}

void QWindow_SetWidth(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setWidth", Q_ARG(int, arg));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setWidth", Q_ARG(int, arg));
	}
}

void QWindow_SetWidthDefault(void* ptr, int arg)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setWidth(arg);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setWidth(arg);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setWidth(arg);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setWidth(arg);
	}
}

void QWindow_SetWindowState(void* ptr, long long state)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setWindowState(static_cast<Qt::WindowState>(state));
	} else {
		static_cast<QWindow*>(ptr)->setWindowState(static_cast<Qt::WindowState>(state));
	}
}

void QWindow_SetWindowStates(void* ptr, long long state)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->setWindowStates(static_cast<Qt::WindowState>(state));
	} else {
		static_cast<QWindow*>(ptr)->setWindowStates(static_cast<Qt::WindowState>(state));
	}
}

void QWindow_SetX(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setX", Q_ARG(int, arg));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setX", Q_ARG(int, arg));
	}
}

void QWindow_SetXDefault(void* ptr, int arg)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setX(arg);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setX(arg);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setX(arg);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setX(arg);
	}
}

void QWindow_SetY(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "setY", Q_ARG(int, arg));
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "setY", Q_ARG(int, arg));
	}
}

void QWindow_SetYDefault(void* ptr, int arg)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::setY(arg);
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::setY(arg);
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::setY(arg);
	} else {
		static_cast<QWindow*>(ptr)->QWindow::setY(arg);
	}
}

void QWindow_Show(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "show");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "show");
	}
}

void QWindow_ShowDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::show();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::show();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::show();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::show();
	}
}

void QWindow_ShowEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->showEvent(static_cast<QShowEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->showEvent(static_cast<QShowEvent*>(ev));
	}
}

void QWindow_ShowEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::showEvent(static_cast<QShowEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::showEvent(static_cast<QShowEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::showEvent(static_cast<QShowEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::showEvent(static_cast<QShowEvent*>(ev));
	}
}

void QWindow_ShowFullScreen(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "showFullScreen");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "showFullScreen");
	}
}

void QWindow_ShowFullScreenDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::showFullScreen();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::showFullScreen();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::showFullScreen();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::showFullScreen();
	}
}

void QWindow_ShowMaximized(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "showMaximized");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "showMaximized");
	}
}

void QWindow_ShowMaximizedDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::showMaximized();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::showMaximized();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::showMaximized();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::showMaximized();
	}
}

void QWindow_ShowMinimized(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "showMinimized");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "showMinimized");
	}
}

void QWindow_ShowMinimizedDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::showMinimized();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::showMinimized();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::showMinimized();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::showMinimized();
	}
}

void QWindow_ShowNormal(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "showNormal");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "showNormal");
	}
}

void QWindow_ShowNormalDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::showNormal();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::showNormal();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::showNormal();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::showNormal();
	}
}

void* QWindow_Size(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->size(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

void* QWindow_SizeDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QRasterWindow*>(ptr)->QRasterWindow::size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::size(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->QWindow::size(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

void* QWindow_SizeIncrement(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QSize tmpValue = static_cast<QPaintDeviceWindow*>(ptr)->sizeIncrement(); new QSize(tmpValue.width(), tmpValue.height()); });
	} else {
		return ({ QSize tmpValue = static_cast<QWindow*>(ptr)->sizeIncrement(); new QSize(tmpValue.width(), tmpValue.height()); });
	}
}

char QWindow_StartSystemMove(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
			bool returnArg;
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "startSystemMove", Q_RETURN_ARG(bool, returnArg));
		return returnArg;
	} else {
			bool returnArg;
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "startSystemMove", Q_RETURN_ARG(bool, returnArg));
		return returnArg;
	}
}

char QWindow_StartSystemMoveDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::startSystemMove();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::startSystemMove();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::startSystemMove();
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::startSystemMove();
	}
}

char QWindow_StartSystemResize(void* ptr, long long edges)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
			qRegisterMetaType<Qt::Edges>();
		bool returnArg;
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "startSystemResize", Q_RETURN_ARG(bool, returnArg), Q_ARG(Qt::Edges, static_cast<Qt::Edge>(edges)));
		return returnArg;
	} else {
			qRegisterMetaType<Qt::Edges>();
		bool returnArg;
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "startSystemResize", Q_RETURN_ARG(bool, returnArg), Q_ARG(Qt::Edges, static_cast<Qt::Edge>(edges)));
		return returnArg;
	}
}

char QWindow_StartSystemResizeDefault(void* ptr, long long edges)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::startSystemResize(static_cast<Qt::Edge>(edges));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::startSystemResize(static_cast<Qt::Edge>(edges));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::startSystemResize(static_cast<Qt::Edge>(edges));
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::startSystemResize(static_cast<Qt::Edge>(edges));
	}
}

long long QWindow_SurfaceType(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->surfaceType();
	} else {
		return static_cast<QWindow*>(ptr)->surfaceType();
	}
}

long long QWindow_SurfaceTypeDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QRasterWindow*>(ptr)->QRasterWindow::surfaceType();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::surfaceType();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::surfaceType();
	} else {
		return static_cast<QWindow*>(ptr)->QWindow::surfaceType();
	}
}

void QWindow_TabletEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->tabletEvent(static_cast<QTabletEvent*>(ev));
	}
}

void QWindow_TabletEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::tabletEvent(static_cast<QTabletEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::tabletEvent(static_cast<QTabletEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::tabletEvent(static_cast<QTabletEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::tabletEvent(static_cast<QTabletEvent*>(ev));
	}
}

struct QtGui_PackedString QWindow_Title(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({ QByteArray* t3f590b = new QByteArray(static_cast<QPaintDeviceWindow*>(ptr)->title().toUtf8()); QtGui_PackedString { const_cast<char*>(t3f590b->prepend("WHITESPACE").constData()+10), t3f590b->size()-10, t3f590b }; });
	} else {
		return ({ QByteArray* t3f590b = new QByteArray(static_cast<QWindow*>(ptr)->title().toUtf8()); QtGui_PackedString { const_cast<char*>(t3f590b->prepend("WHITESPACE").constData()+10), t3f590b->size()-10, t3f590b }; });
	}
}

void QWindow_TouchEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->touchEvent(static_cast<QTouchEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->touchEvent(static_cast<QTouchEvent*>(ev));
	}
}

void QWindow_TouchEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::touchEvent(static_cast<QTouchEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::touchEvent(static_cast<QTouchEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::touchEvent(static_cast<QTouchEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::touchEvent(static_cast<QTouchEvent*>(ev));
	}
}

long long QWindow_Type(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->type();
	} else {
		return static_cast<QWindow*>(ptr)->type();
	}
}

void QWindow_UnsetCursor(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->unsetCursor();
	} else {
		static_cast<QWindow*>(ptr)->unsetCursor();
	}
}

long long QWindow_Visibility(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->visibility();
	} else {
		return static_cast<QWindow*>(ptr)->visibility();
	}
}

void QWindow_ConnectVisibilityChanged(void* ptr, long long t)
{
	qRegisterMetaType<QWindow::Visibility>();
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QWindow::Visibility)>(&QWindow::visibilityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QWindow::Visibility)>(&MyQWindow::Signal_VisibilityChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectVisibilityChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(QWindow::Visibility)>(&QWindow::visibilityChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(QWindow::Visibility)>(&MyQWindow::Signal_VisibilityChanged));
}

void QWindow_VisibilityChanged(void* ptr, long long visibility)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->visibilityChanged(static_cast<QWindow::Visibility>(visibility));
	} else {
		static_cast<QWindow*>(ptr)->visibilityChanged(static_cast<QWindow::Visibility>(visibility));
	}
}

void QWindow_ConnectVisibleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(bool)>(&QWindow::visibleChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(bool)>(&MyQWindow::Signal_VisibleChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectVisibleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(bool)>(&QWindow::visibleChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(bool)>(&MyQWindow::Signal_VisibleChanged));
}

void QWindow_VisibleChanged(void* ptr, char arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->visibleChanged(arg != 0);
	} else {
		static_cast<QWindow*>(ptr)->visibleChanged(arg != 0);
	}
}

void QWindow_WheelEvent(void* ptr, void* ev)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->wheelEvent(static_cast<QWheelEvent*>(ev));
	}
}

void QWindow_WheelEventDefault(void* ptr, void* ev)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::wheelEvent(static_cast<QWheelEvent*>(ev));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::wheelEvent(static_cast<QWheelEvent*>(ev));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::wheelEvent(static_cast<QWheelEvent*>(ev));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::wheelEvent(static_cast<QWheelEvent*>(ev));
	}
}

int QWindow_Width(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->width();
	} else {
		return static_cast<QWindow*>(ptr)->width();
	}
}

void QWindow_ConnectWidthChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::widthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_WidthChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectWidthChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::widthChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_WidthChanged));
}

void QWindow_WidthChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->widthChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->widthChanged(arg);
	}
}

uintptr_t QWindow_WinId(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->winId();
	} else {
		return static_cast<QWindow*>(ptr)->winId();
	}
}

long long QWindow_WindowState(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->windowState();
	} else {
		return static_cast<QWindow*>(ptr)->windowState();
	}
}

void QWindow_ConnectWindowStateChanged(void* ptr, long long t)
{
	qRegisterMetaType<Qt::WindowState>();
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::WindowState)>(&QWindow::windowStateChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::WindowState)>(&MyQWindow::Signal_WindowStateChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectWindowStateChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(Qt::WindowState)>(&QWindow::windowStateChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(Qt::WindowState)>(&MyQWindow::Signal_WindowStateChanged));
}

void QWindow_WindowStateChanged(void* ptr, long long windowState)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->windowStateChanged(static_cast<Qt::WindowState>(windowState));
	} else {
		static_cast<QWindow*>(ptr)->windowStateChanged(static_cast<Qt::WindowState>(windowState));
	}
}

long long QWindow_WindowStates(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->windowStates();
	} else {
		return static_cast<QWindow*>(ptr)->windowStates();
	}
}

void QWindow_ConnectWindowTitleChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(const QString &)>(&QWindow::windowTitleChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(const QString &)>(&MyQWindow::Signal_WindowTitleChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectWindowTitleChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(const QString &)>(&QWindow::windowTitleChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(const QString &)>(&MyQWindow::Signal_WindowTitleChanged));
}

void QWindow_WindowTitleChanged(void* ptr, struct QtGui_PackedString title)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->windowTitleChanged(QString::fromUtf8(title.data, title.len));
	} else {
		static_cast<QWindow*>(ptr)->windowTitleChanged(QString::fromUtf8(title.data, title.len));
	}
}

int QWindow_X(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->x();
	} else {
		return static_cast<QWindow*>(ptr)->x();
	}
}

void QWindow_ConnectXChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::xChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_XChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectXChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::xChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_XChanged));
}

void QWindow_XChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->xChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->xChanged(arg);
	}
}

int QWindow_Y(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return static_cast<QPaintDeviceWindow*>(ptr)->y();
	} else {
		return static_cast<QWindow*>(ptr)->y();
	}
}

void QWindow_ConnectYChanged(void* ptr, long long t)
{
	QObject::connect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::yChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_YChanged), static_cast<Qt::ConnectionType>(t));
}

void QWindow_DisconnectYChanged(void* ptr)
{
	QObject::disconnect(static_cast<QWindow*>(ptr), static_cast<void (QWindow::*)(int)>(&QWindow::yChanged), static_cast<MyQWindow*>(ptr), static_cast<void (MyQWindow::*)(int)>(&MyQWindow::Signal_YChanged));
}

void QWindow_YChanged(void* ptr, int arg)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->yChanged(arg);
	} else {
		static_cast<QWindow*>(ptr)->yChanged(arg);
	}
}

void QWindow_DestroyQWindow(void* ptr)
{
	static_cast<QWindow*>(ptr)->~QWindow();
}

void QWindow_DestroyQWindowDefault(void* ptr)
{
	Q_UNUSED(ptr);

}

void* QWindow___children_atList(void* ptr, int i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
	} else {
		return ({QObject * tmp = static_cast<QList<QObject *>*>(ptr)->at(i); if (i == static_cast<QList<QObject *>*>(ptr)->size()-1) { static_cast<QList<QObject *>*>(ptr)->~QList(); free(ptr); }; tmp; });
	}
}

void QWindow___children_setList(void* ptr, void* i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject *>*>(ptr)->append(static_cast<QObject*>(i));
		}
	}
}

void* QWindow___children_newList(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QList<QObject *>();
	} else {
		return new QList<QObject *>();
	}
}

void* QWindow___dynamicPropertyNames_atList(void* ptr, int i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
	} else {
		return new QByteArray(({QByteArray tmp = static_cast<QList<QByteArray>*>(ptr)->at(i); if (i == static_cast<QList<QByteArray>*>(ptr)->size()-1) { static_cast<QList<QByteArray>*>(ptr)->~QList(); free(ptr); }; tmp; }));
	}
}

void QWindow___dynamicPropertyNames_setList(void* ptr, void* i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
	} else {
		static_cast<QList<QByteArray>*>(ptr)->append(*static_cast<QByteArray*>(i));
	}
}

void* QWindow___dynamicPropertyNames_newList(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QList<QByteArray>();
	} else {
		return new QList<QByteArray>();
	}
}

void* QWindow___findChildren_atList(void* ptr, int i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
	} else {
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
	}
}

void QWindow___findChildren_setList(void* ptr, void* i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
		}
	}
}

void* QWindow___findChildren_newList(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QList<QObject*>();
	} else {
		return new QList<QObject*>();
	}
}

void* QWindow___findChildren_atList3(void* ptr, int i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
	} else {
		return ({QObject* tmp = static_cast<QList<QObject*>*>(ptr)->at(i); if (i == static_cast<QList<QObject*>*>(ptr)->size()-1) { static_cast<QList<QObject*>*>(ptr)->~QList(); free(ptr); }; tmp; });
	}
}

void QWindow___findChildren_setList3(void* ptr, void* i)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QOffscreenSurface*>(i));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPaintDeviceWindow*>(i));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QPdfWriter*>(i));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(i))) {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QWindow*>(i));
		} else {
			static_cast<QList<QObject*>*>(ptr)->append(static_cast<QObject*>(i));
		}
	}
}

void* QWindow___findChildren_newList3(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return new QList<QObject*>();
	} else {
		return new QList<QObject*>();
	}
}

void QWindow_ChildEvent(void* ptr, void* event)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->childEvent(static_cast<QChildEvent*>(event));
	}
}

void QWindow_ChildEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::childEvent(static_cast<QChildEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::childEvent(static_cast<QChildEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::childEvent(static_cast<QChildEvent*>(event));
	}
}

void QWindow_ConnectNotify(void* ptr, void* sign)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->connectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QWindow*>(ptr)->connectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

void QWindow_ConnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::connectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::connectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

void QWindow_CustomEvent(void* ptr, void* event)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->customEvent(static_cast<QEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->customEvent(static_cast<QEvent*>(event));
	}
}

void QWindow_CustomEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::customEvent(static_cast<QEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::customEvent(static_cast<QEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::customEvent(static_cast<QEvent*>(event));
	}
}

void QWindow_DeleteLater(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		QMetaObject::invokeMethod(static_cast<QPaintDeviceWindow*>(ptr), "deleteLater");
	} else {
		QMetaObject::invokeMethod(static_cast<QWindow*>(ptr), "deleteLater");
	}
}

void QWindow_DeleteLaterDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::deleteLater();
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::deleteLater();
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::deleteLater();
	} else {
		static_cast<QWindow*>(ptr)->QWindow::deleteLater();
	}
}

void QWindow_DisconnectNotify(void* ptr, void* sign)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QWindow*>(ptr)->disconnectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

void QWindow_DisconnectNotifyDefault(void* ptr, void* sign)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::disconnectNotify(*static_cast<QMetaMethod*>(sign));
	}
}

char QWindow_EventFilter(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QPaintDeviceWindow*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QWindow*>(ptr)->eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	}
}

char QWindow_EventFilterDefault(void* ptr, void* watched, void* event)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QRasterWindow*>(ptr)->QRasterWindow::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRasterWindow*>(ptr)->QRasterWindow::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QRasterWindow*>(ptr)->QRasterWindow::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QRasterWindow*>(ptr)->QRasterWindow::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QRasterWindow*>(ptr)->QRasterWindow::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	} else {
		if (dynamic_cast<QOffscreenSurface*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->QWindow::eventFilter(static_cast<QOffscreenSurface*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->QWindow::eventFilter(static_cast<QPaintDeviceWindow*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QPdfWriter*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->QWindow::eventFilter(static_cast<QPdfWriter*>(watched), static_cast<QEvent*>(event));
		} else if (dynamic_cast<QWindow*>(static_cast<QObject*>(watched))) {
			return static_cast<QWindow*>(ptr)->QWindow::eventFilter(static_cast<QWindow*>(watched), static_cast<QEvent*>(event));
		} else {
			return static_cast<QWindow*>(ptr)->QWindow::eventFilter(static_cast<QObject*>(watched), static_cast<QEvent*>(event));
		}
	}
}

void* QWindow_MetaObject(void* ptr)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QPaintDeviceWindow*>(ptr)->metaObject());
	} else {
		return const_cast<QMetaObject*>(static_cast<QWindow*>(ptr)->metaObject());
	}
}

void* QWindow_MetaObjectDefault(void* ptr)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QRasterWindow*>(ptr)->QRasterWindow::metaObject());
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::metaObject());
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		return const_cast<QMetaObject*>(static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::metaObject());
	} else {
		return const_cast<QMetaObject*>(static_cast<QWindow*>(ptr)->QWindow::metaObject());
	}
}

void QWindow_TimerEvent(void* ptr, void* event)
{
	if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->timerEvent(static_cast<QTimerEvent*>(event));
	}
}

void QWindow_TimerEventDefault(void* ptr, void* event)
{
	if (dynamic_cast<QRasterWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QRasterWindow*>(ptr)->QRasterWindow::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QOpenGLWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QOpenGLWindow*>(ptr)->QOpenGLWindow::timerEvent(static_cast<QTimerEvent*>(event));
	} else if (dynamic_cast<QPaintDeviceWindow*>(static_cast<QObject*>(ptr))) {
		static_cast<QPaintDeviceWindow*>(ptr)->QPaintDeviceWindow::timerEvent(static_cast<QTimerEvent*>(event));
	} else {
		static_cast<QWindow*>(ptr)->QWindow::timerEvent(static_cast<QTimerEvent*>(event));
	}
}

class MyQWindowStateChangeEvent: public QWindowStateChangeEvent
{
public:
};

Q_DECLARE_METATYPE(QWindowStateChangeEvent*)
Q_DECLARE_METATYPE(MyQWindowStateChangeEvent*)

int QWindowStateChangeEvent_QWindowStateChangeEvent_QRegisterMetaType(){qRegisterMetaType<QWindowStateChangeEvent*>(); return qRegisterMetaType<MyQWindowStateChangeEvent*>();}

long long QWindowStateChangeEvent_OldState(void* ptr)
{
	return static_cast<QWindowStateChangeEvent*>(ptr)->oldState();
}

