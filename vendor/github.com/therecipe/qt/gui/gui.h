// +build !minimal

#pragma once

#ifndef GO_QTGUI_H
#define GO_QTGUI_H

#include <stdint.h>

#ifdef __cplusplus
int QAbstractTextDocumentLayout_QAbstractTextDocumentLayout_QRegisterMetaType();
int QAccessibleActionInterface_QAccessibleActionInterface_QRegisterMetaType();
int QAccessibleEditableTextInterface_QAccessibleEditableTextInterface_QRegisterMetaType();
int QAccessibleEvent_QAccessibleEvent_QRegisterMetaType();
int QAccessibleInterface_QAccessibleInterface_QRegisterMetaType();
int QAccessibleObject_QAccessibleObject_QRegisterMetaType();
int QAccessiblePlugin_QAccessiblePlugin_QRegisterMetaType();
int QAccessibleStateChangeEvent_QAccessibleStateChangeEvent_QRegisterMetaType();
int QAccessibleTableCellInterface_QAccessibleTableCellInterface_QRegisterMetaType();
int QAccessibleTableInterface_QAccessibleTableInterface_QRegisterMetaType();
int QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent_QRegisterMetaType();
int QAccessibleTextCursorEvent_QAccessibleTextCursorEvent_QRegisterMetaType();
int QAccessibleTextInsertEvent_QAccessibleTextInsertEvent_QRegisterMetaType();
int QAccessibleTextInterface_QAccessibleTextInterface_QRegisterMetaType();
int QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent_QRegisterMetaType();
int QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent_QRegisterMetaType();
int QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent_QRegisterMetaType();
int QAccessibleValueChangeEvent_QAccessibleValueChangeEvent_QRegisterMetaType();
int QAccessibleValueInterface_QAccessibleValueInterface_QRegisterMetaType();
int QActionEvent_QActionEvent_QRegisterMetaType();
int QApplicationStateChangeEvent_QApplicationStateChangeEvent_QRegisterMetaType();
int QBitmap_QBitmap_QRegisterMetaType();
int QClipboard_QClipboard_QRegisterMetaType();
int QCloseEvent_QCloseEvent_QRegisterMetaType();
int QContextMenuEvent_QContextMenuEvent_QRegisterMetaType();
int QDoubleValidator_QDoubleValidator_QRegisterMetaType();
int QDrag_QDrag_QRegisterMetaType();
int QDragEnterEvent_QDragEnterEvent_QRegisterMetaType();
int QDragLeaveEvent_QDragLeaveEvent_QRegisterMetaType();
int QDragMoveEvent_QDragMoveEvent_QRegisterMetaType();
int QDropEvent_QDropEvent_QRegisterMetaType();
int QEnterEvent_QEnterEvent_QRegisterMetaType();
int QExposeEvent_QExposeEvent_QRegisterMetaType();
int QFileOpenEvent_QFileOpenEvent_QRegisterMetaType();
int QFocusEvent_QFocusEvent_QRegisterMetaType();
int QGenericPlugin_QGenericPlugin_QRegisterMetaType();
int QGuiApplication_QGuiApplication_QRegisterMetaType();
int QHelpEvent_QHelpEvent_QRegisterMetaType();
int QHideEvent_QHideEvent_QRegisterMetaType();
int QHoverEvent_QHoverEvent_QRegisterMetaType();
int QIconDragEvent_QIconDragEvent_QRegisterMetaType();
int QIconEngine_QIconEngine_QRegisterMetaType();
int QIconEnginePlugin_QIconEnginePlugin_QRegisterMetaType();
int QImage_QImage_QRegisterMetaType();
int QImageIOHandler_QImageIOHandler_QRegisterMetaType();
int QImageIOPlugin_QImageIOPlugin_QRegisterMetaType();
int QInputEvent_QInputEvent_QRegisterMetaType();
int QInputMethod_QInputMethod_QRegisterMetaType();
int QInputMethodEvent_QInputMethodEvent_QRegisterMetaType();
int QInputMethodQueryEvent_QInputMethodQueryEvent_QRegisterMetaType();
int QIntValidator_QIntValidator_QRegisterMetaType();
int QKeyEvent_QKeyEvent_QRegisterMetaType();
int QMouseEvent_QMouseEvent_QRegisterMetaType();
int QMoveEvent_QMoveEvent_QRegisterMetaType();
int QMovie_QMovie_QRegisterMetaType();
int QNativeGestureEvent_QNativeGestureEvent_QRegisterMetaType();
int QOffscreenSurface_QOffscreenSurface_QRegisterMetaType();
int QOpenGLContext_QOpenGLContext_QRegisterMetaType();
int QOpenGLContextGroup_QOpenGLContextGroup_QRegisterMetaType();
int QOpenGLDebugLogger_QOpenGLDebugLogger_QRegisterMetaType();
int QOpenGLFramebufferObject_QOpenGLFramebufferObject_QRegisterMetaType();
int QOpenGLPaintDevice_QOpenGLPaintDevice_QRegisterMetaType();
int QOpenGLShader_QOpenGLShader_QRegisterMetaType();
int QOpenGLShaderProgram_QOpenGLShaderProgram_QRegisterMetaType();
int QOpenGLTimeMonitor_QOpenGLTimeMonitor_QRegisterMetaType();
int QOpenGLTimerQuery_QOpenGLTimerQuery_QRegisterMetaType();
int QOpenGLVertexArrayObject_QOpenGLVertexArrayObject_QRegisterMetaType();
int QOpenGLWindow_QOpenGLWindow_QRegisterMetaType();
int QPagedPaintDevice_QPagedPaintDevice_QRegisterMetaType();
int QPaintDevice_QPaintDevice_QRegisterMetaType();
int QPaintDeviceWindow_QPaintDeviceWindow_QRegisterMetaType();
int QPaintEngine_QPaintEngine_QRegisterMetaType();
int QPaintEvent_QPaintEvent_QRegisterMetaType();
int QPdfWriter_QPdfWriter_QRegisterMetaType();
int QPicture_QPicture_QRegisterMetaType();
int QPictureFormatPlugin_QPictureFormatPlugin_QRegisterMetaType();
int QPixmap_QPixmap_QRegisterMetaType();
int QPlatformSurfaceEvent_QPlatformSurfaceEvent_QRegisterMetaType();
int QRasterWindow_QRasterWindow_QRegisterMetaType();
int QRegExpValidator_QRegExpValidator_QRegisterMetaType();
int QRegularExpressionValidator_QRegularExpressionValidator_QRegisterMetaType();
int QResizeEvent_QResizeEvent_QRegisterMetaType();
int QScreen_QScreen_QRegisterMetaType();
int QScreenOrientationChangeEvent_QScreenOrientationChangeEvent_QRegisterMetaType();
int QScrollEvent_QScrollEvent_QRegisterMetaType();
int QScrollPrepareEvent_QScrollPrepareEvent_QRegisterMetaType();
int QSessionManager_QSessionManager_QRegisterMetaType();
int QShortcutEvent_QShortcutEvent_QRegisterMetaType();
int QShowEvent_QShowEvent_QRegisterMetaType();
int QStandardItem_QStandardItem_QRegisterMetaType();
int QStandardItemModel_QStandardItemModel_QRegisterMetaType();
int QStatusTipEvent_QStatusTipEvent_QRegisterMetaType();
int QStyleHints_QStyleHints_QRegisterMetaType();
int QSurface_QSurface_QRegisterMetaType();
int QSyntaxHighlighter_QSyntaxHighlighter_QRegisterMetaType();
int QTabletEvent_QTabletEvent_QRegisterMetaType();
int QTextBlockGroup_QTextBlockGroup_QRegisterMetaType();
int QTextBlockUserData_QTextBlockUserData_QRegisterMetaType();
int QTextDocument_QTextDocument_QRegisterMetaType();
int QTextFrame_QTextFrame_QRegisterMetaType();
int QTextList_QTextList_QRegisterMetaType();
int QTextObject_QTextObject_QRegisterMetaType();
int QTextObjectInterface_QTextObjectInterface_QRegisterMetaType();
int QTextTable_QTextTable_QRegisterMetaType();
int QTouchEvent_QTouchEvent_QRegisterMetaType();
int QValidator_QValidator_QRegisterMetaType();
int QWhatsThisClickedEvent_QWhatsThisClickedEvent_QRegisterMetaType();
int QWheelEvent_QWheelEvent_QRegisterMetaType();
int QWindow_QWindow_QRegisterMetaType();
int QWindowStateChangeEvent_QWindowStateChangeEvent_QRegisterMetaType();
extern "C" {
#endif

struct QtGui_PackedString { char* data; long long len; void* ptr; };
struct QtGui_PackedList { void* data; long long len; };
struct QtGui_PackedString QAbstractTextDocumentLayout_AnchorAt(void* ptr, void* position);
void* QAbstractTextDocumentLayout_BlockBoundingRect(void* ptr, void* block);
void* QAbstractTextDocumentLayout_BlockWithMarkerAt(void* ptr, void* pos);
void* QAbstractTextDocumentLayout_Document(void* ptr);
void QAbstractTextDocumentLayout_DocumentChanged(void* ptr, int position, int charsRemoved, int charsAdded);
void* QAbstractTextDocumentLayout_DocumentSize(void* ptr);
void QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(void* ptr, long long t);
void QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(void* ptr);
void QAbstractTextDocumentLayout_DocumentSizeChanged(void* ptr, void* newSize);
void QAbstractTextDocumentLayout_DrawInlineObject(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format);
void QAbstractTextDocumentLayout_DrawInlineObjectDefault(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format);
void* QAbstractTextDocumentLayout_Format(void* ptr, int position);
void* QAbstractTextDocumentLayout_FormatAt(void* ptr, void* pos);
void* QAbstractTextDocumentLayout_FrameBoundingRect(void* ptr, void* frame);
void* QAbstractTextDocumentLayout_HandlerForObject(void* ptr, int objectType);
int QAbstractTextDocumentLayout_HitTest(void* ptr, void* point, long long accuracy);
struct QtGui_PackedString QAbstractTextDocumentLayout_ImageAt(void* ptr, void* pos);
int QAbstractTextDocumentLayout_PageCount(void* ptr);
void QAbstractTextDocumentLayout_ConnectPageCountChanged(void* ptr, long long t);
void QAbstractTextDocumentLayout_DisconnectPageCountChanged(void* ptr);
void QAbstractTextDocumentLayout_PageCountChanged(void* ptr, int newPages);
void* QAbstractTextDocumentLayout_PaintDevice(void* ptr);
void QAbstractTextDocumentLayout_PositionInlineObject(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_PositionInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_RegisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_ResizeInlineObject(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_ResizeInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_SetPaintDevice(void* ptr, void* device);
void QAbstractTextDocumentLayout_UnregisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_ConnectUpdate(void* ptr, long long t);
void QAbstractTextDocumentLayout_DisconnectUpdate(void* ptr);
void QAbstractTextDocumentLayout_Update(void* ptr, void* rect);
void QAbstractTextDocumentLayout_ConnectUpdateBlock(void* ptr, long long t);
void QAbstractTextDocumentLayout_DisconnectUpdateBlock(void* ptr);
void QAbstractTextDocumentLayout_UpdateBlock(void* ptr, void* block);
void* QAbstractTextDocumentLayout___children_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___children_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___children_newList(void* ptr);
void* QAbstractTextDocumentLayout___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___dynamicPropertyNames_newList(void* ptr);
void* QAbstractTextDocumentLayout___findChildren_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___findChildren_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___findChildren_newList(void* ptr);
void* QAbstractTextDocumentLayout___findChildren_atList3(void* ptr, int i);
void QAbstractTextDocumentLayout___findChildren_setList3(void* ptr, void* i);
void* QAbstractTextDocumentLayout___findChildren_newList3(void* ptr);
void QAbstractTextDocumentLayout_ChildEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractTextDocumentLayout_CustomEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_DeleteLaterDefault(void* ptr);
void QAbstractTextDocumentLayout_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractTextDocumentLayout_EventDefault(void* ptr, void* e);
char QAbstractTextDocumentLayout_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractTextDocumentLayout_MetaObjectDefault(void* ptr);
void QAbstractTextDocumentLayout_TimerEventDefault(void* ptr, void* event);
char QAccessible_QAccessible_IsActive();
void* QAccessible_QAccessible_QueryAccessibleInterface(void* object);
void QAccessible_QAccessible_SetRootObject(void* object);
void QAccessible_QAccessible_UpdateAccessibility2(void* event);
struct QtGui_PackedString QAccessibleActionInterface_ActionNames(void* ptr);
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction();
void QAccessibleActionInterface_DoAction(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction();
struct QtGui_PackedString QAccessibleActionInterface_KeyBindingsForAction(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescription(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescriptionDefault(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionName(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionNameDefault(void* ptr, struct QtGui_PackedString actionName);
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PressAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction();
void QAccessibleActionInterface_DestroyQAccessibleActionInterface(void* ptr);
void QAccessibleActionInterface_DestroyQAccessibleActionInterfaceDefault(void* ptr);
void QAccessibleEditableTextInterface_DeleteText(void* ptr, int startOffset, int endOffset);
void QAccessibleEditableTextInterface_InsertText(void* ptr, int offset, struct QtGui_PackedString text);
void QAccessibleEditableTextInterface_ReplaceText(void* ptr, int startOffset, int endOffset, struct QtGui_PackedString text);
void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(void* ptr);
void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterfaceDefault(void* ptr);
void* QAccessibleEvent_NewQAccessibleEvent2(void* object, long long ty);
void* QAccessibleEvent_NewQAccessibleEvent3(void* interfa, long long ty);
void* QAccessibleEvent_AccessibleInterface(void* ptr);
void* QAccessibleEvent_AccessibleInterfaceDefault(void* ptr);
int QAccessibleEvent_Child(void* ptr);
void* QAccessibleEvent_Object(void* ptr);
void QAccessibleEvent_SetChild(void* ptr, int child);
long long QAccessibleEvent_Type(void* ptr);
void QAccessibleEvent_DestroyQAccessibleEvent(void* ptr);
void QAccessibleEvent_DestroyQAccessibleEventDefault(void* ptr);
void* QAccessibleInterface_ActionInterface(void* ptr);
void* QAccessibleInterface_BackgroundColor(void* ptr);
void* QAccessibleInterface_BackgroundColorDefault(void* ptr);
void* QAccessibleInterface_Child(void* ptr, int index);
void* QAccessibleInterface_ChildAt(void* ptr, int x, int y);
int QAccessibleInterface_ChildCount(void* ptr);
void* QAccessibleInterface_FocusChild(void* ptr);
void* QAccessibleInterface_FocusChildDefault(void* ptr);
void* QAccessibleInterface_ForegroundColor(void* ptr);
void* QAccessibleInterface_ForegroundColorDefault(void* ptr);
int QAccessibleInterface_IndexOfChild(void* ptr, void* child);
void* QAccessibleInterface_Interface_cast(void* ptr, long long ty);
void* QAccessibleInterface_Interface_castDefault(void* ptr, long long ty);
char QAccessibleInterface_IsValid(void* ptr);
void* QAccessibleInterface_Object(void* ptr);
void* QAccessibleInterface_Parent(void* ptr);
void* QAccessibleInterface_Rect(void* ptr);
long long QAccessibleInterface_Role(void* ptr);
void QAccessibleInterface_SetText(void* ptr, long long t, struct QtGui_PackedString text);
void* QAccessibleInterface_TableCellInterface(void* ptr);
void* QAccessibleInterface_TableInterface(void* ptr);
struct QtGui_PackedString QAccessibleInterface_Text(void* ptr, long long t);
void* QAccessibleInterface_TextInterface(void* ptr);
void* QAccessibleInterface_ValueInterface(void* ptr);
void* QAccessibleInterface_Window(void* ptr);
void* QAccessibleInterface_WindowDefault(void* ptr);
void QAccessibleInterface_DestroyQAccessibleInterface(void* ptr);
void QAccessibleInterface_DestroyQAccessibleInterfaceDefault(void* ptr);
void* QAccessibleObject_ChildAt(void* ptr, int x, int y);
void* QAccessibleObject_ChildAtDefault(void* ptr, int x, int y);
char QAccessibleObject_IsValid(void* ptr);
char QAccessibleObject_IsValidDefault(void* ptr);
void* QAccessibleObject_Object(void* ptr);
void* QAccessibleObject_ObjectDefault(void* ptr);
void* QAccessibleObject_Rect(void* ptr);
void* QAccessibleObject_RectDefault(void* ptr);
void QAccessibleObject_SetText(void* ptr, long long t, struct QtGui_PackedString text);
void QAccessibleObject_SetTextDefault(void* ptr, long long t, struct QtGui_PackedString text);
void QAccessibleObject_DestroyQAccessibleObject(void* ptr);
void QAccessibleObject_DestroyQAccessibleObjectDefault(void* ptr);
void* QAccessibleObject_Child(void* ptr, int index);
void* QAccessibleObject_ChildDefault(void* ptr, int index);
int QAccessibleObject_ChildCount(void* ptr);
int QAccessibleObject_ChildCountDefault(void* ptr);
int QAccessibleObject_IndexOfChild(void* ptr, void* child);
int QAccessibleObject_IndexOfChildDefault(void* ptr, void* child);
void* QAccessibleObject_Parent(void* ptr);
void* QAccessibleObject_ParentDefault(void* ptr);
long long QAccessibleObject_Role(void* ptr);
long long QAccessibleObject_RoleDefault(void* ptr);
struct QtGui_PackedString QAccessibleObject_Text(void* ptr, long long t);
struct QtGui_PackedString QAccessibleObject_TextDefault(void* ptr, long long t);
void* QAccessiblePlugin_NewQAccessiblePlugin(void* parent);
void* QAccessiblePlugin_Create(void* ptr, struct QtGui_PackedString key, void* object);
void QAccessiblePlugin_DestroyQAccessiblePlugin(void* ptr);
void QAccessiblePlugin_DestroyQAccessiblePluginDefault(void* ptr);
void* QAccessiblePlugin___children_atList(void* ptr, int i);
void QAccessiblePlugin___children_setList(void* ptr, void* i);
void* QAccessiblePlugin___children_newList(void* ptr);
void* QAccessiblePlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QAccessiblePlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAccessiblePlugin___dynamicPropertyNames_newList(void* ptr);
void* QAccessiblePlugin___findChildren_atList(void* ptr, int i);
void QAccessiblePlugin___findChildren_setList(void* ptr, void* i);
void* QAccessiblePlugin___findChildren_newList(void* ptr);
void* QAccessiblePlugin___findChildren_atList3(void* ptr, int i);
void QAccessiblePlugin___findChildren_setList3(void* ptr, void* i);
void* QAccessiblePlugin___findChildren_newList3(void* ptr);
void QAccessiblePlugin_ChildEventDefault(void* ptr, void* event);
void QAccessiblePlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QAccessiblePlugin_CustomEventDefault(void* ptr, void* event);
void QAccessiblePlugin_DeleteLaterDefault(void* ptr);
void QAccessiblePlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QAccessiblePlugin_EventDefault(void* ptr, void* e);
char QAccessiblePlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAccessiblePlugin_MetaObjectDefault(void* ptr);
void QAccessiblePlugin_TimerEventDefault(void* ptr, void* event);
int QAccessibleTableCellInterface_ColumnExtent(void* ptr);
struct QtGui_PackedList QAccessibleTableCellInterface_ColumnHeaderCells(void* ptr);
int QAccessibleTableCellInterface_ColumnIndex(void* ptr);
char QAccessibleTableCellInterface_IsSelected(void* ptr);
int QAccessibleTableCellInterface_RowExtent(void* ptr);
struct QtGui_PackedList QAccessibleTableCellInterface_RowHeaderCells(void* ptr);
int QAccessibleTableCellInterface_RowIndex(void* ptr);
void* QAccessibleTableCellInterface_Table(void* ptr);
void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(void* ptr);
void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterfaceDefault(void* ptr);
void* QAccessibleTableCellInterface___columnHeaderCells_atList(void* ptr, int i);
void QAccessibleTableCellInterface___columnHeaderCells_setList(void* ptr, void* i);
void* QAccessibleTableCellInterface___columnHeaderCells_newList(void* ptr);
void* QAccessibleTableCellInterface___rowHeaderCells_atList(void* ptr, int i);
void QAccessibleTableCellInterface___rowHeaderCells_setList(void* ptr, void* i);
void* QAccessibleTableCellInterface___rowHeaderCells_newList(void* ptr);
void* QAccessibleTableInterface_Caption(void* ptr);
void* QAccessibleTableInterface_CellAt(void* ptr, int row, int column);
int QAccessibleTableInterface_ColumnCount(void* ptr);
struct QtGui_PackedString QAccessibleTableInterface_ColumnDescription(void* ptr, int column);
char QAccessibleTableInterface_IsColumnSelected(void* ptr, int column);
char QAccessibleTableInterface_IsRowSelected(void* ptr, int row);
void QAccessibleTableInterface_ModelChange(void* ptr, void* event);
int QAccessibleTableInterface_RowCount(void* ptr);
struct QtGui_PackedString QAccessibleTableInterface_RowDescription(void* ptr, int row);
char QAccessibleTableInterface_SelectColumn(void* ptr, int column);
char QAccessibleTableInterface_SelectRow(void* ptr, int row);
int QAccessibleTableInterface_SelectedCellCount(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedCells(void* ptr);
int QAccessibleTableInterface_SelectedColumnCount(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedColumns(void* ptr);
int QAccessibleTableInterface_SelectedRowCount(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedRows(void* ptr);
void* QAccessibleTableInterface_Summary(void* ptr);
char QAccessibleTableInterface_UnselectColumn(void* ptr, int column);
char QAccessibleTableInterface_UnselectRow(void* ptr, int row);
void QAccessibleTableInterface_DestroyQAccessibleTableInterface(void* ptr);
void QAccessibleTableInterface_DestroyQAccessibleTableInterfaceDefault(void* ptr);
void* QAccessibleTableInterface___selectedCells_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedCells_setList(void* ptr, void* i);
void* QAccessibleTableInterface___selectedCells_newList(void* ptr);
int QAccessibleTableInterface___selectedColumns_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedColumns_setList(void* ptr, int i);
void* QAccessibleTableInterface___selectedColumns_newList(void* ptr);
int QAccessibleTableInterface___selectedRows_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedRows_setList(void* ptr, int i);
void* QAccessibleTableInterface___selectedRows_newList(void* ptr);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(void* object, long long changeType);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(void* iface, long long changeType);
int QAccessibleTableModelChangeEvent_FirstColumn(void* ptr);
int QAccessibleTableModelChangeEvent_FirstRow(void* ptr);
int QAccessibleTableModelChangeEvent_LastColumn(void* ptr);
int QAccessibleTableModelChangeEvent_LastRow(void* ptr);
long long QAccessibleTableModelChangeEvent_ModelChangeType(void* ptr);
void QAccessibleTableModelChangeEvent_SetFirstColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetFirstRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetLastColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetLastRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetModelChangeType(void* ptr, long long changeType);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(void* object, int cursorPos);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(void* iface, int cursorPos);
int QAccessibleTextCursorEvent_CursorPosition(void* ptr);
void QAccessibleTextCursorEvent_SetCursorPosition(void* ptr, int position);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(void* object, int position, struct QtGui_PackedString text);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(void* iface, int position, struct QtGui_PackedString text);
int QAccessibleTextInsertEvent_ChangePosition(void* ptr);
struct QtGui_PackedString QAccessibleTextInsertEvent_TextInserted(void* ptr);
void QAccessibleTextInterface_AddSelection(void* ptr, int startOffset, int endOffset);
int QAccessibleTextInterface_CharacterCount(void* ptr);
void* QAccessibleTextInterface_CharacterRect(void* ptr, int offset);
int QAccessibleTextInterface_CursorPosition(void* ptr);
int QAccessibleTextInterface_OffsetAtPoint(void* ptr, void* point);
void QAccessibleTextInterface_RemoveSelection(void* ptr, int selectionIndex);
void QAccessibleTextInterface_ScrollToSubstring(void* ptr, int startIndex, int endIndex);
void QAccessibleTextInterface_Selection(void* ptr, int selectionIndex, int startOffset, int endOffset);
int QAccessibleTextInterface_SelectionCount(void* ptr);
void QAccessibleTextInterface_SetCursorPosition(void* ptr, int position);
void QAccessibleTextInterface_SetSelection(void* ptr, int selectionIndex, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_Text(void* ptr, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAtOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAtOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
void QAccessibleTextInterface_DestroyQAccessibleTextInterface(void* ptr);
void QAccessibleTextInterface_DestroyQAccessibleTextInterfaceDefault(void* ptr);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(void* object, int position, struct QtGui_PackedString text);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(void* iface, int position, struct QtGui_PackedString text);
int QAccessibleTextRemoveEvent_ChangePosition(void* ptr);
struct QtGui_PackedString QAccessibleTextRemoveEvent_TextRemoved(void* ptr);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(void* object, int start, int end);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(void* iface, int start, int end);
int QAccessibleTextSelectionEvent_SelectionEnd(void* ptr);
int QAccessibleTextSelectionEvent_SelectionStart(void* ptr);
void QAccessibleTextSelectionEvent_SetSelection(void* ptr, int start, int end);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(void* object, int position, struct QtGui_PackedString oldText, struct QtGui_PackedString text);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(void* iface, int position, struct QtGui_PackedString oldText, struct QtGui_PackedString text);
int QAccessibleTextUpdateEvent_ChangePosition(void* ptr);
struct QtGui_PackedString QAccessibleTextUpdateEvent_TextInserted(void* ptr);
struct QtGui_PackedString QAccessibleTextUpdateEvent_TextRemoved(void* ptr);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(void* object, void* value);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(void* iface, void* val);
void QAccessibleValueChangeEvent_SetValue(void* ptr, void* value);
void* QAccessibleValueChangeEvent_Value(void* ptr);
void* QAccessibleValueInterface_CurrentValue(void* ptr);
void* QAccessibleValueInterface_MaximumValue(void* ptr);
void* QAccessibleValueInterface_MinimumStepSize(void* ptr);
void* QAccessibleValueInterface_MinimumValue(void* ptr);
void QAccessibleValueInterface_SetCurrentValue(void* ptr, void* value);
void QAccessibleValueInterface_DestroyQAccessibleValueInterface(void* ptr);
void QAccessibleValueInterface_DestroyQAccessibleValueInterfaceDefault(void* ptr);
void* QActionEvent_NewQActionEvent(int ty, void* action, void* before);
void* QActionEvent_Action(void* ptr);
void* QActionEvent_Before(void* ptr);
void* QApplicationStateChangeEvent_NewQApplicationStateChangeEvent(long long applicationState);
long long QApplicationStateChangeEvent_ApplicationState(void* ptr);
void* QBackingStore_NewQBackingStore(void* window);
void QBackingStore_BeginPaint(void* ptr, void* region);
void QBackingStore_EndPaint(void* ptr);
void QBackingStore_Flush(void* ptr, void* region, void* window, void* offset);
char QBackingStore_HasStaticContents(void* ptr);
void* QBackingStore_PaintDevice(void* ptr);
void QBackingStore_Resize(void* ptr, void* size);
char QBackingStore_Scroll(void* ptr, void* area, int dx, int dy);
void QBackingStore_SetStaticContents(void* ptr, void* region);
void* QBackingStore_Size(void* ptr);
void* QBackingStore_StaticContents(void* ptr);
void* QBackingStore_Window(void* ptr);
void QBackingStore_DestroyQBackingStore(void* ptr);
void* QBitmap_NewQBitmap();
void* QBitmap_NewQBitmap2(void* pixmap);
void* QBitmap_NewQBitmap3(int width, int height);
void* QBitmap_NewQBitmap4(void* size);
void* QBitmap_NewQBitmap5(struct QtGui_PackedString fileName, char* format);
void QBitmap_Clear(void* ptr);
void* QBitmap_QBitmap_FromData(void* size, char* bits, long long monoFormat);
void* QBitmap_QBitmap_FromImage(void* image, long long flags);
void* QBitmap_QBitmap_FromImage2(void* image, long long flags);
void QBitmap_Swap(void* ptr, void* other);
void* QBitmap_Transformed(void* ptr, void* matrix);
void QBitmap_DestroyQBitmap(void* ptr);
void QBitmap_DestroyQBitmapDefault(void* ptr);
void* QBrush_NewQBrush();
void* QBrush_NewQBrush2(long long style);
void* QBrush_NewQBrush3(void* color, long long style);
void* QBrush_NewQBrush4(long long color, long long style);
void* QBrush_NewQBrush5(void* color, void* pixmap);
void* QBrush_NewQBrush6(long long color, void* pixmap);
void* QBrush_NewQBrush7(void* pixmap);
void* QBrush_NewQBrush8(void* image);
void* QBrush_NewQBrush9(void* other);
void* QBrush_NewQBrush10(void* gradient);
void* QBrush_Color(void* ptr);
void* QBrush_Gradient(void* ptr);
char QBrush_IsOpaque(void* ptr);
void QBrush_SetColor(void* ptr, void* color);
void QBrush_SetColor2(void* ptr, long long color);
void QBrush_SetStyle(void* ptr, long long style);
void QBrush_SetTexture(void* ptr, void* pixmap);
void QBrush_SetTextureImage(void* ptr, void* image);
void QBrush_SetTransform(void* ptr, void* matrix);
long long QBrush_Style(void* ptr);
void QBrush_Swap(void* ptr, void* other);
void* QBrush_Texture(void* ptr);
void* QBrush_TextureImage(void* ptr);
void* QBrush_Transform(void* ptr);
void QBrush_DestroyQBrush(void* ptr);
void* QBrush_ToVariant(void* ptr);
void QClipboard_ConnectChanged(void* ptr, long long t);
void QClipboard_DisconnectChanged(void* ptr);
void QClipboard_Changed(void* ptr, long long mode);
void QClipboard_Clear(void* ptr, long long mode);
void QClipboard_ConnectDataChanged(void* ptr, long long t);
void QClipboard_DisconnectDataChanged(void* ptr);
void QClipboard_DataChanged(void* ptr);
void QClipboard_ConnectFindBufferChanged(void* ptr, long long t);
void QClipboard_DisconnectFindBufferChanged(void* ptr);
void QClipboard_FindBufferChanged(void* ptr);
void* QClipboard_Image(void* ptr, long long mode);
void* QClipboard_MimeData(void* ptr, long long mode);
char QClipboard_OwnsClipboard(void* ptr);
char QClipboard_OwnsFindBuffer(void* ptr);
char QClipboard_OwnsSelection(void* ptr);
void* QClipboard_Pixmap(void* ptr, long long mode);
void QClipboard_ConnectSelectionChanged(void* ptr, long long t);
void QClipboard_DisconnectSelectionChanged(void* ptr);
void QClipboard_SelectionChanged(void* ptr);
void QClipboard_SetImage(void* ptr, void* image, long long mode);
void QClipboard_SetMimeData(void* ptr, void* src, long long mode);
void QClipboard_SetPixmap(void* ptr, void* pixmap, long long mode);
void QClipboard_SetText(void* ptr, struct QtGui_PackedString text, long long mode);
char QClipboard_SupportsFindBuffer(void* ptr);
char QClipboard_SupportsSelection(void* ptr);
struct QtGui_PackedString QClipboard_Text(void* ptr, long long mode);
struct QtGui_PackedString QClipboard_Text2(void* ptr, struct QtGui_PackedString subtype, long long mode);
void* QClipboard___children_atList(void* ptr, int i);
void QClipboard___children_setList(void* ptr, void* i);
void* QClipboard___children_newList(void* ptr);
void* QClipboard___dynamicPropertyNames_atList(void* ptr, int i);
void QClipboard___dynamicPropertyNames_setList(void* ptr, void* i);
void* QClipboard___dynamicPropertyNames_newList(void* ptr);
void* QClipboard___findChildren_atList(void* ptr, int i);
void QClipboard___findChildren_setList(void* ptr, void* i);
void* QClipboard___findChildren_newList(void* ptr);
void* QClipboard___findChildren_atList3(void* ptr, int i);
void QClipboard___findChildren_setList3(void* ptr, void* i);
void* QClipboard___findChildren_newList3(void* ptr);
void QClipboard_ChildEventDefault(void* ptr, void* event);
void QClipboard_ConnectNotifyDefault(void* ptr, void* sign);
void QClipboard_CustomEventDefault(void* ptr, void* event);
void QClipboard_DeleteLaterDefault(void* ptr);
void QClipboard_DisconnectNotifyDefault(void* ptr, void* sign);
char QClipboard_EventDefault(void* ptr, void* e);
char QClipboard_EventFilterDefault(void* ptr, void* watched, void* event);
void* QClipboard_MetaObjectDefault(void* ptr);
void QClipboard_TimerEventDefault(void* ptr, void* event);
void* QCloseEvent_NewQCloseEvent();
void* QColor_NewQColor();
void* QColor_NewQColor2(long long color);
void* QColor_NewQColor3(int r, int g, int b, int a);
void* QColor_NewQColor4(unsigned int color);
void* QColor_NewQColor5(void* rgba64);
void* QColor_NewQColor6(struct QtGui_PackedString name);
void* QColor_NewQColor8(char* name);
void* QColor_NewQColor9(void* name);
int QColor_Alpha(void* ptr);
double QColor_AlphaF(void* ptr);
int QColor_Black(void* ptr);
double QColor_BlackF(void* ptr);
int QColor_Blue(void* ptr);
double QColor_BlueF(void* ptr);
struct QtGui_PackedString QColor_QColor_ColorNames();
void* QColor_ConvertTo(void* ptr, long long colorSpec);
int QColor_Cyan(void* ptr);
double QColor_CyanF(void* ptr);
void* QColor_Darker(void* ptr, int factor);
void* QColor_QColor_FromCmyk(int c, int m, int y, int k, int a);
void* QColor_QColor_FromCmykF(double c, double m, double y, double k, double a);
void* QColor_QColor_FromHsl(int h, int s, int l, int a);
void* QColor_QColor_FromHslF(double h, double s, double l, double a);
void* QColor_QColor_FromHsv(int h, int s, int v, int a);
void* QColor_QColor_FromHsvF(double h, double s, double v, double a);
void* QColor_QColor_FromRgb(unsigned int rgb);
void* QColor_QColor_FromRgb2(int r, int g, int b, int a);
void* QColor_QColor_FromRgbF(double r, double g, double b, double a);
void* QColor_QColor_FromRgba(unsigned int rgba);
void* QColor_QColor_FromRgba64(unsigned short r, unsigned short g, unsigned short b, unsigned short a);
void* QColor_QColor_FromRgba642(void* rgba64);
void QColor_GetCmyk2(void* ptr, int c, int m, int y, int k, int a);
void QColor_GetCmykF2(void* ptr, double c, double m, double y, double k, double a);
void QColor_GetHsl(void* ptr, int h, int s, int l, int a);
void QColor_GetHslF(void* ptr, double h, double s, double l, double a);
void QColor_GetHsv(void* ptr, int h, int s, int v, int a);
void QColor_GetHsvF(void* ptr, double h, double s, double v, double a);
void QColor_GetRgb(void* ptr, int r, int g, int b, int a);
void QColor_GetRgbF(void* ptr, double r, double g, double b, double a);
int QColor_Green(void* ptr);
double QColor_GreenF(void* ptr);
int QColor_HslHue(void* ptr);
double QColor_HslHueF(void* ptr);
int QColor_HslSaturation(void* ptr);
double QColor_HslSaturationF(void* ptr);
int QColor_HsvHue(void* ptr);
double QColor_HsvHueF(void* ptr);
int QColor_HsvSaturation(void* ptr);
double QColor_HsvSaturationF(void* ptr);
int QColor_Hue(void* ptr);
double QColor_HueF(void* ptr);
char QColor_IsValid(void* ptr);
char QColor_QColor_IsValidColor(struct QtGui_PackedString name);
char QColor_QColor_IsValidColor2(void* name);
char QColor_QColor_IsValidColor3(void* name);
void* QColor_Lighter(void* ptr, int factor);
int QColor_Lightness(void* ptr);
double QColor_LightnessF(void* ptr);
int QColor_Magenta(void* ptr);
double QColor_MagentaF(void* ptr);
struct QtGui_PackedString QColor_Name(void* ptr);
struct QtGui_PackedString QColor_Name2(void* ptr, long long format);
int QColor_Red(void* ptr);
double QColor_RedF(void* ptr);
unsigned int QColor_Rgb(void* ptr);
unsigned int QColor_Rgba(void* ptr);
int QColor_Saturation(void* ptr);
double QColor_SaturationF(void* ptr);
void QColor_SetAlpha(void* ptr, int alpha);
void QColor_SetAlphaF(void* ptr, double alpha);
void QColor_SetBlue(void* ptr, int blue);
void QColor_SetBlueF(void* ptr, double blue);
void QColor_SetCmyk(void* ptr, int c, int m, int y, int k, int a);
void QColor_SetCmykF(void* ptr, double c, double m, double y, double k, double a);
void QColor_SetGreen(void* ptr, int green);
void QColor_SetGreenF(void* ptr, double green);
void QColor_SetHsl(void* ptr, int h, int s, int l, int a);
void QColor_SetHslF(void* ptr, double h, double s, double l, double a);
void QColor_SetHsv(void* ptr, int h, int s, int v, int a);
void QColor_SetHsvF(void* ptr, double h, double s, double v, double a);
void QColor_SetNamedColor(void* ptr, struct QtGui_PackedString name);
void QColor_SetNamedColor2(void* ptr, void* name);
void QColor_SetNamedColor3(void* ptr, void* name);
void QColor_SetRed(void* ptr, int red);
void QColor_SetRedF(void* ptr, double red);
void QColor_SetRgb(void* ptr, int r, int g, int b, int a);
void QColor_SetRgb2(void* ptr, unsigned int rgb);
void QColor_SetRgbF(void* ptr, double r, double g, double b, double a);
void QColor_SetRgba(void* ptr, unsigned int rgba);
void QColor_SetRgba64(void* ptr, void* rgba);
long long QColor_Spec(void* ptr);
void* QColor_ToCmyk(void* ptr);
void* QColor_ToExtendedRgb(void* ptr);
void* QColor_ToHsl(void* ptr);
void* QColor_ToHsv(void* ptr);
void* QColor_ToRgb(void* ptr);
int QColor_Value(void* ptr);
double QColor_ValueF(void* ptr);
int QColor_Yellow(void* ptr);
double QColor_YellowF(void* ptr);
void* QColor_ToVariant(void* ptr);
void* QColorSpace_NewQColorSpace();
void* QColorSpace_NewQColorSpace2(long long namedColorSpace);
void* QColorSpace_NewQColorSpace3(long long primaries, long long transferFunction, float gamma);
void* QColorSpace_NewQColorSpace4(long long primaries, float gamma);
void* QColorSpace_NewQColorSpace5(void* whitePoint, void* redPoint, void* greenPoint, void* bluePoint, long long transferFunction, float gamma);
void* QColorSpace_QColorSpace_FromIccProfile(void* iccProfile);
float QColorSpace_Gamma(void* ptr);
void* QColorSpace_IccProfile(void* ptr);
char QColorSpace_IsValid(void* ptr);
long long QColorSpace_Primaries(void* ptr);
void QColorSpace_SetPrimaries(void* ptr, long long primariesId);
void QColorSpace_SetPrimaries2(void* ptr, void* whitePoint, void* redPoint, void* greenPoint, void* bluePoint);
void QColorSpace_SetTransferFunction(void* ptr, long long transferFunction, float gamma);
void QColorSpace_Swap(void* ptr, void* other);
long long QColorSpace_TransferFunction(void* ptr);
void* QColorSpace_WithTransferFunction(void* ptr, long long transferFunction, float gamma);
unsigned int QColorTransform_Map(void* ptr, unsigned int argb);
void* QColorTransform_Map3(void* ptr, void* color);
void* QConicalGradient_NewQConicalGradient();
void* QConicalGradient_NewQConicalGradient2(void* center, double angle);
void* QConicalGradient_NewQConicalGradient3(double cx, double cy, double angle);
double QConicalGradient_Angle(void* ptr);
void* QConicalGradient_Center(void* ptr);
void QConicalGradient_SetAngle(void* ptr, double angle);
void QConicalGradient_SetCenter(void* ptr, void* center);
void QConicalGradient_SetCenter2(void* ptr, double x, double y);
void* QContextMenuEvent_NewQContextMenuEvent(long long reason, void* pos, void* globalPos, long long modifiers);
void* QContextMenuEvent_NewQContextMenuEvent2(long long reason, void* pos, void* globalPos);
void* QContextMenuEvent_NewQContextMenuEvent3(long long reason, void* pos);
void* QContextMenuEvent_GlobalPos(void* ptr);
int QContextMenuEvent_GlobalX(void* ptr);
int QContextMenuEvent_GlobalY(void* ptr);
void* QContextMenuEvent_Pos(void* ptr);
long long QContextMenuEvent_Reason(void* ptr);
int QContextMenuEvent_X(void* ptr);
int QContextMenuEvent_Y(void* ptr);
void* QCursor_NewQCursor();
void* QCursor_NewQCursor2(long long shape);
void* QCursor_NewQCursor3(void* bitmap, void* mask, int hotX, int hotY);
void* QCursor_NewQCursor4(void* pixmap, int hotX, int hotY);
void* QCursor_NewQCursor5(void* c);
void* QCursor_NewQCursor6(void* other);
void* QCursor_Bitmap2(void* ptr, long long vqt);
void* QCursor_HotSpot(void* ptr);
void* QCursor_Mask2(void* ptr, long long vqt);
void* QCursor_Pixmap(void* ptr);
void* QCursor_QCursor_Pos();
void* QCursor_QCursor_Pos2(void* screen);
void QCursor_QCursor_SetPos(int x, int y);
void QCursor_QCursor_SetPos2(void* screen, int x, int y);
void QCursor_QCursor_SetPos3(void* p);
void QCursor_QCursor_SetPos4(void* screen, void* p);
void QCursor_SetShape(void* ptr, long long shape);
long long QCursor_Shape(void* ptr);
void QCursor_Swap(void* ptr, void* other);
void QCursor_DestroyQCursor(void* ptr);
char QDesktopServices_QDesktopServices_OpenUrl(void* url);
void QDesktopServices_QDesktopServices_SetUrlHandler(struct QtGui_PackedString scheme, void* receiver, char* method);
void QDesktopServices_QDesktopServices_UnsetUrlHandler(struct QtGui_PackedString scheme);
void* QDoubleValidator_NewQDoubleValidator(void* parent);
void* QDoubleValidator_NewQDoubleValidator2(double bottom, double top, int decimals, void* parent);
double QDoubleValidator_Bottom(void* ptr);
void QDoubleValidator_ConnectBottomChanged(void* ptr, long long t);
void QDoubleValidator_DisconnectBottomChanged(void* ptr);
void QDoubleValidator_BottomChanged(void* ptr, double bottom);
int QDoubleValidator_Decimals(void* ptr);
void QDoubleValidator_ConnectDecimalsChanged(void* ptr, long long t);
void QDoubleValidator_DisconnectDecimalsChanged(void* ptr);
void QDoubleValidator_DecimalsChanged(void* ptr, int decimals);
long long QDoubleValidator_Notation(void* ptr);
void QDoubleValidator_ConnectNotationChanged(void* ptr, long long t);
void QDoubleValidator_DisconnectNotationChanged(void* ptr);
void QDoubleValidator_NotationChanged(void* ptr, long long notation);
void QDoubleValidator_SetBottom(void* ptr, double vdo);
void QDoubleValidator_SetDecimals(void* ptr, int vin);
void QDoubleValidator_SetNotation(void* ptr, long long vqd);
void QDoubleValidator_SetRange(void* ptr, double minimum, double maximum, int decimals);
void QDoubleValidator_SetRangeDefault(void* ptr, double minimum, double maximum, int decimals);
void QDoubleValidator_SetTop(void* ptr, double vdo);
double QDoubleValidator_Top(void* ptr);
void QDoubleValidator_ConnectTopChanged(void* ptr, long long t);
void QDoubleValidator_DisconnectTopChanged(void* ptr);
void QDoubleValidator_TopChanged(void* ptr, double top);
long long QDoubleValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos);
long long QDoubleValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos);
void QDoubleValidator_DestroyQDoubleValidator(void* ptr);
void QDoubleValidator_DestroyQDoubleValidatorDefault(void* ptr);
void* QDrag_NewQDrag(void* dragSource);
void QDrag_ConnectActionChanged(void* ptr, long long t);
void QDrag_DisconnectActionChanged(void* ptr);
void QDrag_ActionChanged(void* ptr, long long action);
void QDrag_QDrag_Cancel();
long long QDrag_DefaultAction(void* ptr);
void* QDrag_DragCursor(void* ptr, long long action);
long long QDrag_Exec(void* ptr, long long supportedActions);
long long QDrag_Exec2(void* ptr, long long supportedActions, long long defaultDropAction);
void* QDrag_HotSpot(void* ptr);
void* QDrag_MimeData(void* ptr);
void* QDrag_Pixmap(void* ptr);
void QDrag_SetDragCursor(void* ptr, void* cursor, long long action);
void QDrag_SetHotSpot(void* ptr, void* hotspot);
void QDrag_SetMimeData(void* ptr, void* data);
void QDrag_SetPixmap(void* ptr, void* pixmap);
void* QDrag_Source(void* ptr);
long long QDrag_SupportedActions(void* ptr);
void* QDrag_Target(void* ptr);
void QDrag_ConnectTargetChanged(void* ptr, long long t);
void QDrag_DisconnectTargetChanged(void* ptr);
void QDrag_TargetChanged(void* ptr, void* newTarget);
void QDrag_DestroyQDrag(void* ptr);
void QDrag_DestroyQDragDefault(void* ptr);
void* QDrag___children_atList(void* ptr, int i);
void QDrag___children_setList(void* ptr, void* i);
void* QDrag___children_newList(void* ptr);
void* QDrag___dynamicPropertyNames_atList(void* ptr, int i);
void QDrag___dynamicPropertyNames_setList(void* ptr, void* i);
void* QDrag___dynamicPropertyNames_newList(void* ptr);
void* QDrag___findChildren_atList(void* ptr, int i);
void QDrag___findChildren_setList(void* ptr, void* i);
void* QDrag___findChildren_newList(void* ptr);
void* QDrag___findChildren_atList3(void* ptr, int i);
void QDrag___findChildren_setList3(void* ptr, void* i);
void* QDrag___findChildren_newList3(void* ptr);
void QDrag_ChildEventDefault(void* ptr, void* event);
void QDrag_ConnectNotifyDefault(void* ptr, void* sign);
void QDrag_CustomEventDefault(void* ptr, void* event);
void QDrag_DeleteLaterDefault(void* ptr);
void QDrag_DisconnectNotifyDefault(void* ptr, void* sign);
char QDrag_EventDefault(void* ptr, void* e);
char QDrag_EventFilterDefault(void* ptr, void* watched, void* event);
void* QDrag_MetaObjectDefault(void* ptr);
void QDrag_TimerEventDefault(void* ptr, void* event);
void* QDragEnterEvent_NewQDragEnterEvent(void* point, long long actions, void* data, long long buttons, long long modifiers);
void* QDragLeaveEvent_NewQDragLeaveEvent();
void* QDragMoveEvent_NewQDragMoveEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty);
void QDragMoveEvent_Accept(void* ptr, void* rectangle);
void* QDragMoveEvent_AnswerRect(void* ptr);
void QDragMoveEvent_Ignore(void* ptr, void* rectangle);
void QDragMoveEvent_DestroyQDragMoveEvent(void* ptr);
void QDragMoveEvent_DestroyQDragMoveEventDefault(void* ptr);
void* QDropEvent_NewQDropEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty);
void QDropEvent_AcceptProposedAction(void* ptr);
long long QDropEvent_DropAction(void* ptr);
long long QDropEvent_KeyboardModifiers(void* ptr);
void* QDropEvent_MimeData(void* ptr);
long long QDropEvent_MouseButtons(void* ptr);
void* QDropEvent_Pos(void* ptr);
void* QDropEvent_PosF(void* ptr);
long long QDropEvent_PossibleActions(void* ptr);
long long QDropEvent_ProposedAction(void* ptr);
void QDropEvent_SetDropAction(void* ptr, long long action);
void* QDropEvent_Source(void* ptr);
void* QEnterEvent_NewQEnterEvent(void* localPos, void* windowPos, void* screenPos);
void* QEnterEvent_GlobalPos(void* ptr);
int QEnterEvent_GlobalX(void* ptr);
int QEnterEvent_GlobalY(void* ptr);
void* QEnterEvent_LocalPos(void* ptr);
void* QEnterEvent_Pos(void* ptr);
void* QEnterEvent_ScreenPos(void* ptr);
void* QEnterEvent_WindowPos(void* ptr);
int QEnterEvent_X(void* ptr);
int QEnterEvent_Y(void* ptr);
void* QExposeEvent_NewQExposeEvent(void* exposeRegion);
void* QExposeEvent_Region(void* ptr);
struct QtGui_PackedString QFileOpenEvent_File(void* ptr);
char QFileOpenEvent_OpenFile(void* ptr, void* file, long long flags);
void* QFileOpenEvent_Url(void* ptr);
void* QFocusEvent_NewQFocusEvent(long long ty, long long reason);
char QFocusEvent_GotFocus(void* ptr);
char QFocusEvent_LostFocus(void* ptr);
long long QFocusEvent_Reason(void* ptr);
void* QFont_NewQFont();
void* QFont_NewQFont2(struct QtGui_PackedString family, int pointSize, int weight, char italic);
void* QFont_NewQFont4(void* font, void* pd);
void* QFont_NewQFont5(void* font);
char QFont_Bold(void* ptr);
long long QFont_Capitalization(void* ptr);
struct QtGui_PackedString QFont_DefaultFamily(void* ptr);
char QFont_ExactMatch(void* ptr);
struct QtGui_PackedString QFont_Families(void* ptr);
struct QtGui_PackedString QFont_Family(void* ptr);
char QFont_FixedPitch(void* ptr);
char QFont_FromString(void* ptr, struct QtGui_PackedString descrip);
long long QFont_HintingPreference(void* ptr);
void QFont_QFont_InsertSubstitution(struct QtGui_PackedString familyName, struct QtGui_PackedString substituteName);
void QFont_QFont_InsertSubstitutions(struct QtGui_PackedString familyName, struct QtGui_PackedString substituteNames);
char QFont_IsCopyOf(void* ptr, void* ff);
char QFont_Italic(void* ptr);
char QFont_Kerning(void* ptr);
struct QtGui_PackedString QFont_Key(void* ptr);
double QFont_LetterSpacing(void* ptr);
long long QFont_LetterSpacingType(void* ptr);
char QFont_Overline(void* ptr);
int QFont_PixelSize(void* ptr);
int QFont_PointSize(void* ptr);
double QFont_PointSizeF(void* ptr);
void QFont_QFont_RemoveSubstitutions(struct QtGui_PackedString familyName);
void* QFont_Resolve(void* ptr, void* other);
void QFont_SetBold(void* ptr, char enable);
void QFont_SetCapitalization(void* ptr, long long caps);
void QFont_SetFamilies(void* ptr, struct QtGui_PackedString families);
void QFont_SetFamily(void* ptr, struct QtGui_PackedString family);
void QFont_SetFixedPitch(void* ptr, char enable);
void QFont_SetHintingPreference(void* ptr, long long hintingPreference);
void QFont_SetItalic(void* ptr, char enable);
void QFont_SetKerning(void* ptr, char enable);
void QFont_SetLetterSpacing(void* ptr, long long ty, double spacing);
void QFont_SetOverline(void* ptr, char enable);
void QFont_SetPixelSize(void* ptr, int pixelSize);
void QFont_SetPointSize(void* ptr, int pointSize);
void QFont_SetPointSizeF(void* ptr, double pointSize);
void QFont_SetStretch(void* ptr, int factor);
void QFont_SetStrikeOut(void* ptr, char enable);
void QFont_SetStyle(void* ptr, long long style);
void QFont_SetStyleHint(void* ptr, long long hint, long long strategy);
void QFont_SetStyleName(void* ptr, struct QtGui_PackedString styleName);
void QFont_SetStyleStrategy(void* ptr, long long s);
void QFont_SetUnderline(void* ptr, char enable);
void QFont_SetWeight(void* ptr, int weight);
void QFont_SetWordSpacing(void* ptr, double spacing);
int QFont_Stretch(void* ptr);
char QFont_StrikeOut(void* ptr);
long long QFont_Style(void* ptr);
long long QFont_StyleHint(void* ptr);
struct QtGui_PackedString QFont_StyleName(void* ptr);
long long QFont_StyleStrategy(void* ptr);
struct QtGui_PackedString QFont_QFont_Substitute(struct QtGui_PackedString familyName);
struct QtGui_PackedString QFont_QFont_Substitutes(struct QtGui_PackedString familyName);
struct QtGui_PackedString QFont_QFont_Substitutions();
void QFont_Swap(void* ptr, void* other);
struct QtGui_PackedString QFont_ToString(void* ptr);
char QFont_Underline(void* ptr);
int QFont_Weight(void* ptr);
double QFont_WordSpacing(void* ptr);
void QFont_DestroyQFont(void* ptr);
void* QFont_ToVariant(void* ptr);
void* QFontDatabase_NewQFontDatabase();
int QFontDatabase_QFontDatabase_AddApplicationFont(struct QtGui_PackedString fileName);
int QFontDatabase_QFontDatabase_AddApplicationFontFromData(void* fontData);
struct QtGui_PackedString QFontDatabase_QFontDatabase_ApplicationFontFamilies(int id);
char QFontDatabase_Bold(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
struct QtGui_PackedString QFontDatabase_Families(void* ptr, long long writingSystem);
void* QFontDatabase_Font(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style, int pointSize);
char QFontDatabase_IsBitmapScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
char QFontDatabase_IsFixedPitch(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
char QFontDatabase_IsPrivateFamily(void* ptr, struct QtGui_PackedString family);
char QFontDatabase_IsScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
char QFontDatabase_IsSmoothlyScalable(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
char QFontDatabase_Italic(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
struct QtGui_PackedList QFontDatabase_PointSizes(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString styleName);
char QFontDatabase_QFontDatabase_RemoveAllApplicationFonts();
char QFontDatabase_QFontDatabase_RemoveApplicationFont(int id);
struct QtGui_PackedList QFontDatabase_SmoothSizes(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString styleName);
struct QtGui_PackedList QFontDatabase_QFontDatabase_StandardSizes();
struct QtGui_PackedString QFontDatabase_StyleString(void* ptr, void* font);
struct QtGui_PackedString QFontDatabase_StyleString2(void* ptr, void* fontInfo);
struct QtGui_PackedString QFontDatabase_Styles(void* ptr, struct QtGui_PackedString family);
void* QFontDatabase_QFontDatabase_SystemFont(long long ty);
int QFontDatabase_Weight(void* ptr, struct QtGui_PackedString family, struct QtGui_PackedString style);
int QFontDatabase___pointSizes_atList(void* ptr, int i);
void QFontDatabase___pointSizes_setList(void* ptr, int i);
void* QFontDatabase___pointSizes_newList(void* ptr);
int QFontDatabase___smoothSizes_atList(void* ptr, int i);
void QFontDatabase___smoothSizes_setList(void* ptr, int i);
void* QFontDatabase___smoothSizes_newList(void* ptr);
int QFontDatabase___standardSizes_atList(void* ptr, int i);
void QFontDatabase___standardSizes_setList(void* ptr, int i);
void* QFontDatabase___standardSizes_newList(void* ptr);
void* QFontInfo_NewQFontInfo(void* font);
void* QFontInfo_NewQFontInfo2(void* fi);
char QFontInfo_Bold(void* ptr);
char QFontInfo_ExactMatch(void* ptr);
struct QtGui_PackedString QFontInfo_Family(void* ptr);
char QFontInfo_FixedPitch(void* ptr);
char QFontInfo_Italic(void* ptr);
int QFontInfo_PixelSize(void* ptr);
int QFontInfo_PointSize(void* ptr);
double QFontInfo_PointSizeF(void* ptr);
long long QFontInfo_Style(void* ptr);
long long QFontInfo_StyleHint(void* ptr);
struct QtGui_PackedString QFontInfo_StyleName(void* ptr);
void QFontInfo_Swap(void* ptr, void* other);
int QFontInfo_Weight(void* ptr);
void QFontInfo_DestroyQFontInfo(void* ptr);
void* QFontMetrics_NewQFontMetrics(void* font);
void* QFontMetrics_NewQFontMetrics3(void* font, void* paintdevice);
void* QFontMetrics_NewQFontMetrics4(void* fm);
int QFontMetrics_Ascent(void* ptr);
int QFontMetrics_AverageCharWidth(void* ptr);
void* QFontMetrics_BoundingRect(void* ptr, void* ch);
void* QFontMetrics_BoundingRect2(void* ptr, struct QtGui_PackedString text);
void* QFontMetrics_BoundingRect3(void* ptr, void* rect, int flags, struct QtGui_PackedString text, int tabStops, int tabArray);
void* QFontMetrics_BoundingRect4(void* ptr, int x, int y, int width, int height, int flags, struct QtGui_PackedString text, int tabStops, int tabArray);
int QFontMetrics_CapHeight(void* ptr);
int QFontMetrics_Descent(void* ptr);
struct QtGui_PackedString QFontMetrics_ElidedText(void* ptr, struct QtGui_PackedString text, long long mode, int width, int flags);
double QFontMetrics_FontDpi(void* ptr);
int QFontMetrics_Height(void* ptr);
int QFontMetrics_HorizontalAdvance(void* ptr, struct QtGui_PackedString text, int l);
int QFontMetrics_HorizontalAdvance2(void* ptr, void* ch);
char QFontMetrics_InFont(void* ptr, void* ch);
char QFontMetrics_InFontUcs4(void* ptr, unsigned int ucs4);
int QFontMetrics_Leading(void* ptr);
int QFontMetrics_LeftBearing(void* ptr, void* ch);
int QFontMetrics_LineSpacing(void* ptr);
int QFontMetrics_LineWidth(void* ptr);
int QFontMetrics_MaxWidth(void* ptr);
int QFontMetrics_MinLeftBearing(void* ptr);
int QFontMetrics_MinRightBearing(void* ptr);
int QFontMetrics_OverlinePos(void* ptr);
int QFontMetrics_RightBearing(void* ptr, void* ch);
void* QFontMetrics_Size(void* ptr, int flags, struct QtGui_PackedString text, int tabStops, int tabArray);
int QFontMetrics_StrikeOutPos(void* ptr);
void QFontMetrics_Swap(void* ptr, void* other);
void* QFontMetrics_TightBoundingRect(void* ptr, struct QtGui_PackedString text);
int QFontMetrics_UnderlinePos(void* ptr);
int QFontMetrics_XHeight(void* ptr);
void QFontMetrics_DestroyQFontMetrics(void* ptr);
void* QFontMetricsF_NewQFontMetricsF(void* font);
void* QFontMetricsF_NewQFontMetricsF3(void* font, void* paintdevice);
void* QFontMetricsF_NewQFontMetricsF4(void* fontMetrics);
void* QFontMetricsF_NewQFontMetricsF5(void* fm);
double QFontMetricsF_Ascent(void* ptr);
double QFontMetricsF_AverageCharWidth(void* ptr);
void* QFontMetricsF_BoundingRect(void* ptr, struct QtGui_PackedString text);
void* QFontMetricsF_BoundingRect2(void* ptr, void* ch);
void* QFontMetricsF_BoundingRect3(void* ptr, void* rect, int flags, struct QtGui_PackedString text, int tabStops, int tabArray);
double QFontMetricsF_CapHeight(void* ptr);
double QFontMetricsF_Descent(void* ptr);
struct QtGui_PackedString QFontMetricsF_ElidedText(void* ptr, struct QtGui_PackedString text, long long mode, double width, int flags);
double QFontMetricsF_FontDpi(void* ptr);
double QFontMetricsF_Height(void* ptr);
double QFontMetricsF_HorizontalAdvance(void* ptr, struct QtGui_PackedString text, int length);
double QFontMetricsF_HorizontalAdvance2(void* ptr, void* ch);
char QFontMetricsF_InFont(void* ptr, void* ch);
char QFontMetricsF_InFontUcs4(void* ptr, unsigned int ch);
double QFontMetricsF_Leading(void* ptr);
double QFontMetricsF_LeftBearing(void* ptr, void* ch);
double QFontMetricsF_LineSpacing(void* ptr);
double QFontMetricsF_LineWidth(void* ptr);
double QFontMetricsF_MaxWidth(void* ptr);
double QFontMetricsF_MinLeftBearing(void* ptr);
double QFontMetricsF_MinRightBearing(void* ptr);
double QFontMetricsF_OverlinePos(void* ptr);
double QFontMetricsF_RightBearing(void* ptr, void* ch);
void* QFontMetricsF_Size(void* ptr, int flags, struct QtGui_PackedString text, int tabStops, int tabArray);
double QFontMetricsF_StrikeOutPos(void* ptr);
void QFontMetricsF_Swap(void* ptr, void* other);
void* QFontMetricsF_TightBoundingRect(void* ptr, struct QtGui_PackedString text);
double QFontMetricsF_UnderlinePos(void* ptr);
double QFontMetricsF_XHeight(void* ptr);
void QFontMetricsF_DestroyQFontMetricsF(void* ptr);
void* QGenericPlugin_NewQGenericPlugin(void* parent);
void* QGenericPlugin_Create(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString specification);
void QGenericPlugin_DestroyQGenericPlugin(void* ptr);
void QGenericPlugin_DestroyQGenericPluginDefault(void* ptr);
void* QGenericPlugin___children_atList(void* ptr, int i);
void QGenericPlugin___children_setList(void* ptr, void* i);
void* QGenericPlugin___children_newList(void* ptr);
void* QGenericPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QGenericPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QGenericPlugin___dynamicPropertyNames_newList(void* ptr);
void* QGenericPlugin___findChildren_atList(void* ptr, int i);
void QGenericPlugin___findChildren_setList(void* ptr, void* i);
void* QGenericPlugin___findChildren_newList(void* ptr);
void* QGenericPlugin___findChildren_atList3(void* ptr, int i);
void QGenericPlugin___findChildren_setList3(void* ptr, void* i);
void* QGenericPlugin___findChildren_newList3(void* ptr);
void QGenericPlugin_ChildEventDefault(void* ptr, void* event);
void QGenericPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QGenericPlugin_CustomEventDefault(void* ptr, void* event);
void QGenericPlugin_DeleteLaterDefault(void* ptr);
void QGenericPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QGenericPlugin_EventDefault(void* ptr, void* e);
char QGenericPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGenericPlugin_MetaObjectDefault(void* ptr);
void QGenericPlugin_TimerEventDefault(void* ptr, void* event);
void* QGenericPluginFactory_QGenericPluginFactory_Create(struct QtGui_PackedString key, struct QtGui_PackedString specification);
struct QtGui_PackedString QGenericPluginFactory_QGenericPluginFactory_Keys();
void* QGlyphRun_NewQGlyphRun();
void* QGlyphRun_NewQGlyphRun2(void* other);
void* QGlyphRun_BoundingRect(void* ptr);
void QGlyphRun_Clear(void* ptr);
long long QGlyphRun_Flags(void* ptr);
struct QtGui_PackedList QGlyphRun_GlyphIndexes(void* ptr);
char QGlyphRun_IsEmpty(void* ptr);
char QGlyphRun_IsRightToLeft(void* ptr);
char QGlyphRun_Overline(void* ptr);
struct QtGui_PackedList QGlyphRun_Positions(void* ptr);
void* QGlyphRun_RawFont(void* ptr);
void QGlyphRun_SetBoundingRect(void* ptr, void* boundingRect);
void QGlyphRun_SetFlag(void* ptr, long long flag, char enabled);
void QGlyphRun_SetFlags(void* ptr, long long flags);
void QGlyphRun_SetGlyphIndexes(void* ptr, void* glyphIndexes);
void QGlyphRun_SetOverline(void* ptr, char overline);
void QGlyphRun_SetPositions(void* ptr, void* positions);
void QGlyphRun_SetRawData(void* ptr, unsigned int glyphIndexArray, void* glyphPositionArray, int size);
void QGlyphRun_SetRawFont(void* ptr, void* rawFont);
void QGlyphRun_SetRightToLeft(void* ptr, char rightToLeft);
void QGlyphRun_SetStrikeOut(void* ptr, char strikeOut);
void QGlyphRun_SetUnderline(void* ptr, char underline);
char QGlyphRun_StrikeOut(void* ptr);
void QGlyphRun_Swap(void* ptr, void* other);
char QGlyphRun_Underline(void* ptr);
void QGlyphRun_DestroyQGlyphRun(void* ptr);
unsigned int QGlyphRun___glyphIndexes_atList(void* ptr, int i);
void QGlyphRun___glyphIndexes_setList(void* ptr, unsigned int i);
void* QGlyphRun___glyphIndexes_newList(void* ptr);
void* QGlyphRun___positions_atList(void* ptr, int i);
void QGlyphRun___positions_setList(void* ptr, void* i);
void* QGlyphRun___positions_newList(void* ptr);
unsigned int QGlyphRun___setGlyphIndexes_glyphIndexes_atList(void* ptr, int i);
void QGlyphRun___setGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i);
void* QGlyphRun___setGlyphIndexes_glyphIndexes_newList(void* ptr);
void* QGlyphRun___setPositions_positions_atList(void* ptr, int i);
void QGlyphRun___setPositions_positions_setList(void* ptr, void* i);
void* QGlyphRun___setPositions_positions_newList(void* ptr);
void* QGradient_NewQGradient2(long long preset);
long long QGradient_CoordinateMode(void* ptr);
void QGradient_SetColorAt(void* ptr, double position, void* color);
void QGradient_SetCoordinateMode(void* ptr, long long mode);
void QGradient_SetSpread(void* ptr, long long method);
long long QGradient_Spread(void* ptr);
long long QGradient_Type(void* ptr);
void* QGuiApplication_NewQGuiApplication(int argc, char* argv);
struct QtGui_PackedString QGuiApplication_QGuiApplication_ApplicationDisplayName();
void QGuiApplication_ConnectApplicationDisplayNameChanged(void* ptr, long long t);
void QGuiApplication_DisconnectApplicationDisplayNameChanged(void* ptr);
void QGuiApplication_ApplicationDisplayNameChanged(void* ptr);
long long QGuiApplication_QGuiApplication_ApplicationState();
void QGuiApplication_ConnectApplicationStateChanged(void* ptr, long long t);
void QGuiApplication_DisconnectApplicationStateChanged(void* ptr);
void QGuiApplication_ApplicationStateChanged(void* ptr, long long state);
void QGuiApplication_QGuiApplication_ChangeOverrideCursor(void* cursor);
void* QGuiApplication_QGuiApplication_Clipboard();
void QGuiApplication_ConnectCommitDataRequest(void* ptr, long long t);
void QGuiApplication_DisconnectCommitDataRequest(void* ptr);
void QGuiApplication_CommitDataRequest(void* ptr, void* manager);
struct QtGui_PackedString QGuiApplication_QGuiApplication_DesktopFileName();
char QGuiApplication_QGuiApplication_DesktopSettingsAware();
double QGuiApplication_DevicePixelRatio(void* ptr);
char QGuiApplication_EventDefault(void* ptr, void* e);
int QGuiApplication_QGuiApplication_Exec();
void* QGuiApplication_QGuiApplication_FocusObject();
void QGuiApplication_ConnectFocusObjectChanged(void* ptr, long long t);
void QGuiApplication_DisconnectFocusObjectChanged(void* ptr);
void QGuiApplication_FocusObjectChanged(void* ptr, void* focusObject);
void* QGuiApplication_QGuiApplication_FocusWindow();
void QGuiApplication_ConnectFocusWindowChanged(void* ptr, long long t);
void QGuiApplication_DisconnectFocusWindowChanged(void* ptr);
void QGuiApplication_FocusWindowChanged(void* ptr, void* focusWindow);
void* QGuiApplication_QGuiApplication_Font();
void QGuiApplication_ConnectFontChanged(void* ptr, long long t);
void QGuiApplication_DisconnectFontChanged(void* ptr);
void QGuiApplication_FontChanged(void* ptr, void* font);
void QGuiApplication_ConnectFontDatabaseChanged(void* ptr, long long t);
void QGuiApplication_DisconnectFontDatabaseChanged(void* ptr);
void QGuiApplication_FontDatabaseChanged(void* ptr);
long long QGuiApplication_QGuiApplication_HighDpiScaleFactorRoundingPolicy();
void* QGuiApplication_QGuiApplication_InputMethod();
char QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled();
char QGuiApplication_QGuiApplication_IsLeftToRight();
char QGuiApplication_QGuiApplication_IsRightToLeft();
char QGuiApplication_IsSavingSession(void* ptr);
char QGuiApplication_IsSessionRestored(void* ptr);
long long QGuiApplication_QGuiApplication_KeyboardModifiers();
void QGuiApplication_ConnectLastWindowClosed(void* ptr, long long t);
void QGuiApplication_DisconnectLastWindowClosed(void* ptr);
void QGuiApplication_LastWindowClosed(void* ptr);
long long QGuiApplication_QGuiApplication_LayoutDirection();
void QGuiApplication_ConnectLayoutDirectionChanged(void* ptr, long long t);
void QGuiApplication_DisconnectLayoutDirectionChanged(void* ptr);
void QGuiApplication_LayoutDirectionChanged(void* ptr, long long direction);
void* QGuiApplication_QGuiApplication_ModalWindow();
long long QGuiApplication_QGuiApplication_MouseButtons();
void* QGuiApplication_QGuiApplication_OverrideCursor();
void* QGuiApplication_QGuiApplication_Palette();
void QGuiApplication_ConnectPaletteChanged(void* ptr, long long t);
void QGuiApplication_DisconnectPaletteChanged(void* ptr);
void QGuiApplication_PaletteChanged(void* ptr, void* palette);
void* QGuiApplication_QGuiApplication_PlatformFunction(void* function);
struct QtGui_PackedString QGuiApplication_QGuiApplication_PlatformName();
void* QGuiApplication_QGuiApplication_PrimaryScreen();
void QGuiApplication_ConnectPrimaryScreenChanged(void* ptr, long long t);
void QGuiApplication_DisconnectPrimaryScreenChanged(void* ptr);
void QGuiApplication_PrimaryScreenChanged(void* ptr, void* screen);
long long QGuiApplication_QGuiApplication_QueryKeyboardModifiers();
char QGuiApplication_QGuiApplication_QuitOnLastWindowClosed();
void QGuiApplication_QGuiApplication_RestoreOverrideCursor();
void QGuiApplication_ConnectSaveStateRequest(void* ptr, long long t);
void QGuiApplication_DisconnectSaveStateRequest(void* ptr);
void QGuiApplication_SaveStateRequest(void* ptr, void* manager);
void QGuiApplication_ConnectScreenAdded(void* ptr, long long t);
void QGuiApplication_DisconnectScreenAdded(void* ptr);
void QGuiApplication_ScreenAdded(void* ptr, void* screen);
void* QGuiApplication_QGuiApplication_ScreenAt(void* point);
void QGuiApplication_ConnectScreenRemoved(void* ptr, long long t);
void QGuiApplication_DisconnectScreenRemoved(void* ptr);
void QGuiApplication_ScreenRemoved(void* ptr, void* screen);
struct QtGui_PackedList QGuiApplication_QGuiApplication_Screens();
struct QtGui_PackedString QGuiApplication_SessionId(void* ptr);
struct QtGui_PackedString QGuiApplication_SessionKey(void* ptr);
void QGuiApplication_QGuiApplication_SetApplicationDisplayName(struct QtGui_PackedString name);
void QGuiApplication_QGuiApplication_SetDesktopFileName(struct QtGui_PackedString name);
void QGuiApplication_QGuiApplication_SetDesktopSettingsAware(char on);
void QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(char enabled);
void QGuiApplication_QGuiApplication_SetFont(void* font);
void QGuiApplication_QGuiApplication_SetHighDpiScaleFactorRoundingPolicy(long long policy);
void QGuiApplication_QGuiApplication_SetLayoutDirection(long long direction);
void QGuiApplication_QGuiApplication_SetOverrideCursor(void* cursor);
void QGuiApplication_QGuiApplication_SetPalette(void* pal);
void QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(char quit);
void QGuiApplication_QGuiApplication_SetWindowIcon(void* icon);
void* QGuiApplication_QGuiApplication_StyleHints();
void QGuiApplication_QGuiApplication_Sync();
void* QGuiApplication_QGuiApplication_TopLevelAt(void* pos);
void* QGuiApplication_QGuiApplication_WindowIcon();
void QGuiApplication_DestroyQGuiApplication(void* ptr);
void QGuiApplication_DestroyQGuiApplicationDefault(void* ptr);
void* QGuiApplication___screens_atList(void* ptr, int i);
void QGuiApplication___screens_setList(void* ptr, void* i);
void* QGuiApplication___screens_newList(void* ptr);
void* QGuiApplication___children_atList(void* ptr, int i);
void QGuiApplication___children_setList(void* ptr, void* i);
void* QGuiApplication___children_newList(void* ptr);
void* QGuiApplication___dynamicPropertyNames_atList(void* ptr, int i);
void QGuiApplication___dynamicPropertyNames_setList(void* ptr, void* i);
void* QGuiApplication___dynamicPropertyNames_newList(void* ptr);
void* QGuiApplication___findChildren_atList(void* ptr, int i);
void QGuiApplication___findChildren_setList(void* ptr, void* i);
void* QGuiApplication___findChildren_newList(void* ptr);
void* QGuiApplication___findChildren_atList3(void* ptr, int i);
void QGuiApplication___findChildren_setList3(void* ptr, void* i);
void* QGuiApplication___findChildren_newList3(void* ptr);
void QGuiApplication_QuitDefault(void* ptr);
void QGuiApplication_ChildEventDefault(void* ptr, void* event);
void QGuiApplication_ConnectNotifyDefault(void* ptr, void* sign);
void QGuiApplication_CustomEventDefault(void* ptr, void* event);
void QGuiApplication_DeleteLaterDefault(void* ptr);
void QGuiApplication_DisconnectNotifyDefault(void* ptr, void* sign);
char QGuiApplication_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGuiApplication_MetaObjectDefault(void* ptr);
void QGuiApplication_TimerEventDefault(void* ptr, void* event);
void* QHelpEvent_NewQHelpEvent(long long ty, void* pos, void* globalPos);
void* QHelpEvent_GlobalPos(void* ptr);
int QHelpEvent_GlobalX(void* ptr);
int QHelpEvent_GlobalY(void* ptr);
void* QHelpEvent_Pos(void* ptr);
int QHelpEvent_X(void* ptr);
int QHelpEvent_Y(void* ptr);
void* QHideEvent_NewQHideEvent();
void* QHoverEvent_NewQHoverEvent(long long ty, void* pos, void* oldPos, long long modifiers);
void* QHoverEvent_OldPos(void* ptr);
void* QHoverEvent_OldPosF(void* ptr);
void* QHoverEvent_Pos(void* ptr);
void* QHoverEvent_PosF(void* ptr);
void* QIcon_NewQIcon();
void* QIcon_NewQIcon2(void* pixmap);
void* QIcon_NewQIcon3(void* other);
void* QIcon_NewQIcon4(void* other);
void* QIcon_NewQIcon5(struct QtGui_PackedString fileName);
void* QIcon_NewQIcon6(void* engine);
void* QIcon_ActualSize(void* ptr, void* size, long long mode, long long state);
void* QIcon_ActualSize2(void* ptr, void* window, void* size, long long mode, long long state);
void QIcon_AddFile(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state);
void QIcon_AddPixmap(void* ptr, void* pixmap, long long mode, long long state);
struct QtGui_PackedList QIcon_AvailableSizes(void* ptr, long long mode, long long state);
long long QIcon_CacheKey(void* ptr);
struct QtGui_PackedString QIcon_QIcon_FallbackSearchPaths();
struct QtGui_PackedString QIcon_QIcon_FallbackThemeName();
void* QIcon_QIcon_FromTheme(struct QtGui_PackedString name);
void* QIcon_QIcon_FromTheme2(struct QtGui_PackedString name, void* fallback);
char QIcon_QIcon_HasThemeIcon(struct QtGui_PackedString name);
char QIcon_IsMask(void* ptr);
char QIcon_IsNull(void* ptr);
struct QtGui_PackedString QIcon_Name(void* ptr);
void QIcon_Paint(void* ptr, void* painter, void* rect, long long alignment, long long mode, long long state);
void QIcon_Paint2(void* ptr, void* painter, int x, int y, int w, int h, long long alignment, long long mode, long long state);
void* QIcon_Pixmap(void* ptr, void* size, long long mode, long long state);
void* QIcon_Pixmap2(void* ptr, int w, int h, long long mode, long long state);
void* QIcon_Pixmap3(void* ptr, int extent, long long mode, long long state);
void* QIcon_Pixmap4(void* ptr, void* window, void* size, long long mode, long long state);
void QIcon_QIcon_SetFallbackSearchPaths(struct QtGui_PackedString paths);
void QIcon_QIcon_SetFallbackThemeName(struct QtGui_PackedString name);
void QIcon_SetIsMask(void* ptr, char isMask);
void QIcon_QIcon_SetThemeName(struct QtGui_PackedString name);
void QIcon_QIcon_SetThemeSearchPaths(struct QtGui_PackedString paths);
void QIcon_Swap(void* ptr, void* other);
struct QtGui_PackedString QIcon_QIcon_ThemeName();
struct QtGui_PackedString QIcon_QIcon_ThemeSearchPaths();
void QIcon_DestroyQIcon(void* ptr);
void* QIcon_ToVariant(void* ptr);
void* QIcon___availableSizes_atList(void* ptr, int i);
void QIcon___availableSizes_setList(void* ptr, void* i);
void* QIcon___availableSizes_newList(void* ptr);
void* QIconDragEvent_NewQIconDragEvent();
void* QIconEngine_NewQIconEngine();
void* QIconEngine_ActualSize(void* ptr, void* size, long long mode, long long state);
void* QIconEngine_ActualSizeDefault(void* ptr, void* size, long long mode, long long state);
void QIconEngine_AddFile(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state);
void QIconEngine_AddFileDefault(void* ptr, struct QtGui_PackedString fileName, void* size, long long mode, long long state);
void QIconEngine_AddPixmap(void* ptr, void* pixmap, long long mode, long long state);
void QIconEngine_AddPixmapDefault(void* ptr, void* pixmap, long long mode, long long state);
struct QtGui_PackedList QIconEngine_AvailableSizes(void* ptr, long long mode, long long state);
struct QtGui_PackedList QIconEngine_AvailableSizesDefault(void* ptr, long long mode, long long state);
void* QIconEngine_Clone(void* ptr);
struct QtGui_PackedString QIconEngine_IconName(void* ptr);
struct QtGui_PackedString QIconEngine_IconNameDefault(void* ptr);
char QIconEngine_IsNull(void* ptr);
struct QtGui_PackedString QIconEngine_Key(void* ptr);
struct QtGui_PackedString QIconEngine_KeyDefault(void* ptr);
void QIconEngine_Paint(void* ptr, void* painter, void* rect, long long mode, long long state);
void* QIconEngine_Pixmap(void* ptr, void* size, long long mode, long long state);
void* QIconEngine_PixmapDefault(void* ptr, void* size, long long mode, long long state);
char QIconEngine_Read(void* ptr, void* in);
char QIconEngine_ReadDefault(void* ptr, void* in);
void* QIconEngine_ScaledPixmap(void* ptr, void* size, long long mode, long long state, double scale);
void QIconEngine_Virtual_hook(void* ptr, int id, void* data);
void QIconEngine_Virtual_hookDefault(void* ptr, int id, void* data);
char QIconEngine_Write(void* ptr, void* out);
char QIconEngine_WriteDefault(void* ptr, void* out);
void QIconEngine_DestroyQIconEngine(void* ptr);
void QIconEngine_DestroyQIconEngineDefault(void* ptr);
void* QIconEngine___availableSizes_atList(void* ptr, int i);
void QIconEngine___availableSizes_setList(void* ptr, void* i);
void* QIconEngine___availableSizes_newList(void* ptr);
void* QIconEnginePlugin_NewQIconEnginePlugin(void* parent);
void* QIconEnginePlugin_Create(void* ptr, struct QtGui_PackedString filename);
void QIconEnginePlugin_DestroyQIconEnginePlugin(void* ptr);
void QIconEnginePlugin_DestroyQIconEnginePluginDefault(void* ptr);
void* QIconEnginePlugin___children_atList(void* ptr, int i);
void QIconEnginePlugin___children_setList(void* ptr, void* i);
void* QIconEnginePlugin___children_newList(void* ptr);
void* QIconEnginePlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QIconEnginePlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QIconEnginePlugin___dynamicPropertyNames_newList(void* ptr);
void* QIconEnginePlugin___findChildren_atList(void* ptr, int i);
void QIconEnginePlugin___findChildren_setList(void* ptr, void* i);
void* QIconEnginePlugin___findChildren_newList(void* ptr);
void* QIconEnginePlugin___findChildren_atList3(void* ptr, int i);
void QIconEnginePlugin___findChildren_setList3(void* ptr, void* i);
void* QIconEnginePlugin___findChildren_newList3(void* ptr);
void QIconEnginePlugin_ChildEventDefault(void* ptr, void* event);
void QIconEnginePlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QIconEnginePlugin_CustomEventDefault(void* ptr, void* event);
void QIconEnginePlugin_DeleteLaterDefault(void* ptr);
void QIconEnginePlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QIconEnginePlugin_EventDefault(void* ptr, void* e);
char QIconEnginePlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QIconEnginePlugin_MetaObjectDefault(void* ptr);
void QIconEnginePlugin_TimerEventDefault(void* ptr, void* event);
void* QImage_NewQImage();
void* QImage_NewQImage2(void* size, long long format);
void* QImage_NewQImage3(int width, int height, long long format);
void* QImage_NewQImage4(char* data, int width, int height, long long format);
void* QImage_NewQImage5(char* data, int width, int height, long long format);
void* QImage_NewQImage6(char* data, int width, int height, int bytesPerLine, long long format);
void* QImage_NewQImage7(char* data, int width, int height, int bytesPerLine, long long format);
void* QImage_NewQImage9(struct QtGui_PackedString fileName, char* format);
void* QImage_NewQImage10(void* image);
void* QImage_NewQImage11(void* other);
char QImage_AllGray(void* ptr);
void QImage_ApplyColorTransform(void* ptr, void* transform);
int QImage_BitPlaneCount(void* ptr);
struct QtGui_PackedString QImage_Bits(void* ptr);
struct QtGui_PackedString QImage_Bits2(void* ptr);
int QImage_BytesPerLine(void* ptr);
long long QImage_CacheKey(void* ptr);
unsigned int QImage_Color(void* ptr, int i);
void* QImage_ColorSpace(void* ptr);
struct QtGui_PackedList QImage_ColorTable(void* ptr);
struct QtGui_PackedString QImage_ConstBits(void* ptr);
struct QtGui_PackedString QImage_ConstScanLine(void* ptr, int i);
void QImage_ConvertTo(void* ptr, long long format, long long flags);
void QImage_ConvertToColorSpace(void* ptr, void* colorSpace);
void* QImage_ConvertToFormat(void* ptr, long long format, long long flags);
void* QImage_ConvertToFormat2(void* ptr, long long format, long long flags);
void* QImage_ConvertToFormat3(void* ptr, long long format, void* colorTable, long long flags);
void* QImage_ConvertedToColorSpace(void* ptr, void* colorSpace);
void* QImage_Copy(void* ptr, void* rectangle);
void* QImage_Copy2(void* ptr, int x, int y, int width, int height);
void* QImage_CreateAlphaMask(void* ptr, long long flags);
void* QImage_CreateHeuristicMask(void* ptr, char clipTight);
void* QImage_CreateMaskFromColor(void* ptr, unsigned int color, long long mode);
double QImage_DevicePixelRatio(void* ptr);
int QImage_DotsPerMeterX(void* ptr);
int QImage_DotsPerMeterY(void* ptr);
void QImage_Fill(void* ptr, unsigned int pixelValue);
void QImage_Fill2(void* ptr, void* color);
void QImage_Fill3(void* ptr, long long color);
long long QImage_Format(void* ptr);
void* QImage_QImage_FromData(char* data, int size, char* format);
void* QImage_QImage_FromData2(void* data, char* format);
char QImage_HasAlphaChannel(void* ptr);
void QImage_InvertPixels(void* ptr, long long mode);
char QImage_IsGrayscale(void* ptr);
char QImage_IsNull(void* ptr);
char QImage_Load(void* ptr, struct QtGui_PackedString fileName, char* format);
char QImage_Load2(void* ptr, void* device, char* format);
char QImage_LoadFromData(void* ptr, char* data, int l, char* format);
char QImage_LoadFromData2(void* ptr, void* data, char* format);
void* QImage_Mirrored(void* ptr, char horizontal, char vertical);
void* QImage_Mirrored2(void* ptr, char horizontal, char vertical);
void* QImage_Offset(void* ptr);
unsigned int QImage_Pixel(void* ptr, void* position);
unsigned int QImage_Pixel2(void* ptr, int x, int y);
void* QImage_PixelColor(void* ptr, void* position);
void* QImage_PixelColor2(void* ptr, int x, int y);
void* QImage_PixelFormat(void* ptr);
int QImage_PixelIndex(void* ptr, void* position);
int QImage_PixelIndex2(void* ptr, int x, int y);
void* QImage_Rect(void* ptr);
char QImage_ReinterpretAsFormat(void* ptr, long long format);
void* QImage_RgbSwapped(void* ptr);
void* QImage_RgbSwapped2(void* ptr);
char QImage_Save(void* ptr, struct QtGui_PackedString fileName, char* format, int quality);
char QImage_Save2(void* ptr, void* device, char* format, int quality);
void* QImage_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode);
void* QImage_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode);
void* QImage_ScaledToHeight(void* ptr, int height, long long mode);
void* QImage_ScaledToWidth(void* ptr, int width, long long mode);
struct QtGui_PackedString QImage_ScanLine(void* ptr, int i);
struct QtGui_PackedString QImage_ScanLine2(void* ptr, int i);
void QImage_SetAlphaChannel(void* ptr, void* alphaChannel);
void QImage_SetColor(void* ptr, int index, unsigned int colorValue);
void QImage_SetColorCount(void* ptr, int colorCount);
void QImage_SetColorSpace(void* ptr, void* colorSpace);
void QImage_SetColorTable(void* ptr, void* colors);
void QImage_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QImage_SetDotsPerMeterX(void* ptr, int x);
void QImage_SetDotsPerMeterY(void* ptr, int y);
void QImage_SetOffset(void* ptr, void* offset);
void QImage_SetPixel(void* ptr, void* position, unsigned int index_or_rgb);
void QImage_SetPixel2(void* ptr, int x, int y, unsigned int index_or_rgb);
void QImage_SetPixelColor(void* ptr, void* position, void* color);
void QImage_SetPixelColor2(void* ptr, int x, int y, void* color);
void QImage_SetText(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString text);
void* QImage_Size(void* ptr);
void* QImage_SmoothScaled(void* ptr, int w, int h);
void QImage_Swap(void* ptr, void* other);
struct QtGui_PackedString QImage_Text(void* ptr, struct QtGui_PackedString key);
struct QtGui_PackedString QImage_TextKeys(void* ptr);
long long QImage_QImage_ToImageFormat(void* format);
void* QImage_QImage_ToPixelFormat(long long format);
void* QImage_Transformed2(void* ptr, void* matrix, long long mode);
void* QImage_QImage_TrueMatrix2(void* matrix, int width, int height);
char QImage_Valid(void* ptr, void* pos);
char QImage_Valid2(void* ptr, int x, int y);
void QImage_DestroyQImage(void* ptr);
void QImage_DestroyQImageDefault(void* ptr);
void* QImage_ToVariant(void* ptr);
unsigned int QImage___colorTable_atList(void* ptr, int i);
void QImage___colorTable_setList(void* ptr, unsigned int i);
void* QImage___colorTable_newList(void* ptr);
unsigned int QImage___convertToFormat_colorTable_atList3(void* ptr, int i);
void QImage___convertToFormat_colorTable_setList3(void* ptr, unsigned int i);
void* QImage___convertToFormat_colorTable_newList3(void* ptr);
unsigned int QImage___setColorTable_colors_atList(void* ptr, int i);
void QImage___setColorTable_colors_setList(void* ptr, unsigned int i);
void* QImage___setColorTable_colors_newList(void* ptr);
void* QImage_PaintEngine(void* ptr);
void* QImage_PaintEngineDefault(void* ptr);
void* QImageIOHandler_NewQImageIOHandler();
char QImageIOHandler_CanRead(void* ptr);
int QImageIOHandler_CurrentImageNumber(void* ptr);
int QImageIOHandler_CurrentImageNumberDefault(void* ptr);
void* QImageIOHandler_CurrentImageRect(void* ptr);
void* QImageIOHandler_CurrentImageRectDefault(void* ptr);
void* QImageIOHandler_Device(void* ptr);
void* QImageIOHandler_Format(void* ptr);
int QImageIOHandler_ImageCount(void* ptr);
int QImageIOHandler_ImageCountDefault(void* ptr);
char QImageIOHandler_JumpToImage(void* ptr, int imageNumber);
char QImageIOHandler_JumpToImageDefault(void* ptr, int imageNumber);
char QImageIOHandler_JumpToNextImage(void* ptr);
char QImageIOHandler_JumpToNextImageDefault(void* ptr);
int QImageIOHandler_LoopCount(void* ptr);
int QImageIOHandler_LoopCountDefault(void* ptr);
int QImageIOHandler_NextImageDelay(void* ptr);
int QImageIOHandler_NextImageDelayDefault(void* ptr);
void* QImageIOHandler_Option(void* ptr, long long option);
void* QImageIOHandler_OptionDefault(void* ptr, long long option);
char QImageIOHandler_Read(void* ptr, void* image);
void QImageIOHandler_SetDevice(void* ptr, void* device);
void QImageIOHandler_SetFormat(void* ptr, void* format);
void QImageIOHandler_SetFormat2(void* ptr, void* format);
void QImageIOHandler_SetOption(void* ptr, long long option, void* value);
void QImageIOHandler_SetOptionDefault(void* ptr, long long option, void* value);
char QImageIOHandler_SupportsOption(void* ptr, long long option);
char QImageIOHandler_SupportsOptionDefault(void* ptr, long long option);
char QImageIOHandler_Write(void* ptr, void* image);
char QImageIOHandler_WriteDefault(void* ptr, void* image);
void QImageIOHandler_DestroyQImageIOHandler(void* ptr);
void QImageIOHandler_DestroyQImageIOHandlerDefault(void* ptr);
void* QImageIOPlugin_NewQImageIOPlugin(void* parent);
long long QImageIOPlugin_Capabilities(void* ptr, void* device, void* format);
void* QImageIOPlugin_Create(void* ptr, void* device, void* format);
void QImageIOPlugin_DestroyQImageIOPlugin(void* ptr);
void QImageIOPlugin_DestroyQImageIOPluginDefault(void* ptr);
void* QImageIOPlugin___children_atList(void* ptr, int i);
void QImageIOPlugin___children_setList(void* ptr, void* i);
void* QImageIOPlugin___children_newList(void* ptr);
void* QImageIOPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QImageIOPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QImageIOPlugin___dynamicPropertyNames_newList(void* ptr);
void* QImageIOPlugin___findChildren_atList(void* ptr, int i);
void QImageIOPlugin___findChildren_setList(void* ptr, void* i);
void* QImageIOPlugin___findChildren_newList(void* ptr);
void* QImageIOPlugin___findChildren_atList3(void* ptr, int i);
void QImageIOPlugin___findChildren_setList3(void* ptr, void* i);
void* QImageIOPlugin___findChildren_newList3(void* ptr);
void QImageIOPlugin_ChildEventDefault(void* ptr, void* event);
void QImageIOPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QImageIOPlugin_CustomEventDefault(void* ptr, void* event);
void QImageIOPlugin_DeleteLaterDefault(void* ptr);
void QImageIOPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QImageIOPlugin_EventDefault(void* ptr, void* e);
char QImageIOPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QImageIOPlugin_MetaObjectDefault(void* ptr);
void QImageIOPlugin_TimerEventDefault(void* ptr, void* event);
void* QImageReader_NewQImageReader();
void* QImageReader_NewQImageReader2(void* device, void* format);
void* QImageReader_NewQImageReader3(struct QtGui_PackedString fileName, void* format);
char QImageReader_AutoDetectImageFormat(void* ptr);
char QImageReader_AutoTransform(void* ptr);
void* QImageReader_BackgroundColor(void* ptr);
char QImageReader_CanRead(void* ptr);
void* QImageReader_ClipRect(void* ptr);
int QImageReader_CurrentImageNumber(void* ptr);
void* QImageReader_CurrentImageRect(void* ptr);
char QImageReader_DecideFormatFromContent(void* ptr);
void* QImageReader_Device(void* ptr);
long long QImageReader_Error(void* ptr);
struct QtGui_PackedString QImageReader_ErrorString(void* ptr);
struct QtGui_PackedString QImageReader_FileName(void* ptr);
void* QImageReader_Format(void* ptr);
int QImageReader_ImageCount(void* ptr);
long long QImageReader_ImageFormat(void* ptr);
void* QImageReader_QImageReader_ImageFormat2(struct QtGui_PackedString fileName);
void* QImageReader_QImageReader_ImageFormat3(void* device);
struct QtGui_PackedList QImageReader_QImageReader_ImageFormatsForMimeType(void* mimeType);
char QImageReader_JumpToImage(void* ptr, int imageNumber);
char QImageReader_JumpToNextImage(void* ptr);
int QImageReader_LoopCount(void* ptr);
int QImageReader_NextImageDelay(void* ptr);
int QImageReader_Quality(void* ptr);
void* QImageReader_Read(void* ptr);
char QImageReader_Read2(void* ptr, void* image);
void* QImageReader_ScaledClipRect(void* ptr);
void* QImageReader_ScaledSize(void* ptr);
void QImageReader_SetAutoDetectImageFormat(void* ptr, char enabled);
void QImageReader_SetAutoTransform(void* ptr, char enabled);
void QImageReader_SetBackgroundColor(void* ptr, void* color);
void QImageReader_SetClipRect(void* ptr, void* rect);
void QImageReader_SetDecideFormatFromContent(void* ptr, char ignored);
void QImageReader_SetDevice(void* ptr, void* device);
void QImageReader_SetFileName(void* ptr, struct QtGui_PackedString fileName);
void QImageReader_SetFormat(void* ptr, void* format);
void QImageReader_SetQuality(void* ptr, int quality);
void QImageReader_SetScaledClipRect(void* ptr, void* rect);
void QImageReader_SetScaledSize(void* ptr, void* size);
void* QImageReader_Size(void* ptr);
void* QImageReader_SubType(void* ptr);
struct QtGui_PackedList QImageReader_QImageReader_SupportedImageFormats();
struct QtGui_PackedList QImageReader_QImageReader_SupportedMimeTypes();
struct QtGui_PackedList QImageReader_SupportedSubTypes(void* ptr);
char QImageReader_SupportsAnimation(void* ptr);
char QImageReader_SupportsOption(void* ptr, long long option);
struct QtGui_PackedString QImageReader_Text(void* ptr, struct QtGui_PackedString key);
struct QtGui_PackedString QImageReader_TextKeys(void* ptr);
long long QImageReader_Transformation(void* ptr);
void QImageReader_DestroyQImageReader(void* ptr);
void* QImageReader___imageFormatsForMimeType_atList(void* ptr, int i);
void QImageReader___imageFormatsForMimeType_setList(void* ptr, void* i);
void* QImageReader___imageFormatsForMimeType_newList(void* ptr);
void* QImageReader___supportedImageFormats_atList(void* ptr, int i);
void QImageReader___supportedImageFormats_setList(void* ptr, void* i);
void* QImageReader___supportedImageFormats_newList(void* ptr);
void* QImageReader___supportedMimeTypes_atList(void* ptr, int i);
void QImageReader___supportedMimeTypes_setList(void* ptr, void* i);
void* QImageReader___supportedMimeTypes_newList(void* ptr);
void* QImageReader___supportedSubTypes_atList(void* ptr, int i);
void QImageReader___supportedSubTypes_setList(void* ptr, void* i);
void* QImageReader___supportedSubTypes_newList(void* ptr);
void* QImageWriter_NewQImageWriter();
void* QImageWriter_NewQImageWriter2(void* device, void* format);
void* QImageWriter_NewQImageWriter3(struct QtGui_PackedString fileName, void* format);
char QImageWriter_CanWrite(void* ptr);
int QImageWriter_Compression(void* ptr);
void* QImageWriter_Device(void* ptr);
long long QImageWriter_Error(void* ptr);
struct QtGui_PackedString QImageWriter_ErrorString(void* ptr);
struct QtGui_PackedString QImageWriter_FileName(void* ptr);
void* QImageWriter_Format(void* ptr);
struct QtGui_PackedList QImageWriter_QImageWriter_ImageFormatsForMimeType(void* mimeType);
char QImageWriter_OptimizedWrite(void* ptr);
char QImageWriter_ProgressiveScanWrite(void* ptr);
int QImageWriter_Quality(void* ptr);
void QImageWriter_SetCompression(void* ptr, int compression);
void QImageWriter_SetDevice(void* ptr, void* device);
void QImageWriter_SetFileName(void* ptr, struct QtGui_PackedString fileName);
void QImageWriter_SetFormat(void* ptr, void* format);
void QImageWriter_SetOptimizedWrite(void* ptr, char optimize);
void QImageWriter_SetProgressiveScanWrite(void* ptr, char progressive);
void QImageWriter_SetQuality(void* ptr, int quality);
void QImageWriter_SetSubType(void* ptr, void* ty);
void QImageWriter_SetText(void* ptr, struct QtGui_PackedString key, struct QtGui_PackedString text);
void QImageWriter_SetTransformation(void* ptr, long long transform);
void* QImageWriter_SubType(void* ptr);
struct QtGui_PackedList QImageWriter_QImageWriter_SupportedImageFormats();
struct QtGui_PackedList QImageWriter_QImageWriter_SupportedMimeTypes();
struct QtGui_PackedList QImageWriter_SupportedSubTypes(void* ptr);
char QImageWriter_SupportsOption(void* ptr, long long option);
long long QImageWriter_Transformation(void* ptr);
char QImageWriter_Write(void* ptr, void* image);
void QImageWriter_DestroyQImageWriter(void* ptr);
void* QImageWriter___imageFormatsForMimeType_atList(void* ptr, int i);
void QImageWriter___imageFormatsForMimeType_setList(void* ptr, void* i);
void* QImageWriter___imageFormatsForMimeType_newList(void* ptr);
void* QImageWriter___supportedImageFormats_atList(void* ptr, int i);
void QImageWriter___supportedImageFormats_setList(void* ptr, void* i);
void* QImageWriter___supportedImageFormats_newList(void* ptr);
void* QImageWriter___supportedMimeTypes_atList(void* ptr, int i);
void QImageWriter___supportedMimeTypes_setList(void* ptr, void* i);
void* QImageWriter___supportedMimeTypes_newList(void* ptr);
void* QImageWriter___supportedSubTypes_atList(void* ptr, int i);
void QImageWriter___supportedSubTypes_setList(void* ptr, void* i);
void* QImageWriter___supportedSubTypes_newList(void* ptr);
long long QInputEvent_Modifiers(void* ptr);
unsigned long QInputEvent_Timestamp(void* ptr);
void* QInputMethod_AnchorRectangle(void* ptr);
void QInputMethod_ConnectAnchorRectangleChanged(void* ptr, long long t);
void QInputMethod_DisconnectAnchorRectangleChanged(void* ptr);
void QInputMethod_AnchorRectangleChanged(void* ptr);
void QInputMethod_ConnectAnimatingChanged(void* ptr, long long t);
void QInputMethod_DisconnectAnimatingChanged(void* ptr);
void QInputMethod_AnimatingChanged(void* ptr);
void QInputMethod_Commit(void* ptr);
void QInputMethod_CommitDefault(void* ptr);
void* QInputMethod_CursorRectangle(void* ptr);
void QInputMethod_ConnectCursorRectangleChanged(void* ptr, long long t);
void QInputMethod_DisconnectCursorRectangleChanged(void* ptr);
void QInputMethod_CursorRectangleChanged(void* ptr);
void QInputMethod_Hide(void* ptr);
void QInputMethod_HideDefault(void* ptr);
long long QInputMethod_InputDirection(void* ptr);
void QInputMethod_ConnectInputDirectionChanged(void* ptr, long long t);
void QInputMethod_DisconnectInputDirectionChanged(void* ptr);
void QInputMethod_InputDirectionChanged(void* ptr, long long newDirection);
void* QInputMethod_InputItemClipRectangle(void* ptr);
void QInputMethod_ConnectInputItemClipRectangleChanged(void* ptr, long long t);
void QInputMethod_DisconnectInputItemClipRectangleChanged(void* ptr);
void QInputMethod_InputItemClipRectangleChanged(void* ptr);
void* QInputMethod_InputItemRectangle(void* ptr);
void* QInputMethod_InputItemTransform(void* ptr);
void QInputMethod_InvokeAction(void* ptr, long long a, int cursorPosition);
void QInputMethod_InvokeActionDefault(void* ptr, long long a, int cursorPosition);
char QInputMethod_IsAnimating(void* ptr);
char QInputMethod_IsVisible(void* ptr);
void* QInputMethod_KeyboardRectangle(void* ptr);
void QInputMethod_ConnectKeyboardRectangleChanged(void* ptr, long long t);
void QInputMethod_DisconnectKeyboardRectangleChanged(void* ptr);
void QInputMethod_KeyboardRectangleChanged(void* ptr);
void* QInputMethod_Locale(void* ptr);
void QInputMethod_ConnectLocaleChanged(void* ptr, long long t);
void QInputMethod_DisconnectLocaleChanged(void* ptr);
void QInputMethod_LocaleChanged(void* ptr);
void* QInputMethod_QInputMethod_QueryFocusObject(long long query, void* argument);
void QInputMethod_Reset(void* ptr);
void QInputMethod_ResetDefault(void* ptr);
void QInputMethod_SetInputItemRectangle(void* ptr, void* rect);
void QInputMethod_SetInputItemTransform(void* ptr, void* transform);
void QInputMethod_SetVisible(void* ptr, char visible);
void QInputMethod_Show(void* ptr);
void QInputMethod_ShowDefault(void* ptr);
void QInputMethod_Update(void* ptr, long long queries);
void QInputMethod_UpdateDefault(void* ptr, long long queries);
void QInputMethod_ConnectVisibleChanged(void* ptr, long long t);
void QInputMethod_DisconnectVisibleChanged(void* ptr);
void QInputMethod_VisibleChanged(void* ptr);
void* QInputMethod___children_atList(void* ptr, int i);
void QInputMethod___children_setList(void* ptr, void* i);
void* QInputMethod___children_newList(void* ptr);
void* QInputMethod___dynamicPropertyNames_atList(void* ptr, int i);
void QInputMethod___dynamicPropertyNames_setList(void* ptr, void* i);
void* QInputMethod___dynamicPropertyNames_newList(void* ptr);
void* QInputMethod___findChildren_atList(void* ptr, int i);
void QInputMethod___findChildren_setList(void* ptr, void* i);
void* QInputMethod___findChildren_newList(void* ptr);
void* QInputMethod___findChildren_atList3(void* ptr, int i);
void QInputMethod___findChildren_setList3(void* ptr, void* i);
void* QInputMethod___findChildren_newList3(void* ptr);
void QInputMethod_ChildEventDefault(void* ptr, void* event);
void QInputMethod_ConnectNotifyDefault(void* ptr, void* sign);
void QInputMethod_CustomEventDefault(void* ptr, void* event);
void QInputMethod_DeleteLaterDefault(void* ptr);
void QInputMethod_DisconnectNotifyDefault(void* ptr, void* sign);
char QInputMethod_EventDefault(void* ptr, void* e);
char QInputMethod_EventFilterDefault(void* ptr, void* watched, void* event);
void* QInputMethod_MetaObjectDefault(void* ptr);
void QInputMethod_TimerEventDefault(void* ptr, void* event);
void* QInputMethodEvent_NewQInputMethodEvent();
void* QInputMethodEvent_NewQInputMethodEvent3(void* other);
struct QtGui_PackedString QInputMethodEvent_CommitString(void* ptr);
struct QtGui_PackedString QInputMethodEvent_PreeditString(void* ptr);
int QInputMethodEvent_ReplacementLength(void* ptr);
int QInputMethodEvent_ReplacementStart(void* ptr);
void QInputMethodEvent_SetCommitString(void* ptr, struct QtGui_PackedString commitString, int replaceFrom, int replaceLength);
void* QInputMethodEvent___attrs_newList(void* ptr);
void* QInputMethodEvent___setAttrs__newList(void* ptr);
void* QInputMethodQueryEvent_NewQInputMethodQueryEvent(long long queries);
long long QInputMethodQueryEvent_Queries(void* ptr);
void QInputMethodQueryEvent_SetValue(void* ptr, long long query, void* value);
void* QInputMethodQueryEvent_Value(void* ptr, long long query);
void* QInputMethodQueryEvent___m_values_newList(void* ptr);
void* QInputMethodQueryEvent___setM_values__newList(void* ptr);
void* QIntValidator_NewQIntValidator(void* parent);
void* QIntValidator_NewQIntValidator2(int minimum, int maximum, void* parent);
int QIntValidator_Bottom(void* ptr);
void QIntValidator_ConnectBottomChanged(void* ptr, long long t);
void QIntValidator_DisconnectBottomChanged(void* ptr);
void QIntValidator_BottomChanged(void* ptr, int bottom);
void QIntValidator_SetBottom(void* ptr, int vin);
void QIntValidator_SetRange(void* ptr, int bottom, int top);
void QIntValidator_SetRangeDefault(void* ptr, int bottom, int top);
void QIntValidator_SetTop(void* ptr, int vin);
int QIntValidator_Top(void* ptr);
void QIntValidator_ConnectTopChanged(void* ptr, long long t);
void QIntValidator_DisconnectTopChanged(void* ptr);
void QIntValidator_TopChanged(void* ptr, int top);
long long QIntValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos);
long long QIntValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos);
void QIntValidator_DestroyQIntValidator(void* ptr);
void QIntValidator_DestroyQIntValidatorDefault(void* ptr);
void* QKeyEvent_NewQKeyEvent(long long ty, int key, long long modifiers, struct QtGui_PackedString text, char autorep, unsigned short count);
void* QKeyEvent_NewQKeyEvent2(long long ty, int key, long long modifiers, unsigned int nativeScanCode, unsigned int nativeVirtualKey, unsigned int nativeModifiers, struct QtGui_PackedString text, char autorep, unsigned short count);
int QKeyEvent_Count(void* ptr);
char QKeyEvent_IsAutoRepeat(void* ptr);
int QKeyEvent_Key(void* ptr);
char QKeyEvent_Matches(void* ptr, long long key);
unsigned int QKeyEvent_NativeModifiers(void* ptr);
unsigned int QKeyEvent_NativeScanCode(void* ptr);
unsigned int QKeyEvent_NativeVirtualKey(void* ptr);
struct QtGui_PackedString QKeyEvent_Text(void* ptr);
void* QKeySequence_NewQKeySequence();
void* QKeySequence_NewQKeySequence2(struct QtGui_PackedString key, long long format);
void* QKeySequence_NewQKeySequence3(int k1, int k2, int k3, int k4);
void* QKeySequence_NewQKeySequence4(void* keysequence);
void* QKeySequence_NewQKeySequence5(long long key);
int QKeySequence_Count(void* ptr);
void* QKeySequence_QKeySequence_FromString(struct QtGui_PackedString str, long long format);
char QKeySequence_IsEmpty(void* ptr);
struct QtGui_PackedList QKeySequence_QKeySequence_KeyBindings(long long key);
struct QtGui_PackedList QKeySequence_QKeySequence_ListFromString(struct QtGui_PackedString str, long long format);
struct QtGui_PackedString QKeySequence_QKeySequence_ListToString(void* list, long long format);
long long QKeySequence_Matches(void* ptr, void* seq);
void* QKeySequence_QKeySequence_Mnemonic(struct QtGui_PackedString text);
void QKeySequence_Swap(void* ptr, void* other);
struct QtGui_PackedString QKeySequence_ToString(void* ptr, long long format);
void QKeySequence_DestroyQKeySequence(void* ptr);
void* QKeySequence___keyBindings_atList(void* ptr, int i);
void QKeySequence___keyBindings_setList(void* ptr, void* i);
void* QKeySequence___keyBindings_newList(void* ptr);
void* QKeySequence___listFromString_atList(void* ptr, int i);
void QKeySequence___listFromString_setList(void* ptr, void* i);
void* QKeySequence___listFromString_newList(void* ptr);
void* QKeySequence___listToString_list_atList(void* ptr, int i);
void QKeySequence___listToString_list_setList(void* ptr, void* i);
void* QKeySequence___listToString_list_newList(void* ptr);
void* QLinearGradient_NewQLinearGradient();
void* QLinearGradient_NewQLinearGradient2(void* start, void* finalStop);
void* QLinearGradient_NewQLinearGradient3(double x1, double y1, double x2, double y2);
void* QLinearGradient_FinalStop(void* ptr);
void QLinearGradient_SetFinalStop(void* ptr, void* stop);
void QLinearGradient_SetFinalStop2(void* ptr, double x, double y);
void QLinearGradient_SetStart(void* ptr, void* start);
void QLinearGradient_SetStart2(void* ptr, double x, double y);
void* QLinearGradient_Start(void* ptr);
void* QMatrix_NewQMatrix2();
void* QMatrix_NewQMatrix3(double m11, double m12, double m21, double m22, double dx, double dy);
void* QMatrix_NewQMatrix5(void* matrix);
double QMatrix_Determinant(void* ptr);
double QMatrix_Dx(void* ptr);
double QMatrix_Dy(void* ptr);
void* QMatrix_Inverted(void* ptr, char* invertible);
char QMatrix_IsIdentity(void* ptr);
char QMatrix_IsInvertible(void* ptr);
double QMatrix_M11(void* ptr);
double QMatrix_M12(void* ptr);
double QMatrix_M21(void* ptr);
double QMatrix_M22(void* ptr);
void QMatrix_Map(void* ptr, double x, double y, double tx, double ty);
void QMatrix_Map2(void* ptr, int x, int y, int tx, int ty);
void* QMatrix_Map3(void* ptr, void* point);
void* QMatrix_Map4(void* ptr, void* point);
void* QMatrix_Map5(void* ptr, void* line);
void* QMatrix_Map6(void* ptr, void* line);
void* QMatrix_Map7(void* ptr, void* polygon);
void* QMatrix_Map8(void* ptr, void* polygon);
void* QMatrix_Map9(void* ptr, void* region);
void* QMatrix_Map10(void* ptr, void* path);
void* QMatrix_MapRect(void* ptr, void* rectangle);
void* QMatrix_MapRect2(void* ptr, void* rectangle);
void* QMatrix_MapToPolygon(void* ptr, void* rectangle);
void QMatrix_Reset(void* ptr);
void* QMatrix_Rotate(void* ptr, double degrees);
void* QMatrix_Scale(void* ptr, double sx, double sy);
void QMatrix_SetMatrix(void* ptr, double m11, double m12, double m21, double m22, double dx, double dy);
void* QMatrix_Shear(void* ptr, double sh, double sv);
void* QMatrix_Translate(void* ptr, double dx, double dy);
void* QMatrix4x4_NewQMatrix4x4();
void* QMatrix4x4_NewQMatrix4x43(float values);
void* QMatrix4x4_NewQMatrix4x44(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44);
void* QMatrix4x4_Column(void* ptr, int index);
float QMatrix4x4_ConstData(void* ptr);
void QMatrix4x4_CopyDataTo(void* ptr, float values);
float QMatrix4x4_Data(void* ptr);
float QMatrix4x4_Data2(void* ptr);
double QMatrix4x4_Determinant(void* ptr);
void QMatrix4x4_Fill(void* ptr, float value);
void QMatrix4x4_Frustum(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane);
void* QMatrix4x4_Inverted(void* ptr, char* invertible);
char QMatrix4x4_IsAffine(void* ptr);
char QMatrix4x4_IsIdentity(void* ptr);
void QMatrix4x4_LookAt(void* ptr, void* eye, void* center, void* up);
void* QMatrix4x4_Map(void* ptr, void* point);
void* QMatrix4x4_Map2(void* ptr, void* point);
void* QMatrix4x4_Map3(void* ptr, void* point);
void* QMatrix4x4_Map4(void* ptr, void* point);
void* QMatrix4x4_MapRect(void* ptr, void* rect);
void* QMatrix4x4_MapRect2(void* ptr, void* rect);
void* QMatrix4x4_MapVector(void* ptr, void* vector);
void QMatrix4x4_Optimize(void* ptr);
void QMatrix4x4_Ortho(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane);
void QMatrix4x4_Ortho2(void* ptr, void* rect);
void QMatrix4x4_Ortho3(void* ptr, void* rect);
void QMatrix4x4_Perspective(void* ptr, float verticalAngle, float aspectRatio, float nearPlane, float farPlane);
void QMatrix4x4_Rotate(void* ptr, float angle, void* vector);
void QMatrix4x4_Rotate2(void* ptr, float angle, float x, float y, float z);
void QMatrix4x4_Rotate3(void* ptr, void* quaternion);
void* QMatrix4x4_Row(void* ptr, int index);
void QMatrix4x4_Scale(void* ptr, void* vector);
void QMatrix4x4_Scale2(void* ptr, float x, float y);
void QMatrix4x4_Scale3(void* ptr, float x, float y, float z);
void QMatrix4x4_Scale4(void* ptr, float factor);
void QMatrix4x4_SetColumn(void* ptr, int index, void* value);
void QMatrix4x4_SetRow(void* ptr, int index, void* value);
void QMatrix4x4_SetToIdentity(void* ptr);
void* QMatrix4x4_ToTransform(void* ptr);
void* QMatrix4x4_ToTransform2(void* ptr, float distanceToPlane);
void QMatrix4x4_Translate(void* ptr, void* vector);
void QMatrix4x4_Translate2(void* ptr, float x, float y);
void QMatrix4x4_Translate3(void* ptr, float x, float y, float z);
void* QMatrix4x4_Transposed(void* ptr);
void QMatrix4x4_Viewport(void* ptr, float left, float bottom, float width, float height, float nearPlane, float farPlane);
void QMatrix4x4_Viewport2(void* ptr, void* rect);
void* QMouseEvent_NewQMouseEvent(long long ty, void* localPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent2(long long ty, void* localPos, void* screenPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent3(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent4(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers, long long source);
long long QMouseEvent_Button(void* ptr);
long long QMouseEvent_Buttons(void* ptr);
long long QMouseEvent_Flags(void* ptr);
void* QMouseEvent_GlobalPos(void* ptr);
int QMouseEvent_GlobalX(void* ptr);
int QMouseEvent_GlobalY(void* ptr);
void* QMouseEvent_LocalPos(void* ptr);
void* QMouseEvent_Pos(void* ptr);
void* QMouseEvent_ScreenPos(void* ptr);
long long QMouseEvent_Source(void* ptr);
void* QMouseEvent_WindowPos(void* ptr);
int QMouseEvent_X(void* ptr);
int QMouseEvent_Y(void* ptr);
void* QMoveEvent_NewQMoveEvent(void* pos, void* oldPos);
void* QMoveEvent_OldPos(void* ptr);
void* QMoveEvent_Pos(void* ptr);
void* QMovie_NewQMovie(void* parent);
void* QMovie_NewQMovie2(void* device, void* format, void* parent);
void* QMovie_NewQMovie3(struct QtGui_PackedString fileName, void* format, void* parent);
void* QMovie_BackgroundColor(void* ptr);
long long QMovie_CacheMode(void* ptr);
int QMovie_CurrentFrameNumber(void* ptr);
void* QMovie_CurrentImage(void* ptr);
void* QMovie_CurrentPixmap(void* ptr);
void* QMovie_Device(void* ptr);
void QMovie_ConnectError(void* ptr, long long t);
void QMovie_DisconnectError(void* ptr);
void QMovie_Error(void* ptr, long long error);
struct QtGui_PackedString QMovie_FileName(void* ptr);
void QMovie_ConnectFinished(void* ptr, long long t);
void QMovie_DisconnectFinished(void* ptr);
void QMovie_Finished(void* ptr);
void* QMovie_Format(void* ptr);
void QMovie_ConnectFrameChanged(void* ptr, long long t);
void QMovie_DisconnectFrameChanged(void* ptr);
void QMovie_FrameChanged(void* ptr, int frameNumber);
int QMovie_FrameCount(void* ptr);
void* QMovie_FrameRect(void* ptr);
char QMovie_IsValid(void* ptr);
char QMovie_JumpToFrame(void* ptr, int frameNumber);
char QMovie_JumpToNextFrame(void* ptr);
char QMovie_JumpToNextFrameDefault(void* ptr);
long long QMovie_LastError(void* ptr);
struct QtGui_PackedString QMovie_LastErrorString(void* ptr);
int QMovie_LoopCount(void* ptr);
int QMovie_NextFrameDelay(void* ptr);
void QMovie_ConnectResized(void* ptr, long long t);
void QMovie_DisconnectResized(void* ptr);
void QMovie_Resized(void* ptr, void* size);
void* QMovie_ScaledSize(void* ptr);
void QMovie_SetBackgroundColor(void* ptr, void* color);
void QMovie_SetCacheMode(void* ptr, long long mode);
void QMovie_SetDevice(void* ptr, void* device);
void QMovie_SetFileName(void* ptr, struct QtGui_PackedString fileName);
void QMovie_SetFormat(void* ptr, void* format);
void QMovie_SetPaused(void* ptr, char paused);
void QMovie_SetPausedDefault(void* ptr, char paused);
void QMovie_SetScaledSize(void* ptr, void* size);
void QMovie_SetSpeed(void* ptr, int percentSpeed);
void QMovie_SetSpeedDefault(void* ptr, int percentSpeed);
int QMovie_Speed(void* ptr);
void QMovie_Start(void* ptr);
void QMovie_StartDefault(void* ptr);
void QMovie_ConnectStarted(void* ptr, long long t);
void QMovie_DisconnectStarted(void* ptr);
void QMovie_Started(void* ptr);
long long QMovie_State(void* ptr);
void QMovie_ConnectStateChanged(void* ptr, long long t);
void QMovie_DisconnectStateChanged(void* ptr);
void QMovie_StateChanged(void* ptr, long long state);
void QMovie_Stop(void* ptr);
void QMovie_StopDefault(void* ptr);
struct QtGui_PackedList QMovie_QMovie_SupportedFormats();
void QMovie_ConnectUpdated(void* ptr, long long t);
void QMovie_DisconnectUpdated(void* ptr);
void QMovie_Updated(void* ptr, void* rect);
void QMovie_DestroyQMovie(void* ptr);
void QMovie_DestroyQMovieDefault(void* ptr);
void* QMovie___supportedFormats_atList(void* ptr, int i);
void QMovie___supportedFormats_setList(void* ptr, void* i);
void* QMovie___supportedFormats_newList(void* ptr);
void* QMovie___children_atList(void* ptr, int i);
void QMovie___children_setList(void* ptr, void* i);
void* QMovie___children_newList(void* ptr);
void* QMovie___dynamicPropertyNames_atList(void* ptr, int i);
void QMovie___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMovie___dynamicPropertyNames_newList(void* ptr);
void* QMovie___findChildren_atList(void* ptr, int i);
void QMovie___findChildren_setList(void* ptr, void* i);
void* QMovie___findChildren_newList(void* ptr);
void* QMovie___findChildren_atList3(void* ptr, int i);
void QMovie___findChildren_setList3(void* ptr, void* i);
void* QMovie___findChildren_newList3(void* ptr);
void QMovie_ChildEventDefault(void* ptr, void* event);
void QMovie_ConnectNotifyDefault(void* ptr, void* sign);
void QMovie_CustomEventDefault(void* ptr, void* event);
void QMovie_DeleteLaterDefault(void* ptr);
void QMovie_DisconnectNotifyDefault(void* ptr, void* sign);
char QMovie_EventDefault(void* ptr, void* e);
char QMovie_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMovie_MetaObjectDefault(void* ptr);
void QMovie_TimerEventDefault(void* ptr, void* event);
void* QNativeGestureEvent_NewQNativeGestureEvent2(long long ty, void* device, void* localPos, void* windowPos, void* screenPos, double realValue, unsigned long sequenceId, unsigned long long intValue);
void* QNativeGestureEvent_Device(void* ptr);
long long QNativeGestureEvent_GestureType(void* ptr);
void* QNativeGestureEvent_GlobalPos(void* ptr);
void* QNativeGestureEvent_LocalPos(void* ptr);
void* QNativeGestureEvent_Pos(void* ptr);
void* QNativeGestureEvent_ScreenPos(void* ptr);
double QNativeGestureEvent_Value(void* ptr);
void* QNativeGestureEvent_WindowPos(void* ptr);
void* QOffscreenSurface_NewQOffscreenSurface(void* targetScreen, void* parent);
void* QOffscreenSurface_NewQOffscreenSurface2(void* targetScreen);
void QOffscreenSurface_Create(void* ptr);
void QOffscreenSurface_Destroy(void* ptr);
void* QOffscreenSurface_Format(void* ptr);
void* QOffscreenSurface_FormatDefault(void* ptr);
char QOffscreenSurface_IsValid(void* ptr);
void* QOffscreenSurface_NativeHandle(void* ptr);
void* QOffscreenSurface_RequestedFormat(void* ptr);
void* QOffscreenSurface_Screen(void* ptr);
void QOffscreenSurface_ConnectScreenChanged(void* ptr, long long t);
void QOffscreenSurface_DisconnectScreenChanged(void* ptr);
void QOffscreenSurface_ScreenChanged(void* ptr, void* screen);
void QOffscreenSurface_SetFormat(void* ptr, void* format);
void QOffscreenSurface_SetNativeHandle(void* ptr, void* handle);
void QOffscreenSurface_SetScreen(void* ptr, void* newScreen);
void* QOffscreenSurface_Size(void* ptr);
void* QOffscreenSurface_SizeDefault(void* ptr);
long long QOffscreenSurface_SurfaceType(void* ptr);
long long QOffscreenSurface_SurfaceTypeDefault(void* ptr);
void QOffscreenSurface_DestroyQOffscreenSurface(void* ptr);
void QOffscreenSurface_DestroyQOffscreenSurfaceDefault(void* ptr);
void* QOffscreenSurface___children_atList(void* ptr, int i);
void QOffscreenSurface___children_setList(void* ptr, void* i);
void* QOffscreenSurface___children_newList(void* ptr);
void* QOffscreenSurface___dynamicPropertyNames_atList(void* ptr, int i);
void QOffscreenSurface___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOffscreenSurface___dynamicPropertyNames_newList(void* ptr);
void* QOffscreenSurface___findChildren_atList(void* ptr, int i);
void QOffscreenSurface___findChildren_setList(void* ptr, void* i);
void* QOffscreenSurface___findChildren_newList(void* ptr);
void* QOffscreenSurface___findChildren_atList3(void* ptr, int i);
void QOffscreenSurface___findChildren_setList3(void* ptr, void* i);
void* QOffscreenSurface___findChildren_newList3(void* ptr);
void QOffscreenSurface_ChildEvent(void* ptr, void* event);
void QOffscreenSurface_ChildEventDefault(void* ptr, void* event);
void QOffscreenSurface_ConnectNotify(void* ptr, void* sign);
void QOffscreenSurface_ConnectNotifyDefault(void* ptr, void* sign);
void QOffscreenSurface_CustomEvent(void* ptr, void* event);
void QOffscreenSurface_CustomEventDefault(void* ptr, void* event);
void QOffscreenSurface_DeleteLater(void* ptr);
void QOffscreenSurface_DeleteLaterDefault(void* ptr);
void QOffscreenSurface_DisconnectNotify(void* ptr, void* sign);
void QOffscreenSurface_DisconnectNotifyDefault(void* ptr, void* sign);
char QOffscreenSurface_Event(void* ptr, void* e);
char QOffscreenSurface_EventDefault(void* ptr, void* e);
char QOffscreenSurface_EventFilter(void* ptr, void* watched, void* event);
char QOffscreenSurface_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOffscreenSurface_MetaObject(void* ptr);
void* QOffscreenSurface_MetaObjectDefault(void* ptr);
void QOffscreenSurface_TimerEvent(void* ptr, void* event);
void QOffscreenSurface_TimerEventDefault(void* ptr, void* event);
void* QOpenGLBuffer_NewQOpenGLBuffer();
void* QOpenGLBuffer_NewQOpenGLBuffer2(long long ty);
void* QOpenGLBuffer_NewQOpenGLBuffer3(void* other);
void QOpenGLBuffer_Allocate(void* ptr, void* data, int count);
void QOpenGLBuffer_Allocate2(void* ptr, int count);
char QOpenGLBuffer_Bind(void* ptr);
unsigned int QOpenGLBuffer_BufferId(void* ptr);
char QOpenGLBuffer_Create(void* ptr);
void QOpenGLBuffer_Destroy(void* ptr);
char QOpenGLBuffer_IsCreated(void* ptr);
void* QOpenGLBuffer_Map(void* ptr, long long access);
void* QOpenGLBuffer_MapRange(void* ptr, int offset, int count, long long access);
char QOpenGLBuffer_Read(void* ptr, int offset, void* data, int count);
void QOpenGLBuffer_Release(void* ptr);
void QOpenGLBuffer_QOpenGLBuffer_Release2(long long ty);
void QOpenGLBuffer_SetUsagePattern(void* ptr, long long value);
int QOpenGLBuffer_Size(void* ptr);
long long QOpenGLBuffer_Type(void* ptr);
char QOpenGLBuffer_Unmap(void* ptr);
long long QOpenGLBuffer_UsagePattern(void* ptr);
void QOpenGLBuffer_Write(void* ptr, int offset, void* data, int count);
void QOpenGLBuffer_DestroyQOpenGLBuffer(void* ptr);
void* QOpenGLContext_NewQOpenGLContext(void* parent);
void QOpenGLContext_ConnectAboutToBeDestroyed(void* ptr, long long t);
void QOpenGLContext_DisconnectAboutToBeDestroyed(void* ptr);
void QOpenGLContext_AboutToBeDestroyed(void* ptr);
char QOpenGLContext_QOpenGLContext_AreSharing(void* first, void* second);
char QOpenGLContext_Create(void* ptr);
void* QOpenGLContext_QOpenGLContext_CurrentContext();
unsigned int QOpenGLContext_DefaultFramebufferObject(void* ptr);
void QOpenGLContext_DoneCurrent(void* ptr);
void* QOpenGLContext_ExtraFunctions(void* ptr);
void* QOpenGLContext_Format(void* ptr);
void* QOpenGLContext_Functions(void* ptr);
void* QOpenGLContext_GetProcAddress(void* ptr, void* procName);
void* QOpenGLContext_GetProcAddress2(void* ptr, char* procName);
void* QOpenGLContext_QOpenGLContext_GlobalShareContext();
char QOpenGLContext_HasExtension(void* ptr, void* extensi);
char QOpenGLContext_IsOpenGLES(void* ptr);
char QOpenGLContext_IsValid(void* ptr);
char QOpenGLContext_MakeCurrent(void* ptr, void* surface);
void* QOpenGLContext_NativeHandle(void* ptr);
void* QOpenGLContext_QOpenGLContext_OpenGLModuleHandle();
long long QOpenGLContext_QOpenGLContext_OpenGLModuleType();
void* QOpenGLContext_Screen(void* ptr);
void QOpenGLContext_SetFormat(void* ptr, void* format);
void QOpenGLContext_SetNativeHandle(void* ptr, void* handle);
void QOpenGLContext_SetScreen(void* ptr, void* screen);
void QOpenGLContext_SetShareContext(void* ptr, void* shareContext);
void* QOpenGLContext_ShareContext(void* ptr);
void* QOpenGLContext_ShareGroup(void* ptr);
char QOpenGLContext_QOpenGLContext_SupportsThreadedOpenGL();
void* QOpenGLContext_Surface(void* ptr);
void QOpenGLContext_SwapBuffers(void* ptr, void* surface);
void* QOpenGLContext_VersionFunctions(void* ptr, void* versionProfile);
void QOpenGLContext_DestroyQOpenGLContext(void* ptr);
void QOpenGLContext_DestroyQOpenGLContextDefault(void* ptr);
void* QOpenGLContext___children_atList(void* ptr, int i);
void QOpenGLContext___children_setList(void* ptr, void* i);
void* QOpenGLContext___children_newList(void* ptr);
void* QOpenGLContext___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLContext___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLContext___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLContext___findChildren_atList(void* ptr, int i);
void QOpenGLContext___findChildren_setList(void* ptr, void* i);
void* QOpenGLContext___findChildren_newList(void* ptr);
void* QOpenGLContext___findChildren_atList3(void* ptr, int i);
void QOpenGLContext___findChildren_setList3(void* ptr, void* i);
void* QOpenGLContext___findChildren_newList3(void* ptr);
void QOpenGLContext_ChildEventDefault(void* ptr, void* event);
void QOpenGLContext_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLContext_CustomEventDefault(void* ptr, void* event);
void QOpenGLContext_DeleteLaterDefault(void* ptr);
void QOpenGLContext_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLContext_EventDefault(void* ptr, void* e);
char QOpenGLContext_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLContext_MetaObjectDefault(void* ptr);
void QOpenGLContext_TimerEventDefault(void* ptr, void* event);
void* QOpenGLContextGroup_QOpenGLContextGroup_CurrentContextGroup();
struct QtGui_PackedList QOpenGLContextGroup_Shares(void* ptr);
void* QOpenGLContextGroup___shares_atList(void* ptr, int i);
void QOpenGLContextGroup___shares_setList(void* ptr, void* i);
void* QOpenGLContextGroup___shares_newList(void* ptr);
void* QOpenGLContextGroup___children_atList(void* ptr, int i);
void QOpenGLContextGroup___children_setList(void* ptr, void* i);
void* QOpenGLContextGroup___children_newList(void* ptr);
void* QOpenGLContextGroup___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLContextGroup___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLContextGroup___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLContextGroup___findChildren_atList(void* ptr, int i);
void QOpenGLContextGroup___findChildren_setList(void* ptr, void* i);
void* QOpenGLContextGroup___findChildren_newList(void* ptr);
void* QOpenGLContextGroup___findChildren_atList3(void* ptr, int i);
void QOpenGLContextGroup___findChildren_setList3(void* ptr, void* i);
void* QOpenGLContextGroup___findChildren_newList3(void* ptr);
void QOpenGLContextGroup_ChildEventDefault(void* ptr, void* event);
void QOpenGLContextGroup_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLContextGroup_CustomEventDefault(void* ptr, void* event);
void QOpenGLContextGroup_DeleteLaterDefault(void* ptr);
void QOpenGLContextGroup_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLContextGroup_EventDefault(void* ptr, void* e);
char QOpenGLContextGroup_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLContextGroup_MetaObjectDefault(void* ptr);
void QOpenGLContextGroup_TimerEventDefault(void* ptr, void* event);
void* QOpenGLDebugLogger_NewQOpenGLDebugLogger(void* parent);
void QOpenGLDebugLogger_DisableMessages(void* ptr, long long sources, long long types, long long severities);
void QOpenGLDebugLogger_DisableMessages2(void* ptr, void* ids, long long sources, long long types);
void QOpenGLDebugLogger_EnableMessages(void* ptr, long long sources, long long types, long long severities);
void QOpenGLDebugLogger_EnableMessages2(void* ptr, void* ids, long long sources, long long types);
char QOpenGLDebugLogger_Initialize(void* ptr);
char QOpenGLDebugLogger_IsLogging(void* ptr);
void QOpenGLDebugLogger_LogMessage(void* ptr, void* debugMessage);
void QOpenGLDebugLogger_LogMessageDefault(void* ptr, void* debugMessage);
struct QtGui_PackedList QOpenGLDebugLogger_LoggedMessages(void* ptr);
long long QOpenGLDebugLogger_LoggingMode(void* ptr);
long long QOpenGLDebugLogger_MaximumMessageLength(void* ptr);
void QOpenGLDebugLogger_ConnectMessageLogged(void* ptr, long long t);
void QOpenGLDebugLogger_DisconnectMessageLogged(void* ptr);
void QOpenGLDebugLogger_MessageLogged(void* ptr, void* debugMessage);
void QOpenGLDebugLogger_PopGroup(void* ptr);
void QOpenGLDebugLogger_PushGroup(void* ptr, struct QtGui_PackedString name, unsigned int id, long long source);
void QOpenGLDebugLogger_StartLogging(void* ptr, long long loggingMode);
void QOpenGLDebugLogger_StartLoggingDefault(void* ptr, long long loggingMode);
void QOpenGLDebugLogger_StopLogging(void* ptr);
void QOpenGLDebugLogger_StopLoggingDefault(void* ptr);
void QOpenGLDebugLogger_DestroyQOpenGLDebugLogger(void* ptr);
void QOpenGLDebugLogger_DestroyQOpenGLDebugLoggerDefault(void* ptr);
unsigned int QOpenGLDebugLogger___disableMessages_ids_atList2(void* ptr, int i);
void QOpenGLDebugLogger___disableMessages_ids_setList2(void* ptr, unsigned int i);
void* QOpenGLDebugLogger___disableMessages_ids_newList2(void* ptr);
unsigned int QOpenGLDebugLogger___enableMessages_ids_atList2(void* ptr, int i);
void QOpenGLDebugLogger___enableMessages_ids_setList2(void* ptr, unsigned int i);
void* QOpenGLDebugLogger___enableMessages_ids_newList2(void* ptr);
void* QOpenGLDebugLogger___loggedMessages_atList(void* ptr, int i);
void QOpenGLDebugLogger___loggedMessages_setList(void* ptr, void* i);
void* QOpenGLDebugLogger___loggedMessages_newList(void* ptr);
void* QOpenGLDebugLogger___children_atList(void* ptr, int i);
void QOpenGLDebugLogger___children_setList(void* ptr, void* i);
void* QOpenGLDebugLogger___children_newList(void* ptr);
void* QOpenGLDebugLogger___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLDebugLogger___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLDebugLogger___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLDebugLogger___findChildren_atList(void* ptr, int i);
void QOpenGLDebugLogger___findChildren_setList(void* ptr, void* i);
void* QOpenGLDebugLogger___findChildren_newList(void* ptr);
void* QOpenGLDebugLogger___findChildren_atList3(void* ptr, int i);
void QOpenGLDebugLogger___findChildren_setList3(void* ptr, void* i);
void* QOpenGLDebugLogger___findChildren_newList3(void* ptr);
void QOpenGLDebugLogger_ChildEventDefault(void* ptr, void* event);
void QOpenGLDebugLogger_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLDebugLogger_CustomEventDefault(void* ptr, void* event);
void QOpenGLDebugLogger_DeleteLaterDefault(void* ptr);
void QOpenGLDebugLogger_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLDebugLogger_EventDefault(void* ptr, void* e);
char QOpenGLDebugLogger_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLDebugLogger_MetaObjectDefault(void* ptr);
void QOpenGLDebugLogger_TimerEventDefault(void* ptr, void* event);
void* QOpenGLDebugMessage_NewQOpenGLDebugMessage();
void* QOpenGLDebugMessage_NewQOpenGLDebugMessage2(void* debugMessage);
void* QOpenGLDebugMessage_QOpenGLDebugMessage_CreateApplicationMessage(struct QtGui_PackedString text, unsigned int id, long long severity, long long ty);
void* QOpenGLDebugMessage_QOpenGLDebugMessage_CreateThirdPartyMessage(struct QtGui_PackedString text, unsigned int id, long long severity, long long ty);
unsigned int QOpenGLDebugMessage_Id(void* ptr);
struct QtGui_PackedString QOpenGLDebugMessage_Message(void* ptr);
long long QOpenGLDebugMessage_Severity(void* ptr);
long long QOpenGLDebugMessage_Source(void* ptr);
void QOpenGLDebugMessage_Swap(void* ptr, void* debugMessage);
long long QOpenGLDebugMessage_Type(void* ptr);
void QOpenGLDebugMessage_DestroyQOpenGLDebugMessage(void* ptr);
void* QOpenGLExtraFunctions_NewQOpenGLExtraFunctions();
void* QOpenGLExtraFunctions_NewQOpenGLExtraFunctions2(void* context);
void QOpenGLExtraFunctions_GlActiveShaderProgram(void* ptr, unsigned int pipeline, unsigned int program);
void QOpenGLExtraFunctions_GlBeginQuery(void* ptr, unsigned int target, unsigned int id);
void QOpenGLExtraFunctions_GlBeginTransformFeedback(void* ptr, unsigned int primitiveMode);
void QOpenGLExtraFunctions_GlBindBufferBase(void* ptr, unsigned int target, unsigned int index, unsigned int buffer);
void QOpenGLExtraFunctions_GlBindImageTexture(void* ptr, unsigned int unit, unsigned int texture, int level, char layered, int layer, unsigned int access, unsigned int format);
void QOpenGLExtraFunctions_GlBindProgramPipeline(void* ptr, unsigned int pipeline);
void QOpenGLExtraFunctions_GlBindSampler(void* ptr, unsigned int unit, unsigned int sampler);
void QOpenGLExtraFunctions_GlBindTransformFeedback(void* ptr, unsigned int target, unsigned int id);
void QOpenGLExtraFunctions_GlBindVertexArray(void* ptr, unsigned int array);
void QOpenGLExtraFunctions_GlBlendBarrier(void* ptr);
void QOpenGLExtraFunctions_GlBlendEquationSeparatei(void* ptr, unsigned int buf, unsigned int modeRGB, unsigned int modeAlpha);
void QOpenGLExtraFunctions_GlBlendEquationi(void* ptr, unsigned int buf, unsigned int mode);
void QOpenGLExtraFunctions_GlBlendFuncSeparatei(void* ptr, unsigned int buf, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha);
void QOpenGLExtraFunctions_GlBlendFunci(void* ptr, unsigned int buf, unsigned int src, unsigned int dst);
void QOpenGLExtraFunctions_GlBlitFramebuffer(void* ptr, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, unsigned int mask, unsigned int filter);
void QOpenGLExtraFunctions_GlClearBufferfi(void* ptr, unsigned int buffer, int drawbuffer, float depth, int stencil);
void QOpenGLExtraFunctions_GlClearBufferfv(void* ptr, unsigned int buffer, int drawbuffer, float value);
void QOpenGLExtraFunctions_GlClearBufferiv(void* ptr, unsigned int buffer, int drawbuffer, int value);
void QOpenGLExtraFunctions_GlClearBufferuiv(void* ptr, unsigned int buffer, int drawbuffer, unsigned int value);
void QOpenGLExtraFunctions_GlColorMaski(void* ptr, unsigned int index, char r, char g, char b, char a);
void QOpenGLExtraFunctions_GlCompressedTexImage3D(void* ptr, unsigned int target, int level, unsigned int internalformat, int width, int height, int depth, int border, int imageSize, void* data);
void QOpenGLExtraFunctions_GlCompressedTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, int imageSize, void* data);
void QOpenGLExtraFunctions_GlCopyImageSubData(void* ptr, unsigned int srcName, unsigned int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, unsigned int dstName, unsigned int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
void QOpenGLExtraFunctions_GlCopyTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
void QOpenGLExtraFunctions_GlDebugMessageControl(void* ptr, unsigned int source, unsigned int ty, unsigned int severity, int count, unsigned int ids, char enabled);
void QOpenGLExtraFunctions_GlDeleteProgramPipelines(void* ptr, int n, unsigned int pipelines);
void QOpenGLExtraFunctions_GlDeleteQueries(void* ptr, int n, unsigned int ids);
void QOpenGLExtraFunctions_GlDeleteSamplers(void* ptr, int count, unsigned int samplers);
void QOpenGLExtraFunctions_GlDeleteTransformFeedbacks(void* ptr, int n, unsigned int ids);
void QOpenGLExtraFunctions_GlDeleteVertexArrays(void* ptr, int n, unsigned int arrays);
void QOpenGLExtraFunctions_GlDisablei(void* ptr, unsigned int target, unsigned int index);
void QOpenGLExtraFunctions_GlDispatchCompute(void* ptr, unsigned int num_groups_x, unsigned int num_groups_y, unsigned int num_groups_z);
void QOpenGLExtraFunctions_GlDrawArraysIndirect(void* ptr, unsigned int mode, void* indirect);
void QOpenGLExtraFunctions_GlDrawArraysInstanced(void* ptr, unsigned int mode, int first, int count, int instancecount);
void QOpenGLExtraFunctions_GlDrawBuffers(void* ptr, int n, unsigned int bufs);
void QOpenGLExtraFunctions_GlDrawElementsBaseVertex(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int basevertex);
void QOpenGLExtraFunctions_GlDrawElementsIndirect(void* ptr, unsigned int mode, unsigned int ty, void* indirect);
void QOpenGLExtraFunctions_GlDrawElementsInstanced(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int instancecount);
void QOpenGLExtraFunctions_GlDrawElementsInstancedBaseVertex(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices, int instancecount, int basevertex);
void QOpenGLExtraFunctions_GlDrawRangeElements(void* ptr, unsigned int mode, unsigned int start, unsigned int end, int count, unsigned int ty, void* indices);
void QOpenGLExtraFunctions_GlDrawRangeElementsBaseVertex(void* ptr, unsigned int mode, unsigned int start, unsigned int end, int count, unsigned int ty, void* indices, int basevertex);
void QOpenGLExtraFunctions_GlEnablei(void* ptr, unsigned int target, unsigned int index);
void QOpenGLExtraFunctions_GlEndQuery(void* ptr, unsigned int target);
void QOpenGLExtraFunctions_GlEndTransformFeedback(void* ptr);
void QOpenGLExtraFunctions_GlFramebufferParameteri(void* ptr, unsigned int target, unsigned int pname, int param);
void QOpenGLExtraFunctions_GlFramebufferTexture(void* ptr, unsigned int target, unsigned int attachment, unsigned int texture, int level);
void QOpenGLExtraFunctions_GlFramebufferTextureLayer(void* ptr, unsigned int target, unsigned int attachment, unsigned int texture, int level, int layer);
void QOpenGLExtraFunctions_GlGenProgramPipelines(void* ptr, int n, unsigned int pipelines);
void QOpenGLExtraFunctions_GlGenQueries(void* ptr, int n, unsigned int ids);
void QOpenGLExtraFunctions_GlGenSamplers(void* ptr, int count, unsigned int samplers);
void QOpenGLExtraFunctions_GlGenTransformFeedbacks(void* ptr, int n, unsigned int ids);
void QOpenGLExtraFunctions_GlGenVertexArrays(void* ptr, int n, unsigned int arrays);
void QOpenGLExtraFunctions_GlGetActiveUniformBlockiv(void* ptr, unsigned int program, unsigned int uniformBlockIndex, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetActiveUniformsiv(void* ptr, unsigned int program, int uniformCount, unsigned int uniformIndices, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetBooleani_v(void* ptr, unsigned int target, unsigned int index, char* data);
void QOpenGLExtraFunctions_GlGetBufferPointerv(void* ptr, unsigned int target, unsigned int pname, void* params);
void QOpenGLExtraFunctions_GlGetFramebufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params);
unsigned int QOpenGLExtraFunctions_GlGetGraphicsResetStatus(void* ptr);
void QOpenGLExtraFunctions_GlGetIntegeri_v(void* ptr, unsigned int target, unsigned int index, int data);
void QOpenGLExtraFunctions_GlGetInternalformativ(void* ptr, unsigned int target, unsigned int internalformat, unsigned int pname, int bufSize, int params);
void QOpenGLExtraFunctions_GlGetMultisamplefv(void* ptr, unsigned int pname, unsigned int index, float val);
void QOpenGLExtraFunctions_GlGetPointerv(void* ptr, unsigned int pname, void* params);
void QOpenGLExtraFunctions_GlGetProgramBinary(void* ptr, unsigned int program, int bufSize, int length, unsigned int binaryFormat, void* binary);
void QOpenGLExtraFunctions_GlGetProgramInterfaceiv(void* ptr, unsigned int program, unsigned int programInterface, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetProgramPipelineiv(void* ptr, unsigned int pipeline, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetProgramResourceiv(void* ptr, unsigned int program, unsigned int programInterface, unsigned int index, int propCount, unsigned int props, int bufSize, int length, int params);
void QOpenGLExtraFunctions_GlGetQueryObjectuiv(void* ptr, unsigned int id, unsigned int pname, unsigned int params);
void QOpenGLExtraFunctions_GlGetQueryiv(void* ptr, unsigned int target, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetSamplerParameterIiv(void* ptr, unsigned int sampler, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetSamplerParameterIuiv(void* ptr, unsigned int sampler, unsigned int pname, unsigned int params);
void QOpenGLExtraFunctions_GlGetSamplerParameterfv(void* ptr, unsigned int sampler, unsigned int pname, float params);
void QOpenGLExtraFunctions_GlGetSamplerParameteriv(void* ptr, unsigned int sampler, unsigned int pname, int params);
struct QtGui_PackedString QOpenGLExtraFunctions_GlGetStringi(void* ptr, unsigned int name, unsigned int index);
void QOpenGLExtraFunctions_GlGetTexLevelParameterfv(void* ptr, unsigned int target, int level, unsigned int pname, float params);
void QOpenGLExtraFunctions_GlGetTexLevelParameteriv(void* ptr, unsigned int target, int level, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetTexParameterIiv(void* ptr, unsigned int target, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetTexParameterIuiv(void* ptr, unsigned int target, unsigned int pname, unsigned int params);
void QOpenGLExtraFunctions_GlGetUniformuiv(void* ptr, unsigned int program, int location, unsigned int params);
void QOpenGLExtraFunctions_GlGetVertexAttribIiv(void* ptr, unsigned int index, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlGetVertexAttribIuiv(void* ptr, unsigned int index, unsigned int pname, unsigned int params);
void QOpenGLExtraFunctions_GlGetnUniformfv(void* ptr, unsigned int program, int location, int bufSize, float params);
void QOpenGLExtraFunctions_GlGetnUniformiv(void* ptr, unsigned int program, int location, int bufSize, int params);
void QOpenGLExtraFunctions_GlGetnUniformuiv(void* ptr, unsigned int program, int location, int bufSize, unsigned int params);
void QOpenGLExtraFunctions_GlInvalidateFramebuffer(void* ptr, unsigned int target, int numAttachments, unsigned int attachments);
void QOpenGLExtraFunctions_GlInvalidateSubFramebuffer(void* ptr, unsigned int target, int numAttachments, unsigned int attachments, int x, int y, int width, int height);
char QOpenGLExtraFunctions_GlIsEnabledi(void* ptr, unsigned int target, unsigned int index);
char QOpenGLExtraFunctions_GlIsProgramPipeline(void* ptr, unsigned int pipeline);
char QOpenGLExtraFunctions_GlIsQuery(void* ptr, unsigned int id);
char QOpenGLExtraFunctions_GlIsSampler(void* ptr, unsigned int sampler);
char QOpenGLExtraFunctions_GlIsTransformFeedback(void* ptr, unsigned int id);
char QOpenGLExtraFunctions_GlIsVertexArray(void* ptr, unsigned int array);
void QOpenGLExtraFunctions_GlMemoryBarrier(void* ptr, unsigned int barriers);
void QOpenGLExtraFunctions_GlMemoryBarrierByRegion(void* ptr, unsigned int barriers);
void QOpenGLExtraFunctions_GlMinSampleShading(void* ptr, float value);
void QOpenGLExtraFunctions_GlPatchParameteri(void* ptr, unsigned int pname, int value);
void QOpenGLExtraFunctions_GlPauseTransformFeedback(void* ptr);
void QOpenGLExtraFunctions_GlPopDebugGroup(void* ptr);
void QOpenGLExtraFunctions_GlPrimitiveBoundingBox(void* ptr, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
void QOpenGLExtraFunctions_GlProgramBinary(void* ptr, unsigned int program, unsigned int binaryFormat, void* binary, int length);
void QOpenGLExtraFunctions_GlProgramParameteri(void* ptr, unsigned int program, unsigned int pname, int value);
void QOpenGLExtraFunctions_GlProgramUniform1f(void* ptr, unsigned int program, int location, float v0);
void QOpenGLExtraFunctions_GlProgramUniform1fv(void* ptr, unsigned int program, int location, int count, float value);
void QOpenGLExtraFunctions_GlProgramUniform1i(void* ptr, unsigned int program, int location, int v0);
void QOpenGLExtraFunctions_GlProgramUniform1iv(void* ptr, unsigned int program, int location, int count, int value);
void QOpenGLExtraFunctions_GlProgramUniform1ui(void* ptr, unsigned int program, int location, unsigned int v0);
void QOpenGLExtraFunctions_GlProgramUniform1uiv(void* ptr, unsigned int program, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlProgramUniform2f(void* ptr, unsigned int program, int location, float v0, float v1);
void QOpenGLExtraFunctions_GlProgramUniform2fv(void* ptr, unsigned int program, int location, int count, float value);
void QOpenGLExtraFunctions_GlProgramUniform2i(void* ptr, unsigned int program, int location, int v0, int v1);
void QOpenGLExtraFunctions_GlProgramUniform2iv(void* ptr, unsigned int program, int location, int count, int value);
void QOpenGLExtraFunctions_GlProgramUniform2ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1);
void QOpenGLExtraFunctions_GlProgramUniform2uiv(void* ptr, unsigned int program, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlProgramUniform3f(void* ptr, unsigned int program, int location, float v0, float v1, float v2);
void QOpenGLExtraFunctions_GlProgramUniform3fv(void* ptr, unsigned int program, int location, int count, float value);
void QOpenGLExtraFunctions_GlProgramUniform3i(void* ptr, unsigned int program, int location, int v0, int v1, int v2);
void QOpenGLExtraFunctions_GlProgramUniform3iv(void* ptr, unsigned int program, int location, int count, int value);
void QOpenGLExtraFunctions_GlProgramUniform3ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1, unsigned int v2);
void QOpenGLExtraFunctions_GlProgramUniform3uiv(void* ptr, unsigned int program, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlProgramUniform4f(void* ptr, unsigned int program, int location, float v0, float v1, float v2, float v3);
void QOpenGLExtraFunctions_GlProgramUniform4fv(void* ptr, unsigned int program, int location, int count, float value);
void QOpenGLExtraFunctions_GlProgramUniform4i(void* ptr, unsigned int program, int location, int v0, int v1, int v2, int v3);
void QOpenGLExtraFunctions_GlProgramUniform4iv(void* ptr, unsigned int program, int location, int count, int value);
void QOpenGLExtraFunctions_GlProgramUniform4ui(void* ptr, unsigned int program, int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3);
void QOpenGLExtraFunctions_GlProgramUniform4uiv(void* ptr, unsigned int program, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix2x3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix2x4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix3x2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix3x4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix4fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix4x2fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlProgramUniformMatrix4x3fv(void* ptr, unsigned int program, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlReadBuffer(void* ptr, unsigned int src);
void QOpenGLExtraFunctions_GlReadnPixels(void* ptr, int x, int y, int width, int height, unsigned int format, unsigned int ty, int bufSize, void* data);
void QOpenGLExtraFunctions_GlRenderbufferStorageMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height);
void QOpenGLExtraFunctions_GlResumeTransformFeedback(void* ptr);
void QOpenGLExtraFunctions_GlSampleMaski(void* ptr, unsigned int maskNumber, unsigned int mask);
void QOpenGLExtraFunctions_GlSamplerParameterIiv(void* ptr, unsigned int sampler, unsigned int pname, int param);
void QOpenGLExtraFunctions_GlSamplerParameterIuiv(void* ptr, unsigned int sampler, unsigned int pname, unsigned int param);
void QOpenGLExtraFunctions_GlSamplerParameterf(void* ptr, unsigned int sampler, unsigned int pname, float param);
void QOpenGLExtraFunctions_GlSamplerParameterfv(void* ptr, unsigned int sampler, unsigned int pname, float param);
void QOpenGLExtraFunctions_GlSamplerParameteri(void* ptr, unsigned int sampler, unsigned int pname, int param);
void QOpenGLExtraFunctions_GlSamplerParameteriv(void* ptr, unsigned int sampler, unsigned int pname, int param);
void QOpenGLExtraFunctions_GlTexBuffer(void* ptr, unsigned int target, unsigned int internalformat, unsigned int buffer);
void QOpenGLExtraFunctions_GlTexImage3D(void* ptr, unsigned int target, int level, int internalformat, int width, int height, int depth, int border, unsigned int format, unsigned int ty, void* pixels);
void QOpenGLExtraFunctions_GlTexParameterIiv(void* ptr, unsigned int target, unsigned int pname, int params);
void QOpenGLExtraFunctions_GlTexParameterIuiv(void* ptr, unsigned int target, unsigned int pname, unsigned int params);
void QOpenGLExtraFunctions_GlTexStorage2D(void* ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height);
void QOpenGLExtraFunctions_GlTexStorage2DMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, char fixedsamplelocations);
void QOpenGLExtraFunctions_GlTexStorage3D(void* ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height, int depth);
void QOpenGLExtraFunctions_GlTexStorage3DMultisample(void* ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, int depth, char fixedsamplelocations);
void QOpenGLExtraFunctions_GlTexSubImage3D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int ty, void* pixels);
void QOpenGLExtraFunctions_GlUniform1ui(void* ptr, int location, unsigned int v0);
void QOpenGLExtraFunctions_GlUniform1uiv(void* ptr, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlUniform2ui(void* ptr, int location, unsigned int v0, unsigned int v1);
void QOpenGLExtraFunctions_GlUniform2uiv(void* ptr, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlUniform3ui(void* ptr, int location, unsigned int v0, unsigned int v1, unsigned int v2);
void QOpenGLExtraFunctions_GlUniform3uiv(void* ptr, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlUniform4ui(void* ptr, int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3);
void QOpenGLExtraFunctions_GlUniform4uiv(void* ptr, int location, int count, unsigned int value);
void QOpenGLExtraFunctions_GlUniformBlockBinding(void* ptr, unsigned int program, unsigned int uniformBlockIndex, unsigned int uniformBlockBinding);
void QOpenGLExtraFunctions_GlUniformMatrix2x3fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlUniformMatrix2x4fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlUniformMatrix3x2fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlUniformMatrix3x4fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlUniformMatrix4x2fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLExtraFunctions_GlUniformMatrix4x3fv(void* ptr, int location, int count, char transpose, float value);
char QOpenGLExtraFunctions_GlUnmapBuffer(void* ptr, unsigned int target);
void QOpenGLExtraFunctions_GlUseProgramStages(void* ptr, unsigned int pipeline, unsigned int stages, unsigned int program);
void QOpenGLExtraFunctions_GlValidateProgramPipeline(void* ptr, unsigned int pipeline);
void QOpenGLExtraFunctions_GlVertexAttribBinding(void* ptr, unsigned int attribindex, unsigned int bindingindex);
void QOpenGLExtraFunctions_GlVertexAttribDivisor(void* ptr, unsigned int index, unsigned int divisor);
void QOpenGLExtraFunctions_GlVertexAttribFormat(void* ptr, unsigned int attribindex, int size, unsigned int ty, char normalized, unsigned int relativeoffset);
void QOpenGLExtraFunctions_GlVertexAttribI4i(void* ptr, unsigned int index, int x, int y, int z, int w);
void QOpenGLExtraFunctions_GlVertexAttribI4iv(void* ptr, unsigned int index, int v);
void QOpenGLExtraFunctions_GlVertexAttribI4ui(void* ptr, unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w);
void QOpenGLExtraFunctions_GlVertexAttribI4uiv(void* ptr, unsigned int index, unsigned int v);
void QOpenGLExtraFunctions_GlVertexAttribIFormat(void* ptr, unsigned int attribindex, int size, unsigned int ty, unsigned int relativeoffset);
void QOpenGLExtraFunctions_GlVertexAttribIPointer(void* ptr, unsigned int index, int size, unsigned int ty, int stride, void* pointer);
void QOpenGLExtraFunctions_GlVertexBindingDivisor(void* ptr, unsigned int bindingindex, unsigned int divisor);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject(void* size, unsigned int target);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject2(int width, int height, unsigned int target);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject3(void* size, long long attachment, unsigned int target, unsigned int internalFormat);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject4(int width, int height, long long attachment, unsigned int target, unsigned int internalFormat);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject5(void* size, void* format);
void* QOpenGLFramebufferObject_NewQOpenGLFramebufferObject6(int width, int height, void* format);
void QOpenGLFramebufferObject_AddColorAttachment(void* ptr, void* size, unsigned int internalFormat);
void QOpenGLFramebufferObject_AddColorAttachment2(void* ptr, int width, int height, unsigned int internalFormat);
long long QOpenGLFramebufferObject_Attachment(void* ptr);
char QOpenGLFramebufferObject_Bind(void* ptr);
char QOpenGLFramebufferObject_QOpenGLFramebufferObject_BindDefault();
void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex, long long restorePolicy);
void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer2(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex);
void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer3(void* target, void* targetRect, void* source, void* sourceRect, unsigned int buffers, unsigned int filter);
void QOpenGLFramebufferObject_QOpenGLFramebufferObject_BlitFramebuffer4(void* target, void* source, unsigned int buffers, unsigned int filter);
void* QOpenGLFramebufferObject_Format(void* ptr);
unsigned int QOpenGLFramebufferObject_Handle(void* ptr);
char QOpenGLFramebufferObject_QOpenGLFramebufferObject_HasOpenGLFramebufferBlit();
char QOpenGLFramebufferObject_QOpenGLFramebufferObject_HasOpenGLFramebufferObjects();
int QOpenGLFramebufferObject_Height(void* ptr);
char QOpenGLFramebufferObject_IsBound(void* ptr);
char QOpenGLFramebufferObject_IsValid(void* ptr);
char QOpenGLFramebufferObject_Release(void* ptr);
void QOpenGLFramebufferObject_SetAttachment(void* ptr, long long attachment);
void* QOpenGLFramebufferObject_Size(void* ptr);
struct QtGui_PackedList QOpenGLFramebufferObject_Sizes(void* ptr);
unsigned int QOpenGLFramebufferObject_TakeTexture(void* ptr);
unsigned int QOpenGLFramebufferObject_TakeTexture2(void* ptr, int colorAttachmentIndex);
unsigned int QOpenGLFramebufferObject_Texture(void* ptr);
struct QtGui_PackedList QOpenGLFramebufferObject_Textures(void* ptr);
void* QOpenGLFramebufferObject_ToImage(void* ptr, char flipped);
void* QOpenGLFramebufferObject_ToImage2(void* ptr);
void* QOpenGLFramebufferObject_ToImage3(void* ptr, char flipped, int colorAttachmentIndex);
int QOpenGLFramebufferObject_Width(void* ptr);
void QOpenGLFramebufferObject_DestroyQOpenGLFramebufferObject(void* ptr);
void QOpenGLFramebufferObject_DestroyQOpenGLFramebufferObjectDefault(void* ptr);
void* QOpenGLFramebufferObject___sizes_atList(void* ptr, int i);
void QOpenGLFramebufferObject___sizes_setList(void* ptr, void* i);
void* QOpenGLFramebufferObject___sizes_newList(void* ptr);
unsigned int QOpenGLFramebufferObject___textures_atList(void* ptr, int i);
void QOpenGLFramebufferObject___textures_setList(void* ptr, unsigned int i);
void* QOpenGLFramebufferObject___textures_newList(void* ptr);
void* QOpenGLFramebufferObjectFormat_NewQOpenGLFramebufferObjectFormat();
void* QOpenGLFramebufferObjectFormat_NewQOpenGLFramebufferObjectFormat2(void* other);
long long QOpenGLFramebufferObjectFormat_Attachment(void* ptr);
unsigned int QOpenGLFramebufferObjectFormat_InternalTextureFormat(void* ptr);
char QOpenGLFramebufferObjectFormat_Mipmap(void* ptr);
int QOpenGLFramebufferObjectFormat_Samples(void* ptr);
void QOpenGLFramebufferObjectFormat_SetAttachment(void* ptr, long long attachment);
void QOpenGLFramebufferObjectFormat_SetInternalTextureFormat(void* ptr, unsigned int internalTextureFormat);
void QOpenGLFramebufferObjectFormat_SetMipmap(void* ptr, char enabled);
void QOpenGLFramebufferObjectFormat_SetSamples(void* ptr, int samples);
void QOpenGLFramebufferObjectFormat_SetTextureTarget(void* ptr, unsigned int target);
unsigned int QOpenGLFramebufferObjectFormat_TextureTarget(void* ptr);
void QOpenGLFramebufferObjectFormat_DestroyQOpenGLFramebufferObjectFormat(void* ptr);
void* QOpenGLFunctions_NewQOpenGLFunctions();
void* QOpenGLFunctions_NewQOpenGLFunctions2(void* context);
void QOpenGLFunctions_GlActiveTexture(void* ptr, unsigned int texture);
void QOpenGLFunctions_GlAttachShader(void* ptr, unsigned int program, unsigned int shader);
void QOpenGLFunctions_GlBindAttribLocation(void* ptr, unsigned int program, unsigned int index, char* name);
void QOpenGLFunctions_GlBindBuffer(void* ptr, unsigned int target, unsigned int buffer);
void QOpenGLFunctions_GlBindFramebuffer(void* ptr, unsigned int target, unsigned int framebuffer);
void QOpenGLFunctions_GlBindRenderbuffer(void* ptr, unsigned int target, unsigned int renderbuffer);
void QOpenGLFunctions_GlBindTexture(void* ptr, unsigned int target, unsigned int texture);
void QOpenGLFunctions_GlBlendColor(void* ptr, float red, float green, float blue, float alpha);
void QOpenGLFunctions_GlBlendEquation(void* ptr, unsigned int mode);
void QOpenGLFunctions_GlBlendEquationSeparate(void* ptr, unsigned int modeRGB, unsigned int modeAlpha);
void QOpenGLFunctions_GlBlendFunc(void* ptr, unsigned int sfactor, unsigned int dfactor);
void QOpenGLFunctions_GlBlendFuncSeparate(void* ptr, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha);
unsigned int QOpenGLFunctions_GlCheckFramebufferStatus(void* ptr, unsigned int target);
void QOpenGLFunctions_GlClear(void* ptr, unsigned int mask);
void QOpenGLFunctions_GlClearColor(void* ptr, float red, float green, float blue, float alpha);
void QOpenGLFunctions_GlClearDepthf(void* ptr, float depth);
void QOpenGLFunctions_GlClearStencil(void* ptr, int s);
void QOpenGLFunctions_GlColorMask(void* ptr, char red, char green, char blue, char alpha);
void QOpenGLFunctions_GlCompileShader(void* ptr, unsigned int shader);
void QOpenGLFunctions_GlCompressedTexImage2D(void* ptr, unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, void* data);
void QOpenGLFunctions_GlCompressedTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, void* data);
void QOpenGLFunctions_GlCopyTexImage2D(void* ptr, unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border);
void QOpenGLFunctions_GlCopyTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
unsigned int QOpenGLFunctions_GlCreateProgram(void* ptr);
unsigned int QOpenGLFunctions_GlCreateShader(void* ptr, unsigned int ty);
void QOpenGLFunctions_GlCullFace(void* ptr, unsigned int mode);
void QOpenGLFunctions_GlDeleteBuffers(void* ptr, int n, unsigned int buffers);
void QOpenGLFunctions_GlDeleteFramebuffers(void* ptr, int n, unsigned int framebuffers);
void QOpenGLFunctions_GlDeleteProgram(void* ptr, unsigned int program);
void QOpenGLFunctions_GlDeleteRenderbuffers(void* ptr, int n, unsigned int renderbuffers);
void QOpenGLFunctions_GlDeleteShader(void* ptr, unsigned int shader);
void QOpenGLFunctions_GlDeleteTextures(void* ptr, int n, unsigned int textures);
void QOpenGLFunctions_GlDepthFunc(void* ptr, unsigned int fu);
void QOpenGLFunctions_GlDepthMask(void* ptr, char flag);
void QOpenGLFunctions_GlDepthRangef(void* ptr, float zNear, float zFar);
void QOpenGLFunctions_GlDetachShader(void* ptr, unsigned int program, unsigned int shader);
void QOpenGLFunctions_GlDisable(void* ptr, unsigned int cap);
void QOpenGLFunctions_GlDisableVertexAttribArray(void* ptr, unsigned int index);
void QOpenGLFunctions_GlDrawArrays(void* ptr, unsigned int mode, int first, int count);
void QOpenGLFunctions_GlDrawElements(void* ptr, unsigned int mode, int count, unsigned int ty, void* indices);
void QOpenGLFunctions_GlEnable(void* ptr, unsigned int cap);
void QOpenGLFunctions_GlEnableVertexAttribArray(void* ptr, unsigned int index);
void QOpenGLFunctions_GlFinish(void* ptr);
void QOpenGLFunctions_GlFlush(void* ptr);
void QOpenGLFunctions_GlFramebufferRenderbuffer(void* ptr, unsigned int target, unsigned int attachment, unsigned int renderbuffertarget, unsigned int renderbuffer);
void QOpenGLFunctions_GlFramebufferTexture2D(void* ptr, unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
void QOpenGLFunctions_GlFrontFace(void* ptr, unsigned int mode);
void QOpenGLFunctions_GlGenBuffers(void* ptr, int n, unsigned int buffers);
void QOpenGLFunctions_GlGenFramebuffers(void* ptr, int n, unsigned int framebuffers);
void QOpenGLFunctions_GlGenRenderbuffers(void* ptr, int n, unsigned int renderbuffers);
void QOpenGLFunctions_GlGenTextures(void* ptr, int n, unsigned int textures);
void QOpenGLFunctions_GlGenerateMipmap(void* ptr, unsigned int target);
void QOpenGLFunctions_GlGetActiveAttrib(void* ptr, unsigned int program, unsigned int index, int bufsize, int length, int size, unsigned int ty, char* name);
void QOpenGLFunctions_GlGetActiveUniform(void* ptr, unsigned int program, unsigned int index, int bufsize, int length, int size, unsigned int ty, char* name);
void QOpenGLFunctions_GlGetAttachedShaders(void* ptr, unsigned int program, int maxcount, int count, unsigned int shaders);
int QOpenGLFunctions_GlGetAttribLocation(void* ptr, unsigned int program, char* name);
void QOpenGLFunctions_GlGetBooleanv(void* ptr, unsigned int pname, char* params);
void QOpenGLFunctions_GlGetBufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params);
unsigned int QOpenGLFunctions_GlGetError(void* ptr);
void QOpenGLFunctions_GlGetFloatv(void* ptr, unsigned int pname, float params);
void QOpenGLFunctions_GlGetFramebufferAttachmentParameteriv(void* ptr, unsigned int target, unsigned int attachment, unsigned int pname, int params);
void QOpenGLFunctions_GlGetIntegerv(void* ptr, unsigned int pname, int params);
void QOpenGLFunctions_GlGetProgramInfoLog(void* ptr, unsigned int program, int bufsize, int length, char* infolog);
void QOpenGLFunctions_GlGetProgramiv(void* ptr, unsigned int program, unsigned int pname, int params);
void QOpenGLFunctions_GlGetRenderbufferParameteriv(void* ptr, unsigned int target, unsigned int pname, int params);
void QOpenGLFunctions_GlGetShaderInfoLog(void* ptr, unsigned int shader, int bufsize, int length, char* infolog);
void QOpenGLFunctions_GlGetShaderPrecisionFormat(void* ptr, unsigned int shadertype, unsigned int precisiontype, int ran, int precision);
void QOpenGLFunctions_GlGetShaderSource(void* ptr, unsigned int shader, int bufsize, int length, char* source);
void QOpenGLFunctions_GlGetShaderiv(void* ptr, unsigned int shader, unsigned int pname, int params);
struct QtGui_PackedString QOpenGLFunctions_GlGetString(void* ptr, unsigned int name);
void QOpenGLFunctions_GlGetTexParameterfv(void* ptr, unsigned int target, unsigned int pname, float params);
void QOpenGLFunctions_GlGetTexParameteriv(void* ptr, unsigned int target, unsigned int pname, int params);
int QOpenGLFunctions_GlGetUniformLocation(void* ptr, unsigned int program, char* name);
void QOpenGLFunctions_GlGetUniformfv(void* ptr, unsigned int program, int location, float params);
void QOpenGLFunctions_GlGetUniformiv(void* ptr, unsigned int program, int location, int params);
void QOpenGLFunctions_GlGetVertexAttribPointerv(void* ptr, unsigned int index, unsigned int pname, void* pointer);
void QOpenGLFunctions_GlGetVertexAttribfv(void* ptr, unsigned int index, unsigned int pname, float params);
void QOpenGLFunctions_GlGetVertexAttribiv(void* ptr, unsigned int index, unsigned int pname, int params);
void QOpenGLFunctions_GlHint(void* ptr, unsigned int target, unsigned int mode);
char QOpenGLFunctions_GlIsBuffer(void* ptr, unsigned int buffer);
char QOpenGLFunctions_GlIsEnabled(void* ptr, unsigned int cap);
char QOpenGLFunctions_GlIsFramebuffer(void* ptr, unsigned int framebuffer);
char QOpenGLFunctions_GlIsProgram(void* ptr, unsigned int program);
char QOpenGLFunctions_GlIsRenderbuffer(void* ptr, unsigned int renderbuffer);
char QOpenGLFunctions_GlIsShader(void* ptr, unsigned int shader);
char QOpenGLFunctions_GlIsTexture(void* ptr, unsigned int texture);
void QOpenGLFunctions_GlLineWidth(void* ptr, float width);
void QOpenGLFunctions_GlLinkProgram(void* ptr, unsigned int program);
void QOpenGLFunctions_GlPixelStorei(void* ptr, unsigned int pname, int param);
void QOpenGLFunctions_GlPolygonOffset(void* ptr, float factor, float units);
void QOpenGLFunctions_GlReadPixels(void* ptr, int x, int y, int width, int height, unsigned int format, unsigned int ty, void* pixels);
void QOpenGLFunctions_GlReleaseShaderCompiler(void* ptr);
void QOpenGLFunctions_GlRenderbufferStorage(void* ptr, unsigned int target, unsigned int internalformat, int width, int height);
void QOpenGLFunctions_GlSampleCoverage(void* ptr, float value, char invert);
void QOpenGLFunctions_GlScissor(void* ptr, int x, int y, int width, int height);
void QOpenGLFunctions_GlShaderBinary(void* ptr, int n, unsigned int shaders, unsigned int binaryformat, void* binary, int length);
void QOpenGLFunctions_GlStencilFunc(void* ptr, unsigned int fu, int ref, unsigned int mask);
void QOpenGLFunctions_GlStencilFuncSeparate(void* ptr, unsigned int face, unsigned int fu, int ref, unsigned int mask);
void QOpenGLFunctions_GlStencilMask(void* ptr, unsigned int mask);
void QOpenGLFunctions_GlStencilMaskSeparate(void* ptr, unsigned int face, unsigned int mask);
void QOpenGLFunctions_GlStencilOp(void* ptr, unsigned int fail, unsigned int zfail, unsigned int zpass);
void QOpenGLFunctions_GlStencilOpSeparate(void* ptr, unsigned int face, unsigned int fail, unsigned int zfail, unsigned int zpass);
void QOpenGLFunctions_GlTexImage2D(void* ptr, unsigned int target, int level, int internalformat, int width, int height, int border, unsigned int format, unsigned int ty, void* pixels);
void QOpenGLFunctions_GlTexParameterf(void* ptr, unsigned int target, unsigned int pname, float param);
void QOpenGLFunctions_GlTexParameterfv(void* ptr, unsigned int target, unsigned int pname, float params);
void QOpenGLFunctions_GlTexParameteri(void* ptr, unsigned int target, unsigned int pname, int param);
void QOpenGLFunctions_GlTexParameteriv(void* ptr, unsigned int target, unsigned int pname, int params);
void QOpenGLFunctions_GlTexSubImage2D(void* ptr, unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int ty, void* pixels);
void QOpenGLFunctions_GlUniform1f(void* ptr, int location, float x);
void QOpenGLFunctions_GlUniform1fv(void* ptr, int location, int count, float v);
void QOpenGLFunctions_GlUniform1i(void* ptr, int location, int x);
void QOpenGLFunctions_GlUniform1iv(void* ptr, int location, int count, int v);
void QOpenGLFunctions_GlUniform2f(void* ptr, int location, float x, float y);
void QOpenGLFunctions_GlUniform2fv(void* ptr, int location, int count, float v);
void QOpenGLFunctions_GlUniform2i(void* ptr, int location, int x, int y);
void QOpenGLFunctions_GlUniform2iv(void* ptr, int location, int count, int v);
void QOpenGLFunctions_GlUniform3f(void* ptr, int location, float x, float y, float z);
void QOpenGLFunctions_GlUniform3fv(void* ptr, int location, int count, float v);
void QOpenGLFunctions_GlUniform3i(void* ptr, int location, int x, int y, int z);
void QOpenGLFunctions_GlUniform3iv(void* ptr, int location, int count, int v);
void QOpenGLFunctions_GlUniform4f(void* ptr, int location, float x, float y, float z, float w);
void QOpenGLFunctions_GlUniform4fv(void* ptr, int location, int count, float v);
void QOpenGLFunctions_GlUniform4i(void* ptr, int location, int x, int y, int z, int w);
void QOpenGLFunctions_GlUniform4iv(void* ptr, int location, int count, int v);
void QOpenGLFunctions_GlUniformMatrix2fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLFunctions_GlUniformMatrix3fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLFunctions_GlUniformMatrix4fv(void* ptr, int location, int count, char transpose, float value);
void QOpenGLFunctions_GlUseProgram(void* ptr, unsigned int program);
void QOpenGLFunctions_GlValidateProgram(void* ptr, unsigned int program);
void QOpenGLFunctions_GlVertexAttrib1f(void* ptr, unsigned int indx, float x);
void QOpenGLFunctions_GlVertexAttrib1fv(void* ptr, unsigned int indx, float values);
void QOpenGLFunctions_GlVertexAttrib2f(void* ptr, unsigned int indx, float x, float y);
void QOpenGLFunctions_GlVertexAttrib2fv(void* ptr, unsigned int indx, float values);
void QOpenGLFunctions_GlVertexAttrib3f(void* ptr, unsigned int indx, float x, float y, float z);
void QOpenGLFunctions_GlVertexAttrib3fv(void* ptr, unsigned int indx, float values);
void QOpenGLFunctions_GlVertexAttrib4f(void* ptr, unsigned int indx, float x, float y, float z, float w);
void QOpenGLFunctions_GlVertexAttrib4fv(void* ptr, unsigned int indx, float values);
void QOpenGLFunctions_GlVertexAttribPointer(void* ptr, unsigned int indx, int size, unsigned int ty, char normalized, int stride, void* p);
void QOpenGLFunctions_GlViewport(void* ptr, int x, int y, int width, int height);
char QOpenGLFunctions_HasOpenGLFeature(void* ptr, long long feature);
void QOpenGLFunctions_InitializeOpenGLFunctions(void* ptr);
long long QOpenGLFunctions_OpenGLFeatures(void* ptr);
void QOpenGLFunctions_DestroyQOpenGLFunctions(void* ptr);
void* QOpenGLPaintDevice_NewQOpenGLPaintDevice();
void* QOpenGLPaintDevice_NewQOpenGLPaintDevice2(void* size);
void* QOpenGLPaintDevice_NewQOpenGLPaintDevice3(int width, int height);
void* QOpenGLPaintDevice_Context(void* ptr);
double QOpenGLPaintDevice_DotsPerMeterX(void* ptr);
double QOpenGLPaintDevice_DotsPerMeterY(void* ptr);
void QOpenGLPaintDevice_EnsureActiveTarget(void* ptr);
void QOpenGLPaintDevice_EnsureActiveTargetDefault(void* ptr);
void* QOpenGLPaintDevice_PaintEngine(void* ptr);
void* QOpenGLPaintDevice_PaintEngineDefault(void* ptr);
char QOpenGLPaintDevice_PaintFlipped(void* ptr);
void QOpenGLPaintDevice_SetDevicePixelRatio(void* ptr, double devicePixelRatio);
void QOpenGLPaintDevice_SetDotsPerMeterX(void* ptr, double dpmx);
void QOpenGLPaintDevice_SetDotsPerMeterY(void* ptr, double dpmy);
void QOpenGLPaintDevice_SetPaintFlipped(void* ptr, char flipped);
void QOpenGLPaintDevice_SetSize(void* ptr, void* size);
void* QOpenGLPaintDevice_Size(void* ptr);
void QOpenGLPaintDevice_DestroyQOpenGLPaintDevice(void* ptr);
void QOpenGLPaintDevice_DestroyQOpenGLPaintDeviceDefault(void* ptr);
void* QOpenGLPixelTransferOptions_NewQOpenGLPixelTransferOptions();
int QOpenGLPixelTransferOptions_Alignment(void* ptr);
int QOpenGLPixelTransferOptions_ImageHeight(void* ptr);
char QOpenGLPixelTransferOptions_IsLeastSignificantBitFirst(void* ptr);
char QOpenGLPixelTransferOptions_IsSwapBytesEnabled(void* ptr);
int QOpenGLPixelTransferOptions_RowLength(void* ptr);
void QOpenGLPixelTransferOptions_SetAlignment(void* ptr, int alignment);
void QOpenGLPixelTransferOptions_SetImageHeight(void* ptr, int imageHeight);
void QOpenGLPixelTransferOptions_SetLeastSignificantByteFirst(void* ptr, char lsbFirst);
void QOpenGLPixelTransferOptions_SetRowLength(void* ptr, int rowLength);
void QOpenGLPixelTransferOptions_SetSkipImages(void* ptr, int skipImages);
void QOpenGLPixelTransferOptions_SetSkipPixels(void* ptr, int skipPixels);
void QOpenGLPixelTransferOptions_SetSkipRows(void* ptr, int skipRows);
void QOpenGLPixelTransferOptions_SetSwapBytesEnabled(void* ptr, char swapBytes);
int QOpenGLPixelTransferOptions_SkipImages(void* ptr);
int QOpenGLPixelTransferOptions_SkipPixels(void* ptr);
int QOpenGLPixelTransferOptions_SkipRows(void* ptr);
void QOpenGLPixelTransferOptions_DestroyQOpenGLPixelTransferOptions(void* ptr);
void* QOpenGLShader_NewQOpenGLShader(long long ty, void* parent);
char QOpenGLShader_CompileSourceCode(void* ptr, char* source);
char QOpenGLShader_CompileSourceCode2(void* ptr, void* source);
char QOpenGLShader_CompileSourceCode3(void* ptr, struct QtGui_PackedString source);
char QOpenGLShader_CompileSourceFile(void* ptr, struct QtGui_PackedString fileName);
char QOpenGLShader_QOpenGLShader_HasOpenGLShaders(long long ty, void* context);
char QOpenGLShader_IsCompiled(void* ptr);
struct QtGui_PackedString QOpenGLShader_Log(void* ptr);
unsigned int QOpenGLShader_ShaderId(void* ptr);
long long QOpenGLShader_ShaderType(void* ptr);
void* QOpenGLShader_SourceCode(void* ptr);
void QOpenGLShader_DestroyQOpenGLShader(void* ptr);
void QOpenGLShader_DestroyQOpenGLShaderDefault(void* ptr);
void* QOpenGLShader___children_atList(void* ptr, int i);
void QOpenGLShader___children_setList(void* ptr, void* i);
void* QOpenGLShader___children_newList(void* ptr);
void* QOpenGLShader___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLShader___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLShader___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLShader___findChildren_atList(void* ptr, int i);
void QOpenGLShader___findChildren_setList(void* ptr, void* i);
void* QOpenGLShader___findChildren_newList(void* ptr);
void* QOpenGLShader___findChildren_atList3(void* ptr, int i);
void QOpenGLShader___findChildren_setList3(void* ptr, void* i);
void* QOpenGLShader___findChildren_newList3(void* ptr);
void QOpenGLShader_ChildEventDefault(void* ptr, void* event);
void QOpenGLShader_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLShader_CustomEventDefault(void* ptr, void* event);
void QOpenGLShader_DeleteLaterDefault(void* ptr);
void QOpenGLShader_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLShader_EventDefault(void* ptr, void* e);
char QOpenGLShader_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLShader_MetaObjectDefault(void* ptr);
void QOpenGLShader_TimerEventDefault(void* ptr, void* event);
void* QOpenGLShaderProgram_NewQOpenGLShaderProgram(void* parent);
char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode(void* ptr, long long ty, char* source);
char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode2(void* ptr, long long ty, void* source);
char QOpenGLShaderProgram_AddCacheableShaderFromSourceCode3(void* ptr, long long ty, struct QtGui_PackedString source);
char QOpenGLShaderProgram_AddCacheableShaderFromSourceFile(void* ptr, long long ty, struct QtGui_PackedString fileName);
char QOpenGLShaderProgram_AddShader(void* ptr, void* shader);
char QOpenGLShaderProgram_AddShaderFromSourceCode(void* ptr, long long ty, char* source);
char QOpenGLShaderProgram_AddShaderFromSourceCode2(void* ptr, long long ty, void* source);
char QOpenGLShaderProgram_AddShaderFromSourceCode3(void* ptr, long long ty, struct QtGui_PackedString source);
char QOpenGLShaderProgram_AddShaderFromSourceFile(void* ptr, long long ty, struct QtGui_PackedString fileName);
int QOpenGLShaderProgram_AttributeLocation(void* ptr, char* name);
int QOpenGLShaderProgram_AttributeLocation2(void* ptr, void* name);
int QOpenGLShaderProgram_AttributeLocation3(void* ptr, struct QtGui_PackedString name);
char QOpenGLShaderProgram_Bind(void* ptr);
void QOpenGLShaderProgram_BindAttributeLocation(void* ptr, char* name, int location);
void QOpenGLShaderProgram_BindAttributeLocation2(void* ptr, void* name, int location);
void QOpenGLShaderProgram_BindAttributeLocation3(void* ptr, struct QtGui_PackedString name, int location);
char QOpenGLShaderProgram_Create(void* ptr);
struct QtGui_PackedList QOpenGLShaderProgram_DefaultInnerTessellationLevels(void* ptr);
struct QtGui_PackedList QOpenGLShaderProgram_DefaultOuterTessellationLevels(void* ptr);
void QOpenGLShaderProgram_DisableAttributeArray(void* ptr, int location);
void QOpenGLShaderProgram_DisableAttributeArray2(void* ptr, char* name);
void QOpenGLShaderProgram_EnableAttributeArray(void* ptr, int location);
void QOpenGLShaderProgram_EnableAttributeArray2(void* ptr, char* name);
char QOpenGLShaderProgram_QOpenGLShaderProgram_HasOpenGLShaderPrograms(void* context);
char QOpenGLShaderProgram_IsLinked(void* ptr);
char QOpenGLShaderProgram_Link(void* ptr);
char QOpenGLShaderProgram_LinkDefault(void* ptr);
struct QtGui_PackedString QOpenGLShaderProgram_Log(void* ptr);
int QOpenGLShaderProgram_MaxGeometryOutputVertices(void* ptr);
int QOpenGLShaderProgram_PatchVertexCount(void* ptr);
unsigned int QOpenGLShaderProgram_ProgramId(void* ptr);
void QOpenGLShaderProgram_Release(void* ptr);
void QOpenGLShaderProgram_RemoveAllShaders(void* ptr);
void QOpenGLShaderProgram_RemoveShader(void* ptr, void* shader);
void QOpenGLShaderProgram_SetAttributeArray(void* ptr, int location, float values, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeArray2(void* ptr, int location, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray3(void* ptr, int location, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray4(void* ptr, int location, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray5(void* ptr, int location, unsigned int ty, void* values, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeArray6(void* ptr, char* name, float values, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeArray7(void* ptr, char* name, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray8(void* ptr, char* name, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray9(void* ptr, char* name, void* values, int stride);
void QOpenGLShaderProgram_SetAttributeArray10(void* ptr, char* name, unsigned int ty, void* values, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeBuffer(void* ptr, int location, unsigned int ty, int offset, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeBuffer2(void* ptr, char* name, unsigned int ty, int offset, int tupleSize, int stride);
void QOpenGLShaderProgram_SetAttributeValue(void* ptr, int location, float value);
void QOpenGLShaderProgram_SetAttributeValue2(void* ptr, int location, float x, float y);
void QOpenGLShaderProgram_SetAttributeValue3(void* ptr, int location, float x, float y, float z);
void QOpenGLShaderProgram_SetAttributeValue4(void* ptr, int location, float x, float y, float z, float w);
void QOpenGLShaderProgram_SetAttributeValue5(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetAttributeValue6(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetAttributeValue7(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetAttributeValue8(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetAttributeValue9(void* ptr, int location, float values, int columns, int rows);
void QOpenGLShaderProgram_SetAttributeValue10(void* ptr, char* name, float value);
void QOpenGLShaderProgram_SetAttributeValue11(void* ptr, char* name, float x, float y);
void QOpenGLShaderProgram_SetAttributeValue12(void* ptr, char* name, float x, float y, float z);
void QOpenGLShaderProgram_SetAttributeValue13(void* ptr, char* name, float x, float y, float z, float w);
void QOpenGLShaderProgram_SetAttributeValue14(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetAttributeValue15(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetAttributeValue16(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetAttributeValue17(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetAttributeValue18(void* ptr, char* name, float values, int columns, int rows);
void QOpenGLShaderProgram_SetDefaultInnerTessellationLevels(void* ptr, void* levels);
void QOpenGLShaderProgram_SetDefaultOuterTessellationLevels(void* ptr, void* levels);
void QOpenGLShaderProgram_SetPatchVertexCount(void* ptr, int count);
void QOpenGLShaderProgram_SetUniformValue(void* ptr, int location, float value);
void QOpenGLShaderProgram_SetUniformValue2(void* ptr, int location, int value);
void QOpenGLShaderProgram_SetUniformValue3(void* ptr, int location, unsigned int value);
void QOpenGLShaderProgram_SetUniformValue4(void* ptr, int location, float x, float y);
void QOpenGLShaderProgram_SetUniformValue5(void* ptr, int location, float x, float y, float z);
void QOpenGLShaderProgram_SetUniformValue6(void* ptr, int location, float x, float y, float z, float w);
void QOpenGLShaderProgram_SetUniformValue7(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetUniformValue8(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetUniformValue9(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetUniformValue10(void* ptr, int location, void* color);
void QOpenGLShaderProgram_SetUniformValue11(void* ptr, int location, void* point);
void QOpenGLShaderProgram_SetUniformValue12(void* ptr, int location, void* point);
void QOpenGLShaderProgram_SetUniformValue13(void* ptr, int location, void* size);
void QOpenGLShaderProgram_SetUniformValue14(void* ptr, int location, void* size);
void QOpenGLShaderProgram_SetUniformValue23(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetUniformValue27(void* ptr, int location, void* value);
void QOpenGLShaderProgram_SetUniformValue28(void* ptr, char* name, float value);
void QOpenGLShaderProgram_SetUniformValue29(void* ptr, char* name, int value);
void QOpenGLShaderProgram_SetUniformValue30(void* ptr, char* name, unsigned int value);
void QOpenGLShaderProgram_SetUniformValue31(void* ptr, char* name, float x, float y);
void QOpenGLShaderProgram_SetUniformValue32(void* ptr, char* name, float x, float y, float z);
void QOpenGLShaderProgram_SetUniformValue33(void* ptr, char* name, float x, float y, float z, float w);
void QOpenGLShaderProgram_SetUniformValue34(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetUniformValue35(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetUniformValue36(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetUniformValue37(void* ptr, char* name, void* color);
void QOpenGLShaderProgram_SetUniformValue38(void* ptr, char* name, void* point);
void QOpenGLShaderProgram_SetUniformValue39(void* ptr, char* name, void* point);
void QOpenGLShaderProgram_SetUniformValue40(void* ptr, char* name, void* size);
void QOpenGLShaderProgram_SetUniformValue41(void* ptr, char* name, void* size);
void QOpenGLShaderProgram_SetUniformValue50(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetUniformValue54(void* ptr, char* name, void* value);
void QOpenGLShaderProgram_SetUniformValueArray(void* ptr, int location, float values, int count, int tupleSize);
void QOpenGLShaderProgram_SetUniformValueArray2(void* ptr, int location, int values, int count);
void QOpenGLShaderProgram_SetUniformValueArray3(void* ptr, int location, unsigned int values, int count);
void QOpenGLShaderProgram_SetUniformValueArray4(void* ptr, int location, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray5(void* ptr, int location, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray6(void* ptr, int location, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray15(void* ptr, int location, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray16(void* ptr, char* name, float values, int count, int tupleSize);
void QOpenGLShaderProgram_SetUniformValueArray17(void* ptr, char* name, int values, int count);
void QOpenGLShaderProgram_SetUniformValueArray18(void* ptr, char* name, unsigned int values, int count);
void QOpenGLShaderProgram_SetUniformValueArray19(void* ptr, char* name, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray20(void* ptr, char* name, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray21(void* ptr, char* name, void* values, int count);
void QOpenGLShaderProgram_SetUniformValueArray30(void* ptr, char* name, void* values, int count);
struct QtGui_PackedList QOpenGLShaderProgram_Shaders(void* ptr);
int QOpenGLShaderProgram_UniformLocation(void* ptr, char* name);
int QOpenGLShaderProgram_UniformLocation2(void* ptr, void* name);
int QOpenGLShaderProgram_UniformLocation3(void* ptr, struct QtGui_PackedString name);
void QOpenGLShaderProgram_DestroyQOpenGLShaderProgram(void* ptr);
void QOpenGLShaderProgram_DestroyQOpenGLShaderProgramDefault(void* ptr);
float QOpenGLShaderProgram___defaultInnerTessellationLevels_atList(void* ptr, int i);
void QOpenGLShaderProgram___defaultInnerTessellationLevels_setList(void* ptr, float i);
void* QOpenGLShaderProgram___defaultInnerTessellationLevels_newList(void* ptr);
float QOpenGLShaderProgram___defaultOuterTessellationLevels_atList(void* ptr, int i);
void QOpenGLShaderProgram___defaultOuterTessellationLevels_setList(void* ptr, float i);
void* QOpenGLShaderProgram___defaultOuterTessellationLevels_newList(void* ptr);
float QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_atList(void* ptr, int i);
void QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_setList(void* ptr, float i);
void* QOpenGLShaderProgram___setDefaultInnerTessellationLevels_levels_newList(void* ptr);
float QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_atList(void* ptr, int i);
void QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_setList(void* ptr, float i);
void* QOpenGLShaderProgram___setDefaultOuterTessellationLevels_levels_newList(void* ptr);
void* QOpenGLShaderProgram___shaders_atList(void* ptr, int i);
void QOpenGLShaderProgram___shaders_setList(void* ptr, void* i);
void* QOpenGLShaderProgram___shaders_newList(void* ptr);
void* QOpenGLShaderProgram___children_atList(void* ptr, int i);
void QOpenGLShaderProgram___children_setList(void* ptr, void* i);
void* QOpenGLShaderProgram___children_newList(void* ptr);
void* QOpenGLShaderProgram___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLShaderProgram___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLShaderProgram___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLShaderProgram___findChildren_atList(void* ptr, int i);
void QOpenGLShaderProgram___findChildren_setList(void* ptr, void* i);
void* QOpenGLShaderProgram___findChildren_newList(void* ptr);
void* QOpenGLShaderProgram___findChildren_atList3(void* ptr, int i);
void QOpenGLShaderProgram___findChildren_setList3(void* ptr, void* i);
void* QOpenGLShaderProgram___findChildren_newList3(void* ptr);
void QOpenGLShaderProgram_ChildEventDefault(void* ptr, void* event);
void QOpenGLShaderProgram_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLShaderProgram_CustomEventDefault(void* ptr, void* event);
void QOpenGLShaderProgram_DeleteLaterDefault(void* ptr);
void QOpenGLShaderProgram_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLShaderProgram_EventDefault(void* ptr, void* e);
char QOpenGLShaderProgram_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLShaderProgram_MetaObjectDefault(void* ptr);
void QOpenGLShaderProgram_TimerEventDefault(void* ptr, void* event);
void* QOpenGLTexture_NewQOpenGLTexture(long long target);
void* QOpenGLTexture_NewQOpenGLTexture2(void* image, long long genMipMaps);
void QOpenGLTexture_AllocateStorage(void* ptr);
void QOpenGLTexture_AllocateStorage2(void* ptr, long long pixelFormat, long long pixelType);
void QOpenGLTexture_Bind(void* ptr);
void QOpenGLTexture_Bind2(void* ptr, unsigned int unit, long long reset);
void* QOpenGLTexture_BorderColor(void* ptr);
void QOpenGLTexture_BorderColor2(void* ptr, float border);
void QOpenGLTexture_BorderColor3(void* ptr, int border);
void QOpenGLTexture_BorderColor4(void* ptr, unsigned int border);
unsigned int QOpenGLTexture_QOpenGLTexture_BoundTextureId(long long target);
unsigned int QOpenGLTexture_QOpenGLTexture_BoundTextureId2(unsigned int unit, long long target);
long long QOpenGLTexture_ComparisonFunction(void* ptr);
long long QOpenGLTexture_ComparisonMode(void* ptr);
char QOpenGLTexture_Create(void* ptr);
void* QOpenGLTexture_CreateTextureView(void* ptr, long long target, long long viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer);
int QOpenGLTexture_Depth(void* ptr);
long long QOpenGLTexture_DepthStencilMode(void* ptr);
void QOpenGLTexture_Destroy(void* ptr);
int QOpenGLTexture_Faces(void* ptr);
long long QOpenGLTexture_Format(void* ptr);
void QOpenGLTexture_GenerateMipMaps(void* ptr);
void QOpenGLTexture_GenerateMipMaps2(void* ptr, int baseLevel, char resetBaseLevel);
char QOpenGLTexture_QOpenGLTexture_HasFeature(long long feature);
int QOpenGLTexture_Height(void* ptr);
char QOpenGLTexture_IsAutoMipMapGenerationEnabled(void* ptr);
char QOpenGLTexture_IsBound(void* ptr);
char QOpenGLTexture_IsBound2(void* ptr, unsigned int unit);
char QOpenGLTexture_IsCreated(void* ptr);
char QOpenGLTexture_IsFixedSamplePositions(void* ptr);
char QOpenGLTexture_IsStorageAllocated(void* ptr);
char QOpenGLTexture_IsTextureView(void* ptr);
int QOpenGLTexture_Layers(void* ptr);
float QOpenGLTexture_LevelofDetailBias(void* ptr);
long long QOpenGLTexture_MagnificationFilter(void* ptr);
float QOpenGLTexture_MaximumAnisotropy(void* ptr);
float QOpenGLTexture_MaximumLevelOfDetail(void* ptr);
int QOpenGLTexture_MaximumMipLevels(void* ptr);
long long QOpenGLTexture_MinificationFilter(void* ptr);
float QOpenGLTexture_MinimumLevelOfDetail(void* ptr);
int QOpenGLTexture_MipBaseLevel(void* ptr);
int QOpenGLTexture_MipLevels(void* ptr);
int QOpenGLTexture_MipMaxLevel(void* ptr);
void QOpenGLTexture_Release(void* ptr);
void QOpenGLTexture_Release2(void* ptr, unsigned int unit, long long reset);
int QOpenGLTexture_Samples(void* ptr);
void QOpenGLTexture_SetAutoMipMapGenerationEnabled(void* ptr, char enabled);
void QOpenGLTexture_SetBorderColor(void* ptr, void* color);
void QOpenGLTexture_SetBorderColor2(void* ptr, float r, float g, float b, float a);
void QOpenGLTexture_SetBorderColor3(void* ptr, int r, int g, int b, int a);
void QOpenGLTexture_SetBorderColor4(void* ptr, unsigned int r, unsigned int g, unsigned int b, unsigned int a);
void QOpenGLTexture_SetComparisonFunction(void* ptr, long long function);
void QOpenGLTexture_SetComparisonMode(void* ptr, long long mode);
void QOpenGLTexture_SetCompressedData(void* ptr, int mipLevel, int layer, long long cubeFace, int dataSize, void* data, void* options);
void QOpenGLTexture_SetCompressedData6(void* ptr, int mipLevel, int layer, int layerCount, long long cubeFace, int dataSize, void* data, void* options);
void QOpenGLTexture_SetCompressedData7(void* ptr, int mipLevel, int layer, int dataSize, void* data, void* options);
void QOpenGLTexture_SetCompressedData8(void* ptr, int mipLevel, int dataSize, void* data, void* options);
void QOpenGLTexture_SetCompressedData9(void* ptr, int dataSize, void* data, void* options);
void QOpenGLTexture_SetData(void* ptr, int mipLevel, int layer, long long cubeFace, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData6(void* ptr, int mipLevel, int layer, int layerCount, long long cubeFace, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData7(void* ptr, int mipLevel, int layer, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData8(void* ptr, int mipLevel, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData9(void* ptr, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData10(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData11(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData12(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData13(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long face, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData14(void* ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, long long face, int layerCount, long long sourceFormat, long long sourceType, void* data, void* options);
void QOpenGLTexture_SetData15(void* ptr, void* image, long long genMipMaps);
void QOpenGLTexture_SetDepthStencilMode(void* ptr, long long mode);
void QOpenGLTexture_SetFixedSamplePositions(void* ptr, char fixed);
void QOpenGLTexture_SetFormat(void* ptr, long long format);
void QOpenGLTexture_SetLayers(void* ptr, int layers);
void QOpenGLTexture_SetLevelOfDetailRange(void* ptr, float min, float max);
void QOpenGLTexture_SetLevelofDetailBias(void* ptr, float bias);
void QOpenGLTexture_SetMagnificationFilter(void* ptr, long long filter);
void QOpenGLTexture_SetMaximumAnisotropy(void* ptr, float anisotropy);
void QOpenGLTexture_SetMaximumLevelOfDetail(void* ptr, float value);
void QOpenGLTexture_SetMinMagFilters(void* ptr, long long minificationFilter, long long magnificationFilter);
void QOpenGLTexture_SetMinificationFilter(void* ptr, long long filter);
void QOpenGLTexture_SetMinimumLevelOfDetail(void* ptr, float value);
void QOpenGLTexture_SetMipBaseLevel(void* ptr, int baseLevel);
void QOpenGLTexture_SetMipLevelRange(void* ptr, int baseLevel, int maxLevel);
void QOpenGLTexture_SetMipLevels(void* ptr, int levels);
void QOpenGLTexture_SetMipMaxLevel(void* ptr, int maxLevel);
void QOpenGLTexture_SetSamples(void* ptr, int samples);
void QOpenGLTexture_SetSize(void* ptr, int width, int height, int depth);
void QOpenGLTexture_SetSwizzleMask(void* ptr, long long component, long long value);
void QOpenGLTexture_SetSwizzleMask2(void* ptr, long long r, long long g, long long b, long long a);
void QOpenGLTexture_SetWrapMode(void* ptr, long long mode);
void QOpenGLTexture_SetWrapMode2(void* ptr, long long direction, long long mode);
long long QOpenGLTexture_SwizzleMask(void* ptr, long long component);
long long QOpenGLTexture_Target(void* ptr);
unsigned int QOpenGLTexture_TextureId(void* ptr);
int QOpenGLTexture_Width(void* ptr);
long long QOpenGLTexture_WrapMode(void* ptr, long long direction);
void* QOpenGLTextureBlitter_NewQOpenGLTextureBlitter();
void QOpenGLTextureBlitter_Bind(void* ptr, unsigned int target);
void QOpenGLTextureBlitter_Blit(void* ptr, unsigned int texture, void* targetTransform, long long sourceOrigin);
char QOpenGLTextureBlitter_Create(void* ptr);
void QOpenGLTextureBlitter_Destroy(void* ptr);
char QOpenGLTextureBlitter_IsCreated(void* ptr);
void QOpenGLTextureBlitter_Release(void* ptr);
void QOpenGLTextureBlitter_SetOpacity(void* ptr, float opacity);
void QOpenGLTextureBlitter_SetRedBlueSwizzle(void* ptr, char swizzle);
char QOpenGLTextureBlitter_SupportsExternalOESTarget(void* ptr);
void* QOpenGLTextureBlitter_QOpenGLTextureBlitter_TargetTransform(void* target, void* viewport);
void QOpenGLTextureBlitter_DestroyQOpenGLTextureBlitter(void* ptr);
void* QOpenGLTimeMonitor_NewQOpenGLTimeMonitor(void* parent);
char QOpenGLTimeMonitor_Create(void* ptr);
void QOpenGLTimeMonitor_Destroy(void* ptr);
char QOpenGLTimeMonitor_IsCreated(void* ptr);
char QOpenGLTimeMonitor_IsResultAvailable(void* ptr);
struct QtGui_PackedList QOpenGLTimeMonitor_ObjectIds(void* ptr);
int QOpenGLTimeMonitor_RecordSample(void* ptr);
void QOpenGLTimeMonitor_Reset(void* ptr);
int QOpenGLTimeMonitor_SampleCount(void* ptr);
void QOpenGLTimeMonitor_SetSampleCount(void* ptr, int sampleCount);
void QOpenGLTimeMonitor_DestroyQOpenGLTimeMonitor(void* ptr);
void QOpenGLTimeMonitor_DestroyQOpenGLTimeMonitorDefault(void* ptr);
unsigned int QOpenGLTimeMonitor___objectIds_atList(void* ptr, int i);
void QOpenGLTimeMonitor___objectIds_setList(void* ptr, unsigned int i);
void* QOpenGLTimeMonitor___objectIds_newList(void* ptr);
void* QOpenGLTimeMonitor___waitForIntervals_newList(void* ptr);
void* QOpenGLTimeMonitor___waitForSamples_newList(void* ptr);
void* QOpenGLTimeMonitor___children_atList(void* ptr, int i);
void QOpenGLTimeMonitor___children_setList(void* ptr, void* i);
void* QOpenGLTimeMonitor___children_newList(void* ptr);
void* QOpenGLTimeMonitor___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLTimeMonitor___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLTimeMonitor___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLTimeMonitor___findChildren_atList(void* ptr, int i);
void QOpenGLTimeMonitor___findChildren_setList(void* ptr, void* i);
void* QOpenGLTimeMonitor___findChildren_newList(void* ptr);
void* QOpenGLTimeMonitor___findChildren_atList3(void* ptr, int i);
void QOpenGLTimeMonitor___findChildren_setList3(void* ptr, void* i);
void* QOpenGLTimeMonitor___findChildren_newList3(void* ptr);
void QOpenGLTimeMonitor_ChildEventDefault(void* ptr, void* event);
void QOpenGLTimeMonitor_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLTimeMonitor_CustomEventDefault(void* ptr, void* event);
void QOpenGLTimeMonitor_DeleteLaterDefault(void* ptr);
void QOpenGLTimeMonitor_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLTimeMonitor_EventDefault(void* ptr, void* e);
char QOpenGLTimeMonitor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLTimeMonitor_MetaObjectDefault(void* ptr);
void QOpenGLTimeMonitor_TimerEventDefault(void* ptr, void* event);
void* QOpenGLTimerQuery_NewQOpenGLTimerQuery(void* parent);
void QOpenGLTimerQuery_Begin(void* ptr);
char QOpenGLTimerQuery_Create(void* ptr);
void QOpenGLTimerQuery_Destroy(void* ptr);
void QOpenGLTimerQuery_End(void* ptr);
char QOpenGLTimerQuery_IsCreated(void* ptr);
char QOpenGLTimerQuery_IsResultAvailable(void* ptr);
unsigned int QOpenGLTimerQuery_ObjectId(void* ptr);
void QOpenGLTimerQuery_RecordTimestamp(void* ptr);
void QOpenGLTimerQuery_DestroyQOpenGLTimerQuery(void* ptr);
void QOpenGLTimerQuery_DestroyQOpenGLTimerQueryDefault(void* ptr);
void* QOpenGLTimerQuery___children_atList(void* ptr, int i);
void QOpenGLTimerQuery___children_setList(void* ptr, void* i);
void* QOpenGLTimerQuery___children_newList(void* ptr);
void* QOpenGLTimerQuery___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLTimerQuery___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLTimerQuery___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLTimerQuery___findChildren_atList(void* ptr, int i);
void QOpenGLTimerQuery___findChildren_setList(void* ptr, void* i);
void* QOpenGLTimerQuery___findChildren_newList(void* ptr);
void* QOpenGLTimerQuery___findChildren_atList3(void* ptr, int i);
void QOpenGLTimerQuery___findChildren_setList3(void* ptr, void* i);
void* QOpenGLTimerQuery___findChildren_newList3(void* ptr);
void QOpenGLTimerQuery_ChildEventDefault(void* ptr, void* event);
void QOpenGLTimerQuery_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLTimerQuery_CustomEventDefault(void* ptr, void* event);
void QOpenGLTimerQuery_DeleteLaterDefault(void* ptr);
void QOpenGLTimerQuery_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLTimerQuery_EventDefault(void* ptr, void* e);
char QOpenGLTimerQuery_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLTimerQuery_MetaObjectDefault(void* ptr);
void QOpenGLTimerQuery_TimerEventDefault(void* ptr, void* event);
void* QOpenGLVersionProfile_NewQOpenGLVersionProfile();
void* QOpenGLVersionProfile_NewQOpenGLVersionProfile2(void* format);
void* QOpenGLVersionProfile_NewQOpenGLVersionProfile3(void* other);
char QOpenGLVersionProfile_HasProfiles(void* ptr);
char QOpenGLVersionProfile_IsLegacyVersion(void* ptr);
char QOpenGLVersionProfile_IsValid(void* ptr);
long long QOpenGLVersionProfile_Profile(void* ptr);
void QOpenGLVersionProfile_SetProfile(void* ptr, long long profile);
void QOpenGLVersionProfile_SetVersion(void* ptr, int majorVersion, int minorVersion);
void QOpenGLVersionProfile_DestroyQOpenGLVersionProfile(void* ptr);
void* QOpenGLVertexArrayObject_NewQOpenGLVertexArrayObject(void* parent);
void QOpenGLVertexArrayObject_Bind(void* ptr);
char QOpenGLVertexArrayObject_Create(void* ptr);
void QOpenGLVertexArrayObject_Destroy(void* ptr);
char QOpenGLVertexArrayObject_IsCreated(void* ptr);
unsigned int QOpenGLVertexArrayObject_ObjectId(void* ptr);
void QOpenGLVertexArrayObject_Release(void* ptr);
void QOpenGLVertexArrayObject_DestroyQOpenGLVertexArrayObject(void* ptr);
void QOpenGLVertexArrayObject_DestroyQOpenGLVertexArrayObjectDefault(void* ptr);
void* QOpenGLVertexArrayObject___children_atList(void* ptr, int i);
void QOpenGLVertexArrayObject___children_setList(void* ptr, void* i);
void* QOpenGLVertexArrayObject___children_newList(void* ptr);
void* QOpenGLVertexArrayObject___dynamicPropertyNames_atList(void* ptr, int i);
void QOpenGLVertexArrayObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOpenGLVertexArrayObject___dynamicPropertyNames_newList(void* ptr);
void* QOpenGLVertexArrayObject___findChildren_atList(void* ptr, int i);
void QOpenGLVertexArrayObject___findChildren_setList(void* ptr, void* i);
void* QOpenGLVertexArrayObject___findChildren_newList(void* ptr);
void* QOpenGLVertexArrayObject___findChildren_atList3(void* ptr, int i);
void QOpenGLVertexArrayObject___findChildren_setList3(void* ptr, void* i);
void* QOpenGLVertexArrayObject___findChildren_newList3(void* ptr);
void QOpenGLVertexArrayObject_ChildEventDefault(void* ptr, void* event);
void QOpenGLVertexArrayObject_ConnectNotifyDefault(void* ptr, void* sign);
void QOpenGLVertexArrayObject_CustomEventDefault(void* ptr, void* event);
void QOpenGLVertexArrayObject_DeleteLaterDefault(void* ptr);
void QOpenGLVertexArrayObject_DisconnectNotifyDefault(void* ptr, void* sign);
char QOpenGLVertexArrayObject_EventDefault(void* ptr, void* e);
char QOpenGLVertexArrayObject_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOpenGLVertexArrayObject_MetaObjectDefault(void* ptr);
void QOpenGLVertexArrayObject_TimerEventDefault(void* ptr, void* event);
void* QOpenGLWindow_NewQOpenGLWindow(long long updateBehavior, void* parent);
void* QOpenGLWindow_NewQOpenGLWindow2(void* shareContext, long long updateBehavior, void* parent);
void* QOpenGLWindow_Context(void* ptr);
unsigned int QOpenGLWindow_DefaultFramebufferObject(void* ptr);
void QOpenGLWindow_DoneCurrent(void* ptr);
void QOpenGLWindow_ConnectFrameSwapped(void* ptr, long long t);
void QOpenGLWindow_DisconnectFrameSwapped(void* ptr);
void QOpenGLWindow_FrameSwapped(void* ptr);
void* QOpenGLWindow_GrabFramebuffer(void* ptr);
void QOpenGLWindow_InitializeGL(void* ptr);
void QOpenGLWindow_InitializeGLDefault(void* ptr);
char QOpenGLWindow_IsValid(void* ptr);
void QOpenGLWindow_MakeCurrent(void* ptr);
void QOpenGLWindow_PaintGL(void* ptr);
void QOpenGLWindow_PaintGLDefault(void* ptr);
void QOpenGLWindow_PaintOverGL(void* ptr);
void QOpenGLWindow_PaintOverGLDefault(void* ptr);
void QOpenGLWindow_PaintUnderGL(void* ptr);
void QOpenGLWindow_PaintUnderGLDefault(void* ptr);
void QOpenGLWindow_ResizeGL(void* ptr, int w, int h);
void QOpenGLWindow_ResizeGLDefault(void* ptr, int w, int h);
void* QOpenGLWindow_ShareContext(void* ptr);
long long QOpenGLWindow_UpdateBehavior(void* ptr);
void QOpenGLWindow_DestroyQOpenGLWindow(void* ptr);
void QOpenGLWindow_DestroyQOpenGLWindowDefault(void* ptr);
void* QPageLayout_NewQPageLayout();
void* QPageLayout_NewQPageLayout2(void* pageSize, long long orientation, void* margins, long long units, void* minMargins);
void* QPageLayout_NewQPageLayout3(void* other);
void* QPageLayout_FullRect(void* ptr);
void* QPageLayout_FullRect2(void* ptr, long long units);
void* QPageLayout_FullRectPixels(void* ptr, int resolution);
void* QPageLayout_FullRectPoints(void* ptr);
char QPageLayout_IsEquivalentTo(void* ptr, void* other);
char QPageLayout_IsValid(void* ptr);
void* QPageLayout_Margins(void* ptr);
void* QPageLayout_Margins2(void* ptr, long long units);
void* QPageLayout_MarginsPixels(void* ptr, int resolution);
void* QPageLayout_MarginsPoints(void* ptr);
void* QPageLayout_MaximumMargins(void* ptr);
void* QPageLayout_MinimumMargins(void* ptr);
long long QPageLayout_Mode(void* ptr);
long long QPageLayout_Orientation(void* ptr);
void* QPageLayout_PageSize(void* ptr);
void* QPageLayout_PaintRect(void* ptr);
void* QPageLayout_PaintRect2(void* ptr, long long units);
void* QPageLayout_PaintRectPixels(void* ptr, int resolution);
void* QPageLayout_PaintRectPoints(void* ptr);
char QPageLayout_SetBottomMargin(void* ptr, double bottomMargin);
char QPageLayout_SetLeftMargin(void* ptr, double leftMargin);
char QPageLayout_SetMargins(void* ptr, void* margins);
void QPageLayout_SetMinimumMargins(void* ptr, void* minMargins);
void QPageLayout_SetMode(void* ptr, long long mode);
void QPageLayout_SetOrientation(void* ptr, long long orientation);
void QPageLayout_SetPageSize(void* ptr, void* pageSize, void* minMargins);
char QPageLayout_SetRightMargin(void* ptr, double rightMargin);
char QPageLayout_SetTopMargin(void* ptr, double topMargin);
void QPageLayout_SetUnits(void* ptr, long long units);
void QPageLayout_Swap(void* ptr, void* other);
long long QPageLayout_Units(void* ptr);
void QPageLayout_DestroyQPageLayout(void* ptr);
void* QPageSize_NewQPageSize();
void* QPageSize_NewQPageSize2(long long pageSize);
void* QPageSize_NewQPageSize3(void* pointSize, struct QtGui_PackedString name, long long matchPolicy);
void* QPageSize_NewQPageSize4(void* size, long long units, struct QtGui_PackedString name, long long matchPolicy);
void* QPageSize_NewQPageSize5(void* other);
void* QPageSize_DefinitionSize(void* ptr);
void* QPageSize_QPageSize_DefinitionSize2(long long pageSizeId);
long long QPageSize_DefinitionUnits(void* ptr);
long long QPageSize_QPageSize_DefinitionUnits2(long long pageSizeId);
long long QPageSize_Id(void* ptr);
long long QPageSize_QPageSize_Id2(void* pointSize, long long matchPolicy);
long long QPageSize_QPageSize_Id3(void* size, long long units, long long matchPolicy);
long long QPageSize_QPageSize_Id4(int windowsId);
char QPageSize_IsEquivalentTo(void* ptr, void* other);
char QPageSize_IsValid(void* ptr);
struct QtGui_PackedString QPageSize_Key(void* ptr);
struct QtGui_PackedString QPageSize_QPageSize_Key2(long long pageSizeId);
struct QtGui_PackedString QPageSize_Name(void* ptr);
struct QtGui_PackedString QPageSize_QPageSize_Name2(long long pageSizeId);
void* QPageSize_Rect(void* ptr, long long units);
void* QPageSize_RectPixels(void* ptr, int resolution);
void* QPageSize_RectPoints(void* ptr);
void* QPageSize_Size(void* ptr, long long units);
void* QPageSize_QPageSize_Size2(long long pageSizeId, long long units);
void* QPageSize_SizePixels(void* ptr, int resolution);
void* QPageSize_QPageSize_SizePixels2(long long pageSizeId, int resolution);
void* QPageSize_SizePoints(void* ptr);
void* QPageSize_QPageSize_SizePoints2(long long pageSizeId);
void QPageSize_Swap(void* ptr, void* other);
int QPageSize_WindowsId(void* ptr);
int QPageSize_QPageSize_WindowsId2(long long pageSizeId);
void QPageSize_DestroyQPageSize(void* ptr);
char QPagedPaintDevice_NewPage(void* ptr);
void* QPagedPaintDevice_PageLayout(void* ptr);
long long QPagedPaintDevice_PageSize(void* ptr);
char QPagedPaintDevice_SetPageLayout(void* ptr, void* newPageLayout);
char QPagedPaintDevice_SetPageMargins(void* ptr, void* margins);
char QPagedPaintDevice_SetPageMargins2(void* ptr, void* margins, long long units);
char QPagedPaintDevice_SetPageOrientation(void* ptr, long long orientation);
char QPagedPaintDevice_SetPageSize(void* ptr, void* pageSize);
void QPagedPaintDevice_SetPageSize2(void* ptr, long long size);
void QPagedPaintDevice_SetPageSize2Default(void* ptr, long long size);
void QPagedPaintDevice_DestroyQPagedPaintDevice(void* ptr);
void QPagedPaintDevice_DestroyQPagedPaintDeviceDefault(void* ptr);
void* QPagedPaintDevice_PaintEngine(void* ptr);
void* QPagedPaintDevice_PaintEngineDefault(void* ptr);
void* QPaintDevice_NewQPaintDevice();
int QPaintDevice_ColorCount(void* ptr);
int QPaintDevice_Depth(void* ptr);
int QPaintDevice_DevicePixelRatio(void* ptr);
double QPaintDevice_DevicePixelRatioF(void* ptr);
int QPaintDevice_Height(void* ptr);
int QPaintDevice_HeightMM(void* ptr);
int QPaintDevice_LogicalDpiX(void* ptr);
int QPaintDevice_LogicalDpiY(void* ptr);
int QPaintDevice_Metric(void* ptr, long long metric);
int QPaintDevice_MetricDefault(void* ptr, long long metric);
void* QPaintDevice_PaintEngine(void* ptr);
char QPaintDevice_PaintingActive(void* ptr);
int QPaintDevice_PhysicalDpiX(void* ptr);
int QPaintDevice_PhysicalDpiY(void* ptr);
int QPaintDevice_Width(void* ptr);
int QPaintDevice_WidthMM(void* ptr);
void QPaintDevice_DestroyQPaintDevice(void* ptr);
void QPaintDevice_DestroyQPaintDeviceDefault(void* ptr);
void QPaintDeviceWindow_PaintEvent(void* ptr, void* event);
void QPaintDeviceWindow_PaintEventDefault(void* ptr, void* event);
void QPaintDeviceWindow_Update(void* ptr, void* rect);
void QPaintDeviceWindow_Update2(void* ptr, void* region);
void QPaintDeviceWindow_Update3(void* ptr);
void QPaintDeviceWindow_Update3Default(void* ptr);
void* QPaintDeviceWindow_PaintEngine(void* ptr);
void* QPaintDeviceWindow_PaintEngineDefault(void* ptr);
void* QPaintEngine_NewQPaintEngine(long long caps);
char QPaintEngine_Begin(void* ptr, void* pdev);
void QPaintEngine_DrawEllipse(void* ptr, void* rect);
void QPaintEngine_DrawEllipseDefault(void* ptr, void* rect);
void QPaintEngine_DrawEllipse2(void* ptr, void* rect);
void QPaintEngine_DrawEllipse2Default(void* ptr, void* rect);
void QPaintEngine_DrawImage(void* ptr, void* rectangle, void* image, void* sr, long long flags);
void QPaintEngine_DrawImageDefault(void* ptr, void* rectangle, void* image, void* sr, long long flags);
void QPaintEngine_DrawLines(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLinesDefault(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLines2(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLines2Default(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawPath(void* ptr, void* path);
void QPaintEngine_DrawPathDefault(void* ptr, void* path);
void QPaintEngine_DrawPixmap(void* ptr, void* r, void* pm, void* sr);
void QPaintEngine_DrawPoints(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPointsDefault(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPoints2(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPoints2Default(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPolygon(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawPolygonDefault(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawPolygon2(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawPolygon2Default(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawRects(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRectsDefault(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRects2(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRects2Default(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawTextItem(void* ptr, void* p, void* textItem);
void QPaintEngine_DrawTextItemDefault(void* ptr, void* p, void* textItem);
void QPaintEngine_DrawTiledPixmap(void* ptr, void* rect, void* pixmap, void* p);
void QPaintEngine_DrawTiledPixmapDefault(void* ptr, void* rect, void* pixmap, void* p);
char QPaintEngine_End(void* ptr);
char QPaintEngine_HasFeature(void* ptr, long long feature);
char QPaintEngine_IsActive(void* ptr);
void* QPaintEngine_PaintDevice(void* ptr);
void* QPaintEngine_Painter(void* ptr);
void QPaintEngine_SetActive(void* ptr, char state);
long long QPaintEngine_Type(void* ptr);
void QPaintEngine_UpdateState(void* ptr, void* state);
void QPaintEngine_DestroyQPaintEngine(void* ptr);
void QPaintEngine_DestroyQPaintEngineDefault(void* ptr);
void* QPaintEngineState_BackgroundBrush(void* ptr);
long long QPaintEngineState_BackgroundMode(void* ptr);
void* QPaintEngineState_Brush(void* ptr);
char QPaintEngineState_BrushNeedsResolving(void* ptr);
void* QPaintEngineState_BrushOrigin(void* ptr);
long long QPaintEngineState_ClipOperation(void* ptr);
void* QPaintEngineState_ClipPath(void* ptr);
void* QPaintEngineState_ClipRegion(void* ptr);
long long QPaintEngineState_CompositionMode(void* ptr);
void* QPaintEngineState_Font(void* ptr);
char QPaintEngineState_IsClipEnabled(void* ptr);
double QPaintEngineState_Opacity(void* ptr);
void* QPaintEngineState_Painter(void* ptr);
void* QPaintEngineState_Pen(void* ptr);
char QPaintEngineState_PenNeedsResolving(void* ptr);
long long QPaintEngineState_RenderHints(void* ptr);
long long QPaintEngineState_State(void* ptr);
void* QPaintEngineState_Transform(void* ptr);
void* QPaintEvent_NewQPaintEvent(void* paintRegion);
void* QPaintEvent_NewQPaintEvent2(void* paintRect);
void* QPaintEvent_Rect(void* ptr);
void* QPaintEvent_Region(void* ptr);
void* QPainter_NewQPainter();
void* QPainter_NewQPainter2(void* device);
void* QPainter_Background(void* ptr);
long long QPainter_BackgroundMode(void* ptr);
char QPainter_Begin(void* ptr, void* device);
void QPainter_BeginNativePainting(void* ptr);
void* QPainter_BoundingRect(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text);
void* QPainter_BoundingRect2(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text);
void* QPainter_BoundingRect3(void* ptr, int x, int y, int w, int h, int flags, struct QtGui_PackedString text);
void* QPainter_BoundingRect4(void* ptr, void* rectangle, struct QtGui_PackedString text, void* option);
void* QPainter_Brush(void* ptr);
void* QPainter_BrushOrigin(void* ptr);
void* QPainter_ClipBoundingRect(void* ptr);
void* QPainter_ClipPath(void* ptr);
void* QPainter_ClipRegion(void* ptr);
void* QPainter_CombinedTransform(void* ptr);
long long QPainter_CompositionMode(void* ptr);
void* QPainter_Device(void* ptr);
void* QPainter_DeviceTransform(void* ptr);
void QPainter_DrawArc(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawArc2(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawArc3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawChord(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawChord2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawChord3(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawConvexPolygon(void* ptr, void* points, int pointCount);
void QPainter_DrawConvexPolygon2(void* ptr, void* polygon);
void QPainter_DrawConvexPolygon3(void* ptr, void* points, int pointCount);
void QPainter_DrawConvexPolygon4(void* ptr, void* polygon);
void QPainter_DrawEllipse(void* ptr, void* rectangle);
void QPainter_DrawEllipse2(void* ptr, void* rectangle);
void QPainter_DrawEllipse3(void* ptr, int x, int y, int width, int height);
void QPainter_DrawEllipse4(void* ptr, void* center, double rx, double ry);
void QPainter_DrawEllipse5(void* ptr, void* center, int rx, int ry);
void QPainter_DrawGlyphRun(void* ptr, void* position, void* glyphs);
void QPainter_DrawImage(void* ptr, void* target, void* image, void* source, long long flags);
void QPainter_DrawImage2(void* ptr, void* target, void* image, void* source, long long flags);
void QPainter_DrawImage3(void* ptr, void* point, void* image, void* source, long long flags);
void QPainter_DrawImage4(void* ptr, void* point, void* image, void* source, long long flags);
void QPainter_DrawImage5(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage6(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage7(void* ptr, void* point, void* image);
void QPainter_DrawImage8(void* ptr, void* point, void* image);
void QPainter_DrawImage9(void* ptr, int x, int y, void* image, int sx, int sy, int sw, int sh, long long flags);
void QPainter_DrawLine(void* ptr, void* line);
void QPainter_DrawLine2(void* ptr, void* line);
void QPainter_DrawLine3(void* ptr, int x1, int y1, int x2, int y2);
void QPainter_DrawLine4(void* ptr, void* p1, void* p2);
void QPainter_DrawLine5(void* ptr, void* p1, void* p2);
void QPainter_DrawLines(void* ptr, void* lines, int lineCount);
void QPainter_DrawLines2(void* ptr, void* lines);
void QPainter_DrawLines3(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawLines4(void* ptr, void* pointPairs);
void QPainter_DrawLines5(void* ptr, void* lines, int lineCount);
void QPainter_DrawLines6(void* ptr, void* lines);
void QPainter_DrawLines7(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawLines8(void* ptr, void* pointPairs);
void QPainter_DrawPath(void* ptr, void* path);
void QPainter_DrawPicture(void* ptr, void* point, void* picture);
void QPainter_DrawPicture2(void* ptr, int x, int y, void* picture);
void QPainter_DrawPicture3(void* ptr, void* point, void* picture);
void QPainter_DrawPie(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPie2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawPie3(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPixmap(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawPixmap2(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawPixmap3(void* ptr, int x, int y, int w, int h, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap4(void* ptr, int x, int y, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap5(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap6(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap7(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap8(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap9(void* ptr, int x, int y, void* pixmap);
void QPainter_DrawPixmap10(void* ptr, void* rectangle, void* pixmap);
void QPainter_DrawPixmap11(void* ptr, int x, int y, int width, int height, void* pixmap);
void QPainter_DrawPoint(void* ptr, void* position);
void QPainter_DrawPoint2(void* ptr, void* position);
void QPainter_DrawPoint3(void* ptr, int x, int y);
void QPainter_DrawPoints(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints2(void* ptr, void* points);
void QPainter_DrawPoints3(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints4(void* ptr, void* points);
void QPainter_DrawPolygon(void* ptr, void* points, int pointCount, long long fillRule);
void QPainter_DrawPolygon2(void* ptr, void* points, long long fillRule);
void QPainter_DrawPolygon3(void* ptr, void* points, int pointCount, long long fillRule);
void QPainter_DrawPolygon4(void* ptr, void* points, long long fillRule);
void QPainter_DrawPolyline(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline2(void* ptr, void* points);
void QPainter_DrawPolyline3(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline4(void* ptr, void* points);
void QPainter_DrawRect(void* ptr, void* rectangle);
void QPainter_DrawRect2(void* ptr, int x, int y, int width, int height);
void QPainter_DrawRect3(void* ptr, void* rectangle);
void QPainter_DrawRects(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawRects2(void* ptr, void* rectangles);
void QPainter_DrawRects3(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawRects4(void* ptr, void* rectangles);
void QPainter_DrawRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainter_DrawRoundedRect2(void* ptr, int x, int y, int w, int h, double xRadius, double yRadius, long long mode);
void QPainter_DrawRoundedRect3(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainter_DrawStaticText(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText2(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText3(void* ptr, int left, int top, void* staticText);
void QPainter_DrawText(void* ptr, void* position, struct QtGui_PackedString text);
void QPainter_DrawText2(void* ptr, void* position, struct QtGui_PackedString text);
void QPainter_DrawText3(void* ptr, int x, int y, struct QtGui_PackedString text);
void QPainter_DrawText4(void* ptr, void* rectangle, int flags, struct QtGui_PackedString text, void* boundingRect);
void QPainter_DrawText5(void* ptr, int x, int y, int width, int height, int flags, struct QtGui_PackedString text, void* boundingRect);
void QPainter_DrawText6(void* ptr, void* rectangle, struct QtGui_PackedString text, void* option);
void QPainter_DrawTiledPixmap(void* ptr, void* rectangle, void* pixmap, void* position);
void QPainter_DrawTiledPixmap2(void* ptr, int x, int y, int width, int height, void* pixmap, int sx, int sy);
void QPainter_DrawTiledPixmap3(void* ptr, void* rectangle, void* pixmap, void* position);
char QPainter_End(void* ptr);
void QPainter_EndNativePainting(void* ptr);
void QPainter_EraseRect(void* ptr, void* rectangle);
void QPainter_EraseRect2(void* ptr, int x, int y, int width, int height);
void QPainter_EraseRect3(void* ptr, void* rectangle);
void QPainter_FillPath(void* ptr, void* path, void* brush);
void QPainter_FillRect(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect2(void* ptr, int x, int y, int width, int height, void* brush);
void QPainter_FillRect3(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect4(void* ptr, void* rectangle, void* color);
void QPainter_FillRect5(void* ptr, int x, int y, int width, int height, void* color);
void QPainter_FillRect6(void* ptr, void* rectangle, void* color);
void QPainter_FillRect7(void* ptr, int x, int y, int width, int height, long long color);
void QPainter_FillRect8(void* ptr, void* rectangle, long long color);
void QPainter_FillRect9(void* ptr, void* rectangle, long long color);
void QPainter_FillRect10(void* ptr, int x, int y, int width, int height, long long style);
void QPainter_FillRect11(void* ptr, void* rectangle, long long style);
void QPainter_FillRect12(void* ptr, void* rectangle, long long style);
void QPainter_FillRect13(void* ptr, int x, int y, int width, int height, long long preset);
void QPainter_FillRect14(void* ptr, void* rectangle, long long preset);
void QPainter_FillRect15(void* ptr, void* rectangle, long long preset);
void* QPainter_Font(void* ptr);
void* QPainter_FontInfo(void* ptr);
void* QPainter_FontMetrics(void* ptr);
char QPainter_HasClipping(void* ptr);
char QPainter_IsActive(void* ptr);
long long QPainter_LayoutDirection(void* ptr);
double QPainter_Opacity(void* ptr);
void* QPainter_PaintEngine(void* ptr);
void* QPainter_Pen(void* ptr);
long long QPainter_RenderHints(void* ptr);
void QPainter_ResetTransform(void* ptr);
void QPainter_Restore(void* ptr);
void QPainter_Rotate(void* ptr, double angle);
void QPainter_Save(void* ptr);
void QPainter_Scale(void* ptr, double sx, double sy);
void QPainter_SetBackground(void* ptr, void* brush);
void QPainter_SetBackgroundMode(void* ptr, long long mode);
void QPainter_SetBrush(void* ptr, void* brush);
void QPainter_SetBrush2(void* ptr, long long style);
void QPainter_SetBrushOrigin(void* ptr, void* position);
void QPainter_SetBrushOrigin2(void* ptr, int x, int y);
void QPainter_SetBrushOrigin3(void* ptr, void* position);
void QPainter_SetClipPath(void* ptr, void* path, long long operation);
void QPainter_SetClipRect(void* ptr, void* rectangle, long long operation);
void QPainter_SetClipRect2(void* ptr, void* rectangle, long long operation);
void QPainter_SetClipRect3(void* ptr, int x, int y, int width, int height, long long operation);
void QPainter_SetClipRegion(void* ptr, void* region, long long operation);
void QPainter_SetClipping(void* ptr, char enable);
void QPainter_SetCompositionMode(void* ptr, long long mode);
void QPainter_SetFont(void* ptr, void* font);
void QPainter_SetLayoutDirection(void* ptr, long long direction);
void QPainter_SetOpacity(void* ptr, double opacity);
void QPainter_SetPen(void* ptr, void* pen);
void QPainter_SetPen2(void* ptr, void* color);
void QPainter_SetPen3(void* ptr, long long style);
void QPainter_SetRenderHint(void* ptr, long long hint, char on);
void QPainter_SetRenderHints(void* ptr, long long hints, char on);
void QPainter_SetTransform(void* ptr, void* transform, char combine);
void QPainter_SetViewTransformEnabled(void* ptr, char enable);
void QPainter_SetViewport(void* ptr, void* rectangle);
void QPainter_SetViewport2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWindow(void* ptr, void* rectangle);
void QPainter_SetWindow2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWorldMatrixEnabled(void* ptr, char enable);
void QPainter_SetWorldTransform(void* ptr, void* matrix, char combine);
void QPainter_Shear(void* ptr, double sh, double sv);
void QPainter_StrokePath(void* ptr, void* path, void* pen);
char QPainter_TestRenderHint(void* ptr, long long hint);
void* QPainter_Transform(void* ptr);
void QPainter_Translate(void* ptr, void* offset);
void QPainter_Translate2(void* ptr, void* offset);
void QPainter_Translate3(void* ptr, double dx, double dy);
char QPainter_ViewTransformEnabled(void* ptr);
void* QPainter_Viewport(void* ptr);
void* QPainter_Window(void* ptr);
char QPainter_WorldMatrixEnabled(void* ptr);
void* QPainter_WorldTransform(void* ptr);
void QPainter_DestroyQPainter(void* ptr);
void* QPainter___drawLines_lines_atList2(void* ptr, int i);
void QPainter___drawLines_lines_setList2(void* ptr, void* i);
void* QPainter___drawLines_lines_newList2(void* ptr);
void* QPainter___drawLines_pointPairs_atList4(void* ptr, int i);
void QPainter___drawLines_pointPairs_setList4(void* ptr, void* i);
void* QPainter___drawLines_pointPairs_newList4(void* ptr);
void* QPainter___drawLines_lines_atList6(void* ptr, int i);
void QPainter___drawLines_lines_setList6(void* ptr, void* i);
void* QPainter___drawLines_lines_newList6(void* ptr);
void* QPainter___drawLines_pointPairs_atList8(void* ptr, int i);
void QPainter___drawLines_pointPairs_setList8(void* ptr, void* i);
void* QPainter___drawLines_pointPairs_newList8(void* ptr);
void* QPainter___drawRects_rectangles_atList2(void* ptr, int i);
void QPainter___drawRects_rectangles_setList2(void* ptr, void* i);
void* QPainter___drawRects_rectangles_newList2(void* ptr);
void* QPainter___drawRects_rectangles_atList4(void* ptr, int i);
void QPainter___drawRects_rectangles_setList4(void* ptr, void* i);
void* QPainter___drawRects_rectangles_newList4(void* ptr);
void* QPainterPath_NewQPainterPath();
void* QPainterPath_NewQPainterPath2(void* startPoint);
void* QPainterPath_NewQPainterPath3(void* path);
void QPainterPath_AddEllipse(void* ptr, void* boundingRectangle);
void QPainterPath_AddEllipse2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddEllipse3(void* ptr, void* center, double rx, double ry);
void QPainterPath_AddPath(void* ptr, void* path);
void QPainterPath_AddPolygon(void* ptr, void* polygon);
void QPainterPath_AddRect(void* ptr, void* rectangle);
void QPainterPath_AddRect2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddRegion(void* ptr, void* region);
void QPainterPath_AddRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainterPath_AddRoundedRect2(void* ptr, double x, double y, double w, double h, double xRadius, double yRadius, long long mode);
void QPainterPath_AddText(void* ptr, void* point, void* font, struct QtGui_PackedString text);
void QPainterPath_AddText2(void* ptr, double x, double y, void* font, struct QtGui_PackedString text);
double QPainterPath_AngleAtPercent(void* ptr, double t);
void QPainterPath_ArcMoveTo(void* ptr, void* rectangle, double angle);
void QPainterPath_ArcMoveTo2(void* ptr, double x, double y, double width, double height, double angle);
void QPainterPath_ArcTo(void* ptr, void* rectangle, double startAngle, double sweepLength);
void QPainterPath_ArcTo2(void* ptr, double x, double y, double width, double height, double startAngle, double sweepLength);
void* QPainterPath_BoundingRect(void* ptr);
int QPainterPath_Capacity(void* ptr);
void QPainterPath_Clear(void* ptr);
void QPainterPath_CloseSubpath(void* ptr);
void QPainterPath_ConnectPath(void* ptr, void* path);
char QPainterPath_Contains(void* ptr, void* point);
char QPainterPath_Contains2(void* ptr, void* rectangle);
char QPainterPath_Contains3(void* ptr, void* p);
void* QPainterPath_ControlPointRect(void* ptr);
void QPainterPath_CubicTo(void* ptr, void* c1, void* c2, void* endPoint);
void QPainterPath_CubicTo2(void* ptr, double c1X, double c1Y, double c2X, double c2Y, double endPointX, double endPointY);
void* QPainterPath_CurrentPosition(void* ptr);
int QPainterPath_ElementCount(void* ptr);
long long QPainterPath_FillRule(void* ptr);
void* QPainterPath_Intersected(void* ptr, void* p);
char QPainterPath_Intersects(void* ptr, void* rectangle);
char QPainterPath_Intersects2(void* ptr, void* p);
char QPainterPath_IsEmpty(void* ptr);
double QPainterPath_Length(void* ptr);
void QPainterPath_LineTo(void* ptr, void* endPoint);
void QPainterPath_LineTo2(void* ptr, double x, double y);
void QPainterPath_MoveTo(void* ptr, void* point);
void QPainterPath_MoveTo2(void* ptr, double x, double y);
double QPainterPath_PercentAtLength(void* ptr, double l);
void* QPainterPath_PointAtPercent(void* ptr, double t);
void QPainterPath_QuadTo(void* ptr, void* c, void* endPoint);
void QPainterPath_QuadTo2(void* ptr, double cx, double cy, double endPointX, double endPointY);
void QPainterPath_Reserve(void* ptr, int size);
void QPainterPath_SetElementPositionAt(void* ptr, int index, double x, double y);
void QPainterPath_SetFillRule(void* ptr, long long fillRule);
void* QPainterPath_Simplified(void* ptr);
double QPainterPath_SlopeAtPercent(void* ptr, double t);
void* QPainterPath_Subtracted(void* ptr, void* p);
void QPainterPath_Swap(void* ptr, void* other);
void* QPainterPath_ToFillPolygon(void* ptr, void* matrix);
struct QtGui_PackedList QPainterPath_ToFillPolygons(void* ptr, void* matrix);
void* QPainterPath_ToReversed(void* ptr);
struct QtGui_PackedList QPainterPath_ToSubpathPolygons(void* ptr, void* matrix);
void QPainterPath_Translate(void* ptr, double dx, double dy);
void QPainterPath_Translate2(void* ptr, void* offset);
void* QPainterPath_Translated(void* ptr, double dx, double dy);
void* QPainterPath_Translated2(void* ptr, void* offset);
void* QPainterPath_United(void* ptr, void* p);
void QPainterPath_DestroyQPainterPath(void* ptr);
void* QPainterPath___toFillPolygons_atList(void* ptr, int i);
void QPainterPath___toFillPolygons_setList(void* ptr, void* i);
void* QPainterPath___toFillPolygons_newList(void* ptr);
void* QPainterPath___toFillPolygons_atList2(void* ptr, int i);
void QPainterPath___toFillPolygons_setList2(void* ptr, void* i);
void* QPainterPath___toFillPolygons_newList2(void* ptr);
void* QPainterPath___toSubpathPolygons_atList(void* ptr, int i);
void QPainterPath___toSubpathPolygons_setList(void* ptr, void* i);
void* QPainterPath___toSubpathPolygons_newList(void* ptr);
void* QPainterPath___toSubpathPolygons_atList2(void* ptr, int i);
void QPainterPath___toSubpathPolygons_setList2(void* ptr, void* i);
void* QPainterPath___toSubpathPolygons_newList2(void* ptr);
void* QPainterPathStroker_NewQPainterPathStroker();
void* QPainterPathStroker_NewQPainterPathStroker2(void* pen);
long long QPainterPathStroker_CapStyle(void* ptr);
void* QPainterPathStroker_CreateStroke(void* ptr, void* path);
double QPainterPathStroker_CurveThreshold(void* ptr);
double QPainterPathStroker_DashOffset(void* ptr);
struct QtGui_PackedList QPainterPathStroker_DashPattern(void* ptr);
long long QPainterPathStroker_JoinStyle(void* ptr);
double QPainterPathStroker_MiterLimit(void* ptr);
void QPainterPathStroker_SetCapStyle(void* ptr, long long style);
void QPainterPathStroker_SetCurveThreshold(void* ptr, double threshold);
void QPainterPathStroker_SetDashOffset(void* ptr, double offset);
void QPainterPathStroker_SetDashPattern(void* ptr, long long style);
void QPainterPathStroker_SetDashPattern2(void* ptr, void* dashPattern);
void QPainterPathStroker_SetJoinStyle(void* ptr, long long style);
void QPainterPathStroker_SetMiterLimit(void* ptr, double limit);
void QPainterPathStroker_SetWidth(void* ptr, double width);
double QPainterPathStroker_Width(void* ptr);
void QPainterPathStroker_DestroyQPainterPathStroker(void* ptr);
double QPainterPathStroker___dashPattern_atList(void* ptr, int i);
void QPainterPathStroker___dashPattern_setList(void* ptr, double i);
void* QPainterPathStroker___dashPattern_newList(void* ptr);
double QPainterPathStroker___setDashPattern_dashPattern_atList2(void* ptr, int i);
void QPainterPathStroker___setDashPattern_dashPattern_setList2(void* ptr, double i);
void* QPainterPathStroker___setDashPattern_dashPattern_newList2(void* ptr);
int QPalette_NColorRoles_Type();
void* QPalette_NewQPalette();
void* QPalette_NewQPalette2(void* button);
void* QPalette_NewQPalette3(long long button);
void* QPalette_NewQPalette4(void* button, void* window);
void* QPalette_NewQPalette5(void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void* QPalette_NewQPalette7(void* p);
void* QPalette_NewQPalette8(void* other);
void* QPalette_AlternateBase(void* ptr);
void* QPalette_Base(void* ptr);
void* QPalette_BrightText(void* ptr);
void* QPalette_Brush(void* ptr, long long group, long long role);
void* QPalette_Brush2(void* ptr, long long role);
void* QPalette_Button(void* ptr);
void* QPalette_ButtonText(void* ptr);
long long QPalette_CacheKey(void* ptr);
void* QPalette_Color(void* ptr, long long group, long long role);
void* QPalette_Color2(void* ptr, long long role);
long long QPalette_CurrentColorGroup(void* ptr);
void* QPalette_Dark(void* ptr);
void* QPalette_Highlight(void* ptr);
void* QPalette_HighlightedText(void* ptr);
char QPalette_IsBrushSet(void* ptr, long long cg, long long cr);
char QPalette_IsCopyOf(void* ptr, void* p);
char QPalette_IsEqual(void* ptr, long long cg1, long long cg2);
void* QPalette_Light(void* ptr);
void* QPalette_Link(void* ptr);
void* QPalette_LinkVisited(void* ptr);
void* QPalette_Mid(void* ptr);
void* QPalette_Midlight(void* ptr);
void* QPalette_PlaceholderText(void* ptr);
void* QPalette_Resolve(void* ptr, void* other);
void QPalette_SetBrush(void* ptr, long long role, void* brush);
void QPalette_SetBrush2(void* ptr, long long group, long long role, void* brush);
void QPalette_SetColor(void* ptr, long long group, long long role, void* color);
void QPalette_SetColor2(void* ptr, long long role, void* color);
void QPalette_SetColorGroup(void* ptr, long long cg, void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void QPalette_SetCurrentColorGroup(void* ptr, long long cg);
void* QPalette_Shadow(void* ptr);
void QPalette_Swap(void* ptr, void* other);
void* QPalette_Text(void* ptr);
void* QPalette_ToolTipBase(void* ptr);
void* QPalette_ToolTipText(void* ptr);
void* QPalette_Window(void* ptr);
void* QPalette_WindowText(void* ptr);
void QPalette_DestroyQPalette(void* ptr);
void* QPdfWriter_NewQPdfWriter(struct QtGui_PackedString filename);
void* QPdfWriter_NewQPdfWriter2(void* device);
void QPdfWriter_AddFileAttachment(void* ptr, struct QtGui_PackedString fileName, void* data, struct QtGui_PackedString mimeType);
struct QtGui_PackedString QPdfWriter_Creator(void* ptr);
void* QPdfWriter_DocumentXmpMetadata(void* ptr);
char QPdfWriter_NewPage(void* ptr);
char QPdfWriter_NewPageDefault(void* ptr);
void* QPdfWriter_PaintEngine(void* ptr);
void* QPdfWriter_PaintEngineDefault(void* ptr);
long long QPdfWriter_PdfVersion(void* ptr);
int QPdfWriter_Resolution(void* ptr);
void QPdfWriter_SetCreator(void* ptr, struct QtGui_PackedString creator);
void QPdfWriter_SetDocumentXmpMetadata(void* ptr, void* xmpMetadata);
void QPdfWriter_SetPdfVersion(void* ptr, long long version);
void QPdfWriter_SetResolution(void* ptr, int resolution);
void QPdfWriter_SetTitle(void* ptr, struct QtGui_PackedString title);
struct QtGui_PackedString QPdfWriter_Title(void* ptr);
void QPdfWriter_DestroyQPdfWriter(void* ptr);
void QPdfWriter_DestroyQPdfWriterDefault(void* ptr);
void* QPdfWriter___children_atList(void* ptr, int i);
void QPdfWriter___children_setList(void* ptr, void* i);
void* QPdfWriter___children_newList(void* ptr);
void* QPdfWriter___dynamicPropertyNames_atList(void* ptr, int i);
void QPdfWriter___dynamicPropertyNames_setList(void* ptr, void* i);
void* QPdfWriter___dynamicPropertyNames_newList(void* ptr);
void* QPdfWriter___findChildren_atList(void* ptr, int i);
void QPdfWriter___findChildren_setList(void* ptr, void* i);
void* QPdfWriter___findChildren_newList(void* ptr);
void* QPdfWriter___findChildren_atList3(void* ptr, int i);
void QPdfWriter___findChildren_setList3(void* ptr, void* i);
void* QPdfWriter___findChildren_newList3(void* ptr);
void QPdfWriter_ChildEvent(void* ptr, void* event);
void QPdfWriter_ChildEventDefault(void* ptr, void* event);
void QPdfWriter_ConnectNotify(void* ptr, void* sign);
void QPdfWriter_ConnectNotifyDefault(void* ptr, void* sign);
void QPdfWriter_CustomEvent(void* ptr, void* event);
void QPdfWriter_CustomEventDefault(void* ptr, void* event);
void QPdfWriter_DeleteLater(void* ptr);
void QPdfWriter_DeleteLaterDefault(void* ptr);
void QPdfWriter_DisconnectNotify(void* ptr, void* sign);
void QPdfWriter_DisconnectNotifyDefault(void* ptr, void* sign);
char QPdfWriter_Event(void* ptr, void* e);
char QPdfWriter_EventDefault(void* ptr, void* e);
char QPdfWriter_EventFilter(void* ptr, void* watched, void* event);
char QPdfWriter_EventFilterDefault(void* ptr, void* watched, void* event);
void* QPdfWriter_MetaObject(void* ptr);
void* QPdfWriter_MetaObjectDefault(void* ptr);
void QPdfWriter_TimerEvent(void* ptr, void* event);
void QPdfWriter_TimerEventDefault(void* ptr, void* event);
void* QPen_NewQPen();
void* QPen_NewQPen2(long long style);
void* QPen_NewQPen3(void* color);
void* QPen_NewQPen4(void* brush, double width, long long style, long long cap, long long join);
void* QPen_NewQPen5(void* pen);
void* QPen_NewQPen6(void* pen);
void* QPen_Brush(void* ptr);
long long QPen_CapStyle(void* ptr);
void* QPen_Color(void* ptr);
double QPen_DashOffset(void* ptr);
struct QtGui_PackedList QPen_DashPattern(void* ptr);
char QPen_IsCosmetic(void* ptr);
char QPen_IsSolid(void* ptr);
long long QPen_JoinStyle(void* ptr);
double QPen_MiterLimit(void* ptr);
void QPen_SetBrush(void* ptr, void* brush);
void QPen_SetCapStyle(void* ptr, long long style);
void QPen_SetColor(void* ptr, void* color);
void QPen_SetCosmetic(void* ptr, char cosmetic);
void QPen_SetDashOffset(void* ptr, double offset);
void QPen_SetDashPattern(void* ptr, void* pattern);
void QPen_SetJoinStyle(void* ptr, long long style);
void QPen_SetMiterLimit(void* ptr, double limit);
void QPen_SetStyle(void* ptr, long long style);
void QPen_SetWidth(void* ptr, int width);
void QPen_SetWidthF(void* ptr, double width);
long long QPen_Style(void* ptr);
void QPen_Swap(void* ptr, void* other);
int QPen_Width(void* ptr);
double QPen_WidthF(void* ptr);
void QPen_DestroyQPen(void* ptr);
double QPen___dashPattern_atList(void* ptr, int i);
void QPen___dashPattern_setList(void* ptr, double i);
void* QPen___dashPattern_newList(void* ptr);
double QPen___setDashPattern_pattern_atList(void* ptr, int i);
void QPen___setDashPattern_pattern_setList(void* ptr, double i);
void* QPen___setDashPattern_pattern_newList(void* ptr);
void* QPicture_NewQPicture(int formatVersion);
void* QPicture_NewQPicture2(void* pic);
void* QPicture_BoundingRect(void* ptr);
struct QtGui_PackedString QPicture_Data(void* ptr);
char QPicture_IsNull(void* ptr);
char QPicture_Load(void* ptr, struct QtGui_PackedString fileName, char* format);
char QPicture_Load2(void* ptr, void* dev, char* format);
char QPicture_Play(void* ptr, void* painter);
char QPicture_Save(void* ptr, struct QtGui_PackedString fileName, char* format);
char QPicture_Save2(void* ptr, void* dev, char* format);
void QPicture_SetBoundingRect(void* ptr, void* r);
void QPicture_SetData(void* ptr, char* data, unsigned int size);
void QPicture_SetDataDefault(void* ptr, char* data, unsigned int size);
unsigned int QPicture_Size(void* ptr);
void QPicture_Swap(void* ptr, void* other);
void QPicture_DestroyQPicture(void* ptr);
void QPicture_DestroyQPictureDefault(void* ptr);
void* QPicture___inputFormats_atList(void* ptr, int i);
void QPicture___inputFormats_setList(void* ptr, void* i);
void* QPicture___inputFormats_newList(void* ptr);
void* QPicture___outputFormats_atList(void* ptr, int i);
void QPicture___outputFormats_setList(void* ptr, void* i);
void* QPicture___outputFormats_newList(void* ptr);
void* QPicture_PaintEngine(void* ptr);
void* QPicture_PaintEngineDefault(void* ptr);
void* QPictureFormatPlugin_NewQPictureFormatPlugin(void* parent);
char QPictureFormatPlugin_InstallIOHandler(void* ptr, struct QtGui_PackedString format);
char QPictureFormatPlugin_LoadPicture(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture);
char QPictureFormatPlugin_LoadPictureDefault(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture);
char QPictureFormatPlugin_SavePicture(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture);
char QPictureFormatPlugin_SavePictureDefault(void* ptr, struct QtGui_PackedString format, struct QtGui_PackedString fileName, void* picture);
void QPictureFormatPlugin_DestroyQPictureFormatPlugin(void* ptr);
void QPictureFormatPlugin_DestroyQPictureFormatPluginDefault(void* ptr);
void* QPictureFormatPlugin___children_atList(void* ptr, int i);
void QPictureFormatPlugin___children_setList(void* ptr, void* i);
void* QPictureFormatPlugin___children_newList(void* ptr);
void* QPictureFormatPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QPictureFormatPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QPictureFormatPlugin___dynamicPropertyNames_newList(void* ptr);
void* QPictureFormatPlugin___findChildren_atList(void* ptr, int i);
void QPictureFormatPlugin___findChildren_setList(void* ptr, void* i);
void* QPictureFormatPlugin___findChildren_newList(void* ptr);
void* QPictureFormatPlugin___findChildren_atList3(void* ptr, int i);
void QPictureFormatPlugin___findChildren_setList3(void* ptr, void* i);
void* QPictureFormatPlugin___findChildren_newList3(void* ptr);
void QPictureFormatPlugin_ChildEventDefault(void* ptr, void* event);
void QPictureFormatPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QPictureFormatPlugin_CustomEventDefault(void* ptr, void* event);
void QPictureFormatPlugin_DeleteLaterDefault(void* ptr);
void QPictureFormatPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QPictureFormatPlugin_EventDefault(void* ptr, void* e);
char QPictureFormatPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QPictureFormatPlugin_MetaObjectDefault(void* ptr);
void QPictureFormatPlugin_TimerEventDefault(void* ptr, void* event);
void* QPictureIO_NewQPictureIO();
void* QPictureIO_NewQPictureIO2(void* ioDevice, char* format);
void* QPictureIO_NewQPictureIO3(struct QtGui_PackedString fileName, char* format);
struct QtGui_PackedString QPictureIO_Description(void* ptr);
struct QtGui_PackedString QPictureIO_FileName(void* ptr);
struct QtGui_PackedString QPictureIO_Format(void* ptr);
float QPictureIO_Gamma(void* ptr);
struct QtGui_PackedList QPictureIO_QPictureIO_InputFormats();
void* QPictureIO_IoDevice(void* ptr);
struct QtGui_PackedList QPictureIO_QPictureIO_OutputFormats();
struct QtGui_PackedString QPictureIO_Parameters(void* ptr);
void* QPictureIO_Picture(void* ptr);
void* QPictureIO_QPictureIO_PictureFormat(struct QtGui_PackedString fileName);
void* QPictureIO_QPictureIO_PictureFormat2(void* d);
int QPictureIO_Quality(void* ptr);
char QPictureIO_Read(void* ptr);
void QPictureIO_SetDescription(void* ptr, struct QtGui_PackedString description);
void QPictureIO_SetFileName(void* ptr, struct QtGui_PackedString fileName);
void QPictureIO_SetFormat(void* ptr, char* format);
void QPictureIO_SetGamma(void* ptr, float gamma);
void QPictureIO_SetIODevice(void* ptr, void* ioDevice);
void QPictureIO_SetParameters(void* ptr, char* parameters);
void QPictureIO_SetPicture(void* ptr, void* picture);
void QPictureIO_SetQuality(void* ptr, int q);
void QPictureIO_SetStatus(void* ptr, int status);
int QPictureIO_Status(void* ptr);
char QPictureIO_Write(void* ptr);
void QPictureIO_DestroyQPictureIO(void* ptr);
void* QPictureIO___inputFormats_atList(void* ptr, int i);
void QPictureIO___inputFormats_setList(void* ptr, void* i);
void* QPictureIO___inputFormats_newList(void* ptr);
void* QPictureIO___outputFormats_atList(void* ptr, int i);
void QPictureIO___outputFormats_setList(void* ptr, void* i);
void* QPictureIO___outputFormats_newList(void* ptr);
void* QPixelFormat_NewQPixelFormat();
void* QPixelFormat_NewQPixelFormat2(long long colorModel, char* firstSize, char* secondSize, char* thirdSize, char* fourthSize, char* fifthSize, char* alphaSize, long long alphaUsage, long long alphaPosition, long long premultiplied, long long typeInterpretation, long long byteOrder, char* subEnum);
long long QPixelFormat_AlphaPosition(void* ptr);
struct QtGui_PackedString QPixelFormat_AlphaSize(void* ptr);
long long QPixelFormat_AlphaUsage(void* ptr);
struct QtGui_PackedString QPixelFormat_BitsPerPixel(void* ptr);
struct QtGui_PackedString QPixelFormat_BlackSize(void* ptr);
struct QtGui_PackedString QPixelFormat_BlueSize(void* ptr);
struct QtGui_PackedString QPixelFormat_BrightnessSize(void* ptr);
long long QPixelFormat_ByteOrder(void* ptr);
struct QtGui_PackedString QPixelFormat_ChannelCount(void* ptr);
long long QPixelFormat_ColorModel(void* ptr);
struct QtGui_PackedString QPixelFormat_CyanSize(void* ptr);
struct QtGui_PackedString QPixelFormat_GreenSize(void* ptr);
struct QtGui_PackedString QPixelFormat_HueSize(void* ptr);
struct QtGui_PackedString QPixelFormat_LightnessSize(void* ptr);
struct QtGui_PackedString QPixelFormat_MagentaSize(void* ptr);
long long QPixelFormat_Premultiplied(void* ptr);
struct QtGui_PackedString QPixelFormat_RedSize(void* ptr);
struct QtGui_PackedString QPixelFormat_SaturationSize(void* ptr);
long long QPixelFormat_TypeInterpretation(void* ptr);
struct QtGui_PackedString QPixelFormat_YellowSize(void* ptr);
long long QPixelFormat_YuvLayout(void* ptr);
void* QPixmap_NewQPixmap();
void* QPixmap_NewQPixmap2(void* size);
void* QPixmap_NewQPixmap3(struct QtGui_PackedString fileName, char* format, long long flags);
void* QPixmap_NewQPixmap5(void* pixmap);
long long QPixmap_CacheKey(void* ptr);
char QPixmap_ConvertFromImage(void* ptr, void* image, long long flags);
void* QPixmap_Copy(void* ptr, void* rectangle);
void* QPixmap_Copy2(void* ptr, int x, int y, int width, int height);
void* QPixmap_CreateHeuristicMask(void* ptr, char clipTight);
void* QPixmap_CreateMaskFromColor(void* ptr, void* maskColor, long long mode);
int QPixmap_QPixmap_DefaultDepth();
void QPixmap_Detach(void* ptr);
double QPixmap_DevicePixelRatio(void* ptr);
void QPixmap_Fill(void* ptr, void* color);
void* QPixmap_QPixmap_FromImage(void* image, long long flags);
void* QPixmap_QPixmap_FromImage2(void* image, long long flags);
void* QPixmap_QPixmap_FromImageReader(void* imageReader, long long flags);
char QPixmap_HasAlpha(void* ptr);
char QPixmap_HasAlphaChannel(void* ptr);
char QPixmap_IsNull(void* ptr);
char QPixmap_IsQBitmap(void* ptr);
char QPixmap_Load(void* ptr, struct QtGui_PackedString fileName, char* format, long long flags);
char QPixmap_LoadFromData(void* ptr, char* data, unsigned int l, char* format, long long flags);
char QPixmap_LoadFromData2(void* ptr, void* data, char* format, long long flags);
void* QPixmap_Mask(void* ptr);
void* QPixmap_Rect(void* ptr);
char QPixmap_Save(void* ptr, struct QtGui_PackedString fileName, char* format, int quality);
char QPixmap_Save2(void* ptr, void* device, char* format, int quality);
void* QPixmap_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode);
void* QPixmap_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode);
void* QPixmap_ScaledToHeight(void* ptr, int height, long long mode);
void* QPixmap_ScaledToWidth(void* ptr, int width, long long mode);
void QPixmap_Scroll(void* ptr, int dx, int dy, int x, int y, int width, int height, void* exposed);
void QPixmap_Scroll2(void* ptr, int dx, int dy, void* rect, void* exposed);
void QPixmap_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QPixmap_SetMask(void* ptr, void* mask);
void* QPixmap_Size(void* ptr);
void QPixmap_Swap(void* ptr, void* other);
void* QPixmap_ToImage(void* ptr);
void* QPixmap_Transformed(void* ptr, void* transform, long long mode);
void* QPixmap_QPixmap_TrueMatrix(void* matrix, int width, int height);
void QPixmap_DestroyQPixmap(void* ptr);
void QPixmap_DestroyQPixmapDefault(void* ptr);
void* QPixmap_ToVariant(void* ptr);
void* QPixmap_PaintEngine(void* ptr);
void* QPixmap_PaintEngineDefault(void* ptr);
int QPixmapCache_QPixmapCache_CacheLimit();
void QPixmapCache_QPixmapCache_Clear();
char QPixmapCache_QPixmapCache_Find3(struct QtGui_PackedString key, void* pixmap);
char QPixmapCache_QPixmapCache_Insert(struct QtGui_PackedString key, void* pixmap);
void QPixmapCache_QPixmapCache_Remove(struct QtGui_PackedString key);
void QPixmapCache_QPixmapCache_SetCacheLimit(int n);
void* QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(long long surfaceEventType);
long long QPlatformSurfaceEvent_SurfaceEventType(void* ptr);
void* QPointingDeviceUniqueId_NewQPointingDeviceUniqueId();
void* QPointingDeviceUniqueId_QPointingDeviceUniqueId_FromNumericId(long long id);
char QPointingDeviceUniqueId_IsValid(void* ptr);
long long QPointingDeviceUniqueId_NumericId(void* ptr);
void* QPolygon_NewQPolygon();
void* QPolygon_NewQPolygon2(int size);
void* QPolygon_NewQPolygon3(void* points);
void* QPolygon_NewQPolygon5(void* rectangle, char closed);
void* QPolygon_BoundingRect(void* ptr);
char QPolygon_ContainsPoint(void* ptr, void* point, long long fillRule);
void* QPolygon_Intersected(void* ptr, void* r);
char QPolygon_Intersects(void* ptr, void* p);
void QPolygon_Point(void* ptr, int index, int x, int y);
void* QPolygon_Point2(void* ptr, int index);
void QPolygon_PutPoints(void* ptr, int index, int nPoints, void* fromPolygon, int fromIndex);
void QPolygon_SetPoint(void* ptr, int index, int x, int y);
void QPolygon_SetPoint2(void* ptr, int index, void* point);
void QPolygon_SetPoints(void* ptr, int nPoints, int points);
void* QPolygon_Subtracted(void* ptr, void* r);
void QPolygon_Swap(void* ptr, void* other);
void QPolygon_Translate(void* ptr, int dx, int dy);
void QPolygon_Translate2(void* ptr, void* offset);
void* QPolygon_Translated(void* ptr, int dx, int dy);
void* QPolygon_Translated2(void* ptr, void* offset);
void* QPolygon_United(void* ptr, void* r);
void QPolygon_DestroyQPolygon(void* ptr);
void* QPolygon___QPolygon_points_atList3(void* ptr, int i);
void QPolygon___QPolygon_points_setList3(void* ptr, void* i);
void* QPolygon___QPolygon_points_newList3(void* ptr);
void* QPolygon___QPolygon_v_atList4(void* ptr, int i);
void QPolygon___QPolygon_v_setList4(void* ptr, void* i);
void* QPolygon___QPolygon_v_newList4(void* ptr);
void* QPolygon___QVector_other_atList4(void* ptr, int i);
void QPolygon___QVector_other_setList4(void* ptr, void* i);
void* QPolygon___QVector_other_newList4(void* ptr);
void* QPolygon___QVector_other_atList5(void* ptr, int i);
void QPolygon___QVector_other_setList5(void* ptr, void* i);
void* QPolygon___QVector_other_newList5(void* ptr);
void* QPolygon___append_value_atList3(void* ptr, int i);
void QPolygon___append_value_setList3(void* ptr, void* i);
void* QPolygon___append_value_newList3(void* ptr);
void* QPolygon___fill_atList(void* ptr, int i);
void QPolygon___fill_setList(void* ptr, void* i);
void* QPolygon___fill_newList(void* ptr);
void* QPolygon___fromList_atList(void* ptr, int i);
void QPolygon___fromList_setList(void* ptr, void* i);
void* QPolygon___fromList_newList(void* ptr);
void* QPolygon___fromList_list_atList(void* ptr, int i);
void QPolygon___fromList_list_setList(void* ptr, void* i);
void* QPolygon___fromList_list_newList(void* ptr);
void* QPolygon___fromStdVector_atList(void* ptr, int i);
void QPolygon___fromStdVector_setList(void* ptr, void* i);
void* QPolygon___fromStdVector_newList(void* ptr);
void* QPolygon___mid_atList(void* ptr, int i);
void QPolygon___mid_setList(void* ptr, void* i);
void* QPolygon___mid_newList(void* ptr);
void* QPolygon___swap_other_atList(void* ptr, int i);
void QPolygon___swap_other_setList(void* ptr, void* i);
void* QPolygon___swap_other_newList(void* ptr);
void* QPolygon___toList_atList(void* ptr, int i);
void QPolygon___toList_setList(void* ptr, void* i);
void* QPolygon___toList_newList(void* ptr);
void* QPolygonF_NewQPolygonF();
void* QPolygonF_NewQPolygonF2(int size);
void* QPolygonF_NewQPolygonF3(void* points);
void* QPolygonF_NewQPolygonF5(void* rectangle);
void* QPolygonF_NewQPolygonF6(void* polygon);
void* QPolygonF_NewQPolygonF7(void* polygon);
void* QPolygonF_BoundingRect(void* ptr);
char QPolygonF_ContainsPoint(void* ptr, void* point, long long fillRule);
void* QPolygonF_Intersected(void* ptr, void* r);
char QPolygonF_Intersects(void* ptr, void* p);
char QPolygonF_IsClosed(void* ptr);
void* QPolygonF_Subtracted(void* ptr, void* r);
void QPolygonF_Swap(void* ptr, void* other);
void* QPolygonF_ToPolygon(void* ptr);
void QPolygonF_Translate(void* ptr, void* offset);
void QPolygonF_Translate2(void* ptr, double dx, double dy);
void* QPolygonF_Translated(void* ptr, void* offset);
void* QPolygonF_Translated2(void* ptr, double dx, double dy);
void* QPolygonF_United(void* ptr, void* r);
void QPolygonF_DestroyQPolygonF(void* ptr);
void* QPolygonF___QPolygonF_points_atList3(void* ptr, int i);
void QPolygonF___QPolygonF_points_setList3(void* ptr, void* i);
void* QPolygonF___QPolygonF_points_newList3(void* ptr);
void* QPolygonF___QPolygonF_v_atList4(void* ptr, int i);
void QPolygonF___QPolygonF_v_setList4(void* ptr, void* i);
void* QPolygonF___QPolygonF_v_newList4(void* ptr);
void* QPolygonF___QVector_other_atList4(void* ptr, int i);
void QPolygonF___QVector_other_setList4(void* ptr, void* i);
void* QPolygonF___QVector_other_newList4(void* ptr);
void* QPolygonF___QVector_other_atList5(void* ptr, int i);
void QPolygonF___QVector_other_setList5(void* ptr, void* i);
void* QPolygonF___QVector_other_newList5(void* ptr);
void* QPolygonF___append_value_atList3(void* ptr, int i);
void QPolygonF___append_value_setList3(void* ptr, void* i);
void* QPolygonF___append_value_newList3(void* ptr);
void* QPolygonF___fill_atList(void* ptr, int i);
void QPolygonF___fill_setList(void* ptr, void* i);
void* QPolygonF___fill_newList(void* ptr);
void* QPolygonF___fromList_atList(void* ptr, int i);
void QPolygonF___fromList_setList(void* ptr, void* i);
void* QPolygonF___fromList_newList(void* ptr);
void* QPolygonF___fromList_list_atList(void* ptr, int i);
void QPolygonF___fromList_list_setList(void* ptr, void* i);
void* QPolygonF___fromList_list_newList(void* ptr);
void* QPolygonF___fromStdVector_atList(void* ptr, int i);
void QPolygonF___fromStdVector_setList(void* ptr, void* i);
void* QPolygonF___fromStdVector_newList(void* ptr);
void* QPolygonF___mid_atList(void* ptr, int i);
void QPolygonF___mid_setList(void* ptr, void* i);
void* QPolygonF___mid_newList(void* ptr);
void* QPolygonF___swap_other_atList(void* ptr, int i);
void QPolygonF___swap_other_setList(void* ptr, void* i);
void* QPolygonF___swap_other_newList(void* ptr);
void* QPolygonF___toList_atList(void* ptr, int i);
void QPolygonF___toList_setList(void* ptr, void* i);
void* QPolygonF___toList_newList(void* ptr);
void* QQuaternion_NewQQuaternion();
void* QQuaternion_NewQQuaternion3(float scalar, float xpos, float ypos, float zpos);
void* QQuaternion_NewQQuaternion4(float scalar, void* vector);
void* QQuaternion_NewQQuaternion5(void* vector);
void* QQuaternion_Conjugated(void* ptr);
float QQuaternion_QQuaternion_DotProduct(void* q1, void* q2);
void* QQuaternion_QQuaternion_FromAxes(void* xAxis, void* yAxis, void* zAxis);
void* QQuaternion_QQuaternion_FromAxisAndAngle(void* axis, float angle);
void* QQuaternion_QQuaternion_FromAxisAndAngle2(float x, float y, float z, float angle);
void* QQuaternion_QQuaternion_FromDirection(void* direction, void* up);
void* QQuaternion_QQuaternion_FromEulerAngles(float pitch, float yaw, float roll);
void* QQuaternion_QQuaternion_FromEulerAngles2(void* eulerAngles);
void QQuaternion_GetAxes(void* ptr, void* xAxis, void* yAxis, void* zAxis);
void QQuaternion_GetAxisAndAngle(void* ptr, float x, float y, float z, float angle);
void QQuaternion_GetAxisAndAngle2(void* ptr, void* axis, float angle);
void QQuaternion_GetEulerAngles(void* ptr, float pitch, float yaw, float roll);
void* QQuaternion_Inverted(void* ptr);
char QQuaternion_IsIdentity(void* ptr);
char QQuaternion_IsNull(void* ptr);
float QQuaternion_Length(void* ptr);
float QQuaternion_LengthSquared(void* ptr);
void* QQuaternion_QQuaternion_Nlerp(void* q1, void* q2, float t);
void QQuaternion_Normalize(void* ptr);
void* QQuaternion_Normalized(void* ptr);
void* QQuaternion_RotatedVector(void* ptr, void* vector);
void* QQuaternion_QQuaternion_RotationTo(void* from, void* to);
float QQuaternion_Scalar(void* ptr);
void QQuaternion_SetScalar(void* ptr, float scalar);
void QQuaternion_SetVector(void* ptr, void* vector);
void QQuaternion_SetVector2(void* ptr, float x, float y, float z);
void QQuaternion_SetX(void* ptr, float x);
void QQuaternion_SetY(void* ptr, float y);
void QQuaternion_SetZ(void* ptr, float z);
void* QQuaternion_QQuaternion_Slerp(void* q1, void* q2, float t);
void* QQuaternion_ToEulerAngles(void* ptr);
void* QQuaternion_ToVector4D(void* ptr);
void* QQuaternion_Vector(void* ptr);
float QQuaternion_X(void* ptr);
float QQuaternion_Y(void* ptr);
float QQuaternion_Z(void* ptr);
void* QRadialGradient_NewQRadialGradient();
void* QRadialGradient_NewQRadialGradient2(void* center, double radius, void* focalPoint);
void* QRadialGradient_NewQRadialGradient3(double cx, double cy, double radius, double fx, double fy);
void* QRadialGradient_NewQRadialGradient4(void* center, double radius);
void* QRadialGradient_NewQRadialGradient5(double cx, double cy, double radius);
void* QRadialGradient_NewQRadialGradient6(void* center, double centerRadius, void* focalPoint, double focalRadius);
void* QRadialGradient_NewQRadialGradient7(double cx, double cy, double centerRadius, double fx, double fy, double focalRadius);
void* QRadialGradient_Center(void* ptr);
double QRadialGradient_CenterRadius(void* ptr);
void* QRadialGradient_FocalPoint(void* ptr);
double QRadialGradient_FocalRadius(void* ptr);
double QRadialGradient_Radius(void* ptr);
void QRadialGradient_SetCenter(void* ptr, void* center);
void QRadialGradient_SetCenter2(void* ptr, double x, double y);
void QRadialGradient_SetCenterRadius(void* ptr, double radius);
void QRadialGradient_SetFocalPoint(void* ptr, void* focalPoint);
void QRadialGradient_SetFocalPoint2(void* ptr, double x, double y);
void QRadialGradient_SetFocalRadius(void* ptr, double radius);
void QRadialGradient_SetRadius(void* ptr, double radius);
void* QRasterWindow_NewQRasterWindow(void* parent);
void* QRawFont_NewQRawFont();
void* QRawFont_NewQRawFont2(struct QtGui_PackedString fileName, double pixelSize, long long hintingPreference);
void* QRawFont_NewQRawFont3(void* fontData, double pixelSize, long long hintingPreference);
void* QRawFont_NewQRawFont4(void* other);
struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes(void* ptr, void* glyphIndexes, long long layoutFlags);
struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes2(void* ptr, void* glyphIndexes);
char QRawFont_AdvancesForGlyphIndexes3(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs);
char QRawFont_AdvancesForGlyphIndexes4(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs, long long layoutFlags);
void* QRawFont_AlphaMapForGlyph(void* ptr, unsigned int glyphIndex, long long antialiasingType, void* transform);
double QRawFont_Ascent(void* ptr);
double QRawFont_AverageCharWidth(void* ptr);
void* QRawFont_BoundingRect(void* ptr, unsigned int glyphIndex);
double QRawFont_CapHeight(void* ptr);
double QRawFont_Descent(void* ptr);
struct QtGui_PackedString QRawFont_FamilyName(void* ptr);
void* QRawFont_FontTable(void* ptr, char* tagName);
void* QRawFont_QRawFont_FromFont(void* font, long long writingSystem);
char QRawFont_GlyphIndexesForChars(void* ptr, void* chars, int numChars, unsigned int glyphIndexes, int numGlyphs);
struct QtGui_PackedList QRawFont_GlyphIndexesForString(void* ptr, struct QtGui_PackedString text);
long long QRawFont_HintingPreference(void* ptr);
char QRawFont_IsValid(void* ptr);
double QRawFont_Leading(void* ptr);
double QRawFont_LineThickness(void* ptr);
void QRawFont_LoadFromData(void* ptr, void* fontData, double pixelSize, long long hintingPreference);
void QRawFont_LoadFromFile(void* ptr, struct QtGui_PackedString fileName, double pixelSize, long long hintingPreference);
double QRawFont_MaxCharWidth(void* ptr);
void* QRawFont_PathForGlyph(void* ptr, unsigned int glyphIndex);
double QRawFont_PixelSize(void* ptr);
void QRawFont_SetPixelSize(void* ptr, double pixelSize);
long long QRawFont_Style(void* ptr);
struct QtGui_PackedString QRawFont_StyleName(void* ptr);
struct QtGui_PackedList QRawFont_SupportedWritingSystems(void* ptr);
char QRawFont_SupportsCharacter(void* ptr, void* character);
char QRawFont_SupportsCharacter2(void* ptr, unsigned int ucs4);
void QRawFont_Swap(void* ptr, void* other);
double QRawFont_UnderlinePosition(void* ptr);
double QRawFont_UnitsPerEm(void* ptr);
int QRawFont_Weight(void* ptr);
double QRawFont_XHeight(void* ptr);
void QRawFont_DestroyQRawFont(void* ptr);
void* QRawFont___advancesForGlyphIndexes_atList(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_setList(void* ptr, void* i);
void* QRawFont___advancesForGlyphIndexes_newList(void* ptr);
unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i);
void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList(void* ptr);
void* QRawFont___advancesForGlyphIndexes_atList2(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_setList2(void* ptr, void* i);
void* QRawFont___advancesForGlyphIndexes_newList2(void* ptr);
unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList2(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList2(void* ptr, unsigned int i);
void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList2(void* ptr);
unsigned int QRawFont___glyphIndexesForString_atList(void* ptr, int i);
void QRawFont___glyphIndexesForString_setList(void* ptr, unsigned int i);
void* QRawFont___glyphIndexesForString_newList(void* ptr);
long long QRawFont___supportedWritingSystems_atList(void* ptr, int i);
void QRawFont___supportedWritingSystems_setList(void* ptr, long long i);
void* QRawFont___supportedWritingSystems_newList(void* ptr);
void* QRegExpValidator_NewQRegExpValidator(void* parent);
void* QRegExpValidator_NewQRegExpValidator2(void* rx, void* parent);
void* QRegExpValidator_RegExp(void* ptr);
void QRegExpValidator_ConnectRegExpChanged(void* ptr, long long t);
void QRegExpValidator_DisconnectRegExpChanged(void* ptr);
void QRegExpValidator_RegExpChanged(void* ptr, void* regExp);
void QRegExpValidator_SetRegExp(void* ptr, void* rx);
long long QRegExpValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos);
long long QRegExpValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos);
void QRegExpValidator_DestroyQRegExpValidator(void* ptr);
void QRegExpValidator_DestroyQRegExpValidatorDefault(void* ptr);
void* QRegion_NewQRegion();
void* QRegion_NewQRegion2(int x, int y, int w, int h, long long t);
void* QRegion_NewQRegion3(void* r, long long t);
void* QRegion_NewQRegion4(void* a, long long fillRule);
void* QRegion_NewQRegion5(void* r);
void* QRegion_NewQRegion6(void* other);
void* QRegion_NewQRegion7(void* bm);
void* QRegion_BoundingRect(void* ptr);
char QRegion_Contains(void* ptr, void* p);
char QRegion_Contains2(void* ptr, void* r);
void* QRegion_Intersected(void* ptr, void* r);
void* QRegion_Intersected2(void* ptr, void* rect);
char QRegion_Intersects(void* ptr, void* region);
char QRegion_Intersects2(void* ptr, void* rect);
char QRegion_IsEmpty(void* ptr);
char QRegion_IsNull(void* ptr);
int QRegion_RectCount(void* ptr);
void QRegion_SetRects(void* ptr, void* rects, int number);
void* QRegion_Subtracted(void* ptr, void* r);
void QRegion_Swap(void* ptr, void* other);
void QRegion_Translate(void* ptr, int dx, int dy);
void QRegion_Translate2(void* ptr, void* point);
void* QRegion_Translated(void* ptr, int dx, int dy);
void* QRegion_Translated2(void* ptr, void* p);
void* QRegion_United(void* ptr, void* r);
void* QRegion_United2(void* ptr, void* rect);
void* QRegion_Xored(void* ptr, void* r);
void* QRegion___rects_atList(void* ptr, int i);
void QRegion___rects_setList(void* ptr, void* i);
void* QRegion___rects_newList(void* ptr);
void* QRegularExpressionValidator_NewQRegularExpressionValidator(void* parent);
void* QRegularExpressionValidator_NewQRegularExpressionValidator2(void* re, void* parent);
void* QRegularExpressionValidator_RegularExpression(void* ptr);
void QRegularExpressionValidator_ConnectRegularExpressionChanged(void* ptr, long long t);
void QRegularExpressionValidator_DisconnectRegularExpressionChanged(void* ptr);
void QRegularExpressionValidator_RegularExpressionChanged(void* ptr, void* re);
void QRegularExpressionValidator_SetRegularExpression(void* ptr, void* re);
void QRegularExpressionValidator_SetRegularExpressionDefault(void* ptr, void* re);
long long QRegularExpressionValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos);
long long QRegularExpressionValidator_ValidateDefault(void* ptr, struct QtGui_PackedString input, int pos);
void QRegularExpressionValidator_DestroyQRegularExpressionValidator(void* ptr);
void QRegularExpressionValidator_DestroyQRegularExpressionValidatorDefault(void* ptr);
void* QResizeEvent_NewQResizeEvent(void* size, void* oldSize);
void* QResizeEvent_OldSize(void* ptr);
void* QResizeEvent_Size(void* ptr);
unsigned short QRgba64_Alpha(void* ptr);
struct QtGui_PackedString QRgba64_Alpha8(void* ptr);
unsigned short QRgba64_Blue(void* ptr);
struct QtGui_PackedString QRgba64_Blue8(void* ptr);
unsigned short QRgba64_Green(void* ptr);
struct QtGui_PackedString QRgba64_Green8(void* ptr);
char QRgba64_IsOpaque(void* ptr);
char QRgba64_IsTransparent(void* ptr);
unsigned short QRgba64_Red(void* ptr);
struct QtGui_PackedString QRgba64_Red8(void* ptr);
void QRgba64_SetAlpha(void* ptr, unsigned short alpha);
void QRgba64_SetBlue(void* ptr, unsigned short blue);
void QRgba64_SetGreen(void* ptr, unsigned short green);
void QRgba64_SetRed(void* ptr, unsigned short red);
unsigned int QRgba64_ToArgb32(void* ptr);
unsigned short QRgba64_ToRgb16(void* ptr);
int QScreen_AngleBetween(void* ptr, long long a, long long b);
void* QScreen_AvailableGeometry(void* ptr);
void QScreen_ConnectAvailableGeometryChanged(void* ptr, long long t);
void QScreen_DisconnectAvailableGeometryChanged(void* ptr);
void QScreen_AvailableGeometryChanged(void* ptr, void* geometry);
void* QScreen_AvailableSize(void* ptr);
void* QScreen_AvailableVirtualGeometry(void* ptr);
void* QScreen_AvailableVirtualSize(void* ptr);
int QScreen_Depth(void* ptr);
double QScreen_DevicePixelRatio(void* ptr);
void* QScreen_Geometry(void* ptr);
void QScreen_ConnectGeometryChanged(void* ptr, long long t);
void QScreen_DisconnectGeometryChanged(void* ptr);
void QScreen_GeometryChanged(void* ptr, void* geometry);
void* QScreen_GrabWindow(void* ptr, uintptr_t window, int x, int y, int width, int height);
char QScreen_IsLandscape(void* ptr, long long o);
char QScreen_IsPortrait(void* ptr, long long o);
double QScreen_LogicalDotsPerInch(void* ptr);
void QScreen_ConnectLogicalDotsPerInchChanged(void* ptr, long long t);
void QScreen_DisconnectLogicalDotsPerInchChanged(void* ptr);
void QScreen_LogicalDotsPerInchChanged(void* ptr, double dpi);
double QScreen_LogicalDotsPerInchX(void* ptr);
double QScreen_LogicalDotsPerInchY(void* ptr);
struct QtGui_PackedString QScreen_Manufacturer(void* ptr);
void* QScreen_MapBetween(void* ptr, long long a, long long b, void* rect);
struct QtGui_PackedString QScreen_Model(void* ptr);
struct QtGui_PackedString QScreen_Name(void* ptr);
long long QScreen_NativeOrientation(void* ptr);
long long QScreen_Orientation(void* ptr);
void QScreen_ConnectOrientationChanged(void* ptr, long long t);
void QScreen_DisconnectOrientationChanged(void* ptr);
void QScreen_OrientationChanged(void* ptr, long long orientation);
long long QScreen_OrientationUpdateMask(void* ptr);
double QScreen_PhysicalDotsPerInch(void* ptr);
void QScreen_ConnectPhysicalDotsPerInchChanged(void* ptr, long long t);
void QScreen_DisconnectPhysicalDotsPerInchChanged(void* ptr);
void QScreen_PhysicalDotsPerInchChanged(void* ptr, double dpi);
double QScreen_PhysicalDotsPerInchX(void* ptr);
double QScreen_PhysicalDotsPerInchY(void* ptr);
void* QScreen_PhysicalSize(void* ptr);
void QScreen_ConnectPhysicalSizeChanged(void* ptr, long long t);
void QScreen_DisconnectPhysicalSizeChanged(void* ptr);
void QScreen_PhysicalSizeChanged(void* ptr, void* size);
long long QScreen_PrimaryOrientation(void* ptr);
void QScreen_ConnectPrimaryOrientationChanged(void* ptr, long long t);
void QScreen_DisconnectPrimaryOrientationChanged(void* ptr);
void QScreen_PrimaryOrientationChanged(void* ptr, long long orientation);
double QScreen_RefreshRate(void* ptr);
void QScreen_ConnectRefreshRateChanged(void* ptr, long long t);
void QScreen_DisconnectRefreshRateChanged(void* ptr);
void QScreen_RefreshRateChanged(void* ptr, double refreshRate);
struct QtGui_PackedString QScreen_SerialNumber(void* ptr);
void QScreen_SetOrientationUpdateMask(void* ptr, long long mask);
void* QScreen_Size(void* ptr);
void* QScreen_TransformBetween(void* ptr, long long a, long long b, void* target);
void* QScreen_VirtualGeometry(void* ptr);
void QScreen_ConnectVirtualGeometryChanged(void* ptr, long long t);
void QScreen_DisconnectVirtualGeometryChanged(void* ptr);
void QScreen_VirtualGeometryChanged(void* ptr, void* rect);
void* QScreen_VirtualSiblingAt(void* ptr, void* point);
struct QtGui_PackedList QScreen_VirtualSiblings(void* ptr);
void* QScreen_VirtualSize(void* ptr);
void QScreen_DestroyQScreen(void* ptr);
void QScreen_DestroyQScreenDefault(void* ptr);
void* QScreen___virtualSiblings_atList(void* ptr, int i);
void QScreen___virtualSiblings_setList(void* ptr, void* i);
void* QScreen___virtualSiblings_newList(void* ptr);
void* QScreen___children_atList(void* ptr, int i);
void QScreen___children_setList(void* ptr, void* i);
void* QScreen___children_newList(void* ptr);
void* QScreen___dynamicPropertyNames_atList(void* ptr, int i);
void QScreen___dynamicPropertyNames_setList(void* ptr, void* i);
void* QScreen___dynamicPropertyNames_newList(void* ptr);
void* QScreen___findChildren_atList(void* ptr, int i);
void QScreen___findChildren_setList(void* ptr, void* i);
void* QScreen___findChildren_newList(void* ptr);
void* QScreen___findChildren_atList3(void* ptr, int i);
void QScreen___findChildren_setList3(void* ptr, void* i);
void* QScreen___findChildren_newList3(void* ptr);
void QScreen_ChildEventDefault(void* ptr, void* event);
void QScreen_ConnectNotifyDefault(void* ptr, void* sign);
void QScreen_CustomEventDefault(void* ptr, void* event);
void QScreen_DeleteLaterDefault(void* ptr);
void QScreen_DisconnectNotifyDefault(void* ptr, void* sign);
char QScreen_EventDefault(void* ptr, void* e);
char QScreen_EventFilterDefault(void* ptr, void* watched, void* event);
void* QScreen_MetaObjectDefault(void* ptr);
void QScreen_TimerEventDefault(void* ptr, void* event);
void* QScreenOrientationChangeEvent_NewQScreenOrientationChangeEvent(void* screen, long long screenOrientation);
long long QScreenOrientationChangeEvent_Orientation(void* ptr);
void* QScreenOrientationChangeEvent_Screen(void* ptr);
void QScreenOrientationChangeEvent_DestroyQScreenOrientationChangeEvent(void* ptr);
void QScreenOrientationChangeEvent_DestroyQScreenOrientationChangeEventDefault(void* ptr);
void* QScrollEvent_NewQScrollEvent(void* contentPos, void* overshootDistance, long long scrollState);
void* QScrollEvent_ContentPos(void* ptr);
void* QScrollEvent_OvershootDistance(void* ptr);
long long QScrollEvent_ScrollState(void* ptr);
void QScrollEvent_DestroyQScrollEvent(void* ptr);
void QScrollEvent_DestroyQScrollEventDefault(void* ptr);
void* QScrollPrepareEvent_NewQScrollPrepareEvent(void* startPos);
void* QScrollPrepareEvent_ContentPos(void* ptr);
void* QScrollPrepareEvent_ContentPosRange(void* ptr);
void QScrollPrepareEvent_SetContentPos(void* ptr, void* pos);
void QScrollPrepareEvent_SetContentPosRange(void* ptr, void* rect);
void QScrollPrepareEvent_SetViewportSize(void* ptr, void* size);
void* QScrollPrepareEvent_StartPos(void* ptr);
void* QScrollPrepareEvent_ViewportSize(void* ptr);
void QScrollPrepareEvent_DestroyQScrollPrepareEvent(void* ptr);
void QScrollPrepareEvent_DestroyQScrollPrepareEventDefault(void* ptr);
char QSessionManager_AllowsErrorInteraction(void* ptr);
char QSessionManager_AllowsInteraction(void* ptr);
void QSessionManager_Cancel(void* ptr);
struct QtGui_PackedString QSessionManager_DiscardCommand(void* ptr);
char QSessionManager_IsPhase2(void* ptr);
void QSessionManager_Release(void* ptr);
void QSessionManager_RequestPhase2(void* ptr);
struct QtGui_PackedString QSessionManager_RestartCommand(void* ptr);
long long QSessionManager_RestartHint(void* ptr);
struct QtGui_PackedString QSessionManager_SessionId(void* ptr);
struct QtGui_PackedString QSessionManager_SessionKey(void* ptr);
void QSessionManager_SetDiscardCommand(void* ptr, struct QtGui_PackedString command);
void QSessionManager_SetManagerProperty(void* ptr, struct QtGui_PackedString name, struct QtGui_PackedString value);
void QSessionManager_SetManagerProperty2(void* ptr, struct QtGui_PackedString name, struct QtGui_PackedString value);
void QSessionManager_SetRestartCommand(void* ptr, struct QtGui_PackedString command);
void QSessionManager_SetRestartHint(void* ptr, long long hint);
void* QSessionManager___children_atList(void* ptr, int i);
void QSessionManager___children_setList(void* ptr, void* i);
void* QSessionManager___children_newList(void* ptr);
void* QSessionManager___dynamicPropertyNames_atList(void* ptr, int i);
void QSessionManager___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSessionManager___dynamicPropertyNames_newList(void* ptr);
void* QSessionManager___findChildren_atList(void* ptr, int i);
void QSessionManager___findChildren_setList(void* ptr, void* i);
void* QSessionManager___findChildren_newList(void* ptr);
void* QSessionManager___findChildren_atList3(void* ptr, int i);
void QSessionManager___findChildren_setList3(void* ptr, void* i);
void* QSessionManager___findChildren_newList3(void* ptr);
void QSessionManager_ChildEventDefault(void* ptr, void* event);
void QSessionManager_ConnectNotifyDefault(void* ptr, void* sign);
void QSessionManager_CustomEventDefault(void* ptr, void* event);
void QSessionManager_DeleteLaterDefault(void* ptr);
void QSessionManager_DisconnectNotifyDefault(void* ptr, void* sign);
char QSessionManager_EventDefault(void* ptr, void* e);
char QSessionManager_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSessionManager_MetaObjectDefault(void* ptr);
void QSessionManager_TimerEventDefault(void* ptr, void* event);
void* QShortcutEvent_NewQShortcutEvent(void* key, int id, char ambiguous);
char QShortcutEvent_IsAmbiguous(void* ptr);
void* QShortcutEvent_Key(void* ptr);
int QShortcutEvent_ShortcutId(void* ptr);
void QShortcutEvent_DestroyQShortcutEvent(void* ptr);
void QShortcutEvent_DestroyQShortcutEventDefault(void* ptr);
void* QShowEvent_NewQShowEvent();
void* QStandardItem_NewQStandardItem();
void* QStandardItem_NewQStandardItem2(struct QtGui_PackedString text);
void* QStandardItem_NewQStandardItem3(void* icon, struct QtGui_PackedString text);
void* QStandardItem_NewQStandardItem4(int rows, int columns);
void* QStandardItem_NewQStandardItem5(void* other);
struct QtGui_PackedString QStandardItem_AccessibleDescription(void* ptr);
struct QtGui_PackedString QStandardItem_AccessibleText(void* ptr);
void QStandardItem_AppendColumn(void* ptr, void* items);
void QStandardItem_AppendRow(void* ptr, void* items);
void QStandardItem_AppendRow2(void* ptr, void* item);
void QStandardItem_AppendRows(void* ptr, void* items);
void* QStandardItem_Background(void* ptr);
long long QStandardItem_CheckState(void* ptr);
void* QStandardItem_Child(void* ptr, int row, int column);
void QStandardItem_ClearData(void* ptr);
void* QStandardItem_Clone(void* ptr);
void* QStandardItem_CloneDefault(void* ptr);
int QStandardItem_Column(void* ptr);
int QStandardItem_ColumnCount(void* ptr);
void* QStandardItem_Data(void* ptr, int role);
void* QStandardItem_DataDefault(void* ptr, int role);
void QStandardItem_EmitDataChanged(void* ptr);
long long QStandardItem_Flags(void* ptr);
void* QStandardItem_Font(void* ptr);
void* QStandardItem_Foreground(void* ptr);
char QStandardItem_HasChildren(void* ptr);
void* QStandardItem_Icon(void* ptr);
void* QStandardItem_Index(void* ptr);
void QStandardItem_InsertColumn(void* ptr, int column, void* items);
void QStandardItem_InsertColumns(void* ptr, int column, int count);
void QStandardItem_InsertRow(void* ptr, int row, void* items);
void QStandardItem_InsertRow2(void* ptr, int row, void* item);
void QStandardItem_InsertRows(void* ptr, int row, void* items);
void QStandardItem_InsertRows2(void* ptr, int row, int count);
char QStandardItem_IsAutoTristate(void* ptr);
char QStandardItem_IsCheckable(void* ptr);
char QStandardItem_IsDragEnabled(void* ptr);
char QStandardItem_IsDropEnabled(void* ptr);
char QStandardItem_IsEditable(void* ptr);
char QStandardItem_IsEnabled(void* ptr);
char QStandardItem_IsSelectable(void* ptr);
char QStandardItem_IsUserTristate(void* ptr);
void* QStandardItem_Model(void* ptr);
void* QStandardItem_Parent(void* ptr);
void QStandardItem_Read(void* ptr, void* in);
void QStandardItem_ReadDefault(void* ptr, void* in);
void QStandardItem_RemoveColumn(void* ptr, int column);
void QStandardItem_RemoveColumns(void* ptr, int column, int count);
void QStandardItem_RemoveRow(void* ptr, int row);
void QStandardItem_RemoveRows(void* ptr, int row, int count);
int QStandardItem_Row(void* ptr);
int QStandardItem_RowCount(void* ptr);
void QStandardItem_SetAccessibleDescription(void* ptr, struct QtGui_PackedString accessibleDescription);
void QStandardItem_SetAccessibleText(void* ptr, struct QtGui_PackedString accessibleText);
void QStandardItem_SetAutoTristate(void* ptr, char tristate);
void QStandardItem_SetBackground(void* ptr, void* brush);
void QStandardItem_SetCheckState(void* ptr, long long state);
void QStandardItem_SetCheckable(void* ptr, char checkable);
void QStandardItem_SetChild(void* ptr, int row, int column, void* item);
void QStandardItem_SetChild2(void* ptr, int row, void* item);
void QStandardItem_SetColumnCount(void* ptr, int columns);
void QStandardItem_SetData(void* ptr, void* value, int role);
void QStandardItem_SetDataDefault(void* ptr, void* value, int role);
void QStandardItem_SetDragEnabled(void* ptr, char dragEnabled);
void QStandardItem_SetDropEnabled(void* ptr, char dropEnabled);
void QStandardItem_SetEditable(void* ptr, char editable);
void QStandardItem_SetEnabled(void* ptr, char enabled);
void QStandardItem_SetFlags(void* ptr, long long flags);
void QStandardItem_SetFont(void* ptr, void* font);
void QStandardItem_SetForeground(void* ptr, void* brush);
void QStandardItem_SetIcon(void* ptr, void* icon);
void QStandardItem_SetRowCount(void* ptr, int rows);
void QStandardItem_SetSelectable(void* ptr, char selectable);
void QStandardItem_SetSizeHint(void* ptr, void* size);
void QStandardItem_SetStatusTip(void* ptr, struct QtGui_PackedString statusTip);
void QStandardItem_SetText(void* ptr, struct QtGui_PackedString text);
void QStandardItem_SetTextAlignment(void* ptr, long long alignment);
void QStandardItem_SetToolTip(void* ptr, struct QtGui_PackedString toolTip);
void QStandardItem_SetUserTristate(void* ptr, char tristate);
void QStandardItem_SetWhatsThis(void* ptr, struct QtGui_PackedString whatsThis);
void* QStandardItem_SizeHint(void* ptr);
void QStandardItem_SortChildren(void* ptr, int column, long long order);
struct QtGui_PackedString QStandardItem_StatusTip(void* ptr);
void* QStandardItem_TakeChild(void* ptr, int row, int column);
struct QtGui_PackedList QStandardItem_TakeColumn(void* ptr, int column);
struct QtGui_PackedList QStandardItem_TakeRow(void* ptr, int row);
struct QtGui_PackedString QStandardItem_Text(void* ptr);
long long QStandardItem_TextAlignment(void* ptr);
struct QtGui_PackedString QStandardItem_ToolTip(void* ptr);
int QStandardItem_Type(void* ptr);
int QStandardItem_TypeDefault(void* ptr);
struct QtGui_PackedString QStandardItem_WhatsThis(void* ptr);
void QStandardItem_Write(void* ptr, void* out);
void QStandardItem_WriteDefault(void* ptr, void* out);
void QStandardItem_DestroyQStandardItem(void* ptr);
void QStandardItem_DestroyQStandardItemDefault(void* ptr);
void* QStandardItem___appendColumn_items_atList(void* ptr, int i);
void QStandardItem___appendColumn_items_setList(void* ptr, void* i);
void* QStandardItem___appendColumn_items_newList(void* ptr);
void* QStandardItem___appendRow_items_atList(void* ptr, int i);
void QStandardItem___appendRow_items_setList(void* ptr, void* i);
void* QStandardItem___appendRow_items_newList(void* ptr);
void* QStandardItem___appendRows_items_atList(void* ptr, int i);
void QStandardItem___appendRows_items_setList(void* ptr, void* i);
void* QStandardItem___appendRows_items_newList(void* ptr);
void* QStandardItem___insertColumn_items_atList(void* ptr, int i);
void QStandardItem___insertColumn_items_setList(void* ptr, void* i);
void* QStandardItem___insertColumn_items_newList(void* ptr);
void* QStandardItem___insertRow_items_atList(void* ptr, int i);
void QStandardItem___insertRow_items_setList(void* ptr, void* i);
void* QStandardItem___insertRow_items_newList(void* ptr);
void* QStandardItem___insertRows_items_atList(void* ptr, int i);
void QStandardItem___insertRows_items_setList(void* ptr, void* i);
void* QStandardItem___insertRows_items_newList(void* ptr);
void* QStandardItem___takeColumn_atList(void* ptr, int i);
void QStandardItem___takeColumn_setList(void* ptr, void* i);
void* QStandardItem___takeColumn_newList(void* ptr);
void* QStandardItem___takeRow_atList(void* ptr, int i);
void QStandardItem___takeRow_setList(void* ptr, void* i);
void* QStandardItem___takeRow_newList(void* ptr);
void* QStandardItemModel_NewQStandardItemModel(void* parent);
void* QStandardItemModel_NewQStandardItemModel2(int rows, int columns, void* parent);
void QStandardItemModel_AppendColumn(void* ptr, void* items);
void QStandardItemModel_AppendRow(void* ptr, void* items);
void QStandardItemModel_AppendRow2(void* ptr, void* item);
void QStandardItemModel_Clear(void* ptr);
char QStandardItemModel_ClearItemData(void* ptr, void* index);
int QStandardItemModel_ColumnCount(void* ptr, void* parent);
int QStandardItemModel_ColumnCountDefault(void* ptr, void* parent);
void* QStandardItemModel_Data(void* ptr, void* index, int role);
void* QStandardItemModel_DataDefault(void* ptr, void* index, int role);
char QStandardItemModel_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
struct QtGui_PackedList QStandardItemModel_FindItems(void* ptr, struct QtGui_PackedString text, long long flags, int column);
long long QStandardItemModel_FlagsDefault(void* ptr, void* index);
char QStandardItemModel_HasChildrenDefault(void* ptr, void* parent);
void* QStandardItemModel_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
void* QStandardItemModel_HorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_Index(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexFromItem(void* ptr, void* item);
void QStandardItemModel_InsertColumn(void* ptr, int column, void* items);
char QStandardItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
void QStandardItemModel_InsertRow(void* ptr, int row, void* items);
void QStandardItemModel_InsertRow2(void* ptr, int row, void* item);
char QStandardItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
void* QStandardItemModel_InvisibleRootItem(void* ptr);
void* QStandardItemModel_Item(void* ptr, int row, int column);
void QStandardItemModel_ConnectItemChanged(void* ptr, long long t);
void QStandardItemModel_DisconnectItemChanged(void* ptr);
void QStandardItemModel_ItemChanged(void* ptr, void* item);
struct QtGui_PackedList QStandardItemModel_ItemDataDefault(void* ptr, void* index);
void* QStandardItemModel_ItemFromIndex(void* ptr, void* index);
void* QStandardItemModel_ItemPrototype(void* ptr);
void* QStandardItemModel_MimeDataDefault(void* ptr, void* indexes);
struct QtGui_PackedString QStandardItemModel_MimeTypesDefault(void* ptr);
void* QStandardItemModel_Parent(void* ptr, void* child);
void* QStandardItemModel_ParentDefault(void* ptr, void* child);
char QStandardItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char QStandardItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
int QStandardItemModel_RowCount(void* ptr, void* parent);
int QStandardItemModel_RowCountDefault(void* ptr, void* parent);
void QStandardItemModel_SetColumnCount(void* ptr, int columns);
char QStandardItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
char QStandardItemModel_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
void QStandardItemModel_SetHorizontalHeaderItem(void* ptr, int column, void* item);
void QStandardItemModel_SetHorizontalHeaderLabels(void* ptr, struct QtGui_PackedString labels);
void QStandardItemModel_SetItem(void* ptr, int row, int column, void* item);
void QStandardItemModel_SetItem2(void* ptr, int row, void* item);
char QStandardItemModel_SetItemDataDefault(void* ptr, void* index, void* roles);
void QStandardItemModel_SetItemPrototype(void* ptr, void* item);
void QStandardItemModel_SetItemRoleNames(void* ptr, void* roleNames);
void QStandardItemModel_SetRowCount(void* ptr, int rows);
void QStandardItemModel_SetSortRole(void* ptr, int role);
void QStandardItemModel_SetVerticalHeaderItem(void* ptr, int row, void* item);
void QStandardItemModel_SetVerticalHeaderLabels(void* ptr, struct QtGui_PackedString labels);
void* QStandardItemModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void QStandardItemModel_SortDefault(void* ptr, int column, long long order);
int QStandardItemModel_SortRole(void* ptr);
long long QStandardItemModel_SupportedDropActionsDefault(void* ptr);
struct QtGui_PackedList QStandardItemModel_TakeColumn(void* ptr, int column);
void* QStandardItemModel_TakeHorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_TakeItem(void* ptr, int row, int column);
struct QtGui_PackedList QStandardItemModel_TakeRow(void* ptr, int row);
void* QStandardItemModel_TakeVerticalHeaderItem(void* ptr, int row);
void* QStandardItemModel_VerticalHeaderItem(void* ptr, int row);
void QStandardItemModel_DestroyQStandardItemModel(void* ptr);
void QStandardItemModel_DestroyQStandardItemModelDefault(void* ptr);
void* QStandardItemModel___appendColumn_items_atList(void* ptr, int i);
void QStandardItemModel___appendColumn_items_setList(void* ptr, void* i);
void* QStandardItemModel___appendColumn_items_newList(void* ptr);
void* QStandardItemModel___appendRow_items_atList(void* ptr, int i);
void QStandardItemModel___appendRow_items_setList(void* ptr, void* i);
void* QStandardItemModel___appendRow_items_newList(void* ptr);
void* QStandardItemModel___findItems_atList(void* ptr, int i);
void QStandardItemModel___findItems_setList(void* ptr, void* i);
void* QStandardItemModel___findItems_newList(void* ptr);
void* QStandardItemModel___insertColumn_items_atList(void* ptr, int i);
void QStandardItemModel___insertColumn_items_setList(void* ptr, void* i);
void* QStandardItemModel___insertColumn_items_newList(void* ptr);
void* QStandardItemModel___insertRow_items_atList(void* ptr, int i);
void QStandardItemModel___insertRow_items_setList(void* ptr, void* i);
void* QStandardItemModel___insertRow_items_newList(void* ptr);
void* QStandardItemModel___itemData_atList(void* ptr, int v, int i);
void QStandardItemModel___itemData_setList(void* ptr, int key, void* i);
void* QStandardItemModel___itemData_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___itemData_keyList(void* ptr);
void* QStandardItemModel___mimeData_indexes_atList(void* ptr, int i);
void QStandardItemModel___mimeData_indexes_setList(void* ptr, void* i);
void* QStandardItemModel___mimeData_indexes_newList(void* ptr);
void* QStandardItemModel___setItemData_roles_atList(void* ptr, int v, int i);
void QStandardItemModel___setItemData_roles_setList(void* ptr, int key, void* i);
void* QStandardItemModel___setItemData_roles_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___setItemData_roles_keyList(void* ptr);
void* QStandardItemModel___setItemRoleNames_roleNames_atList(void* ptr, int v, int i);
void QStandardItemModel___setItemRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QStandardItemModel___setItemRoleNames_roleNames_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___setItemRoleNames_roleNames_keyList(void* ptr);
void* QStandardItemModel___takeColumn_atList(void* ptr, int i);
void QStandardItemModel___takeColumn_setList(void* ptr, void* i);
void* QStandardItemModel___takeColumn_newList(void* ptr);
void* QStandardItemModel___takeRow_atList(void* ptr, int i);
void QStandardItemModel___takeRow_setList(void* ptr, void* i);
void* QStandardItemModel___takeRow_newList(void* ptr);
int QStandardItemModel_____itemData_keyList_atList(void* ptr, int i);
void QStandardItemModel_____itemData_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____itemData_keyList_newList(void* ptr);
int QStandardItemModel_____setItemData_roles_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setItemData_roles_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setItemData_roles_keyList_newList(void* ptr);
int QStandardItemModel_____setItemRoleNames_roleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setItemRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setItemRoleNames_roleNames_keyList_newList(void* ptr);
void* QStandardItemModel___changePersistentIndexList_from_atList(void* ptr, int i);
void QStandardItemModel___changePersistentIndexList_from_setList(void* ptr, void* i);
void* QStandardItemModel___changePersistentIndexList_from_newList(void* ptr);
void* QStandardItemModel___changePersistentIndexList_to_atList(void* ptr, int i);
void QStandardItemModel___changePersistentIndexList_to_setList(void* ptr, void* i);
void* QStandardItemModel___changePersistentIndexList_to_newList(void* ptr);
int QStandardItemModel___dataChanged_roles_atList(void* ptr, int i);
void QStandardItemModel___dataChanged_roles_setList(void* ptr, int i);
void* QStandardItemModel___dataChanged_roles_newList(void* ptr);
void* QStandardItemModel___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void QStandardItemModel___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* QStandardItemModel___layoutAboutToBeChanged_parents_newList(void* ptr);
void* QStandardItemModel___layoutChanged_parents_atList(void* ptr, int i);
void QStandardItemModel___layoutChanged_parents_setList(void* ptr, void* i);
void* QStandardItemModel___layoutChanged_parents_newList(void* ptr);
void* QStandardItemModel___match_atList(void* ptr, int i);
void QStandardItemModel___match_setList(void* ptr, void* i);
void* QStandardItemModel___match_newList(void* ptr);
void* QStandardItemModel___persistentIndexList_atList(void* ptr, int i);
void QStandardItemModel___persistentIndexList_setList(void* ptr, void* i);
void* QStandardItemModel___persistentIndexList_newList(void* ptr);
void* QStandardItemModel___roleNames_atList(void* ptr, int v, int i);
void QStandardItemModel___roleNames_setList(void* ptr, int key, void* i);
void* QStandardItemModel___roleNames_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___roleNames_keyList(void* ptr);
int QStandardItemModel_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____doSetRoleNames_roleNames_keyList_newList(void* ptr);
int QStandardItemModel_____roleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____roleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____roleNames_keyList_newList(void* ptr);
int QStandardItemModel_____setRoleNames_roleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setRoleNames_roleNames_keyList_newList(void* ptr);
void* QStandardItemModel___children_atList(void* ptr, int i);
void QStandardItemModel___children_setList(void* ptr, void* i);
void* QStandardItemModel___children_newList(void* ptr);
void* QStandardItemModel___dynamicPropertyNames_atList(void* ptr, int i);
void QStandardItemModel___dynamicPropertyNames_setList(void* ptr, void* i);
void* QStandardItemModel___dynamicPropertyNames_newList(void* ptr);
void* QStandardItemModel___findChildren_atList(void* ptr, int i);
void QStandardItemModel___findChildren_setList(void* ptr, void* i);
void* QStandardItemModel___findChildren_newList(void* ptr);
void* QStandardItemModel___findChildren_atList3(void* ptr, int i);
void QStandardItemModel___findChildren_setList3(void* ptr, void* i);
void* QStandardItemModel___findChildren_newList3(void* ptr);
void* QStandardItemModel_BuddyDefault(void* ptr, void* index);
char QStandardItemModel_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QStandardItemModel_CanFetchMoreDefault(void* ptr, void* parent);
void QStandardItemModel_FetchMoreDefault(void* ptr, void* parent);
struct QtGui_PackedList QStandardItemModel_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
char QStandardItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QStandardItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void QStandardItemModel_ResetInternalDataDefault(void* ptr);
void QStandardItemModel_RevertDefault(void* ptr);
struct QtGui_PackedList QStandardItemModel_RoleNamesDefault(void* ptr);
void* QStandardItemModel_SpanDefault(void* ptr, void* index);
char QStandardItemModel_SubmitDefault(void* ptr);
long long QStandardItemModel_SupportedDragActionsDefault(void* ptr);
void QStandardItemModel_ChildEventDefault(void* ptr, void* event);
void QStandardItemModel_ConnectNotifyDefault(void* ptr, void* sign);
void QStandardItemModel_CustomEventDefault(void* ptr, void* event);
void QStandardItemModel_DeleteLaterDefault(void* ptr);
void QStandardItemModel_DisconnectNotifyDefault(void* ptr, void* sign);
char QStandardItemModel_EventDefault(void* ptr, void* e);
char QStandardItemModel_EventFilterDefault(void* ptr, void* watched, void* event);
void* QStandardItemModel_MetaObjectDefault(void* ptr);
void QStandardItemModel_TimerEventDefault(void* ptr, void* event);
void* QStaticText_NewQStaticText();
void* QStaticText_NewQStaticText2(struct QtGui_PackedString text);
void* QStaticText_NewQStaticText3(void* other);
long long QStaticText_PerformanceHint(void* ptr);
void QStaticText_Prepare(void* ptr, void* matrix, void* font);
void QStaticText_SetPerformanceHint(void* ptr, long long performanceHint);
void QStaticText_SetText(void* ptr, struct QtGui_PackedString text);
void QStaticText_SetTextFormat(void* ptr, long long textFormat);
void QStaticText_SetTextOption(void* ptr, void* textOption);
void QStaticText_SetTextWidth(void* ptr, double textWidth);
void* QStaticText_Size(void* ptr);
void QStaticText_Swap(void* ptr, void* other);
struct QtGui_PackedString QStaticText_Text(void* ptr);
long long QStaticText_TextFormat(void* ptr);
void* QStaticText_TextOption(void* ptr);
double QStaticText_TextWidth(void* ptr);
void QStaticText_DestroyQStaticText(void* ptr);
void* QStatusTipEvent_NewQStatusTipEvent(struct QtGui_PackedString tip);
struct QtGui_PackedString QStatusTipEvent_Tip(void* ptr);
int QStyleHints_CursorFlashTime(void* ptr);
void QStyleHints_ConnectCursorFlashTimeChanged(void* ptr, long long t);
void QStyleHints_DisconnectCursorFlashTimeChanged(void* ptr);
void QStyleHints_CursorFlashTimeChanged(void* ptr, int cursorFlashTime);
double QStyleHints_FontSmoothingGamma(void* ptr);
int QStyleHints_KeyboardAutoRepeatRate(void* ptr);
int QStyleHints_KeyboardInputInterval(void* ptr);
void QStyleHints_ConnectKeyboardInputIntervalChanged(void* ptr, long long t);
void QStyleHints_DisconnectKeyboardInputIntervalChanged(void* ptr);
void QStyleHints_KeyboardInputIntervalChanged(void* ptr, int keyboardInputInterval);
int QStyleHints_MouseDoubleClickDistance(void* ptr);
int QStyleHints_MouseDoubleClickInterval(void* ptr);
void QStyleHints_ConnectMouseDoubleClickIntervalChanged(void* ptr, long long t);
void QStyleHints_DisconnectMouseDoubleClickIntervalChanged(void* ptr);
void QStyleHints_MouseDoubleClickIntervalChanged(void* ptr, int mouseDoubleClickInterval);
int QStyleHints_MousePressAndHoldInterval(void* ptr);
void QStyleHints_ConnectMousePressAndHoldIntervalChanged(void* ptr, long long t);
void QStyleHints_DisconnectMousePressAndHoldIntervalChanged(void* ptr);
void QStyleHints_MousePressAndHoldIntervalChanged(void* ptr, int mousePressAndHoldInterval);
int QStyleHints_MouseQuickSelectionThreshold(void* ptr);
void QStyleHints_ConnectMouseQuickSelectionThresholdChanged(void* ptr, long long t);
void QStyleHints_DisconnectMouseQuickSelectionThresholdChanged(void* ptr);
void QStyleHints_MouseQuickSelectionThresholdChanged(void* ptr, int threshold);
void* QStyleHints_PasswordMaskCharacter(void* ptr);
int QStyleHints_PasswordMaskDelay(void* ptr);
char QStyleHints_SetFocusOnTouchRelease(void* ptr);
void QStyleHints_SetShowShortcutsInContextMenus(void* ptr, char showShortcutsInContextMenus);
void QStyleHints_SetUseHoverEffects(void* ptr, char useHoverEffects);
char QStyleHints_ShowIsFullScreen(void* ptr);
char QStyleHints_ShowIsMaximized(void* ptr);
char QStyleHints_ShowShortcutsInContextMenus(void* ptr);
void QStyleHints_ConnectShowShortcutsInContextMenusChanged(void* ptr, long long t);
void QStyleHints_DisconnectShowShortcutsInContextMenusChanged(void* ptr);
void QStyleHints_ShowShortcutsInContextMenusChanged(void* ptr, char vbo);
char QStyleHints_SingleClickActivation(void* ptr);
int QStyleHints_StartDragDistance(void* ptr);
void QStyleHints_ConnectStartDragDistanceChanged(void* ptr, long long t);
void QStyleHints_DisconnectStartDragDistanceChanged(void* ptr);
void QStyleHints_StartDragDistanceChanged(void* ptr, int startDragDistance);
int QStyleHints_StartDragTime(void* ptr);
void QStyleHints_ConnectStartDragTimeChanged(void* ptr, long long t);
void QStyleHints_DisconnectStartDragTimeChanged(void* ptr);
void QStyleHints_StartDragTimeChanged(void* ptr, int startDragTime);
int QStyleHints_StartDragVelocity(void* ptr);
long long QStyleHints_TabFocusBehavior(void* ptr);
void QStyleHints_ConnectTabFocusBehaviorChanged(void* ptr, long long t);
void QStyleHints_DisconnectTabFocusBehaviorChanged(void* ptr);
void QStyleHints_TabFocusBehaviorChanged(void* ptr, long long tabFocusBehavior);
int QStyleHints_TouchDoubleTapDistance(void* ptr);
char QStyleHints_UseHoverEffects(void* ptr);
void QStyleHints_ConnectUseHoverEffectsChanged(void* ptr, long long t);
void QStyleHints_DisconnectUseHoverEffectsChanged(void* ptr);
void QStyleHints_UseHoverEffectsChanged(void* ptr, char useHoverEffects);
char QStyleHints_UseRtlExtensions(void* ptr);
int QStyleHints_WheelScrollLines(void* ptr);
void QStyleHints_ConnectWheelScrollLinesChanged(void* ptr, long long t);
void QStyleHints_DisconnectWheelScrollLinesChanged(void* ptr);
void QStyleHints_WheelScrollLinesChanged(void* ptr, int scrollLines);
void* QStyleHints___children_atList(void* ptr, int i);
void QStyleHints___children_setList(void* ptr, void* i);
void* QStyleHints___children_newList(void* ptr);
void* QStyleHints___dynamicPropertyNames_atList(void* ptr, int i);
void QStyleHints___dynamicPropertyNames_setList(void* ptr, void* i);
void* QStyleHints___dynamicPropertyNames_newList(void* ptr);
void* QStyleHints___findChildren_atList(void* ptr, int i);
void QStyleHints___findChildren_setList(void* ptr, void* i);
void* QStyleHints___findChildren_newList(void* ptr);
void* QStyleHints___findChildren_atList3(void* ptr, int i);
void QStyleHints___findChildren_setList3(void* ptr, void* i);
void* QStyleHints___findChildren_newList3(void* ptr);
void QStyleHints_ChildEventDefault(void* ptr, void* event);
void QStyleHints_ConnectNotifyDefault(void* ptr, void* sign);
void QStyleHints_CustomEventDefault(void* ptr, void* event);
void QStyleHints_DeleteLaterDefault(void* ptr);
void QStyleHints_DisconnectNotifyDefault(void* ptr, void* sign);
char QStyleHints_EventDefault(void* ptr, void* e);
char QStyleHints_EventFilterDefault(void* ptr, void* watched, void* event);
void* QStyleHints_MetaObjectDefault(void* ptr);
void QStyleHints_TimerEventDefault(void* ptr, void* event);
void* QSurface_Format(void* ptr);
void* QSurface_Size(void* ptr);
char QSurface_SupportsOpenGL(void* ptr);
long long QSurface_SurfaceClass(void* ptr);
long long QSurface_SurfaceType(void* ptr);
void QSurface_DestroyQSurface(void* ptr);
void QSurface_DestroyQSurfaceDefault(void* ptr);
void* QSurfaceFormat_NewQSurfaceFormat();
void* QSurfaceFormat_NewQSurfaceFormat2(long long options);
void* QSurfaceFormat_NewQSurfaceFormat3(void* other);
int QSurfaceFormat_AlphaBufferSize(void* ptr);
int QSurfaceFormat_BlueBufferSize(void* ptr);
long long QSurfaceFormat_ColorSpace(void* ptr);
void* QSurfaceFormat_QSurfaceFormat_DefaultFormat();
int QSurfaceFormat_DepthBufferSize(void* ptr);
int QSurfaceFormat_GreenBufferSize(void* ptr);
char QSurfaceFormat_HasAlpha(void* ptr);
int QSurfaceFormat_MajorVersion(void* ptr);
int QSurfaceFormat_MinorVersion(void* ptr);
long long QSurfaceFormat_Options(void* ptr);
long long QSurfaceFormat_Profile(void* ptr);
int QSurfaceFormat_RedBufferSize(void* ptr);
long long QSurfaceFormat_RenderableType(void* ptr);
int QSurfaceFormat_Samples(void* ptr);
void QSurfaceFormat_SetAlphaBufferSize(void* ptr, int size);
void QSurfaceFormat_SetBlueBufferSize(void* ptr, int size);
void QSurfaceFormat_SetColorSpace(void* ptr, long long colorSpace);
void QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(void* format);
void QSurfaceFormat_SetDepthBufferSize(void* ptr, int size);
void QSurfaceFormat_SetGreenBufferSize(void* ptr, int size);
void QSurfaceFormat_SetMajorVersion(void* ptr, int major);
void QSurfaceFormat_SetMinorVersion(void* ptr, int minor);
void QSurfaceFormat_SetOption(void* ptr, long long option, char on);
void QSurfaceFormat_SetOptions(void* ptr, long long options);
void QSurfaceFormat_SetProfile(void* ptr, long long profile);
void QSurfaceFormat_SetRedBufferSize(void* ptr, int size);
void QSurfaceFormat_SetRenderableType(void* ptr, long long ty);
void QSurfaceFormat_SetSamples(void* ptr, int numSamples);
void QSurfaceFormat_SetStencilBufferSize(void* ptr, int size);
void QSurfaceFormat_SetStereo(void* ptr, char enable);
void QSurfaceFormat_SetSwapBehavior(void* ptr, long long behavior);
void QSurfaceFormat_SetSwapInterval(void* ptr, int interval);
void QSurfaceFormat_SetVersion(void* ptr, int major, int minor);
int QSurfaceFormat_StencilBufferSize(void* ptr);
char QSurfaceFormat_Stereo(void* ptr);
long long QSurfaceFormat_SwapBehavior(void* ptr);
int QSurfaceFormat_SwapInterval(void* ptr);
char QSurfaceFormat_TestOption(void* ptr, long long option);
void QSurfaceFormat_DestroyQSurfaceFormat(void* ptr);
void* QSyntaxHighlighter_NewQSyntaxHighlighter(void* parent);
void* QSyntaxHighlighter_NewQSyntaxHighlighter2(void* parent);
void* QSyntaxHighlighter_CurrentBlock(void* ptr);
int QSyntaxHighlighter_CurrentBlockState(void* ptr);
void* QSyntaxHighlighter_CurrentBlockUserData(void* ptr);
void* QSyntaxHighlighter_Document(void* ptr);
void* QSyntaxHighlighter_Format(void* ptr, int position);
void QSyntaxHighlighter_HighlightBlock(void* ptr, struct QtGui_PackedString text);
int QSyntaxHighlighter_PreviousBlockState(void* ptr);
void QSyntaxHighlighter_Rehighlight(void* ptr);
void QSyntaxHighlighter_RehighlightDefault(void* ptr);
void QSyntaxHighlighter_RehighlightBlock(void* ptr, void* block);
void QSyntaxHighlighter_RehighlightBlockDefault(void* ptr, void* block);
void QSyntaxHighlighter_SetCurrentBlockState(void* ptr, int newState);
void QSyntaxHighlighter_SetCurrentBlockUserData(void* ptr, void* data);
void QSyntaxHighlighter_SetDocument(void* ptr, void* doc);
void QSyntaxHighlighter_SetFormat(void* ptr, int start, int count, void* format);
void QSyntaxHighlighter_SetFormat2(void* ptr, int start, int count, void* color);
void QSyntaxHighlighter_SetFormat3(void* ptr, int start, int count, void* font);
void QSyntaxHighlighter_DestroyQSyntaxHighlighter(void* ptr);
void QSyntaxHighlighter_DestroyQSyntaxHighlighterDefault(void* ptr);
void* QSyntaxHighlighter___children_atList(void* ptr, int i);
void QSyntaxHighlighter___children_setList(void* ptr, void* i);
void* QSyntaxHighlighter___children_newList(void* ptr);
void* QSyntaxHighlighter___dynamicPropertyNames_atList(void* ptr, int i);
void QSyntaxHighlighter___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSyntaxHighlighter___dynamicPropertyNames_newList(void* ptr);
void* QSyntaxHighlighter___findChildren_atList(void* ptr, int i);
void QSyntaxHighlighter___findChildren_setList(void* ptr, void* i);
void* QSyntaxHighlighter___findChildren_newList(void* ptr);
void* QSyntaxHighlighter___findChildren_atList3(void* ptr, int i);
void QSyntaxHighlighter___findChildren_setList3(void* ptr, void* i);
void* QSyntaxHighlighter___findChildren_newList3(void* ptr);
void QSyntaxHighlighter_ChildEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_ConnectNotifyDefault(void* ptr, void* sign);
void QSyntaxHighlighter_CustomEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_DeleteLaterDefault(void* ptr);
void QSyntaxHighlighter_DisconnectNotifyDefault(void* ptr, void* sign);
char QSyntaxHighlighter_EventDefault(void* ptr, void* e);
char QSyntaxHighlighter_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSyntaxHighlighter_MetaObjectDefault(void* ptr);
void QSyntaxHighlighter_TimerEventDefault(void* ptr, void* event);
void* QTabletEvent_NewQTabletEvent2(long long ty, void* pos, void* globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, long long keyState, long long uniqueID, long long button, long long buttons);
long long QTabletEvent_Button(void* ptr);
long long QTabletEvent_Buttons(void* ptr);
long long QTabletEvent_DeviceType(void* ptr);
void* QTabletEvent_GlobalPos(void* ptr);
void* QTabletEvent_GlobalPosF(void* ptr);
int QTabletEvent_GlobalX(void* ptr);
int QTabletEvent_GlobalY(void* ptr);
long long QTabletEvent_PointerType(void* ptr);
void* QTabletEvent_Pos(void* ptr);
void* QTabletEvent_PosF(void* ptr);
double QTabletEvent_Pressure(void* ptr);
double QTabletEvent_Rotation(void* ptr);
double QTabletEvent_TangentialPressure(void* ptr);
long long QTabletEvent_UniqueId(void* ptr);
int QTabletEvent_X(void* ptr);
int QTabletEvent_XTilt(void* ptr);
int QTabletEvent_Y(void* ptr);
int QTabletEvent_YTilt(void* ptr);
int QTabletEvent_Z(void* ptr);
void* QTextBlock_NewQTextBlock3(void* other);
void* QTextBlock_BlockFormat(void* ptr);
int QTextBlock_BlockFormatIndex(void* ptr);
int QTextBlock_BlockNumber(void* ptr);
void* QTextBlock_CharFormat(void* ptr);
int QTextBlock_CharFormatIndex(void* ptr);
void QTextBlock_ClearLayout(void* ptr);
char QTextBlock_Contains(void* ptr, int position);
void* QTextBlock_Document(void* ptr);
int QTextBlock_FirstLineNumber(void* ptr);
char QTextBlock_IsValid(void* ptr);
char QTextBlock_IsVisible(void* ptr);
void* QTextBlock_Layout(void* ptr);
int QTextBlock_Length(void* ptr);
int QTextBlock_LineCount(void* ptr);
void* QTextBlock_Next(void* ptr);
int QTextBlock_Position(void* ptr);
void* QTextBlock_Previous(void* ptr);
int QTextBlock_Revision(void* ptr);
void QTextBlock_SetLineCount(void* ptr, int count);
void QTextBlock_SetRevision(void* ptr, int rev);
void QTextBlock_SetUserData(void* ptr, void* data);
void QTextBlock_SetUserState(void* ptr, int state);
void QTextBlock_SetVisible(void* ptr, char visible);
struct QtGui_PackedString QTextBlock_Text(void* ptr);
long long QTextBlock_TextDirection(void* ptr);
void* QTextBlock_UserData(void* ptr);
int QTextBlock_UserState(void* ptr);
void* QTextBlock___textFormats_newList(void* ptr);
void* QTextBlockFormat_NewQTextBlockFormat();
long long QTextBlockFormat_Alignment(void* ptr);
double QTextBlockFormat_BottomMargin(void* ptr);
int QTextBlockFormat_HeadingLevel(void* ptr);
int QTextBlockFormat_Indent(void* ptr);
double QTextBlockFormat_LeftMargin(void* ptr);
double QTextBlockFormat_LineHeight(void* ptr, double scriptLineHeight, double scaling);
double QTextBlockFormat_LineHeight2(void* ptr);
int QTextBlockFormat_LineHeightType(void* ptr);
long long QTextBlockFormat_Marker(void* ptr);
char QTextBlockFormat_NonBreakableLines(void* ptr);
long long QTextBlockFormat_PageBreakPolicy(void* ptr);
double QTextBlockFormat_RightMargin(void* ptr);
void QTextBlockFormat_SetAlignment(void* ptr, long long alignment);
void QTextBlockFormat_SetBottomMargin(void* ptr, double margin);
void QTextBlockFormat_SetHeadingLevel(void* ptr, int level);
void QTextBlockFormat_SetIndent(void* ptr, int indentation);
void QTextBlockFormat_SetLeftMargin(void* ptr, double margin);
void QTextBlockFormat_SetLineHeight(void* ptr, double height, int heightType);
void QTextBlockFormat_SetMarker(void* ptr, long long marker);
void QTextBlockFormat_SetNonBreakableLines(void* ptr, char b);
void QTextBlockFormat_SetPageBreakPolicy(void* ptr, long long policy);
void QTextBlockFormat_SetRightMargin(void* ptr, double margin);
void QTextBlockFormat_SetTextIndent(void* ptr, double indent);
void QTextBlockFormat_SetTopMargin(void* ptr, double margin);
double QTextBlockFormat_TextIndent(void* ptr);
double QTextBlockFormat_TopMargin(void* ptr);
void* QTextBlockFormat___setTabPositions_tabs_newList(void* ptr);
void* QTextBlockFormat___tabPositions_newList(void* ptr);
void* QTextBlockGroup_NewQTextBlockGroup(void* document);
void QTextBlockGroup_BlockFormatChanged(void* ptr, void* block);
void QTextBlockGroup_BlockFormatChangedDefault(void* ptr, void* block);
void QTextBlockGroup_BlockInserted(void* ptr, void* block);
void QTextBlockGroup_BlockInsertedDefault(void* ptr, void* block);
struct QtGui_PackedList QTextBlockGroup_BlockList(void* ptr);
void QTextBlockGroup_BlockRemoved(void* ptr, void* block);
void QTextBlockGroup_BlockRemovedDefault(void* ptr, void* block);
void QTextBlockGroup_DestroyQTextBlockGroup(void* ptr);
void QTextBlockGroup_DestroyQTextBlockGroupDefault(void* ptr);
void* QTextBlockGroup___blockList_atList(void* ptr, int i);
void QTextBlockGroup___blockList_setList(void* ptr, void* i);
void* QTextBlockGroup___blockList_newList(void* ptr);
void QTextBlockUserData_DestroyQTextBlockUserData(void* ptr);
void QTextBlockUserData_DestroyQTextBlockUserDataDefault(void* ptr);
void* QTextCharFormat_NewQTextCharFormat();
struct QtGui_PackedString QTextCharFormat_AnchorHref(void* ptr);
struct QtGui_PackedString QTextCharFormat_AnchorNames(void* ptr);
void* QTextCharFormat_Font(void* ptr);
long long QTextCharFormat_FontCapitalization(void* ptr);
void* QTextCharFormat_FontFamilies(void* ptr);
struct QtGui_PackedString QTextCharFormat_FontFamily(void* ptr);
char QTextCharFormat_FontFixedPitch(void* ptr);
long long QTextCharFormat_FontHintingPreference(void* ptr);
char QTextCharFormat_FontItalic(void* ptr);
char QTextCharFormat_FontKerning(void* ptr);
double QTextCharFormat_FontLetterSpacing(void* ptr);
long long QTextCharFormat_FontLetterSpacingType(void* ptr);
char QTextCharFormat_FontOverline(void* ptr);
double QTextCharFormat_FontPointSize(void* ptr);
int QTextCharFormat_FontStretch(void* ptr);
char QTextCharFormat_FontStrikeOut(void* ptr);
long long QTextCharFormat_FontStyleHint(void* ptr);
void* QTextCharFormat_FontStyleName(void* ptr);
long long QTextCharFormat_FontStyleStrategy(void* ptr);
char QTextCharFormat_FontUnderline(void* ptr);
int QTextCharFormat_FontWeight(void* ptr);
double QTextCharFormat_FontWordSpacing(void* ptr);
char QTextCharFormat_IsAnchor(void* ptr);
void QTextCharFormat_SetAnchor(void* ptr, char anchor);
void QTextCharFormat_SetAnchorHref(void* ptr, struct QtGui_PackedString value);
void QTextCharFormat_SetAnchorNames(void* ptr, struct QtGui_PackedString names);
void QTextCharFormat_SetFont(void* ptr, void* font, long long behavior);
void QTextCharFormat_SetFont2(void* ptr, void* font);
void QTextCharFormat_SetFontCapitalization(void* ptr, long long capitalization);
void QTextCharFormat_SetFontFamilies(void* ptr, struct QtGui_PackedString families);
void QTextCharFormat_SetFontFamily(void* ptr, struct QtGui_PackedString family);
void QTextCharFormat_SetFontFixedPitch(void* ptr, char fixedPitch);
void QTextCharFormat_SetFontHintingPreference(void* ptr, long long hintingPreference);
void QTextCharFormat_SetFontItalic(void* ptr, char italic);
void QTextCharFormat_SetFontKerning(void* ptr, char enable);
void QTextCharFormat_SetFontLetterSpacing(void* ptr, double spacing);
void QTextCharFormat_SetFontLetterSpacingType(void* ptr, long long letterSpacingType);
void QTextCharFormat_SetFontOverline(void* ptr, char overline);
void QTextCharFormat_SetFontPointSize(void* ptr, double size);
void QTextCharFormat_SetFontStretch(void* ptr, int factor);
void QTextCharFormat_SetFontStrikeOut(void* ptr, char strikeOut);
void QTextCharFormat_SetFontStyleHint(void* ptr, long long hint, long long strategy);
void QTextCharFormat_SetFontStyleName(void* ptr, struct QtGui_PackedString styleName);
void QTextCharFormat_SetFontStyleStrategy(void* ptr, long long strategy);
void QTextCharFormat_SetFontUnderline(void* ptr, char underline);
void QTextCharFormat_SetFontWeight(void* ptr, int weight);
void QTextCharFormat_SetFontWordSpacing(void* ptr, double spacing);
void QTextCharFormat_SetTextOutline(void* ptr, void* pen);
void QTextCharFormat_SetToolTip(void* ptr, struct QtGui_PackedString text);
void QTextCharFormat_SetUnderlineColor(void* ptr, void* color);
void QTextCharFormat_SetUnderlineStyle(void* ptr, long long style);
void QTextCharFormat_SetVerticalAlignment(void* ptr, long long alignment);
void* QTextCharFormat_TextOutline(void* ptr);
struct QtGui_PackedString QTextCharFormat_ToolTip(void* ptr);
void* QTextCharFormat_UnderlineColor(void* ptr);
long long QTextCharFormat_UnderlineStyle(void* ptr);
long long QTextCharFormat_VerticalAlignment(void* ptr);
void* QTextCursor_NewQTextCursor();
void* QTextCursor_NewQTextCursor2(void* document);
void* QTextCursor_NewQTextCursor3(void* frame);
void* QTextCursor_NewQTextCursor4(void* block);
void* QTextCursor_NewQTextCursor5(void* cursor);
int QTextCursor_Anchor(void* ptr);
char QTextCursor_AtBlockEnd(void* ptr);
char QTextCursor_AtBlockStart(void* ptr);
char QTextCursor_AtEnd(void* ptr);
char QTextCursor_AtStart(void* ptr);
void QTextCursor_BeginEditBlock(void* ptr);
void* QTextCursor_Block(void* ptr);
void* QTextCursor_BlockCharFormat(void* ptr);
void* QTextCursor_BlockFormat(void* ptr);
int QTextCursor_BlockNumber(void* ptr);
void* QTextCursor_CharFormat(void* ptr);
void QTextCursor_ClearSelection(void* ptr);
int QTextCursor_ColumnNumber(void* ptr);
void* QTextCursor_CreateList(void* ptr, void* format);
void* QTextCursor_CreateList2(void* ptr, long long style);
void* QTextCursor_CurrentFrame(void* ptr);
void* QTextCursor_CurrentList(void* ptr);
void* QTextCursor_CurrentTable(void* ptr);
void QTextCursor_DeleteChar(void* ptr);
void QTextCursor_DeletePreviousChar(void* ptr);
void* QTextCursor_Document(void* ptr);
void QTextCursor_EndEditBlock(void* ptr);
char QTextCursor_HasComplexSelection(void* ptr);
char QTextCursor_HasSelection(void* ptr);
void QTextCursor_InsertBlock(void* ptr);
void QTextCursor_InsertBlock2(void* ptr, void* format);
void QTextCursor_InsertBlock3(void* ptr, void* format, void* charFormat);
void QTextCursor_InsertFragment(void* ptr, void* fragment);
void* QTextCursor_InsertFrame(void* ptr, void* format);
void QTextCursor_InsertHtml(void* ptr, struct QtGui_PackedString html);
void QTextCursor_InsertImage(void* ptr, void* format);
void QTextCursor_InsertImage2(void* ptr, void* format, long long alignment);
void QTextCursor_InsertImage3(void* ptr, struct QtGui_PackedString name);
void QTextCursor_InsertImage4(void* ptr, void* image, struct QtGui_PackedString name);
void* QTextCursor_InsertList(void* ptr, void* format);
void* QTextCursor_InsertList2(void* ptr, long long style);
void* QTextCursor_InsertTable(void* ptr, int rows, int columns, void* format);
void* QTextCursor_InsertTable2(void* ptr, int rows, int columns);
void QTextCursor_InsertText(void* ptr, struct QtGui_PackedString text);
void QTextCursor_InsertText2(void* ptr, struct QtGui_PackedString text, void* format);
char QTextCursor_IsCopyOf(void* ptr, void* other);
char QTextCursor_IsNull(void* ptr);
void QTextCursor_JoinPreviousEditBlock(void* ptr);
char QTextCursor_KeepPositionOnInsert(void* ptr);
void QTextCursor_MergeBlockCharFormat(void* ptr, void* modifier);
void QTextCursor_MergeBlockFormat(void* ptr, void* modifier);
void QTextCursor_MergeCharFormat(void* ptr, void* modifier);
char QTextCursor_MovePosition(void* ptr, long long operation, long long mode, int n);
int QTextCursor_Position(void* ptr);
int QTextCursor_PositionInBlock(void* ptr);
void QTextCursor_RemoveSelectedText(void* ptr);
void QTextCursor_Select(void* ptr, long long selection);
void QTextCursor_SelectedTableCells(void* ptr, int firstRow, int numRows, int firstColumn, int numColumns);
struct QtGui_PackedString QTextCursor_SelectedText(void* ptr);
void* QTextCursor_Selection(void* ptr);
int QTextCursor_SelectionEnd(void* ptr);
int QTextCursor_SelectionStart(void* ptr);
void QTextCursor_SetBlockCharFormat(void* ptr, void* format);
void QTextCursor_SetBlockFormat(void* ptr, void* format);
void QTextCursor_SetCharFormat(void* ptr, void* format);
void QTextCursor_SetKeepPositionOnInsert(void* ptr, char b);
void QTextCursor_SetPosition(void* ptr, int pos, long long m);
void QTextCursor_SetVerticalMovementX(void* ptr, int x);
void QTextCursor_SetVisualNavigation(void* ptr, char b);
void QTextCursor_Swap(void* ptr, void* other);
int QTextCursor_VerticalMovementX(void* ptr);
char QTextCursor_VisualNavigation(void* ptr);
void QTextCursor_DestroyQTextCursor(void* ptr);
void* QTextDocument_NewQTextDocument(void* parent);
void* QTextDocument_NewQTextDocument2(struct QtGui_PackedString text, void* parent);
void QTextDocument_AddResource(void* ptr, int ty, void* name, void* resource);
void QTextDocument_AdjustSize(void* ptr);
struct QtGui_PackedList QTextDocument_AllFormats(void* ptr);
int QTextDocument_AvailableRedoSteps(void* ptr);
int QTextDocument_AvailableUndoSteps(void* ptr);
void* QTextDocument_BaseUrl(void* ptr);
void QTextDocument_ConnectBaseUrlChanged(void* ptr, long long t);
void QTextDocument_DisconnectBaseUrlChanged(void* ptr);
void QTextDocument_BaseUrlChanged(void* ptr, void* url);
void* QTextDocument_Begin(void* ptr);
int QTextDocument_BlockCount(void* ptr);
void QTextDocument_ConnectBlockCountChanged(void* ptr, long long t);
void QTextDocument_DisconnectBlockCountChanged(void* ptr);
void QTextDocument_BlockCountChanged(void* ptr, int newBlockCount);
void* QTextDocument_CharacterAt(void* ptr, int pos);
int QTextDocument_CharacterCount(void* ptr);
void QTextDocument_Clear(void* ptr);
void QTextDocument_ClearDefault(void* ptr);
void QTextDocument_ClearUndoRedoStacks(void* ptr, long long stacksToClear);
void* QTextDocument_Clone(void* ptr, void* parent);
void QTextDocument_ConnectContentsChange(void* ptr, long long t);
void QTextDocument_DisconnectContentsChange(void* ptr);
void QTextDocument_ContentsChange(void* ptr, int position, int charsRemoved, int charsAdded);
void QTextDocument_ConnectContentsChanged(void* ptr, long long t);
void QTextDocument_DisconnectContentsChanged(void* ptr);
void QTextDocument_ContentsChanged(void* ptr);
void* QTextDocument_CreateObject(void* ptr, void* format);
void* QTextDocument_CreateObjectDefault(void* ptr, void* format);
void QTextDocument_ConnectCursorPositionChanged(void* ptr, long long t);
void QTextDocument_DisconnectCursorPositionChanged(void* ptr);
void QTextDocument_CursorPositionChanged(void* ptr, void* cursor);
long long QTextDocument_DefaultCursorMoveStyle(void* ptr);
void* QTextDocument_DefaultFont(void* ptr);
struct QtGui_PackedString QTextDocument_DefaultStyleSheet(void* ptr);
void* QTextDocument_DefaultTextOption(void* ptr);
void* QTextDocument_DocumentLayout(void* ptr);
void QTextDocument_ConnectDocumentLayoutChanged(void* ptr, long long t);
void QTextDocument_DisconnectDocumentLayoutChanged(void* ptr);
void QTextDocument_DocumentLayoutChanged(void* ptr);
double QTextDocument_DocumentMargin(void* ptr);
void QTextDocument_DrawContents(void* ptr, void* p, void* rect);
void* QTextDocument_End(void* ptr);
void* QTextDocument_Find(void* ptr, struct QtGui_PackedString subString, void* cursor, long long options);
void* QTextDocument_Find2(void* ptr, struct QtGui_PackedString subString, int position, long long options);
void* QTextDocument_Find3(void* ptr, void* expr, int from, long long options);
void* QTextDocument_Find4(void* ptr, void* expr, void* cursor, long long options);
void* QTextDocument_Find5(void* ptr, void* expr, int from, long long options);
void* QTextDocument_Find6(void* ptr, void* expr, void* cursor, long long options);
void* QTextDocument_FindBlock(void* ptr, int pos);
void* QTextDocument_FindBlockByLineNumber(void* ptr, int lineNumber);
void* QTextDocument_FindBlockByNumber(void* ptr, int blockNumber);
void* QTextDocument_FirstBlock(void* ptr);
double QTextDocument_IdealWidth(void* ptr);
double QTextDocument_IndentWidth(void* ptr);
char QTextDocument_IsEmpty(void* ptr);
char QTextDocument_IsModified(void* ptr);
char QTextDocument_IsRedoAvailable(void* ptr);
char QTextDocument_IsUndoAvailable(void* ptr);
char QTextDocument_IsUndoRedoEnabled(void* ptr);
void* QTextDocument_LastBlock(void* ptr);
int QTextDocument_LineCount(void* ptr);
void* QTextDocument_LoadResource(void* ptr, int ty, void* name);
void* QTextDocument_LoadResourceDefault(void* ptr, int ty, void* name);
void QTextDocument_MarkContentsDirty(void* ptr, int position, int length);
int QTextDocument_MaximumBlockCount(void* ptr);
struct QtGui_PackedString QTextDocument_MetaInformation(void* ptr, long long info);
void QTextDocument_ConnectModificationChanged(void* ptr, long long t);
void QTextDocument_DisconnectModificationChanged(void* ptr);
void QTextDocument_ModificationChanged(void* ptr, char changed);
void* QTextDocument_Object(void* ptr, int objectIndex);
void* QTextDocument_ObjectForFormat(void* ptr, void* ff);
int QTextDocument_PageCount(void* ptr);
void* QTextDocument_PageSize(void* ptr);
void QTextDocument_Print(void* ptr, void* printer);
void QTextDocument_Redo(void* ptr, void* cursor);
void QTextDocument_Redo2(void* ptr);
void QTextDocument_Redo2Default(void* ptr);
void QTextDocument_ConnectRedoAvailable(void* ptr, long long t);
void QTextDocument_DisconnectRedoAvailable(void* ptr);
void QTextDocument_RedoAvailable(void* ptr, char available);
void* QTextDocument_Resource(void* ptr, int ty, void* name);
int QTextDocument_Revision(void* ptr);
void* QTextDocument_RootFrame(void* ptr);
void QTextDocument_SetBaseUrl(void* ptr, void* url);
void QTextDocument_SetDefaultCursorMoveStyle(void* ptr, long long style);
void QTextDocument_SetDefaultFont(void* ptr, void* font);
void QTextDocument_SetDefaultStyleSheet(void* ptr, struct QtGui_PackedString sheet);
void QTextDocument_SetDefaultTextOption(void* ptr, void* option);
void QTextDocument_SetDocumentLayout(void* ptr, void* layout);
void QTextDocument_SetDocumentMargin(void* ptr, double margin);
void QTextDocument_SetHtml(void* ptr, struct QtGui_PackedString html);
void QTextDocument_SetIndentWidth(void* ptr, double width);
void QTextDocument_SetMaximumBlockCount(void* ptr, int maximum);
void QTextDocument_SetMetaInformation(void* ptr, long long info, struct QtGui_PackedString stri);
void QTextDocument_SetModified(void* ptr, char m);
void QTextDocument_SetModifiedDefault(void* ptr, char m);
void QTextDocument_SetPageSize(void* ptr, void* size);
void QTextDocument_SetPlainText(void* ptr, struct QtGui_PackedString text);
void QTextDocument_SetTextWidth(void* ptr, double width);
void QTextDocument_SetUndoRedoEnabled(void* ptr, char enable);
void QTextDocument_SetUseDesignMetrics(void* ptr, char b);
void* QTextDocument_Size(void* ptr);
double QTextDocument_TextWidth(void* ptr);
struct QtGui_PackedString QTextDocument_ToHtml(void* ptr, void* encoding);
struct QtGui_PackedString QTextDocument_ToPlainText(void* ptr);
struct QtGui_PackedString QTextDocument_ToRawText(void* ptr);
void QTextDocument_Undo(void* ptr, void* cursor);
void QTextDocument_Undo2(void* ptr);
void QTextDocument_Undo2Default(void* ptr);
void QTextDocument_ConnectUndoAvailable(void* ptr, long long t);
void QTextDocument_DisconnectUndoAvailable(void* ptr);
void QTextDocument_UndoAvailable(void* ptr, char available);
void QTextDocument_ConnectUndoCommandAdded(void* ptr, long long t);
void QTextDocument_DisconnectUndoCommandAdded(void* ptr);
void QTextDocument_UndoCommandAdded(void* ptr);
char QTextDocument_UseDesignMetrics(void* ptr);
void QTextDocument_DestroyQTextDocument(void* ptr);
void QTextDocument_DestroyQTextDocumentDefault(void* ptr);
void* QTextDocument___allFormats_atList(void* ptr, int i);
void QTextDocument___allFormats_setList(void* ptr, void* i);
void* QTextDocument___allFormats_newList(void* ptr);
void* QTextDocument___children_atList(void* ptr, int i);
void QTextDocument___children_setList(void* ptr, void* i);
void* QTextDocument___children_newList(void* ptr);
void* QTextDocument___dynamicPropertyNames_atList(void* ptr, int i);
void QTextDocument___dynamicPropertyNames_setList(void* ptr, void* i);
void* QTextDocument___dynamicPropertyNames_newList(void* ptr);
void* QTextDocument___findChildren_atList(void* ptr, int i);
void QTextDocument___findChildren_setList(void* ptr, void* i);
void* QTextDocument___findChildren_newList(void* ptr);
void* QTextDocument___findChildren_atList3(void* ptr, int i);
void QTextDocument___findChildren_setList3(void* ptr, void* i);
void* QTextDocument___findChildren_newList3(void* ptr);
void QTextDocument_ChildEventDefault(void* ptr, void* event);
void QTextDocument_ConnectNotifyDefault(void* ptr, void* sign);
void QTextDocument_CustomEventDefault(void* ptr, void* event);
void QTextDocument_DeleteLaterDefault(void* ptr);
void QTextDocument_DisconnectNotifyDefault(void* ptr, void* sign);
char QTextDocument_EventDefault(void* ptr, void* e);
char QTextDocument_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTextDocument_MetaObjectDefault(void* ptr);
void QTextDocument_TimerEventDefault(void* ptr, void* event);
void* QTextDocumentFragment_NewQTextDocumentFragment();
void* QTextDocumentFragment_NewQTextDocumentFragment2(void* document);
void* QTextDocumentFragment_NewQTextDocumentFragment3(void* cursor);
void* QTextDocumentFragment_NewQTextDocumentFragment4(void* other);
void* QTextDocumentFragment_QTextDocumentFragment_FromHtml(struct QtGui_PackedString text);
void* QTextDocumentFragment_QTextDocumentFragment_FromHtml2(struct QtGui_PackedString text, void* resourceProvider);
void* QTextDocumentFragment_QTextDocumentFragment_FromPlainText(struct QtGui_PackedString plainText);
char QTextDocumentFragment_IsEmpty(void* ptr);
struct QtGui_PackedString QTextDocumentFragment_ToHtml(void* ptr, void* encoding);
struct QtGui_PackedString QTextDocumentFragment_ToPlainText(void* ptr);
void QTextDocumentFragment_DestroyQTextDocumentFragment(void* ptr);
void* QTextDocumentWriter_NewQTextDocumentWriter();
void* QTextDocumentWriter_NewQTextDocumentWriter2(void* device, void* format);
void* QTextDocumentWriter_NewQTextDocumentWriter3(struct QtGui_PackedString fileName, void* format);
void* QTextDocumentWriter_Codec(void* ptr);
void* QTextDocumentWriter_Device(void* ptr);
struct QtGui_PackedString QTextDocumentWriter_FileName(void* ptr);
void* QTextDocumentWriter_Format(void* ptr);
void QTextDocumentWriter_SetCodec(void* ptr, void* codec);
void QTextDocumentWriter_SetDevice(void* ptr, void* device);
void QTextDocumentWriter_SetFileName(void* ptr, struct QtGui_PackedString fileName);
void QTextDocumentWriter_SetFormat(void* ptr, void* format);
struct QtGui_PackedList QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats();
char QTextDocumentWriter_Write(void* ptr, void* document);
char QTextDocumentWriter_Write2(void* ptr, void* fragment);
void QTextDocumentWriter_DestroyQTextDocumentWriter(void* ptr);
void* QTextDocumentWriter___supportedDocumentFormats_atList(void* ptr, int i);
void QTextDocumentWriter___supportedDocumentFormats_setList(void* ptr, void* i);
void* QTextDocumentWriter___supportedDocumentFormats_newList(void* ptr);
void* QTextFormat_NewQTextFormat();
void* QTextFormat_NewQTextFormat2(int ty);
void* QTextFormat_NewQTextFormat3(void* other);
void* QTextFormat_Background(void* ptr);
char QTextFormat_BoolProperty(void* ptr, int propertyId);
void* QTextFormat_BrushProperty(void* ptr, int propertyId);
void QTextFormat_ClearBackground(void* ptr);
void QTextFormat_ClearForeground(void* ptr);
void QTextFormat_ClearProperty(void* ptr, int propertyId);
void* QTextFormat_ColorProperty(void* ptr, int propertyId);
double QTextFormat_DoubleProperty(void* ptr, int propertyId);
void* QTextFormat_Foreground(void* ptr);
char QTextFormat_HasProperty(void* ptr, int propertyId);
int QTextFormat_IntProperty(void* ptr, int propertyId);
char QTextFormat_IsBlockFormat(void* ptr);
char QTextFormat_IsCharFormat(void* ptr);
char QTextFormat_IsEmpty(void* ptr);
char QTextFormat_IsFrameFormat(void* ptr);
char QTextFormat_IsImageFormat(void* ptr);
char QTextFormat_IsListFormat(void* ptr);
char QTextFormat_IsTableCellFormat(void* ptr);
char QTextFormat_IsTableFormat(void* ptr);
char QTextFormat_IsValid(void* ptr);
long long QTextFormat_LayoutDirection(void* ptr);
void* QTextFormat_LengthProperty(void* ptr, int propertyId);
void QTextFormat_Merge(void* ptr, void* other);
int QTextFormat_ObjectIndex(void* ptr);
int QTextFormat_ObjectType(void* ptr);
void* QTextFormat_PenProperty(void* ptr, int propertyId);
struct QtGui_PackedList QTextFormat_Properties(void* ptr);
void* QTextFormat_Property(void* ptr, int propertyId);
int QTextFormat_PropertyCount(void* ptr);
void QTextFormat_SetBackground(void* ptr, void* brush);
void QTextFormat_SetForeground(void* ptr, void* brush);
void QTextFormat_SetLayoutDirection(void* ptr, long long direction);
void QTextFormat_SetObjectIndex(void* ptr, int index);
void QTextFormat_SetObjectType(void* ptr, int ty);
void QTextFormat_SetProperty(void* ptr, int propertyId, void* value);
void QTextFormat_SetProperty2(void* ptr, int propertyId, void* value);
struct QtGui_PackedString QTextFormat_StringProperty(void* ptr, int propertyId);
void QTextFormat_Swap(void* ptr, void* other);
void* QTextFormat_ToBlockFormat(void* ptr);
void* QTextFormat_ToCharFormat(void* ptr);
void* QTextFormat_ToFrameFormat(void* ptr);
void* QTextFormat_ToImageFormat(void* ptr);
void* QTextFormat_ToListFormat(void* ptr);
void* QTextFormat_ToTableCellFormat(void* ptr);
void* QTextFormat_ToTableFormat(void* ptr);
int QTextFormat_Type(void* ptr);
void QTextFormat_DestroyQTextFormat(void* ptr);
void* QTextFormat___lengthVectorProperty_atList(void* ptr, int i);
void QTextFormat___lengthVectorProperty_setList(void* ptr, void* i);
void* QTextFormat___lengthVectorProperty_newList(void* ptr);
void* QTextFormat___properties_atList(void* ptr, int v, int i);
void QTextFormat___properties_setList(void* ptr, int key, void* i);
void* QTextFormat___properties_newList(void* ptr);
struct QtGui_PackedList QTextFormat___properties_keyList(void* ptr);
void* QTextFormat___setProperty_value_atList2(void* ptr, int i);
void QTextFormat___setProperty_value_setList2(void* ptr, void* i);
void* QTextFormat___setProperty_value_newList2(void* ptr);
int QTextFormat_____properties_keyList_atList(void* ptr, int i);
void QTextFormat_____properties_keyList_setList(void* ptr, int i);
void* QTextFormat_____properties_keyList_newList(void* ptr);
void* QTextFragment_NewQTextFragment2();
void* QTextFragment_NewQTextFragment3(void* other);
void* QTextFragment_CharFormat(void* ptr);
int QTextFragment_CharFormatIndex(void* ptr);
char QTextFragment_Contains(void* ptr, int position);
struct QtGui_PackedList QTextFragment_GlyphRuns(void* ptr, int pos, int l);
char QTextFragment_IsValid(void* ptr);
int QTextFragment_Length(void* ptr);
int QTextFragment_Position(void* ptr);
struct QtGui_PackedString QTextFragment_Text(void* ptr);
void* QTextFragment___glyphRuns_atList(void* ptr, int i);
void QTextFragment___glyphRuns_setList(void* ptr, void* i);
void* QTextFragment___glyphRuns_newList(void* ptr);
void* QTextFrame_NewQTextFrame(void* document);
struct QtGui_PackedList QTextFrame_ChildFrames(void* ptr);
void* QTextFrame_FirstCursorPosition(void* ptr);
int QTextFrame_FirstPosition(void* ptr);
void* QTextFrame_FrameFormat(void* ptr);
void* QTextFrame_LastCursorPosition(void* ptr);
int QTextFrame_LastPosition(void* ptr);
void* QTextFrame_ParentFrame(void* ptr);
void QTextFrame_SetFrameFormat(void* ptr, void* format);
void QTextFrame_DestroyQTextFrame(void* ptr);
void QTextFrame_DestroyQTextFrameDefault(void* ptr);
void* QTextFrame___childFrames_atList(void* ptr, int i);
void QTextFrame___childFrames_setList(void* ptr, void* i);
void* QTextFrame___childFrames_newList(void* ptr);
void* QTextFrameFormat_NewQTextFrameFormat();
double QTextFrameFormat_Border(void* ptr);
void* QTextFrameFormat_BorderBrush(void* ptr);
long long QTextFrameFormat_BorderStyle(void* ptr);
double QTextFrameFormat_BottomMargin(void* ptr);
void* QTextFrameFormat_Height(void* ptr);
double QTextFrameFormat_LeftMargin(void* ptr);
double QTextFrameFormat_Margin(void* ptr);
double QTextFrameFormat_Padding(void* ptr);
long long QTextFrameFormat_PageBreakPolicy(void* ptr);
long long QTextFrameFormat_Position(void* ptr);
double QTextFrameFormat_RightMargin(void* ptr);
void QTextFrameFormat_SetBorder(void* ptr, double width);
void QTextFrameFormat_SetBorderBrush(void* ptr, void* brush);
void QTextFrameFormat_SetBorderStyle(void* ptr, long long style);
void QTextFrameFormat_SetBottomMargin(void* ptr, double margin);
void QTextFrameFormat_SetHeight(void* ptr, void* height);
void QTextFrameFormat_SetHeight2(void* ptr, double height);
void QTextFrameFormat_SetLeftMargin(void* ptr, double margin);
void QTextFrameFormat_SetMargin(void* ptr, double margin);
void QTextFrameFormat_SetPadding(void* ptr, double width);
void QTextFrameFormat_SetPageBreakPolicy(void* ptr, long long policy);
void QTextFrameFormat_SetPosition(void* ptr, long long policy);
void QTextFrameFormat_SetRightMargin(void* ptr, double margin);
void QTextFrameFormat_SetTopMargin(void* ptr, double margin);
void QTextFrameFormat_SetWidth(void* ptr, void* width);
void QTextFrameFormat_SetWidth2(void* ptr, double width);
double QTextFrameFormat_TopMargin(void* ptr);
void* QTextFrameFormat_Width(void* ptr);
void* QTextImageFormat_NewQTextImageFormat();
double QTextImageFormat_Height(void* ptr);
struct QtGui_PackedString QTextImageFormat_Name(void* ptr);
int QTextImageFormat_Quality(void* ptr);
void QTextImageFormat_SetHeight(void* ptr, double height);
void QTextImageFormat_SetName(void* ptr, struct QtGui_PackedString name);
void QTextImageFormat_SetQuality(void* ptr, int quality);
void QTextImageFormat_SetWidth(void* ptr, double width);
double QTextImageFormat_Width(void* ptr);
double QTextInlineObject_Ascent(void* ptr);
double QTextInlineObject_Descent(void* ptr);
void* QTextInlineObject_Format(void* ptr);
int QTextInlineObject_FormatIndex(void* ptr);
double QTextInlineObject_Height(void* ptr);
char QTextInlineObject_IsValid(void* ptr);
void* QTextInlineObject_Rect(void* ptr);
void QTextInlineObject_SetAscent(void* ptr, double a);
void QTextInlineObject_SetDescent(void* ptr, double d);
void QTextInlineObject_SetWidth(void* ptr, double w);
long long QTextInlineObject_TextDirection(void* ptr);
int QTextInlineObject_TextPosition(void* ptr);
double QTextInlineObject_Width(void* ptr);
double QTextItem_Ascent(void* ptr);
double QTextItem_Descent(void* ptr);
void* QTextItem_Font(void* ptr);
long long QTextItem_RenderFlags(void* ptr);
struct QtGui_PackedString QTextItem_Text(void* ptr);
double QTextItem_Width(void* ptr);
void* QTextLayout_NewQTextLayout();
void* QTextLayout_NewQTextLayout2(struct QtGui_PackedString text);
void* QTextLayout_NewQTextLayout4(struct QtGui_PackedString text, void* font, void* paintdevice);
void QTextLayout_BeginLayout(void* ptr);
void* QTextLayout_BoundingRect(void* ptr);
char QTextLayout_CacheEnabled(void* ptr);
void QTextLayout_ClearFormats(void* ptr);
void QTextLayout_ClearLayout(void* ptr);
void* QTextLayout_CreateLine(void* ptr);
long long QTextLayout_CursorMoveStyle(void* ptr);
void QTextLayout_DrawCursor(void* ptr, void* painter, void* position, int cursorPosition, int width);
void QTextLayout_DrawCursor2(void* ptr, void* painter, void* position, int cursorPosition);
void QTextLayout_EndLayout(void* ptr);
void* QTextLayout_Font(void* ptr);
struct QtGui_PackedList QTextLayout_GlyphRuns(void* ptr, int from, int length);
char QTextLayout_IsValidCursorPosition(void* ptr, int pos);
int QTextLayout_LeftCursorPosition(void* ptr, int oldPos);
void* QTextLayout_LineAt(void* ptr, int i);
int QTextLayout_LineCount(void* ptr);
void* QTextLayout_LineForTextPosition(void* ptr, int pos);
double QTextLayout_MaximumWidth(void* ptr);
double QTextLayout_MinimumWidth(void* ptr);
int QTextLayout_NextCursorPosition(void* ptr, int oldPos, long long mode);
void* QTextLayout_Position(void* ptr);
int QTextLayout_PreeditAreaPosition(void* ptr);
struct QtGui_PackedString QTextLayout_PreeditAreaText(void* ptr);
int QTextLayout_PreviousCursorPosition(void* ptr, int oldPos, long long mode);
int QTextLayout_RightCursorPosition(void* ptr, int oldPos);
void QTextLayout_SetCacheEnabled(void* ptr, char enable);
void QTextLayout_SetCursorMoveStyle(void* ptr, long long style);
void QTextLayout_SetFont(void* ptr, void* font);
void QTextLayout_SetPosition(void* ptr, void* p);
void QTextLayout_SetPreeditArea(void* ptr, int position, struct QtGui_PackedString text);
void QTextLayout_SetText(void* ptr, struct QtGui_PackedString stri);
void QTextLayout_SetTextOption(void* ptr, void* option);
struct QtGui_PackedString QTextLayout_Text(void* ptr);
void* QTextLayout_TextOption(void* ptr);
void QTextLayout_DestroyQTextLayout(void* ptr);
void* QTextLayout___formats_newList(void* ptr);
void* QTextLayout___glyphRuns_atList(void* ptr, int i);
void QTextLayout___glyphRuns_setList(void* ptr, void* i);
void* QTextLayout___glyphRuns_newList(void* ptr);
void* QTextLength_NewQTextLength();
void* QTextLength_NewQTextLength2(long long ty, double value);
double QTextLength_RawValue(void* ptr);
long long QTextLength_Type(void* ptr);
double QTextLength_Value(void* ptr, double maximumLength);
void* QTextLine_NewQTextLine();
double QTextLine_Ascent(void* ptr);
double QTextLine_CursorToX(void* ptr, int cursorPos, long long edge);
double QTextLine_CursorToX2(void* ptr, int cursorPos, long long edge);
double QTextLine_Descent(void* ptr);
struct QtGui_PackedList QTextLine_GlyphRuns(void* ptr, int from, int length);
double QTextLine_Height(void* ptr);
double QTextLine_HorizontalAdvance(void* ptr);
char QTextLine_IsValid(void* ptr);
double QTextLine_Leading(void* ptr);
char QTextLine_LeadingIncluded(void* ptr);
int QTextLine_LineNumber(void* ptr);
void* QTextLine_NaturalTextRect(void* ptr);
double QTextLine_NaturalTextWidth(void* ptr);
void* QTextLine_Position(void* ptr);
void* QTextLine_Rect(void* ptr);
void QTextLine_SetLeadingIncluded(void* ptr, char included);
void QTextLine_SetLineWidth(void* ptr, double width);
void QTextLine_SetNumColumns(void* ptr, int numColumns);
void QTextLine_SetNumColumns2(void* ptr, int numColumns, double alignmentWidth);
void QTextLine_SetPosition(void* ptr, void* pos);
int QTextLine_TextLength(void* ptr);
int QTextLine_TextStart(void* ptr);
double QTextLine_Width(void* ptr);
double QTextLine_X(void* ptr);
int QTextLine_XToCursor(void* ptr, double x, long long cpos);
double QTextLine_Y(void* ptr);
void* QTextLine___glyphRuns_atList(void* ptr, int i);
void QTextLine___glyphRuns_setList(void* ptr, void* i);
void* QTextLine___glyphRuns_newList(void* ptr);
void QTextList_Add(void* ptr, void* block);
int QTextList_Count(void* ptr);
void* QTextList_Format(void* ptr);
void* QTextList_Item(void* ptr, int i);
int QTextList_ItemNumber(void* ptr, void* block);
struct QtGui_PackedString QTextList_ItemText(void* ptr, void* block);
void QTextList_Remove(void* ptr, void* block);
void QTextList_RemoveItem(void* ptr, int i);
void QTextList_SetFormat(void* ptr, void* format);
void* QTextListFormat_NewQTextListFormat();
int QTextListFormat_Indent(void* ptr);
struct QtGui_PackedString QTextListFormat_NumberPrefix(void* ptr);
struct QtGui_PackedString QTextListFormat_NumberSuffix(void* ptr);
void QTextListFormat_SetIndent(void* ptr, int indentation);
void QTextListFormat_SetNumberPrefix(void* ptr, struct QtGui_PackedString numberPrefix);
void QTextListFormat_SetNumberSuffix(void* ptr, struct QtGui_PackedString numberSuffix);
void QTextListFormat_SetStyle(void* ptr, long long style);
long long QTextListFormat_Style(void* ptr);
void* QTextObject_NewQTextObject(void* document);
void* QTextObject_Document(void* ptr);
void* QTextObject_Format(void* ptr);
int QTextObject_FormatIndex(void* ptr);
int QTextObject_ObjectIndex(void* ptr);
void QTextObject_SetFormat(void* ptr, void* format);
void QTextObject_DestroyQTextObject(void* ptr);
void QTextObject_DestroyQTextObjectDefault(void* ptr);
void* QTextObject___children_atList(void* ptr, int i);
void QTextObject___children_setList(void* ptr, void* i);
void* QTextObject___children_newList(void* ptr);
void* QTextObject___dynamicPropertyNames_atList(void* ptr, int i);
void QTextObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QTextObject___dynamicPropertyNames_newList(void* ptr);
void* QTextObject___findChildren_atList(void* ptr, int i);
void QTextObject___findChildren_setList(void* ptr, void* i);
void* QTextObject___findChildren_newList(void* ptr);
void* QTextObject___findChildren_atList3(void* ptr, int i);
void QTextObject___findChildren_setList3(void* ptr, void* i);
void* QTextObject___findChildren_newList3(void* ptr);
void QTextObject_ChildEventDefault(void* ptr, void* event);
void QTextObject_ConnectNotifyDefault(void* ptr, void* sign);
void QTextObject_CustomEventDefault(void* ptr, void* event);
void QTextObject_DeleteLaterDefault(void* ptr);
void QTextObject_DisconnectNotifyDefault(void* ptr, void* sign);
char QTextObject_EventDefault(void* ptr, void* e);
char QTextObject_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTextObject_MetaObjectDefault(void* ptr);
void QTextObject_TimerEventDefault(void* ptr, void* event);
void QTextObjectInterface_DrawObject(void* ptr, void* painter, void* rect, void* doc, int posInDocument, void* format);
void* QTextObjectInterface_IntrinsicSize(void* ptr, void* doc, int posInDocument, void* format);
void QTextObjectInterface_DestroyQTextObjectInterface(void* ptr);
void QTextObjectInterface_DestroyQTextObjectInterfaceDefault(void* ptr);
void* QTextOption_NewQTextOption();
void* QTextOption_NewQTextOption2(long long alignment);
void* QTextOption_NewQTextOption3(void* other);
long long QTextOption_Alignment(void* ptr);
long long QTextOption_Flags(void* ptr);
void QTextOption_SetAlignment(void* ptr, long long alignment);
void QTextOption_SetFlags(void* ptr, long long flags);
void QTextOption_SetTabArray(void* ptr, void* tabStops);
void QTextOption_SetTabStopDistance(void* ptr, double tabStopDistance);
void QTextOption_SetTextDirection(void* ptr, long long direction);
void QTextOption_SetUseDesignMetrics(void* ptr, char enable);
void QTextOption_SetWrapMode(void* ptr, long long mode);
struct QtGui_PackedList QTextOption_TabArray(void* ptr);
double QTextOption_TabStopDistance(void* ptr);
long long QTextOption_TextDirection(void* ptr);
char QTextOption_UseDesignMetrics(void* ptr);
long long QTextOption_WrapMode(void* ptr);
void QTextOption_DestroyQTextOption(void* ptr);
double QTextOption___setTabArray_tabStops_atList(void* ptr, int i);
void QTextOption___setTabArray_tabStops_setList(void* ptr, double i);
void* QTextOption___setTabArray_tabStops_newList(void* ptr);
double QTextOption___tabArray_atList(void* ptr, int i);
void QTextOption___tabArray_setList(void* ptr, double i);
void* QTextOption___tabArray_newList(void* ptr);
void QTextTable_AppendColumns(void* ptr, int count);
void QTextTable_AppendRows(void* ptr, int count);
void* QTextTable_CellAt(void* ptr, int row, int column);
void* QTextTable_CellAt2(void* ptr, int position);
void* QTextTable_CellAt3(void* ptr, void* cursor);
int QTextTable_Columns(void* ptr);
void* QTextTable_Format(void* ptr);
void QTextTable_InsertColumns(void* ptr, int index, int columns);
void QTextTable_InsertRows(void* ptr, int index, int rows);
void QTextTable_MergeCells(void* ptr, int row, int column, int numRows, int numCols);
void QTextTable_MergeCells2(void* ptr, void* cursor);
void QTextTable_RemoveColumns(void* ptr, int index, int columns);
void QTextTable_RemoveRows(void* ptr, int index, int rows);
void QTextTable_Resize(void* ptr, int rows, int columns);
void* QTextTable_RowEnd(void* ptr, void* cursor);
void* QTextTable_RowStart(void* ptr, void* cursor);
int QTextTable_Rows(void* ptr);
void QTextTable_SetFormat(void* ptr, void* format);
void QTextTable_SplitCell(void* ptr, int row, int column, int numRows, int numCols);
void* QTextTableCell_NewQTextTableCell();
void* QTextTableCell_NewQTextTableCell2(void* other);
int QTextTableCell_Column(void* ptr);
int QTextTableCell_ColumnSpan(void* ptr);
void* QTextTableCell_FirstCursorPosition(void* ptr);
void* QTextTableCell_Format(void* ptr);
char QTextTableCell_IsValid(void* ptr);
void* QTextTableCell_LastCursorPosition(void* ptr);
int QTextTableCell_Row(void* ptr);
int QTextTableCell_RowSpan(void* ptr);
void QTextTableCell_SetFormat(void* ptr, void* format);
int QTextTableCell_TableCellFormatIndex(void* ptr);
void QTextTableCell_DestroyQTextTableCell(void* ptr);
void* QTextTableCellFormat_NewQTextTableCellFormat();
double QTextTableCellFormat_BottomBorder(void* ptr);
void* QTextTableCellFormat_BottomBorderBrush(void* ptr);
long long QTextTableCellFormat_BottomBorderStyle(void* ptr);
double QTextTableCellFormat_BottomPadding(void* ptr);
double QTextTableCellFormat_LeftBorder(void* ptr);
void* QTextTableCellFormat_LeftBorderBrush(void* ptr);
long long QTextTableCellFormat_LeftBorderStyle(void* ptr);
double QTextTableCellFormat_LeftPadding(void* ptr);
double QTextTableCellFormat_RightBorder(void* ptr);
void* QTextTableCellFormat_RightBorderBrush(void* ptr);
long long QTextTableCellFormat_RightBorderStyle(void* ptr);
double QTextTableCellFormat_RightPadding(void* ptr);
void QTextTableCellFormat_SetBorder(void* ptr, double width);
void QTextTableCellFormat_SetBorderBrush(void* ptr, void* brush);
void QTextTableCellFormat_SetBorderStyle(void* ptr, long long style);
void QTextTableCellFormat_SetBottomBorder(void* ptr, double width);
void QTextTableCellFormat_SetBottomBorderBrush(void* ptr, void* brush);
void QTextTableCellFormat_SetBottomBorderStyle(void* ptr, long long style);
void QTextTableCellFormat_SetBottomPadding(void* ptr, double padding);
void QTextTableCellFormat_SetLeftBorder(void* ptr, double width);
void QTextTableCellFormat_SetLeftBorderBrush(void* ptr, void* brush);
void QTextTableCellFormat_SetLeftBorderStyle(void* ptr, long long style);
void QTextTableCellFormat_SetLeftPadding(void* ptr, double padding);
void QTextTableCellFormat_SetPadding(void* ptr, double padding);
void QTextTableCellFormat_SetRightBorder(void* ptr, double width);
void QTextTableCellFormat_SetRightBorderBrush(void* ptr, void* brush);
void QTextTableCellFormat_SetRightBorderStyle(void* ptr, long long style);
void QTextTableCellFormat_SetRightPadding(void* ptr, double padding);
void QTextTableCellFormat_SetTopBorder(void* ptr, double width);
void QTextTableCellFormat_SetTopBorderBrush(void* ptr, void* brush);
void QTextTableCellFormat_SetTopBorderStyle(void* ptr, long long style);
void QTextTableCellFormat_SetTopPadding(void* ptr, double padding);
double QTextTableCellFormat_TopBorder(void* ptr);
void* QTextTableCellFormat_TopBorderBrush(void* ptr);
long long QTextTableCellFormat_TopBorderStyle(void* ptr);
double QTextTableCellFormat_TopPadding(void* ptr);
void* QTextTableFormat_NewQTextTableFormat();
long long QTextTableFormat_Alignment(void* ptr);
char QTextTableFormat_BorderCollapse(void* ptr);
double QTextTableFormat_CellPadding(void* ptr);
double QTextTableFormat_CellSpacing(void* ptr);
void QTextTableFormat_ClearColumnWidthConstraints(void* ptr);
int QTextTableFormat_Columns(void* ptr);
int QTextTableFormat_HeaderRowCount(void* ptr);
void QTextTableFormat_SetAlignment(void* ptr, long long alignment);
void QTextTableFormat_SetBorderCollapse(void* ptr, char borderCollapse);
void QTextTableFormat_SetCellPadding(void* ptr, double padding);
void QTextTableFormat_SetCellSpacing(void* ptr, double spacing);
void QTextTableFormat_SetColumnWidthConstraints(void* ptr, void* constraints);
void QTextTableFormat_SetHeaderRowCount(void* ptr, int count);
void* QTextTableFormat___columnWidthConstraints_atList(void* ptr, int i);
void QTextTableFormat___columnWidthConstraints_setList(void* ptr, void* i);
void* QTextTableFormat___columnWidthConstraints_newList(void* ptr);
void* QTextTableFormat___setColumnWidthConstraints_constraints_atList(void* ptr, int i);
void QTextTableFormat___setColumnWidthConstraints_constraints_setList(void* ptr, void* i);
void* QTextTableFormat___setColumnWidthConstraints_constraints_newList(void* ptr);
void* QTouchDevice_NewQTouchDevice();
long long QTouchDevice_Capabilities(void* ptr);
struct QtGui_PackedList QTouchDevice_QTouchDevice_Devices();
int QTouchDevice_MaximumTouchPoints(void* ptr);
struct QtGui_PackedString QTouchDevice_Name(void* ptr);
void QTouchDevice_SetCapabilities(void* ptr, long long caps);
void QTouchDevice_SetMaximumTouchPoints(void* ptr, int max);
void QTouchDevice_SetName(void* ptr, struct QtGui_PackedString name);
void QTouchDevice_SetType(void* ptr, long long devType);
long long QTouchDevice_Type(void* ptr);
void QTouchDevice_DestroyQTouchDevice(void* ptr);
void* QTouchDevice___devices_atList(void* ptr, int i);
void QTouchDevice___devices_setList(void* ptr, void* i);
void* QTouchDevice___devices_newList(void* ptr);
void* QTouchEvent_Device(void* ptr);
void* QTouchEvent_Target(void* ptr);
long long QTouchEvent_TouchPointStates(void* ptr);
void* QTouchEvent_Window(void* ptr);
void QTouchEvent_DestroyQTouchEvent(void* ptr);
void QTouchEvent_DestroyQTouchEventDefault(void* ptr);
void* QTouchEvent___QTouchEvent_touchPoints_newList(void* ptr);
void* QTouchEvent___setTouchPoints_atouchPoints_newList(void* ptr);
void* QTouchEvent___touchPoints_newList(void* ptr);
void* QTouchEvent____touchPoints_newList(void* ptr);
void* QTouchEvent___set_touchPoints__newList(void* ptr);
void* QTransform_NewQTransform2();
void* QTransform_NewQTransform3(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
void* QTransform_NewQTransform4(double m11, double m12, double m21, double m22, double dx, double dy);
void* QTransform_Adjoint(void* ptr);
double QTransform_Determinant(void* ptr);
double QTransform_Dx(void* ptr);
double QTransform_Dy(void* ptr);
void* QTransform_QTransform_FromScale(double sx, double sy);
void* QTransform_QTransform_FromTranslate(double dx, double dy);
void* QTransform_Inverted(void* ptr, char* invertible);
char QTransform_IsAffine(void* ptr);
char QTransform_IsIdentity(void* ptr);
char QTransform_IsInvertible(void* ptr);
char QTransform_IsRotating(void* ptr);
char QTransform_IsScaling(void* ptr);
char QTransform_IsTranslating(void* ptr);
double QTransform_M11(void* ptr);
double QTransform_M12(void* ptr);
double QTransform_M13(void* ptr);
double QTransform_M21(void* ptr);
double QTransform_M22(void* ptr);
double QTransform_M23(void* ptr);
double QTransform_M31(void* ptr);
double QTransform_M32(void* ptr);
double QTransform_M33(void* ptr);
void QTransform_Map(void* ptr, double x, double y, double tx, double ty);
void* QTransform_Map2(void* ptr, void* point);
void* QTransform_Map3(void* ptr, void* p);
void* QTransform_Map4(void* ptr, void* l);
void* QTransform_Map5(void* ptr, void* line);
void* QTransform_Map6(void* ptr, void* polygon);
void* QTransform_Map7(void* ptr, void* polygon);
void* QTransform_Map8(void* ptr, void* region);
void* QTransform_Map9(void* ptr, void* path);
void QTransform_Map10(void* ptr, int x, int y, int tx, int ty);
void* QTransform_MapRect(void* ptr, void* rectangle);
void* QTransform_MapRect2(void* ptr, void* rectangle);
void* QTransform_MapToPolygon(void* ptr, void* rectangle);
char QTransform_QTransform_QuadToQuad(void* one, void* two, void* trans);
char QTransform_QTransform_QuadToSquare(void* quad, void* trans);
void QTransform_Reset(void* ptr);
void* QTransform_Rotate(void* ptr, double angle, long long axis);
void* QTransform_RotateRadians(void* ptr, double angle, long long axis);
void* QTransform_Scale(void* ptr, double sx, double sy);
void QTransform_SetMatrix(void* ptr, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
void* QTransform_Shear(void* ptr, double sh, double sv);
char QTransform_QTransform_SquareToQuad(void* quad, void* trans);
void* QTransform_Translate(void* ptr, double dx, double dy);
void* QTransform_Transposed(void* ptr);
long long QTransform_Type(void* ptr);
void* QValidator_NewQValidator(void* parent);
void QValidator_ConnectChanged(void* ptr, long long t);
void QValidator_DisconnectChanged(void* ptr);
void QValidator_Changed(void* ptr);
void QValidator_Fixup(void* ptr, struct QtGui_PackedString input);
void QValidator_FixupDefault(void* ptr, struct QtGui_PackedString input);
void* QValidator_Locale(void* ptr);
void QValidator_SetLocale(void* ptr, void* locale);
long long QValidator_Validate(void* ptr, struct QtGui_PackedString input, int pos);
void QValidator_DestroyQValidator(void* ptr);
void QValidator_DestroyQValidatorDefault(void* ptr);
void* QValidator___children_atList(void* ptr, int i);
void QValidator___children_setList(void* ptr, void* i);
void* QValidator___children_newList(void* ptr);
void* QValidator___dynamicPropertyNames_atList(void* ptr, int i);
void QValidator___dynamicPropertyNames_setList(void* ptr, void* i);
void* QValidator___dynamicPropertyNames_newList(void* ptr);
void* QValidator___findChildren_atList(void* ptr, int i);
void QValidator___findChildren_setList(void* ptr, void* i);
void* QValidator___findChildren_newList(void* ptr);
void* QValidator___findChildren_atList3(void* ptr, int i);
void QValidator___findChildren_setList3(void* ptr, void* i);
void* QValidator___findChildren_newList3(void* ptr);
void QValidator_ChildEventDefault(void* ptr, void* event);
void QValidator_ConnectNotifyDefault(void* ptr, void* sign);
void QValidator_CustomEventDefault(void* ptr, void* event);
void QValidator_DeleteLaterDefault(void* ptr);
void QValidator_DisconnectNotifyDefault(void* ptr, void* sign);
char QValidator_EventDefault(void* ptr, void* e);
char QValidator_EventFilterDefault(void* ptr, void* watched, void* event);
void* QValidator_MetaObjectDefault(void* ptr);
void QValidator_TimerEventDefault(void* ptr, void* event);
void* QVector2D_NewQVector2D();
void* QVector2D_NewQVector2D3(float xpos, float ypos);
void* QVector2D_NewQVector2D4(void* point);
void* QVector2D_NewQVector2D5(void* point);
void* QVector2D_NewQVector2D6(void* vector);
void* QVector2D_NewQVector2D7(void* vector);
float QVector2D_DistanceToLine(void* ptr, void* point, void* direction);
float QVector2D_DistanceToPoint(void* ptr, void* point);
float QVector2D_QVector2D_DotProduct(void* v1, void* v2);
char QVector2D_IsNull(void* ptr);
float QVector2D_Length(void* ptr);
float QVector2D_LengthSquared(void* ptr);
void QVector2D_Normalize(void* ptr);
void* QVector2D_Normalized(void* ptr);
void QVector2D_SetX(void* ptr, float x);
void QVector2D_SetY(void* ptr, float y);
void* QVector2D_ToPoint(void* ptr);
void* QVector2D_ToPointF(void* ptr);
void* QVector2D_ToVector3D(void* ptr);
void* QVector2D_ToVector4D(void* ptr);
float QVector2D_X(void* ptr);
float QVector2D_Y(void* ptr);
void* QVector3D_NewQVector3D();
void* QVector3D_NewQVector3D3(float xpos, float ypos, float zpos);
void* QVector3D_NewQVector3D4(void* point);
void* QVector3D_NewQVector3D5(void* point);
void* QVector3D_NewQVector3D6(void* vector);
void* QVector3D_NewQVector3D7(void* vector, float zpos);
void* QVector3D_NewQVector3D8(void* vector);
void* QVector3D_QVector3D_CrossProduct(void* v1, void* v2);
float QVector3D_DistanceToLine(void* ptr, void* point, void* direction);
float QVector3D_DistanceToPlane(void* ptr, void* plane, void* normal);
float QVector3D_DistanceToPlane2(void* ptr, void* plane1, void* plane2, void* plane3);
float QVector3D_DistanceToPoint(void* ptr, void* point);
float QVector3D_QVector3D_DotProduct(void* v1, void* v2);
char QVector3D_IsNull(void* ptr);
float QVector3D_Length(void* ptr);
float QVector3D_LengthSquared(void* ptr);
void* QVector3D_QVector3D_Normal(void* v1, void* v2);
void* QVector3D_QVector3D_Normal2(void* v1, void* v2, void* v3);
void QVector3D_Normalize(void* ptr);
void* QVector3D_Normalized(void* ptr);
void* QVector3D_Project(void* ptr, void* modelView, void* projection, void* viewport);
void QVector3D_SetX(void* ptr, float x);
void QVector3D_SetY(void* ptr, float y);
void QVector3D_SetZ(void* ptr, float z);
void* QVector3D_ToPoint(void* ptr);
void* QVector3D_ToPointF(void* ptr);
void* QVector3D_ToVector2D(void* ptr);
void* QVector3D_ToVector4D(void* ptr);
void* QVector3D_Unproject(void* ptr, void* modelView, void* projection, void* viewport);
float QVector3D_X(void* ptr);
float QVector3D_Y(void* ptr);
float QVector3D_Z(void* ptr);
void* QVector4D_NewQVector4D();
void* QVector4D_NewQVector4D3(float xpos, float ypos, float zpos, float wpos);
void* QVector4D_NewQVector4D4(void* point);
void* QVector4D_NewQVector4D5(void* point);
void* QVector4D_NewQVector4D6(void* vector);
void* QVector4D_NewQVector4D7(void* vector, float zpos, float wpos);
void* QVector4D_NewQVector4D8(void* vector);
void* QVector4D_NewQVector4D9(void* vector, float wpos);
float QVector4D_QVector4D_DotProduct(void* v1, void* v2);
char QVector4D_IsNull(void* ptr);
float QVector4D_Length(void* ptr);
float QVector4D_LengthSquared(void* ptr);
void QVector4D_Normalize(void* ptr);
void* QVector4D_Normalized(void* ptr);
void QVector4D_SetW(void* ptr, float w);
void QVector4D_SetX(void* ptr, float x);
void QVector4D_SetY(void* ptr, float y);
void QVector4D_SetZ(void* ptr, float z);
void* QVector4D_ToPoint(void* ptr);
void* QVector4D_ToPointF(void* ptr);
void* QVector4D_ToVector2D(void* ptr);
void* QVector4D_ToVector2DAffine(void* ptr);
void* QVector4D_ToVector3D(void* ptr);
void* QVector4D_ToVector3DAffine(void* ptr);
float QVector4D_W(void* ptr);
float QVector4D_X(void* ptr);
float QVector4D_Y(void* ptr);
float QVector4D_Z(void* ptr);
void* QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(struct QtGui_PackedString href);
struct QtGui_PackedString QWhatsThisClickedEvent_Href(void* ptr);
void* QWheelEvent_NewQWheelEvent7(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, long long buttons, long long modifiers, long long phase, char inverted, long long source);
void* QWheelEvent_AngleDelta(void* ptr);
long long QWheelEvent_Buttons(void* ptr);
void* QWheelEvent_GlobalPosition(void* ptr);
char QWheelEvent_Inverted(void* ptr);
long long QWheelEvent_Phase(void* ptr);
void* QWheelEvent_PixelDelta(void* ptr);
void* QWheelEvent_Position(void* ptr);
long long QWheelEvent_Source(void* ptr);
void* QWindow_NewQWindow(void* targetScreen);
void* QWindow_NewQWindow2(void* parent);
void QWindow_ConnectActiveChanged(void* ptr, long long t);
void QWindow_DisconnectActiveChanged(void* ptr);
void QWindow_ActiveChanged(void* ptr);
void QWindow_Alert(void* ptr, int msec);
void QWindow_AlertDefault(void* ptr, int msec);
void* QWindow_BaseSize(void* ptr);
char QWindow_Close(void* ptr);
char QWindow_CloseDefault(void* ptr);
long long QWindow_ContentOrientation(void* ptr);
void QWindow_ConnectContentOrientationChanged(void* ptr, long long t);
void QWindow_DisconnectContentOrientationChanged(void* ptr);
void QWindow_ContentOrientationChanged(void* ptr, long long orientation);
void QWindow_Create(void* ptr);
void* QWindow_Cursor(void* ptr);
void QWindow_Destroy(void* ptr);
double QWindow_DevicePixelRatio(void* ptr);
char QWindow_Event(void* ptr, void* ev);
char QWindow_EventDefault(void* ptr, void* ev);
void QWindow_ExposeEvent(void* ptr, void* ev);
void QWindow_ExposeEventDefault(void* ptr, void* ev);
struct QtGui_PackedString QWindow_FilePath(void* ptr);
long long QWindow_Flags(void* ptr);
void QWindow_FocusInEvent(void* ptr, void* ev);
void QWindow_FocusInEventDefault(void* ptr, void* ev);
void* QWindow_FocusObject(void* ptr);
void* QWindow_FocusObjectDefault(void* ptr);
void QWindow_ConnectFocusObjectChanged(void* ptr, long long t);
void QWindow_DisconnectFocusObjectChanged(void* ptr);
void QWindow_FocusObjectChanged(void* ptr, void* object);
void QWindow_FocusOutEvent(void* ptr, void* ev);
void QWindow_FocusOutEventDefault(void* ptr, void* ev);
void* QWindow_Format(void* ptr);
void* QWindow_FormatDefault(void* ptr);
void* QWindow_FrameGeometry(void* ptr);
void* QWindow_FrameMargins(void* ptr);
void* QWindow_FramePosition(void* ptr);
void* QWindow_QWindow_FromWinId(uintptr_t id);
void* QWindow_Geometry(void* ptr);
int QWindow_Height(void* ptr);
void QWindow_ConnectHeightChanged(void* ptr, long long t);
void QWindow_DisconnectHeightChanged(void* ptr);
void QWindow_HeightChanged(void* ptr, int arg);
void QWindow_Hide(void* ptr);
void QWindow_HideDefault(void* ptr);
void QWindow_HideEvent(void* ptr, void* ev);
void QWindow_HideEventDefault(void* ptr, void* ev);
void* QWindow_Icon(void* ptr);
char QWindow_IsActive(void* ptr);
char QWindow_IsAncestorOf(void* ptr, void* child, long long mode);
char QWindow_IsExposed(void* ptr);
char QWindow_IsModal(void* ptr);
char QWindow_IsTopLevel(void* ptr);
char QWindow_IsVisible(void* ptr);
void QWindow_KeyPressEvent(void* ptr, void* ev);
void QWindow_KeyPressEventDefault(void* ptr, void* ev);
void QWindow_KeyReleaseEvent(void* ptr, void* ev);
void QWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QWindow_Lower(void* ptr);
void QWindow_LowerDefault(void* ptr);
void* QWindow_MapFromGlobal(void* ptr, void* pos);
void* QWindow_MapToGlobal(void* ptr, void* pos);
void* QWindow_Mask(void* ptr);
int QWindow_MaximumHeight(void* ptr);
void QWindow_ConnectMaximumHeightChanged(void* ptr, long long t);
void QWindow_DisconnectMaximumHeightChanged(void* ptr);
void QWindow_MaximumHeightChanged(void* ptr, int arg);
void* QWindow_MaximumSize(void* ptr);
int QWindow_MaximumWidth(void* ptr);
void QWindow_ConnectMaximumWidthChanged(void* ptr, long long t);
void QWindow_DisconnectMaximumWidthChanged(void* ptr);
void QWindow_MaximumWidthChanged(void* ptr, int arg);
int QWindow_MinimumHeight(void* ptr);
void QWindow_ConnectMinimumHeightChanged(void* ptr, long long t);
void QWindow_DisconnectMinimumHeightChanged(void* ptr);
void QWindow_MinimumHeightChanged(void* ptr, int arg);
void* QWindow_MinimumSize(void* ptr);
int QWindow_MinimumWidth(void* ptr);
void QWindow_ConnectMinimumWidthChanged(void* ptr, long long t);
void QWindow_DisconnectMinimumWidthChanged(void* ptr);
void QWindow_MinimumWidthChanged(void* ptr, int arg);
long long QWindow_Modality(void* ptr);
void QWindow_ConnectModalityChanged(void* ptr, long long t);
void QWindow_DisconnectModalityChanged(void* ptr);
void QWindow_ModalityChanged(void* ptr, long long modality);
void QWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QWindow_MouseMoveEvent(void* ptr, void* ev);
void QWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QWindow_MousePressEvent(void* ptr, void* ev);
void QWindow_MousePressEventDefault(void* ptr, void* ev);
void QWindow_MouseReleaseEvent(void* ptr, void* ev);
void QWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QWindow_MoveEvent(void* ptr, void* ev);
void QWindow_MoveEventDefault(void* ptr, void* ev);
char QWindow_NativeEvent(void* ptr, void* eventType, void* message, long* result);
char QWindow_NativeEventDefault(void* ptr, void* eventType, void* message, long* result);
double QWindow_Opacity(void* ptr);
void QWindow_ConnectOpacityChanged(void* ptr, long long t);
void QWindow_DisconnectOpacityChanged(void* ptr);
void QWindow_OpacityChanged(void* ptr, double opacity);
void* QWindow_Parent(void* ptr, long long mode);
void* QWindow_Parent2(void* ptr);
void* QWindow_Position(void* ptr);
void QWindow_Raise(void* ptr);
void QWindow_RaiseDefault(void* ptr);
void QWindow_ReportContentOrientationChange(void* ptr, long long orientation);
void QWindow_RequestActivate(void* ptr);
void QWindow_RequestActivateDefault(void* ptr);
void QWindow_RequestUpdate(void* ptr);
void QWindow_RequestUpdateDefault(void* ptr);
void* QWindow_RequestedFormat(void* ptr);
void QWindow_Resize(void* ptr, void* newSize);
void QWindow_Resize2(void* ptr, int w, int h);
void QWindow_ResizeEvent(void* ptr, void* ev);
void QWindow_ResizeEventDefault(void* ptr, void* ev);
void* QWindow_Screen(void* ptr);
void QWindow_ConnectScreenChanged(void* ptr, long long t);
void QWindow_DisconnectScreenChanged(void* ptr);
void QWindow_ScreenChanged(void* ptr, void* screen);
void QWindow_SetBaseSize(void* ptr, void* size);
void QWindow_SetCursor(void* ptr, void* cursor);
void QWindow_SetFilePath(void* ptr, struct QtGui_PackedString filePath);
void QWindow_SetFlag(void* ptr, long long flag, char on);
void QWindow_SetFlags(void* ptr, long long flags);
void QWindow_SetFormat(void* ptr, void* format);
void QWindow_SetFramePosition(void* ptr, void* point);
void QWindow_SetGeometry(void* ptr, int posx, int posy, int w, int h);
void QWindow_SetGeometryDefault(void* ptr, int posx, int posy, int w, int h);
void QWindow_SetGeometry2(void* ptr, void* rect);
void QWindow_SetGeometry2Default(void* ptr, void* rect);
void QWindow_SetHeight(void* ptr, int arg);
void QWindow_SetHeightDefault(void* ptr, int arg);
void QWindow_SetIcon(void* ptr, void* icon);
char QWindow_SetKeyboardGrabEnabled(void* ptr, char grab);
void QWindow_SetMask(void* ptr, void* region);
void QWindow_SetMaximumHeight(void* ptr, int h);
void QWindow_SetMaximumHeightDefault(void* ptr, int h);
void QWindow_SetMaximumSize(void* ptr, void* size);
void QWindow_SetMaximumWidth(void* ptr, int w);
void QWindow_SetMaximumWidthDefault(void* ptr, int w);
void QWindow_SetMinimumHeight(void* ptr, int h);
void QWindow_SetMinimumHeightDefault(void* ptr, int h);
void QWindow_SetMinimumSize(void* ptr, void* size);
void QWindow_SetMinimumWidth(void* ptr, int w);
void QWindow_SetMinimumWidthDefault(void* ptr, int w);
void QWindow_SetModality(void* ptr, long long modality);
char QWindow_SetMouseGrabEnabled(void* ptr, char grab);
void QWindow_SetOpacity(void* ptr, double level);
void QWindow_SetParent(void* ptr, void* parent);
void QWindow_SetPosition(void* ptr, void* pt);
void QWindow_SetPosition2(void* ptr, int posx, int posy);
void QWindow_SetScreen(void* ptr, void* newScreen);
void QWindow_SetSizeIncrement(void* ptr, void* size);
void QWindow_SetSurfaceType(void* ptr, long long surfaceType);
void QWindow_SetTitle(void* ptr, struct QtGui_PackedString vqs);
void QWindow_SetTitleDefault(void* ptr, struct QtGui_PackedString vqs);
void QWindow_SetVisibility(void* ptr, long long v);
void QWindow_SetVisible(void* ptr, char visible);
void QWindow_SetVisibleDefault(void* ptr, char visible);
void QWindow_SetWidth(void* ptr, int arg);
void QWindow_SetWidthDefault(void* ptr, int arg);
void QWindow_SetWindowState(void* ptr, long long state);
void QWindow_SetWindowStates(void* ptr, long long state);
void QWindow_SetX(void* ptr, int arg);
void QWindow_SetXDefault(void* ptr, int arg);
void QWindow_SetY(void* ptr, int arg);
void QWindow_SetYDefault(void* ptr, int arg);
void QWindow_Show(void* ptr);
void QWindow_ShowDefault(void* ptr);
void QWindow_ShowEvent(void* ptr, void* ev);
void QWindow_ShowEventDefault(void* ptr, void* ev);
void QWindow_ShowFullScreen(void* ptr);
void QWindow_ShowFullScreenDefault(void* ptr);
void QWindow_ShowMaximized(void* ptr);
void QWindow_ShowMaximizedDefault(void* ptr);
void QWindow_ShowMinimized(void* ptr);
void QWindow_ShowMinimizedDefault(void* ptr);
void QWindow_ShowNormal(void* ptr);
void QWindow_ShowNormalDefault(void* ptr);
void* QWindow_Size(void* ptr);
void* QWindow_SizeDefault(void* ptr);
void* QWindow_SizeIncrement(void* ptr);
char QWindow_StartSystemMove(void* ptr);
char QWindow_StartSystemMoveDefault(void* ptr);
char QWindow_StartSystemResize(void* ptr, long long edges);
char QWindow_StartSystemResizeDefault(void* ptr, long long edges);
long long QWindow_SurfaceType(void* ptr);
long long QWindow_SurfaceTypeDefault(void* ptr);
void QWindow_TabletEvent(void* ptr, void* ev);
void QWindow_TabletEventDefault(void* ptr, void* ev);
struct QtGui_PackedString QWindow_Title(void* ptr);
void QWindow_TouchEvent(void* ptr, void* ev);
void QWindow_TouchEventDefault(void* ptr, void* ev);
long long QWindow_Type(void* ptr);
void QWindow_UnsetCursor(void* ptr);
long long QWindow_Visibility(void* ptr);
void QWindow_ConnectVisibilityChanged(void* ptr, long long t);
void QWindow_DisconnectVisibilityChanged(void* ptr);
void QWindow_VisibilityChanged(void* ptr, long long visibility);
void QWindow_ConnectVisibleChanged(void* ptr, long long t);
void QWindow_DisconnectVisibleChanged(void* ptr);
void QWindow_VisibleChanged(void* ptr, char arg);
void QWindow_WheelEvent(void* ptr, void* ev);
void QWindow_WheelEventDefault(void* ptr, void* ev);
int QWindow_Width(void* ptr);
void QWindow_ConnectWidthChanged(void* ptr, long long t);
void QWindow_DisconnectWidthChanged(void* ptr);
void QWindow_WidthChanged(void* ptr, int arg);
uintptr_t QWindow_WinId(void* ptr);
long long QWindow_WindowState(void* ptr);
void QWindow_ConnectWindowStateChanged(void* ptr, long long t);
void QWindow_DisconnectWindowStateChanged(void* ptr);
void QWindow_WindowStateChanged(void* ptr, long long windowState);
long long QWindow_WindowStates(void* ptr);
void QWindow_ConnectWindowTitleChanged(void* ptr, long long t);
void QWindow_DisconnectWindowTitleChanged(void* ptr);
void QWindow_WindowTitleChanged(void* ptr, struct QtGui_PackedString title);
int QWindow_X(void* ptr);
void QWindow_ConnectXChanged(void* ptr, long long t);
void QWindow_DisconnectXChanged(void* ptr);
void QWindow_XChanged(void* ptr, int arg);
int QWindow_Y(void* ptr);
void QWindow_ConnectYChanged(void* ptr, long long t);
void QWindow_DisconnectYChanged(void* ptr);
void QWindow_YChanged(void* ptr, int arg);
void QWindow_DestroyQWindow(void* ptr);
void QWindow_DestroyQWindowDefault(void* ptr);
void* QWindow___children_atList(void* ptr, int i);
void QWindow___children_setList(void* ptr, void* i);
void* QWindow___children_newList(void* ptr);
void* QWindow___dynamicPropertyNames_atList(void* ptr, int i);
void QWindow___dynamicPropertyNames_setList(void* ptr, void* i);
void* QWindow___dynamicPropertyNames_newList(void* ptr);
void* QWindow___findChildren_atList(void* ptr, int i);
void QWindow___findChildren_setList(void* ptr, void* i);
void* QWindow___findChildren_newList(void* ptr);
void* QWindow___findChildren_atList3(void* ptr, int i);
void QWindow___findChildren_setList3(void* ptr, void* i);
void* QWindow___findChildren_newList3(void* ptr);
void QWindow_ChildEvent(void* ptr, void* event);
void QWindow_ChildEventDefault(void* ptr, void* event);
void QWindow_ConnectNotify(void* ptr, void* sign);
void QWindow_ConnectNotifyDefault(void* ptr, void* sign);
void QWindow_CustomEvent(void* ptr, void* event);
void QWindow_CustomEventDefault(void* ptr, void* event);
void QWindow_DeleteLater(void* ptr);
void QWindow_DeleteLaterDefault(void* ptr);
void QWindow_DisconnectNotify(void* ptr, void* sign);
void QWindow_DisconnectNotifyDefault(void* ptr, void* sign);
char QWindow_EventFilter(void* ptr, void* watched, void* event);
char QWindow_EventFilterDefault(void* ptr, void* watched, void* event);
void* QWindow_MetaObject(void* ptr);
void* QWindow_MetaObjectDefault(void* ptr);
void QWindow_TimerEvent(void* ptr, void* event);
void QWindow_TimerEventDefault(void* ptr, void* event);
long long QWindowStateChangeEvent_OldState(void* ptr);

#ifdef __cplusplus
}
#endif

#endif