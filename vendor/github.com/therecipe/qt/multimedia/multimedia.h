// +build !minimal

#pragma once

#ifndef GO_QTMULTIMEDIA_H
#define GO_QTMULTIMEDIA_H

#include <stdint.h>

#ifdef __cplusplus
int QAbstractAudioDeviceInfo_QAbstractAudioDeviceInfo_QRegisterMetaType();
int QAbstractAudioInput_QAbstractAudioInput_QRegisterMetaType();
int QAbstractAudioOutput_QAbstractAudioOutput_QRegisterMetaType();
int QAbstractPlanarVideoBuffer_QAbstractPlanarVideoBuffer_QRegisterMetaType();
int QAbstractVideoBuffer_QAbstractVideoBuffer_QRegisterMetaType();
int QAbstractVideoFilter_QAbstractVideoFilter_QRegisterMetaType();
int QAbstractVideoSurface_QAbstractVideoSurface_QRegisterMetaType();
int QAudioDecoder_QAudioDecoder_QRegisterMetaType();
int QAudioDecoderControl_QAudioDecoderControl_QRegisterMetaType();
int QAudioEncoderSettingsControl_QAudioEncoderSettingsControl_QRegisterMetaType();
int QAudioInput_QAudioInput_QRegisterMetaType();
int QAudioInputSelectorControl_QAudioInputSelectorControl_QRegisterMetaType();
int QAudioOutput_QAudioOutput_QRegisterMetaType();
int QAudioOutputSelectorControl_QAudioOutputSelectorControl_QRegisterMetaType();
int QAudioProbe_QAudioProbe_QRegisterMetaType();
int QAudioRecorder_QAudioRecorder_QRegisterMetaType();
int QAudioRoleControl_QAudioRoleControl_QRegisterMetaType();
int QAudioSystemPlugin_QAudioSystemPlugin_QRegisterMetaType();
int QCamera_QCamera_QRegisterMetaType();
int QCameraCaptureBufferFormatControl_QCameraCaptureBufferFormatControl_QRegisterMetaType();
int QCameraCaptureDestinationControl_QCameraCaptureDestinationControl_QRegisterMetaType();
int QCameraControl_QCameraControl_QRegisterMetaType();
int QCameraExposure_QCameraExposure_QRegisterMetaType();
int QCameraExposureControl_QCameraExposureControl_QRegisterMetaType();
int QCameraFeedbackControl_QCameraFeedbackControl_QRegisterMetaType();
int QCameraFlashControl_QCameraFlashControl_QRegisterMetaType();
int QCameraFocus_QCameraFocus_QRegisterMetaType();
int QCameraFocusControl_QCameraFocusControl_QRegisterMetaType();
int QCameraImageCapture_QCameraImageCapture_QRegisterMetaType();
int QCameraImageCaptureControl_QCameraImageCaptureControl_QRegisterMetaType();
int QCameraImageProcessing_QCameraImageProcessing_QRegisterMetaType();
int QCameraImageProcessingControl_QCameraImageProcessingControl_QRegisterMetaType();
int QCameraInfoControl_QCameraInfoControl_QRegisterMetaType();
int QCameraLocksControl_QCameraLocksControl_QRegisterMetaType();
int QCameraViewfinder_QCameraViewfinder_QRegisterMetaType();
int QCameraViewfinderSettingsControl_QCameraViewfinderSettingsControl_QRegisterMetaType();
int QCameraViewfinderSettingsControl2_QCameraViewfinderSettingsControl2_QRegisterMetaType();
int QCameraZoomControl_QCameraZoomControl_QRegisterMetaType();
int QCustomAudioRoleControl_QCustomAudioRoleControl_QRegisterMetaType();
int QGraphicsVideoItem_QGraphicsVideoItem_QRegisterMetaType();
int QImageEncoderControl_QImageEncoderControl_QRegisterMetaType();
int QMediaAudioProbeControl_QMediaAudioProbeControl_QRegisterMetaType();
int QMediaAvailabilityControl_QMediaAvailabilityControl_QRegisterMetaType();
int QMediaBindableInterface_QMediaBindableInterface_QRegisterMetaType();
int QMediaContainerControl_QMediaContainerControl_QRegisterMetaType();
int QMediaControl_QMediaControl_QRegisterMetaType();
int QMediaGaplessPlaybackControl_QMediaGaplessPlaybackControl_QRegisterMetaType();
int QMediaNetworkAccessControl_QMediaNetworkAccessControl_QRegisterMetaType();
int QMediaObject_QMediaObject_QRegisterMetaType();
int QMediaPlayer_QMediaPlayer_QRegisterMetaType();
int QMediaPlayerControl_QMediaPlayerControl_QRegisterMetaType();
int QMediaPlaylist_QMediaPlaylist_QRegisterMetaType();
int QMediaRecorder_QMediaRecorder_QRegisterMetaType();
int QMediaRecorderControl_QMediaRecorderControl_QRegisterMetaType();
int QMediaService_QMediaService_QRegisterMetaType();
int QMediaServiceCameraInfoInterface_QMediaServiceCameraInfoInterface_QRegisterMetaType();
int QMediaServiceDefaultDeviceInterface_QMediaServiceDefaultDeviceInterface_QRegisterMetaType();
int QMediaServiceFeaturesInterface_QMediaServiceFeaturesInterface_QRegisterMetaType();
int QMediaServiceProviderPlugin_QMediaServiceProviderPlugin_QRegisterMetaType();
int QMediaServiceSupportedDevicesInterface_QMediaServiceSupportedDevicesInterface_QRegisterMetaType();
int QMediaServiceSupportedFormatsInterface_QMediaServiceSupportedFormatsInterface_QRegisterMetaType();
int QMediaStreamsControl_QMediaStreamsControl_QRegisterMetaType();
int QMediaVideoProbeControl_QMediaVideoProbeControl_QRegisterMetaType();
int QMetaDataReaderControl_QMetaDataReaderControl_QRegisterMetaType();
int QMetaDataWriterControl_QMetaDataWriterControl_QRegisterMetaType();
int QRadioData_QRadioData_QRegisterMetaType();
int QRadioDataControl_QRadioDataControl_QRegisterMetaType();
int QRadioTuner_QRadioTuner_QRegisterMetaType();
int QRadioTunerControl_QRadioTunerControl_QRegisterMetaType();
int QSound_QSound_QRegisterMetaType();
int QSoundEffect_QSoundEffect_QRegisterMetaType();
int QVideoDeviceSelectorControl_QVideoDeviceSelectorControl_QRegisterMetaType();
int QVideoEncoderSettingsControl_QVideoEncoderSettingsControl_QRegisterMetaType();
int QVideoFilterRunnable_QVideoFilterRunnable_QRegisterMetaType();
int QVideoProbe_QVideoProbe_QRegisterMetaType();
int QVideoRendererControl_QVideoRendererControl_QRegisterMetaType();
int QVideoWidget_QVideoWidget_QRegisterMetaType();
int QVideoWidgetControl_QVideoWidgetControl_QRegisterMetaType();
int QVideoWindowControl_QVideoWindowControl_QRegisterMetaType();
extern "C" {
#endif

struct QtMultimedia_PackedString { char* data; long long len; void* ptr; };
struct QtMultimedia_PackedList { void* data; long long len; };
struct QtMultimedia_PackedString QAbstractAudioDeviceInfo_DeviceName(void* ptr);
char QAbstractAudioDeviceInfo_IsFormatSupported(void* ptr, void* format);
void* QAbstractAudioDeviceInfo_PreferredFormat(void* ptr);
struct QtMultimedia_PackedList QAbstractAudioDeviceInfo_SupportedByteOrders(void* ptr);
struct QtMultimedia_PackedList QAbstractAudioDeviceInfo_SupportedChannelCounts(void* ptr);
struct QtMultimedia_PackedString QAbstractAudioDeviceInfo_SupportedCodecs(void* ptr);
struct QtMultimedia_PackedList QAbstractAudioDeviceInfo_SupportedSampleRates(void* ptr);
struct QtMultimedia_PackedList QAbstractAudioDeviceInfo_SupportedSampleSizes(void* ptr);
struct QtMultimedia_PackedList QAbstractAudioDeviceInfo_SupportedSampleTypes(void* ptr);
long long QAbstractAudioDeviceInfo___supportedByteOrders_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___supportedByteOrders_setList(void* ptr, long long i);
void* QAbstractAudioDeviceInfo___supportedByteOrders_newList(void* ptr);
int QAbstractAudioDeviceInfo___supportedChannelCounts_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___supportedChannelCounts_setList(void* ptr, int i);
void* QAbstractAudioDeviceInfo___supportedChannelCounts_newList(void* ptr);
int QAbstractAudioDeviceInfo___supportedSampleRates_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___supportedSampleRates_setList(void* ptr, int i);
void* QAbstractAudioDeviceInfo___supportedSampleRates_newList(void* ptr);
int QAbstractAudioDeviceInfo___supportedSampleSizes_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___supportedSampleSizes_setList(void* ptr, int i);
void* QAbstractAudioDeviceInfo___supportedSampleSizes_newList(void* ptr);
long long QAbstractAudioDeviceInfo___supportedSampleTypes_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___supportedSampleTypes_setList(void* ptr, long long i);
void* QAbstractAudioDeviceInfo___supportedSampleTypes_newList(void* ptr);
void* QAbstractAudioDeviceInfo___children_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___children_setList(void* ptr, void* i);
void* QAbstractAudioDeviceInfo___children_newList(void* ptr);
void* QAbstractAudioDeviceInfo___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractAudioDeviceInfo___dynamicPropertyNames_newList(void* ptr);
void* QAbstractAudioDeviceInfo___findChildren_atList(void* ptr, int i);
void QAbstractAudioDeviceInfo___findChildren_setList(void* ptr, void* i);
void* QAbstractAudioDeviceInfo___findChildren_newList(void* ptr);
void* QAbstractAudioDeviceInfo___findChildren_atList3(void* ptr, int i);
void QAbstractAudioDeviceInfo___findChildren_setList3(void* ptr, void* i);
void* QAbstractAudioDeviceInfo___findChildren_newList3(void* ptr);
void QAbstractAudioDeviceInfo_ChildEventDefault(void* ptr, void* event);
void QAbstractAudioDeviceInfo_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractAudioDeviceInfo_CustomEventDefault(void* ptr, void* event);
void QAbstractAudioDeviceInfo_DeleteLaterDefault(void* ptr);
void QAbstractAudioDeviceInfo_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractAudioDeviceInfo_EventDefault(void* ptr, void* e);
char QAbstractAudioDeviceInfo_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractAudioDeviceInfo_MetaObjectDefault(void* ptr);
void QAbstractAudioDeviceInfo_TimerEventDefault(void* ptr, void* event);
int QAbstractAudioInput_BufferSize(void* ptr);
int QAbstractAudioInput_BytesReady(void* ptr);
long long QAbstractAudioInput_ElapsedUSecs(void* ptr);
long long QAbstractAudioInput_Error(void* ptr);
void QAbstractAudioInput_ConnectErrorChanged(void* ptr, long long t);
void QAbstractAudioInput_DisconnectErrorChanged(void* ptr);
void QAbstractAudioInput_ErrorChanged(void* ptr, long long error);
void* QAbstractAudioInput_Format(void* ptr);
void QAbstractAudioInput_ConnectNotify(void* ptr, long long t);
void QAbstractAudioInput_DisconnectNotify(void* ptr);
void QAbstractAudioInput_Notify(void* ptr);
int QAbstractAudioInput_NotifyInterval(void* ptr);
int QAbstractAudioInput_PeriodSize(void* ptr);
long long QAbstractAudioInput_ProcessedUSecs(void* ptr);
void QAbstractAudioInput_Reset(void* ptr);
void QAbstractAudioInput_Resume(void* ptr);
void QAbstractAudioInput_SetBufferSize(void* ptr, int value);
void QAbstractAudioInput_SetFormat(void* ptr, void* fmtfmt);
void QAbstractAudioInput_SetNotifyInterval(void* ptr, int ms);
void QAbstractAudioInput_Start(void* ptr, void* device);
void* QAbstractAudioInput_Start2(void* ptr);
long long QAbstractAudioInput_State(void* ptr);
void QAbstractAudioInput_ConnectStateChanged(void* ptr, long long t);
void QAbstractAudioInput_DisconnectStateChanged(void* ptr);
void QAbstractAudioInput_StateChanged(void* ptr, long long state);
void QAbstractAudioInput_Stop(void* ptr);
void QAbstractAudioInput_Suspend(void* ptr);
void* QAbstractAudioInput___children_atList(void* ptr, int i);
void QAbstractAudioInput___children_setList(void* ptr, void* i);
void* QAbstractAudioInput___children_newList(void* ptr);
void* QAbstractAudioInput___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractAudioInput___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractAudioInput___dynamicPropertyNames_newList(void* ptr);
void* QAbstractAudioInput___findChildren_atList(void* ptr, int i);
void QAbstractAudioInput___findChildren_setList(void* ptr, void* i);
void* QAbstractAudioInput___findChildren_newList(void* ptr);
void* QAbstractAudioInput___findChildren_atList3(void* ptr, int i);
void QAbstractAudioInput___findChildren_setList3(void* ptr, void* i);
void* QAbstractAudioInput___findChildren_newList3(void* ptr);
void QAbstractAudioInput_ChildEventDefault(void* ptr, void* event);
void QAbstractAudioInput_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractAudioInput_CustomEventDefault(void* ptr, void* event);
void QAbstractAudioInput_DeleteLaterDefault(void* ptr);
void QAbstractAudioInput_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractAudioInput_EventDefault(void* ptr, void* e);
char QAbstractAudioInput_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractAudioInput_MetaObjectDefault(void* ptr);
void QAbstractAudioInput_TimerEventDefault(void* ptr, void* event);
int QAbstractAudioOutput_BufferSize(void* ptr);
int QAbstractAudioOutput_BytesFree(void* ptr);
long long QAbstractAudioOutput_ElapsedUSecs(void* ptr);
long long QAbstractAudioOutput_Error(void* ptr);
void QAbstractAudioOutput_ConnectErrorChanged(void* ptr, long long t);
void QAbstractAudioOutput_DisconnectErrorChanged(void* ptr);
void QAbstractAudioOutput_ErrorChanged(void* ptr, long long error);
void* QAbstractAudioOutput_Format(void* ptr);
void QAbstractAudioOutput_ConnectNotify(void* ptr, long long t);
void QAbstractAudioOutput_DisconnectNotify(void* ptr);
void QAbstractAudioOutput_Notify(void* ptr);
int QAbstractAudioOutput_NotifyInterval(void* ptr);
int QAbstractAudioOutput_PeriodSize(void* ptr);
long long QAbstractAudioOutput_ProcessedUSecs(void* ptr);
void QAbstractAudioOutput_Reset(void* ptr);
void QAbstractAudioOutput_Resume(void* ptr);
void QAbstractAudioOutput_SetBufferSize(void* ptr, int value);
void QAbstractAudioOutput_SetFormat(void* ptr, void* fmtfmt);
void QAbstractAudioOutput_SetNotifyInterval(void* ptr, int ms);
void QAbstractAudioOutput_SetVolume(void* ptr, double volume);
void QAbstractAudioOutput_SetVolumeDefault(void* ptr, double volume);
void QAbstractAudioOutput_Start(void* ptr, void* device);
void* QAbstractAudioOutput_Start2(void* ptr);
long long QAbstractAudioOutput_State(void* ptr);
void QAbstractAudioOutput_ConnectStateChanged(void* ptr, long long t);
void QAbstractAudioOutput_DisconnectStateChanged(void* ptr);
void QAbstractAudioOutput_StateChanged(void* ptr, long long state);
void QAbstractAudioOutput_Stop(void* ptr);
void QAbstractAudioOutput_Suspend(void* ptr);
double QAbstractAudioOutput_Volume(void* ptr);
double QAbstractAudioOutput_VolumeDefault(void* ptr);
void* QAbstractAudioOutput___children_atList(void* ptr, int i);
void QAbstractAudioOutput___children_setList(void* ptr, void* i);
void* QAbstractAudioOutput___children_newList(void* ptr);
void* QAbstractAudioOutput___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractAudioOutput___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractAudioOutput___dynamicPropertyNames_newList(void* ptr);
void* QAbstractAudioOutput___findChildren_atList(void* ptr, int i);
void QAbstractAudioOutput___findChildren_setList(void* ptr, void* i);
void* QAbstractAudioOutput___findChildren_newList(void* ptr);
void* QAbstractAudioOutput___findChildren_atList3(void* ptr, int i);
void QAbstractAudioOutput___findChildren_setList3(void* ptr, void* i);
void* QAbstractAudioOutput___findChildren_newList3(void* ptr);
void QAbstractAudioOutput_ChildEventDefault(void* ptr, void* event);
void QAbstractAudioOutput_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractAudioOutput_CustomEventDefault(void* ptr, void* event);
void QAbstractAudioOutput_DeleteLaterDefault(void* ptr);
void QAbstractAudioOutput_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractAudioOutput_EventDefault(void* ptr, void* e);
char QAbstractAudioOutput_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractAudioOutput_MetaObjectDefault(void* ptr);
void QAbstractAudioOutput_TimerEventDefault(void* ptr, void* event);
void QAbstractPlanarVideoBuffer_DestroyQAbstractPlanarVideoBuffer(void* ptr);
void QAbstractPlanarVideoBuffer_DestroyQAbstractPlanarVideoBufferDefault(void* ptr);
struct QtMultimedia_PackedString QAbstractPlanarVideoBuffer_Map(void* ptr, long long mode, int numBytes, int bytesPerLine);
struct QtMultimedia_PackedString QAbstractPlanarVideoBuffer_MapDefault(void* ptr, long long mode, int numBytes, int bytesPerLine);
long long QAbstractPlanarVideoBuffer_MapMode(void* ptr);
long long QAbstractPlanarVideoBuffer_MapModeDefault(void* ptr);
void QAbstractPlanarVideoBuffer_Unmap(void* ptr);
void QAbstractPlanarVideoBuffer_UnmapDefault(void* ptr);
void* QAbstractVideoBuffer_NewQAbstractVideoBuffer(long long ty);
void* QAbstractVideoBuffer_Handle(void* ptr);
void* QAbstractVideoBuffer_HandleDefault(void* ptr);
long long QAbstractVideoBuffer_HandleType(void* ptr);
struct QtMultimedia_PackedString QAbstractVideoBuffer_Map(void* ptr, long long mode, int numBytes, int bytesPerLine);
long long QAbstractVideoBuffer_MapMode(void* ptr);
void QAbstractVideoBuffer_Release(void* ptr);
void QAbstractVideoBuffer_ReleaseDefault(void* ptr);
void QAbstractVideoBuffer_Unmap(void* ptr);
void QAbstractVideoBuffer_DestroyQAbstractVideoBuffer(void* ptr);
void QAbstractVideoBuffer_DestroyQAbstractVideoBufferDefault(void* ptr);
void* QAbstractVideoFilter_NewQAbstractVideoFilter(void* parent);
void QAbstractVideoFilter_ConnectActiveChanged(void* ptr, long long t);
void QAbstractVideoFilter_DisconnectActiveChanged(void* ptr);
void QAbstractVideoFilter_ActiveChanged(void* ptr);
void* QAbstractVideoFilter_CreateFilterRunnable(void* ptr);
char QAbstractVideoFilter_IsActive(void* ptr);
void QAbstractVideoFilter_SetActive(void* ptr, char v);
void* QAbstractVideoFilter___children_atList(void* ptr, int i);
void QAbstractVideoFilter___children_setList(void* ptr, void* i);
void* QAbstractVideoFilter___children_newList(void* ptr);
void* QAbstractVideoFilter___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractVideoFilter___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractVideoFilter___dynamicPropertyNames_newList(void* ptr);
void* QAbstractVideoFilter___findChildren_atList(void* ptr, int i);
void QAbstractVideoFilter___findChildren_setList(void* ptr, void* i);
void* QAbstractVideoFilter___findChildren_newList(void* ptr);
void* QAbstractVideoFilter___findChildren_atList3(void* ptr, int i);
void QAbstractVideoFilter___findChildren_setList3(void* ptr, void* i);
void* QAbstractVideoFilter___findChildren_newList3(void* ptr);
void QAbstractVideoFilter_ChildEventDefault(void* ptr, void* event);
void QAbstractVideoFilter_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractVideoFilter_CustomEventDefault(void* ptr, void* event);
void QAbstractVideoFilter_DeleteLaterDefault(void* ptr);
void QAbstractVideoFilter_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractVideoFilter_EventDefault(void* ptr, void* e);
char QAbstractVideoFilter_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractVideoFilter_MetaObjectDefault(void* ptr);
void QAbstractVideoFilter_TimerEventDefault(void* ptr, void* event);
void* QAbstractVideoSurface_NewQAbstractVideoSurface(void* parent);
void QAbstractVideoSurface_ConnectActiveChanged(void* ptr, long long t);
void QAbstractVideoSurface_DisconnectActiveChanged(void* ptr);
void QAbstractVideoSurface_ActiveChanged(void* ptr, char active);
long long QAbstractVideoSurface_Error(void* ptr);
char QAbstractVideoSurface_IsActive(void* ptr);
char QAbstractVideoSurface_IsFormatSupported(void* ptr, void* format);
char QAbstractVideoSurface_IsFormatSupportedDefault(void* ptr, void* format);
void* QAbstractVideoSurface_NativeResolution(void* ptr);
void QAbstractVideoSurface_ConnectNativeResolutionChanged(void* ptr, long long t);
void QAbstractVideoSurface_DisconnectNativeResolutionChanged(void* ptr);
void QAbstractVideoSurface_NativeResolutionChanged(void* ptr, void* resolution);
void* QAbstractVideoSurface_NearestFormat(void* ptr, void* format);
void* QAbstractVideoSurface_NearestFormatDefault(void* ptr, void* format);
char QAbstractVideoSurface_Present(void* ptr, void* frame);
void QAbstractVideoSurface_SetError(void* ptr, long long error);
void QAbstractVideoSurface_SetNativeResolution(void* ptr, void* resolution);
char QAbstractVideoSurface_Start(void* ptr, void* format);
char QAbstractVideoSurface_StartDefault(void* ptr, void* format);
void QAbstractVideoSurface_Stop(void* ptr);
void QAbstractVideoSurface_StopDefault(void* ptr);
void QAbstractVideoSurface_ConnectSupportedFormatsChanged(void* ptr, long long t);
void QAbstractVideoSurface_DisconnectSupportedFormatsChanged(void* ptr);
void QAbstractVideoSurface_SupportedFormatsChanged(void* ptr);
struct QtMultimedia_PackedList QAbstractVideoSurface_SupportedPixelFormats(void* ptr, long long ty);
void* QAbstractVideoSurface_SurfaceFormat(void* ptr);
void QAbstractVideoSurface_ConnectSurfaceFormatChanged(void* ptr, long long t);
void QAbstractVideoSurface_DisconnectSurfaceFormatChanged(void* ptr);
void QAbstractVideoSurface_SurfaceFormatChanged(void* ptr, void* format);
void QAbstractVideoSurface_DestroyQAbstractVideoSurface(void* ptr);
void QAbstractVideoSurface_DestroyQAbstractVideoSurfaceDefault(void* ptr);
long long QAbstractVideoSurface___supportedPixelFormats_atList(void* ptr, int i);
void QAbstractVideoSurface___supportedPixelFormats_setList(void* ptr, long long i);
void* QAbstractVideoSurface___supportedPixelFormats_newList(void* ptr);
void* QAbstractVideoSurface___children_atList(void* ptr, int i);
void QAbstractVideoSurface___children_setList(void* ptr, void* i);
void* QAbstractVideoSurface___children_newList(void* ptr);
void* QAbstractVideoSurface___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractVideoSurface___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractVideoSurface___dynamicPropertyNames_newList(void* ptr);
void* QAbstractVideoSurface___findChildren_atList(void* ptr, int i);
void QAbstractVideoSurface___findChildren_setList(void* ptr, void* i);
void* QAbstractVideoSurface___findChildren_newList(void* ptr);
void* QAbstractVideoSurface___findChildren_atList3(void* ptr, int i);
void QAbstractVideoSurface___findChildren_setList3(void* ptr, void* i);
void* QAbstractVideoSurface___findChildren_newList3(void* ptr);
void QAbstractVideoSurface_ChildEventDefault(void* ptr, void* event);
void QAbstractVideoSurface_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractVideoSurface_CustomEventDefault(void* ptr, void* event);
void QAbstractVideoSurface_DeleteLaterDefault(void* ptr);
void QAbstractVideoSurface_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractVideoSurface_EventDefault(void* ptr, void* e);
char QAbstractVideoSurface_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractVideoSurface_MetaObjectDefault(void* ptr);
void QAbstractVideoSurface_TimerEventDefault(void* ptr, void* event);
double QAudio_QAudio_ConvertVolume(double volume, long long from, long long to);
void* QAudioBuffer_NewQAudioBuffer();
void* QAudioBuffer_NewQAudioBuffer2(void* data, void* format, long long startTime);
void* QAudioBuffer_NewQAudioBuffer3(int numFrames, void* format, long long startTime);
int QAudioBuffer_ByteCount(void* ptr);
void* QAudioBuffer_ConstData(void* ptr);
void* QAudioBuffer_Data(void* ptr);
void* QAudioBuffer_Data2(void* ptr);
long long QAudioBuffer_Duration(void* ptr);
void* QAudioBuffer_Format(void* ptr);
int QAudioBuffer_FrameCount(void* ptr);
char QAudioBuffer_IsValid(void* ptr);
int QAudioBuffer_SampleCount(void* ptr);
long long QAudioBuffer_StartTime(void* ptr);
void QAudioBuffer_DestroyQAudioBuffer(void* ptr);
void* QAudioDecoder_NewQAudioDecoder(void* parent);
void* QAudioDecoder_AudioFormat(void* ptr);
char QAudioDecoder_BufferAvailable(void* ptr);
void QAudioDecoder_ConnectBufferAvailableChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectBufferAvailableChanged(void* ptr);
void QAudioDecoder_BufferAvailableChanged(void* ptr, char available);
void QAudioDecoder_ConnectBufferReady(void* ptr, long long t);
void QAudioDecoder_DisconnectBufferReady(void* ptr);
void QAudioDecoder_BufferReady(void* ptr);
long long QAudioDecoder_Duration(void* ptr);
void QAudioDecoder_ConnectDurationChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectDurationChanged(void* ptr);
void QAudioDecoder_DurationChanged(void* ptr, long long duration);
long long QAudioDecoder_Error(void* ptr);
void QAudioDecoder_ConnectError2(void* ptr, long long t);
void QAudioDecoder_DisconnectError2(void* ptr);
void QAudioDecoder_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QAudioDecoder_ErrorString(void* ptr);
void QAudioDecoder_ConnectFinished(void* ptr, long long t);
void QAudioDecoder_DisconnectFinished(void* ptr);
void QAudioDecoder_Finished(void* ptr);
void QAudioDecoder_ConnectFormatChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectFormatChanged(void* ptr);
void QAudioDecoder_FormatChanged(void* ptr, void* format);
long long QAudioDecoder_QAudioDecoder_HasSupport(struct QtMultimedia_PackedString mimeType, struct QtMultimedia_PackedString codecs);
long long QAudioDecoder_Position(void* ptr);
void QAudioDecoder_ConnectPositionChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectPositionChanged(void* ptr);
void QAudioDecoder_PositionChanged(void* ptr, long long position);
void* QAudioDecoder_Read(void* ptr);
void QAudioDecoder_SetAudioFormat(void* ptr, void* format);
void QAudioDecoder_SetSourceDevice(void* ptr, void* device);
void QAudioDecoder_SetSourceFilename(void* ptr, struct QtMultimedia_PackedString fileName);
void QAudioDecoder_ConnectSourceChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectSourceChanged(void* ptr);
void QAudioDecoder_SourceChanged(void* ptr);
void* QAudioDecoder_SourceDevice(void* ptr);
struct QtMultimedia_PackedString QAudioDecoder_SourceFilename(void* ptr);
void QAudioDecoder_Start(void* ptr);
void QAudioDecoder_StartDefault(void* ptr);
long long QAudioDecoder_State(void* ptr);
void QAudioDecoder_ConnectStateChanged(void* ptr, long long t);
void QAudioDecoder_DisconnectStateChanged(void* ptr);
void QAudioDecoder_StateChanged(void* ptr, long long state);
void QAudioDecoder_Stop(void* ptr);
void QAudioDecoder_StopDefault(void* ptr);
void QAudioDecoder_DestroyQAudioDecoder(void* ptr);
void QAudioDecoder_DestroyQAudioDecoderDefault(void* ptr);
void* QAudioDecoderControl_NewQAudioDecoderControl(void* parent);
void* QAudioDecoderControl_AudioFormat(void* ptr);
char QAudioDecoderControl_BufferAvailable(void* ptr);
void QAudioDecoderControl_ConnectBufferAvailableChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectBufferAvailableChanged(void* ptr);
void QAudioDecoderControl_BufferAvailableChanged(void* ptr, char available);
void QAudioDecoderControl_ConnectBufferReady(void* ptr, long long t);
void QAudioDecoderControl_DisconnectBufferReady(void* ptr);
void QAudioDecoderControl_BufferReady(void* ptr);
long long QAudioDecoderControl_Duration(void* ptr);
void QAudioDecoderControl_ConnectDurationChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectDurationChanged(void* ptr);
void QAudioDecoderControl_DurationChanged(void* ptr, long long duration);
void QAudioDecoderControl_ConnectError(void* ptr, long long t);
void QAudioDecoderControl_DisconnectError(void* ptr);
void QAudioDecoderControl_Error(void* ptr, int error, struct QtMultimedia_PackedString errorString);
void QAudioDecoderControl_ConnectFinished(void* ptr, long long t);
void QAudioDecoderControl_DisconnectFinished(void* ptr);
void QAudioDecoderControl_Finished(void* ptr);
void QAudioDecoderControl_ConnectFormatChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectFormatChanged(void* ptr);
void QAudioDecoderControl_FormatChanged(void* ptr, void* format);
long long QAudioDecoderControl_Position(void* ptr);
void QAudioDecoderControl_ConnectPositionChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectPositionChanged(void* ptr);
void QAudioDecoderControl_PositionChanged(void* ptr, long long position);
void* QAudioDecoderControl_Read(void* ptr);
void QAudioDecoderControl_SetAudioFormat(void* ptr, void* format);
void QAudioDecoderControl_SetSourceDevice(void* ptr, void* device);
void QAudioDecoderControl_SetSourceFilename(void* ptr, struct QtMultimedia_PackedString fileName);
void QAudioDecoderControl_ConnectSourceChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectSourceChanged(void* ptr);
void QAudioDecoderControl_SourceChanged(void* ptr);
void* QAudioDecoderControl_SourceDevice(void* ptr);
struct QtMultimedia_PackedString QAudioDecoderControl_SourceFilename(void* ptr);
void QAudioDecoderControl_Start(void* ptr);
long long QAudioDecoderControl_State(void* ptr);
void QAudioDecoderControl_ConnectStateChanged(void* ptr, long long t);
void QAudioDecoderControl_DisconnectStateChanged(void* ptr);
void QAudioDecoderControl_StateChanged(void* ptr, long long newState);
void QAudioDecoderControl_Stop(void* ptr);
void QAudioDecoderControl_DestroyQAudioDecoderControl(void* ptr);
void QAudioDecoderControl_DestroyQAudioDecoderControlDefault(void* ptr);
void* QAudioDeviceInfo_NewQAudioDeviceInfo();
void* QAudioDeviceInfo_NewQAudioDeviceInfo2(void* other);
struct QtMultimedia_PackedList QAudioDeviceInfo_QAudioDeviceInfo_AvailableDevices(long long mode);
void* QAudioDeviceInfo_QAudioDeviceInfo_DefaultInputDevice();
void* QAudioDeviceInfo_QAudioDeviceInfo_DefaultOutputDevice();
struct QtMultimedia_PackedString QAudioDeviceInfo_DeviceName(void* ptr);
char QAudioDeviceInfo_IsFormatSupported(void* ptr, void* settings);
char QAudioDeviceInfo_IsNull(void* ptr);
void* QAudioDeviceInfo_NearestFormat(void* ptr, void* settings);
void* QAudioDeviceInfo_PreferredFormat(void* ptr);
struct QtMultimedia_PackedString QAudioDeviceInfo_Realm(void* ptr);
struct QtMultimedia_PackedList QAudioDeviceInfo_SupportedByteOrders(void* ptr);
struct QtMultimedia_PackedList QAudioDeviceInfo_SupportedChannelCounts(void* ptr);
struct QtMultimedia_PackedString QAudioDeviceInfo_SupportedCodecs(void* ptr);
struct QtMultimedia_PackedList QAudioDeviceInfo_SupportedSampleRates(void* ptr);
struct QtMultimedia_PackedList QAudioDeviceInfo_SupportedSampleSizes(void* ptr);
struct QtMultimedia_PackedList QAudioDeviceInfo_SupportedSampleTypes(void* ptr);
void QAudioDeviceInfo_DestroyQAudioDeviceInfo(void* ptr);
void* QAudioDeviceInfo___availableDevices_atList(void* ptr, int i);
void QAudioDeviceInfo___availableDevices_setList(void* ptr, void* i);
void* QAudioDeviceInfo___availableDevices_newList(void* ptr);
long long QAudioDeviceInfo___supportedByteOrders_atList(void* ptr, int i);
void QAudioDeviceInfo___supportedByteOrders_setList(void* ptr, long long i);
void* QAudioDeviceInfo___supportedByteOrders_newList(void* ptr);
int QAudioDeviceInfo___supportedChannelCounts_atList(void* ptr, int i);
void QAudioDeviceInfo___supportedChannelCounts_setList(void* ptr, int i);
void* QAudioDeviceInfo___supportedChannelCounts_newList(void* ptr);
int QAudioDeviceInfo___supportedSampleRates_atList(void* ptr, int i);
void QAudioDeviceInfo___supportedSampleRates_setList(void* ptr, int i);
void* QAudioDeviceInfo___supportedSampleRates_newList(void* ptr);
int QAudioDeviceInfo___supportedSampleSizes_atList(void* ptr, int i);
void QAudioDeviceInfo___supportedSampleSizes_setList(void* ptr, int i);
void* QAudioDeviceInfo___supportedSampleSizes_newList(void* ptr);
long long QAudioDeviceInfo___supportedSampleTypes_atList(void* ptr, int i);
void QAudioDeviceInfo___supportedSampleTypes_setList(void* ptr, long long i);
void* QAudioDeviceInfo___supportedSampleTypes_newList(void* ptr);
void* QAudioEncoderSettings_NewQAudioEncoderSettings();
void* QAudioEncoderSettings_NewQAudioEncoderSettings2(void* other);
int QAudioEncoderSettings_BitRate(void* ptr);
int QAudioEncoderSettings_ChannelCount(void* ptr);
struct QtMultimedia_PackedString QAudioEncoderSettings_Codec(void* ptr);
long long QAudioEncoderSettings_EncodingMode(void* ptr);
void* QAudioEncoderSettings_EncodingOption(void* ptr, struct QtMultimedia_PackedString option);
struct QtMultimedia_PackedList QAudioEncoderSettings_EncodingOptions(void* ptr);
char QAudioEncoderSettings_IsNull(void* ptr);
long long QAudioEncoderSettings_Quality(void* ptr);
int QAudioEncoderSettings_SampleRate(void* ptr);
void QAudioEncoderSettings_SetBitRate(void* ptr, int rate);
void QAudioEncoderSettings_SetChannelCount(void* ptr, int channels);
void QAudioEncoderSettings_SetCodec(void* ptr, struct QtMultimedia_PackedString codec);
void QAudioEncoderSettings_SetEncodingMode(void* ptr, long long mode);
void QAudioEncoderSettings_SetEncodingOption(void* ptr, struct QtMultimedia_PackedString option, void* value);
void QAudioEncoderSettings_SetEncodingOptions(void* ptr, void* options);
void QAudioEncoderSettings_SetQuality(void* ptr, long long quality);
void QAudioEncoderSettings_SetSampleRate(void* ptr, int rate);
void QAudioEncoderSettings_DestroyQAudioEncoderSettings(void* ptr);
void* QAudioEncoderSettings___encodingOptions_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QAudioEncoderSettings___encodingOptions_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QAudioEncoderSettings___encodingOptions_newList(void* ptr);
struct QtMultimedia_PackedList QAudioEncoderSettings___encodingOptions_keyList(void* ptr);
void* QAudioEncoderSettings___setEncodingOptions_options_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QAudioEncoderSettings___setEncodingOptions_options_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QAudioEncoderSettings___setEncodingOptions_options_newList(void* ptr);
struct QtMultimedia_PackedList QAudioEncoderSettings___setEncodingOptions_options_keyList(void* ptr);
struct QtMultimedia_PackedString QAudioEncoderSettings_____encodingOptions_keyList_atList(void* ptr, int i);
void QAudioEncoderSettings_____encodingOptions_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QAudioEncoderSettings_____encodingOptions_keyList_newList(void* ptr);
struct QtMultimedia_PackedString QAudioEncoderSettings_____setEncodingOptions_options_keyList_atList(void* ptr, int i);
void QAudioEncoderSettings_____setEncodingOptions_options_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QAudioEncoderSettings_____setEncodingOptions_options_keyList_newList(void* ptr);
void* QAudioEncoderSettingsControl_NewQAudioEncoderSettingsControl(void* parent);
void* QAudioEncoderSettingsControl_AudioSettings(void* ptr);
struct QtMultimedia_PackedString QAudioEncoderSettingsControl_CodecDescription(void* ptr, struct QtMultimedia_PackedString codecName);
void QAudioEncoderSettingsControl_SetAudioSettings(void* ptr, void* settings);
struct QtMultimedia_PackedString QAudioEncoderSettingsControl_SupportedAudioCodecs(void* ptr);
struct QtMultimedia_PackedList QAudioEncoderSettingsControl_SupportedSampleRates(void* ptr, void* settings, char* continuous);
void QAudioEncoderSettingsControl_DestroyQAudioEncoderSettingsControl(void* ptr);
void QAudioEncoderSettingsControl_DestroyQAudioEncoderSettingsControlDefault(void* ptr);
int QAudioEncoderSettingsControl___supportedSampleRates_atList(void* ptr, int i);
void QAudioEncoderSettingsControl___supportedSampleRates_setList(void* ptr, int i);
void* QAudioEncoderSettingsControl___supportedSampleRates_newList(void* ptr);
void* QAudioFormat_NewQAudioFormat();
void* QAudioFormat_NewQAudioFormat2(void* other);
long long QAudioFormat_ByteOrder(void* ptr);
int QAudioFormat_BytesForDuration(void* ptr, long long duration);
int QAudioFormat_BytesForFrames(void* ptr, int frameCount);
int QAudioFormat_BytesPerFrame(void* ptr);
int QAudioFormat_ChannelCount(void* ptr);
struct QtMultimedia_PackedString QAudioFormat_Codec(void* ptr);
long long QAudioFormat_DurationForBytes(void* ptr, int bytes);
long long QAudioFormat_DurationForFrames(void* ptr, int frameCount);
int QAudioFormat_FramesForBytes(void* ptr, int byteCount);
int QAudioFormat_FramesForDuration(void* ptr, long long duration);
char QAudioFormat_IsValid(void* ptr);
int QAudioFormat_SampleRate(void* ptr);
int QAudioFormat_SampleSize(void* ptr);
long long QAudioFormat_SampleType(void* ptr);
void QAudioFormat_SetByteOrder(void* ptr, long long byteOrder);
void QAudioFormat_SetChannelCount(void* ptr, int channels);
void QAudioFormat_SetCodec(void* ptr, struct QtMultimedia_PackedString codec);
void QAudioFormat_SetSampleRate(void* ptr, int samplerate);
void QAudioFormat_SetSampleSize(void* ptr, int sampleSize);
void QAudioFormat_SetSampleType(void* ptr, long long sampleType);
void QAudioFormat_DestroyQAudioFormat(void* ptr);
void* QAudioInput_NewQAudioInput(void* format, void* parent);
void* QAudioInput_NewQAudioInput2(void* audioDevice, void* format, void* parent);
int QAudioInput_BufferSize(void* ptr);
int QAudioInput_BytesReady(void* ptr);
long long QAudioInput_ElapsedUSecs(void* ptr);
long long QAudioInput_Error(void* ptr);
void* QAudioInput_Format(void* ptr);
int QAudioInput_NotifyInterval(void* ptr);
int QAudioInput_PeriodSize(void* ptr);
long long QAudioInput_ProcessedUSecs(void* ptr);
void QAudioInput_Reset(void* ptr);
void QAudioInput_Resume(void* ptr);
void QAudioInput_SetBufferSize(void* ptr, int value);
void QAudioInput_SetNotifyInterval(void* ptr, int ms);
void QAudioInput_SetVolume(void* ptr, double volume);
void QAudioInput_Start(void* ptr, void* device);
void* QAudioInput_Start2(void* ptr);
long long QAudioInput_State(void* ptr);
void QAudioInput_ConnectStateChanged(void* ptr, long long t);
void QAudioInput_DisconnectStateChanged(void* ptr);
void QAudioInput_StateChanged(void* ptr, long long state);
void QAudioInput_Stop(void* ptr);
void QAudioInput_Suspend(void* ptr);
double QAudioInput_Volume(void* ptr);
void QAudioInput_DestroyQAudioInput(void* ptr);
void QAudioInput_DestroyQAudioInputDefault(void* ptr);
void* QAudioInput___children_atList(void* ptr, int i);
void QAudioInput___children_setList(void* ptr, void* i);
void* QAudioInput___children_newList(void* ptr);
void* QAudioInput___dynamicPropertyNames_atList(void* ptr, int i);
void QAudioInput___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAudioInput___dynamicPropertyNames_newList(void* ptr);
void* QAudioInput___findChildren_atList(void* ptr, int i);
void QAudioInput___findChildren_setList(void* ptr, void* i);
void* QAudioInput___findChildren_newList(void* ptr);
void* QAudioInput___findChildren_atList3(void* ptr, int i);
void QAudioInput___findChildren_setList3(void* ptr, void* i);
void* QAudioInput___findChildren_newList3(void* ptr);
void QAudioInput_ChildEventDefault(void* ptr, void* event);
void QAudioInput_ConnectNotifyDefault(void* ptr, void* sign);
void QAudioInput_CustomEventDefault(void* ptr, void* event);
void QAudioInput_DeleteLaterDefault(void* ptr);
void QAudioInput_DisconnectNotifyDefault(void* ptr, void* sign);
char QAudioInput_EventDefault(void* ptr, void* e);
char QAudioInput_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAudioInput_MetaObjectDefault(void* ptr);
void QAudioInput_TimerEventDefault(void* ptr, void* event);
struct QtMultimedia_PackedString QAudioInputSelectorControl_ActiveInput(void* ptr);
void QAudioInputSelectorControl_ConnectActiveInputChanged(void* ptr, long long t);
void QAudioInputSelectorControl_DisconnectActiveInputChanged(void* ptr);
void QAudioInputSelectorControl_ActiveInputChanged(void* ptr, struct QtMultimedia_PackedString name);
void QAudioInputSelectorControl_ConnectAvailableInputsChanged(void* ptr, long long t);
void QAudioInputSelectorControl_DisconnectAvailableInputsChanged(void* ptr);
void QAudioInputSelectorControl_AvailableInputsChanged(void* ptr);
struct QtMultimedia_PackedString QAudioInputSelectorControl_DefaultInput(void* ptr);
struct QtMultimedia_PackedString QAudioInputSelectorControl_InputDescription(void* ptr, struct QtMultimedia_PackedString name);
void QAudioInputSelectorControl_SetActiveInput(void* ptr, struct QtMultimedia_PackedString name);
void QAudioInputSelectorControl_DestroyQAudioInputSelectorControl(void* ptr);
void QAudioInputSelectorControl_DestroyQAudioInputSelectorControlDefault(void* ptr);
struct QtMultimedia_PackedString QAudioInputSelectorControl___availableInputs_atList(void* ptr, int i);
void QAudioInputSelectorControl___availableInputs_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QAudioInputSelectorControl___availableInputs_newList(void* ptr);
void* QAudioOutput_NewQAudioOutput(void* format, void* parent);
void* QAudioOutput_NewQAudioOutput2(void* audioDevice, void* format, void* parent);
int QAudioOutput_BufferSize(void* ptr);
int QAudioOutput_BytesFree(void* ptr);
struct QtMultimedia_PackedString QAudioOutput_Category(void* ptr);
long long QAudioOutput_ElapsedUSecs(void* ptr);
long long QAudioOutput_Error(void* ptr);
void* QAudioOutput_Format(void* ptr);
int QAudioOutput_NotifyInterval(void* ptr);
int QAudioOutput_PeriodSize(void* ptr);
long long QAudioOutput_ProcessedUSecs(void* ptr);
void QAudioOutput_Reset(void* ptr);
void QAudioOutput_Resume(void* ptr);
void QAudioOutput_SetBufferSize(void* ptr, int value);
void QAudioOutput_SetCategory(void* ptr, struct QtMultimedia_PackedString category);
void QAudioOutput_SetNotifyInterval(void* ptr, int ms);
void QAudioOutput_SetVolume(void* ptr, double volume);
void QAudioOutput_Start(void* ptr, void* device);
void* QAudioOutput_Start2(void* ptr);
long long QAudioOutput_State(void* ptr);
void QAudioOutput_ConnectStateChanged(void* ptr, long long t);
void QAudioOutput_DisconnectStateChanged(void* ptr);
void QAudioOutput_StateChanged(void* ptr, long long state);
void QAudioOutput_Stop(void* ptr);
void QAudioOutput_Suspend(void* ptr);
double QAudioOutput_Volume(void* ptr);
void QAudioOutput_DestroyQAudioOutput(void* ptr);
void QAudioOutput_DestroyQAudioOutputDefault(void* ptr);
void* QAudioOutput___children_atList(void* ptr, int i);
void QAudioOutput___children_setList(void* ptr, void* i);
void* QAudioOutput___children_newList(void* ptr);
void* QAudioOutput___dynamicPropertyNames_atList(void* ptr, int i);
void QAudioOutput___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAudioOutput___dynamicPropertyNames_newList(void* ptr);
void* QAudioOutput___findChildren_atList(void* ptr, int i);
void QAudioOutput___findChildren_setList(void* ptr, void* i);
void* QAudioOutput___findChildren_newList(void* ptr);
void* QAudioOutput___findChildren_atList3(void* ptr, int i);
void QAudioOutput___findChildren_setList3(void* ptr, void* i);
void* QAudioOutput___findChildren_newList3(void* ptr);
void QAudioOutput_ChildEventDefault(void* ptr, void* event);
void QAudioOutput_ConnectNotifyDefault(void* ptr, void* sign);
void QAudioOutput_CustomEventDefault(void* ptr, void* event);
void QAudioOutput_DeleteLaterDefault(void* ptr);
void QAudioOutput_DisconnectNotifyDefault(void* ptr, void* sign);
char QAudioOutput_EventDefault(void* ptr, void* e);
char QAudioOutput_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAudioOutput_MetaObjectDefault(void* ptr);
void QAudioOutput_TimerEventDefault(void* ptr, void* event);
struct QtMultimedia_PackedString QAudioOutputSelectorControl_ActiveOutput(void* ptr);
void QAudioOutputSelectorControl_ConnectActiveOutputChanged(void* ptr, long long t);
void QAudioOutputSelectorControl_DisconnectActiveOutputChanged(void* ptr);
void QAudioOutputSelectorControl_ActiveOutputChanged(void* ptr, struct QtMultimedia_PackedString name);
void QAudioOutputSelectorControl_ConnectAvailableOutputsChanged(void* ptr, long long t);
void QAudioOutputSelectorControl_DisconnectAvailableOutputsChanged(void* ptr);
void QAudioOutputSelectorControl_AvailableOutputsChanged(void* ptr);
struct QtMultimedia_PackedString QAudioOutputSelectorControl_DefaultOutput(void* ptr);
struct QtMultimedia_PackedString QAudioOutputSelectorControl_OutputDescription(void* ptr, struct QtMultimedia_PackedString name);
void QAudioOutputSelectorControl_SetActiveOutput(void* ptr, struct QtMultimedia_PackedString name);
void QAudioOutputSelectorControl_DestroyQAudioOutputSelectorControl(void* ptr);
void QAudioOutputSelectorControl_DestroyQAudioOutputSelectorControlDefault(void* ptr);
struct QtMultimedia_PackedString QAudioOutputSelectorControl___availableOutputs_atList(void* ptr, int i);
void QAudioOutputSelectorControl___availableOutputs_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QAudioOutputSelectorControl___availableOutputs_newList(void* ptr);
void* QAudioProbe_NewQAudioProbe(void* parent);
void QAudioProbe_ConnectAudioBufferProbed(void* ptr, long long t);
void QAudioProbe_DisconnectAudioBufferProbed(void* ptr);
void QAudioProbe_AudioBufferProbed(void* ptr, void* buffer);
void QAudioProbe_ConnectFlush(void* ptr, long long t);
void QAudioProbe_DisconnectFlush(void* ptr);
void QAudioProbe_Flush(void* ptr);
char QAudioProbe_IsActive(void* ptr);
char QAudioProbe_SetSource(void* ptr, void* source);
char QAudioProbe_SetSource2(void* ptr, void* mediaRecorder);
void QAudioProbe_DestroyQAudioProbe(void* ptr);
void QAudioProbe_DestroyQAudioProbeDefault(void* ptr);
void* QAudioProbe___children_atList(void* ptr, int i);
void QAudioProbe___children_setList(void* ptr, void* i);
void* QAudioProbe___children_newList(void* ptr);
void* QAudioProbe___dynamicPropertyNames_atList(void* ptr, int i);
void QAudioProbe___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAudioProbe___dynamicPropertyNames_newList(void* ptr);
void* QAudioProbe___findChildren_atList(void* ptr, int i);
void QAudioProbe___findChildren_setList(void* ptr, void* i);
void* QAudioProbe___findChildren_newList(void* ptr);
void* QAudioProbe___findChildren_atList3(void* ptr, int i);
void QAudioProbe___findChildren_setList3(void* ptr, void* i);
void* QAudioProbe___findChildren_newList3(void* ptr);
void QAudioProbe_ChildEventDefault(void* ptr, void* event);
void QAudioProbe_ConnectNotifyDefault(void* ptr, void* sign);
void QAudioProbe_CustomEventDefault(void* ptr, void* event);
void QAudioProbe_DeleteLaterDefault(void* ptr);
void QAudioProbe_DisconnectNotifyDefault(void* ptr, void* sign);
char QAudioProbe_EventDefault(void* ptr, void* e);
char QAudioProbe_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAudioProbe_MetaObjectDefault(void* ptr);
void QAudioProbe_TimerEventDefault(void* ptr, void* event);
void* QAudioRecorder_NewQAudioRecorder(void* parent);
struct QtMultimedia_PackedString QAudioRecorder_AudioInput(void* ptr);
void QAudioRecorder_ConnectAudioInputChanged(void* ptr, long long t);
void QAudioRecorder_DisconnectAudioInputChanged(void* ptr);
void QAudioRecorder_AudioInputChanged(void* ptr, struct QtMultimedia_PackedString name);
struct QtMultimedia_PackedString QAudioRecorder_AudioInputDescription(void* ptr, struct QtMultimedia_PackedString name);
struct QtMultimedia_PackedString QAudioRecorder_AudioInputs(void* ptr);
void QAudioRecorder_ConnectAvailableAudioInputsChanged(void* ptr, long long t);
void QAudioRecorder_DisconnectAvailableAudioInputsChanged(void* ptr);
void QAudioRecorder_AvailableAudioInputsChanged(void* ptr);
struct QtMultimedia_PackedString QAudioRecorder_DefaultAudioInput(void* ptr);
void QAudioRecorder_SetAudioInput(void* ptr, struct QtMultimedia_PackedString name);
void QAudioRecorder_SetAudioInputDefault(void* ptr, struct QtMultimedia_PackedString name);
void QAudioRecorder_DestroyQAudioRecorder(void* ptr);
void QAudioRecorder_DestroyQAudioRecorderDefault(void* ptr);
void* QAudioRoleControl_NewQAudioRoleControl(void* parent);
long long QAudioRoleControl_AudioRole(void* ptr);
void QAudioRoleControl_ConnectAudioRoleChanged(void* ptr, long long t);
void QAudioRoleControl_DisconnectAudioRoleChanged(void* ptr);
void QAudioRoleControl_AudioRoleChanged(void* ptr, long long role);
void QAudioRoleControl_SetAudioRole(void* ptr, long long role);
struct QtMultimedia_PackedList QAudioRoleControl_SupportedAudioRoles(void* ptr);
void QAudioRoleControl_DestroyQAudioRoleControl(void* ptr);
void QAudioRoleControl_DestroyQAudioRoleControlDefault(void* ptr);
long long QAudioRoleControl___supportedAudioRoles_atList(void* ptr, int i);
void QAudioRoleControl___supportedAudioRoles_setList(void* ptr, long long i);
void* QAudioRoleControl___supportedAudioRoles_newList(void* ptr);
void* QAudioSystemPlugin_NewQAudioSystemPlugin(void* parent);
struct QtMultimedia_PackedList QAudioSystemPlugin_AvailableDevices(void* ptr, long long mode);
void* QAudioSystemPlugin_CreateDeviceInfo(void* ptr, void* device, long long mode);
void* QAudioSystemPlugin_CreateInput(void* ptr, void* device);
void* QAudioSystemPlugin_CreateOutput(void* ptr, void* device);
void QAudioSystemPlugin_DestroyQAudioSystemPlugin(void* ptr);
void QAudioSystemPlugin_DestroyQAudioSystemPluginDefault(void* ptr);
void* QAudioSystemPlugin___availableDevices_atList(void* ptr, int i);
void QAudioSystemPlugin___availableDevices_setList(void* ptr, void* i);
void* QAudioSystemPlugin___availableDevices_newList(void* ptr);
void* QAudioSystemPlugin___children_atList(void* ptr, int i);
void QAudioSystemPlugin___children_setList(void* ptr, void* i);
void* QAudioSystemPlugin___children_newList(void* ptr);
void* QAudioSystemPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QAudioSystemPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAudioSystemPlugin___dynamicPropertyNames_newList(void* ptr);
void* QAudioSystemPlugin___findChildren_atList(void* ptr, int i);
void QAudioSystemPlugin___findChildren_setList(void* ptr, void* i);
void* QAudioSystemPlugin___findChildren_newList(void* ptr);
void* QAudioSystemPlugin___findChildren_atList3(void* ptr, int i);
void QAudioSystemPlugin___findChildren_setList3(void* ptr, void* i);
void* QAudioSystemPlugin___findChildren_newList3(void* ptr);
void QAudioSystemPlugin_ChildEventDefault(void* ptr, void* event);
void QAudioSystemPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QAudioSystemPlugin_CustomEventDefault(void* ptr, void* event);
void QAudioSystemPlugin_DeleteLaterDefault(void* ptr);
void QAudioSystemPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QAudioSystemPlugin_EventDefault(void* ptr, void* e);
char QAudioSystemPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAudioSystemPlugin_MetaObjectDefault(void* ptr);
void QAudioSystemPlugin_TimerEventDefault(void* ptr, void* event);
void* QCamera_NewQCamera(void* parent);
void* QCamera_NewQCamera2(void* deviceName, void* parent);
void* QCamera_NewQCamera3(void* cameraInfo, void* parent);
void* QCamera_NewQCamera4(long long position, void* parent);
long long QCamera_CaptureMode(void* ptr);
void QCamera_ConnectCaptureModeChanged(void* ptr, long long t);
void QCamera_DisconnectCaptureModeChanged(void* ptr);
void QCamera_CaptureModeChanged(void* ptr, long long mode);
long long QCamera_Error(void* ptr);
void QCamera_ConnectErrorOccurred(void* ptr, long long t);
void QCamera_DisconnectErrorOccurred(void* ptr);
void QCamera_ErrorOccurred(void* ptr, long long value);
struct QtMultimedia_PackedString QCamera_ErrorString(void* ptr);
void* QCamera_Exposure(void* ptr);
void* QCamera_Focus(void* ptr);
void* QCamera_ImageProcessing(void* ptr);
char QCamera_IsCaptureModeSupported(void* ptr, long long mode);
void QCamera_Load(void* ptr);
void QCamera_LoadDefault(void* ptr);
void QCamera_ConnectLockFailed(void* ptr, long long t);
void QCamera_DisconnectLockFailed(void* ptr);
void QCamera_LockFailed(void* ptr);
long long QCamera_LockStatus(void* ptr);
long long QCamera_LockStatus2(void* ptr, long long lockType);
void QCamera_ConnectLockStatusChanged(void* ptr, long long t);
void QCamera_DisconnectLockStatusChanged(void* ptr);
void QCamera_LockStatusChanged(void* ptr, long long status, long long reason);
void QCamera_ConnectLockStatusChanged2(void* ptr, long long t);
void QCamera_DisconnectLockStatusChanged2(void* ptr);
void QCamera_LockStatusChanged2(void* ptr, long long lock, long long status, long long reason);
void QCamera_ConnectLocked(void* ptr, long long t);
void QCamera_DisconnectLocked(void* ptr);
void QCamera_Locked(void* ptr);
long long QCamera_RequestedLocks(void* ptr);
void QCamera_SearchAndLock(void* ptr);
void QCamera_SearchAndLockDefault(void* ptr);
void QCamera_SearchAndLock2(void* ptr, long long locks);
void QCamera_SearchAndLock2Default(void* ptr, long long locks);
void QCamera_SetCaptureMode(void* ptr, long long mode);
void QCamera_SetCaptureModeDefault(void* ptr, long long mode);
void QCamera_SetViewfinder(void* ptr, void* viewfinder);
void QCamera_SetViewfinder2(void* ptr, void* viewfinder);
void QCamera_SetViewfinder3(void* ptr, void* surface);
void QCamera_SetViewfinderSettings(void* ptr, void* settings);
void QCamera_Start(void* ptr);
void QCamera_StartDefault(void* ptr);
long long QCamera_State(void* ptr);
void QCamera_ConnectStateChanged(void* ptr, long long t);
void QCamera_DisconnectStateChanged(void* ptr);
void QCamera_StateChanged(void* ptr, long long state);
long long QCamera_Status(void* ptr);
void QCamera_ConnectStatusChanged(void* ptr, long long t);
void QCamera_DisconnectStatusChanged(void* ptr);
void QCamera_StatusChanged(void* ptr, long long status);
void QCamera_Stop(void* ptr);
void QCamera_StopDefault(void* ptr);
long long QCamera_SupportedLocks(void* ptr);
struct QtMultimedia_PackedList QCamera_SupportedViewfinderPixelFormats(void* ptr, void* settings);
struct QtMultimedia_PackedList QCamera_SupportedViewfinderResolutions(void* ptr, void* settings);
struct QtMultimedia_PackedList QCamera_SupportedViewfinderSettings(void* ptr, void* settings);
void QCamera_Unload(void* ptr);
void QCamera_UnloadDefault(void* ptr);
void QCamera_Unlock(void* ptr);
void QCamera_UnlockDefault(void* ptr);
void QCamera_Unlock2(void* ptr, long long locks);
void QCamera_Unlock2Default(void* ptr, long long locks);
void* QCamera_ViewfinderSettings(void* ptr);
void QCamera_DestroyQCamera(void* ptr);
void QCamera_DestroyQCameraDefault(void* ptr);
void* QCamera___availableDevices_atList(void* ptr, int i);
void QCamera___availableDevices_setList(void* ptr, void* i);
void* QCamera___availableDevices_newList(void* ptr);
long long QCamera___supportedViewfinderPixelFormats_atList(void* ptr, int i);
void QCamera___supportedViewfinderPixelFormats_setList(void* ptr, long long i);
void* QCamera___supportedViewfinderPixelFormats_newList(void* ptr);
void* QCamera___supportedViewfinderResolutions_atList(void* ptr, int i);
void QCamera___supportedViewfinderResolutions_setList(void* ptr, void* i);
void* QCamera___supportedViewfinderResolutions_newList(void* ptr);
void* QCamera___supportedViewfinderSettings_atList(void* ptr, int i);
void QCamera___supportedViewfinderSettings_setList(void* ptr, void* i);
void* QCamera___supportedViewfinderSettings_newList(void* ptr);
void* QCameraCaptureBufferFormatControl_NewQCameraCaptureBufferFormatControl(void* parent);
long long QCameraCaptureBufferFormatControl_BufferFormat(void* ptr);
void QCameraCaptureBufferFormatControl_ConnectBufferFormatChanged(void* ptr, long long t);
void QCameraCaptureBufferFormatControl_DisconnectBufferFormatChanged(void* ptr);
void QCameraCaptureBufferFormatControl_BufferFormatChanged(void* ptr, long long format);
void QCameraCaptureBufferFormatControl_SetBufferFormat(void* ptr, long long format);
struct QtMultimedia_PackedList QCameraCaptureBufferFormatControl_SupportedBufferFormats(void* ptr);
void QCameraCaptureBufferFormatControl_DestroyQCameraCaptureBufferFormatControl(void* ptr);
void QCameraCaptureBufferFormatControl_DestroyQCameraCaptureBufferFormatControlDefault(void* ptr);
long long QCameraCaptureBufferFormatControl___supportedBufferFormats_atList(void* ptr, int i);
void QCameraCaptureBufferFormatControl___supportedBufferFormats_setList(void* ptr, long long i);
void* QCameraCaptureBufferFormatControl___supportedBufferFormats_newList(void* ptr);
void* QCameraCaptureDestinationControl_NewQCameraCaptureDestinationControl(void* parent);
long long QCameraCaptureDestinationControl_CaptureDestination(void* ptr);
void QCameraCaptureDestinationControl_ConnectCaptureDestinationChanged(void* ptr, long long t);
void QCameraCaptureDestinationControl_DisconnectCaptureDestinationChanged(void* ptr);
void QCameraCaptureDestinationControl_CaptureDestinationChanged(void* ptr, long long destination);
char QCameraCaptureDestinationControl_IsCaptureDestinationSupported(void* ptr, long long destination);
void QCameraCaptureDestinationControl_SetCaptureDestination(void* ptr, long long destination);
void QCameraCaptureDestinationControl_DestroyQCameraCaptureDestinationControl(void* ptr);
void QCameraCaptureDestinationControl_DestroyQCameraCaptureDestinationControlDefault(void* ptr);
void* QCameraControl_NewQCameraControl(void* parent);
char QCameraControl_CanChangeProperty(void* ptr, long long changeType, long long status);
long long QCameraControl_CaptureMode(void* ptr);
void QCameraControl_ConnectCaptureModeChanged(void* ptr, long long t);
void QCameraControl_DisconnectCaptureModeChanged(void* ptr);
void QCameraControl_CaptureModeChanged(void* ptr, long long mode);
void QCameraControl_ConnectError(void* ptr, long long t);
void QCameraControl_DisconnectError(void* ptr);
void QCameraControl_Error(void* ptr, int error, struct QtMultimedia_PackedString errorString);
char QCameraControl_IsCaptureModeSupported(void* ptr, long long mode);
void QCameraControl_SetCaptureMode(void* ptr, long long mode);
void QCameraControl_SetState(void* ptr, long long state);
long long QCameraControl_State(void* ptr);
void QCameraControl_ConnectStateChanged(void* ptr, long long t);
void QCameraControl_DisconnectStateChanged(void* ptr);
void QCameraControl_StateChanged(void* ptr, long long state);
long long QCameraControl_Status(void* ptr);
void QCameraControl_ConnectStatusChanged(void* ptr, long long t);
void QCameraControl_DisconnectStatusChanged(void* ptr);
void QCameraControl_StatusChanged(void* ptr, long long status);
void QCameraControl_DestroyQCameraControl(void* ptr);
void QCameraControl_DestroyQCameraControlDefault(void* ptr);
double QCameraExposure_Aperture(void* ptr);
void QCameraExposure_ConnectApertureChanged(void* ptr, long long t);
void QCameraExposure_DisconnectApertureChanged(void* ptr);
void QCameraExposure_ApertureChanged(void* ptr, double value);
void QCameraExposure_ConnectApertureRangeChanged(void* ptr, long long t);
void QCameraExposure_DisconnectApertureRangeChanged(void* ptr);
void QCameraExposure_ApertureRangeChanged(void* ptr);
double QCameraExposure_ExposureCompensation(void* ptr);
void QCameraExposure_ConnectExposureCompensationChanged(void* ptr, long long t);
void QCameraExposure_DisconnectExposureCompensationChanged(void* ptr);
void QCameraExposure_ExposureCompensationChanged(void* ptr, double value);
long long QCameraExposure_ExposureMode(void* ptr);
long long QCameraExposure_FlashMode(void* ptr);
void QCameraExposure_ConnectFlashReady(void* ptr, long long t);
void QCameraExposure_DisconnectFlashReady(void* ptr);
void QCameraExposure_FlashReady(void* ptr, char ready);
char QCameraExposure_IsAvailable(void* ptr);
char QCameraExposure_IsExposureModeSupported(void* ptr, long long mode);
char QCameraExposure_IsFlashModeSupported(void* ptr, long long mode);
char QCameraExposure_IsFlashReady(void* ptr);
char QCameraExposure_IsMeteringModeSupported(void* ptr, long long mode);
int QCameraExposure_IsoSensitivity(void* ptr);
void QCameraExposure_ConnectIsoSensitivityChanged(void* ptr, long long t);
void QCameraExposure_DisconnectIsoSensitivityChanged(void* ptr);
void QCameraExposure_IsoSensitivityChanged(void* ptr, int value);
long long QCameraExposure_MeteringMode(void* ptr);
double QCameraExposure_RequestedAperture(void* ptr);
int QCameraExposure_RequestedIsoSensitivity(void* ptr);
double QCameraExposure_RequestedShutterSpeed(void* ptr);
void QCameraExposure_SetAutoAperture(void* ptr);
void QCameraExposure_SetAutoApertureDefault(void* ptr);
void QCameraExposure_SetAutoIsoSensitivity(void* ptr);
void QCameraExposure_SetAutoIsoSensitivityDefault(void* ptr);
void QCameraExposure_SetAutoShutterSpeed(void* ptr);
void QCameraExposure_SetAutoShutterSpeedDefault(void* ptr);
void QCameraExposure_SetExposureCompensation(void* ptr, double ev);
void QCameraExposure_SetExposureCompensationDefault(void* ptr, double ev);
void QCameraExposure_SetExposureMode(void* ptr, long long mode);
void QCameraExposure_SetExposureModeDefault(void* ptr, long long mode);
void QCameraExposure_SetFlashMode(void* ptr, long long mode);
void QCameraExposure_SetFlashModeDefault(void* ptr, long long mode);
void QCameraExposure_SetManualAperture(void* ptr, double aperture);
void QCameraExposure_SetManualApertureDefault(void* ptr, double aperture);
void QCameraExposure_SetManualIsoSensitivity(void* ptr, int iso);
void QCameraExposure_SetManualIsoSensitivityDefault(void* ptr, int iso);
void QCameraExposure_SetManualShutterSpeed(void* ptr, double seconds);
void QCameraExposure_SetManualShutterSpeedDefault(void* ptr, double seconds);
void QCameraExposure_SetMeteringMode(void* ptr, long long mode);
void QCameraExposure_SetMeteringModeDefault(void* ptr, long long mode);
void QCameraExposure_SetSpotMeteringPoint(void* ptr, void* point);
double QCameraExposure_ShutterSpeed(void* ptr);
void QCameraExposure_ConnectShutterSpeedChanged(void* ptr, long long t);
void QCameraExposure_DisconnectShutterSpeedChanged(void* ptr);
void QCameraExposure_ShutterSpeedChanged(void* ptr, double speed);
void QCameraExposure_ConnectShutterSpeedRangeChanged(void* ptr, long long t);
void QCameraExposure_DisconnectShutterSpeedRangeChanged(void* ptr);
void QCameraExposure_ShutterSpeedRangeChanged(void* ptr);
void* QCameraExposure_SpotMeteringPoint(void* ptr);
struct QtMultimedia_PackedList QCameraExposure_SupportedApertures(void* ptr, char* continuous);
struct QtMultimedia_PackedList QCameraExposure_SupportedIsoSensitivities(void* ptr, char* continuous);
struct QtMultimedia_PackedList QCameraExposure_SupportedShutterSpeeds(void* ptr, char* continuous);
void QCameraExposure_DestroyQCameraExposure(void* ptr);
void QCameraExposure_DestroyQCameraExposureDefault(void* ptr);
double QCameraExposure___supportedApertures_atList(void* ptr, int i);
void QCameraExposure___supportedApertures_setList(void* ptr, double i);
void* QCameraExposure___supportedApertures_newList(void* ptr);
int QCameraExposure___supportedIsoSensitivities_atList(void* ptr, int i);
void QCameraExposure___supportedIsoSensitivities_setList(void* ptr, int i);
void* QCameraExposure___supportedIsoSensitivities_newList(void* ptr);
double QCameraExposure___supportedShutterSpeeds_atList(void* ptr, int i);
void QCameraExposure___supportedShutterSpeeds_setList(void* ptr, double i);
void* QCameraExposure___supportedShutterSpeeds_newList(void* ptr);
void* QCameraExposure___children_atList(void* ptr, int i);
void QCameraExposure___children_setList(void* ptr, void* i);
void* QCameraExposure___children_newList(void* ptr);
void* QCameraExposure___dynamicPropertyNames_atList(void* ptr, int i);
void QCameraExposure___dynamicPropertyNames_setList(void* ptr, void* i);
void* QCameraExposure___dynamicPropertyNames_newList(void* ptr);
void* QCameraExposure___findChildren_atList(void* ptr, int i);
void QCameraExposure___findChildren_setList(void* ptr, void* i);
void* QCameraExposure___findChildren_newList(void* ptr);
void* QCameraExposure___findChildren_atList3(void* ptr, int i);
void QCameraExposure___findChildren_setList3(void* ptr, void* i);
void* QCameraExposure___findChildren_newList3(void* ptr);
void QCameraExposure_ChildEventDefault(void* ptr, void* event);
void QCameraExposure_ConnectNotifyDefault(void* ptr, void* sign);
void QCameraExposure_CustomEventDefault(void* ptr, void* event);
void QCameraExposure_DeleteLaterDefault(void* ptr);
void QCameraExposure_DisconnectNotifyDefault(void* ptr, void* sign);
char QCameraExposure_EventDefault(void* ptr, void* e);
char QCameraExposure_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCameraExposure_MetaObjectDefault(void* ptr);
void QCameraExposure_TimerEventDefault(void* ptr, void* event);
void* QCameraExposureControl_NewQCameraExposureControl(void* parent);
void* QCameraExposureControl_ActualValue(void* ptr, long long parameter);
void QCameraExposureControl_ConnectActualValueChanged(void* ptr, long long t);
void QCameraExposureControl_DisconnectActualValueChanged(void* ptr);
void QCameraExposureControl_ActualValueChanged(void* ptr, int parameter);
char QCameraExposureControl_IsParameterSupported(void* ptr, long long parameter);
void QCameraExposureControl_ConnectParameterRangeChanged(void* ptr, long long t);
void QCameraExposureControl_DisconnectParameterRangeChanged(void* ptr);
void QCameraExposureControl_ParameterRangeChanged(void* ptr, int parameter);
void* QCameraExposureControl_RequestedValue(void* ptr, long long parameter);
void QCameraExposureControl_ConnectRequestedValueChanged(void* ptr, long long t);
void QCameraExposureControl_DisconnectRequestedValueChanged(void* ptr);
void QCameraExposureControl_RequestedValueChanged(void* ptr, int parameter);
char QCameraExposureControl_SetValue(void* ptr, long long parameter, void* value);
struct QtMultimedia_PackedList QCameraExposureControl_SupportedParameterRange(void* ptr, long long parameter, char* continuous);
void QCameraExposureControl_DestroyQCameraExposureControl(void* ptr);
void QCameraExposureControl_DestroyQCameraExposureControlDefault(void* ptr);
void* QCameraExposureControl___supportedParameterRange_atList(void* ptr, int i);
void QCameraExposureControl___supportedParameterRange_setList(void* ptr, void* i);
void* QCameraExposureControl___supportedParameterRange_newList(void* ptr);
void* QCameraFeedbackControl_NewQCameraFeedbackControl(void* parent);
char QCameraFeedbackControl_IsEventFeedbackEnabled(void* ptr, long long event);
char QCameraFeedbackControl_IsEventFeedbackLocked(void* ptr, long long event);
void QCameraFeedbackControl_ResetEventFeedback(void* ptr, long long event);
char QCameraFeedbackControl_SetEventFeedbackEnabled(void* ptr, long long event, char enabled);
char QCameraFeedbackControl_SetEventFeedbackSound(void* ptr, long long event, struct QtMultimedia_PackedString filePath);
void QCameraFeedbackControl_DestroyQCameraFeedbackControl(void* ptr);
void QCameraFeedbackControl_DestroyQCameraFeedbackControlDefault(void* ptr);
void* QCameraFlashControl_NewQCameraFlashControl(void* parent);
long long QCameraFlashControl_FlashMode(void* ptr);
void QCameraFlashControl_ConnectFlashReady(void* ptr, long long t);
void QCameraFlashControl_DisconnectFlashReady(void* ptr);
void QCameraFlashControl_FlashReady(void* ptr, char ready);
char QCameraFlashControl_IsFlashModeSupported(void* ptr, long long mode);
char QCameraFlashControl_IsFlashReady(void* ptr);
void QCameraFlashControl_SetFlashMode(void* ptr, long long mode);
void QCameraFlashControl_DestroyQCameraFlashControl(void* ptr);
void QCameraFlashControl_DestroyQCameraFlashControlDefault(void* ptr);
void* QCameraFocus_CustomFocusPoint(void* ptr);
double QCameraFocus_DigitalZoom(void* ptr);
void QCameraFocus_ConnectDigitalZoomChanged(void* ptr, long long t);
void QCameraFocus_DisconnectDigitalZoomChanged(void* ptr);
void QCameraFocus_DigitalZoomChanged(void* ptr, double value);
long long QCameraFocus_FocusMode(void* ptr);
long long QCameraFocus_FocusPointMode(void* ptr);
void QCameraFocus_ConnectFocusZonesChanged(void* ptr, long long t);
void QCameraFocus_DisconnectFocusZonesChanged(void* ptr);
void QCameraFocus_FocusZonesChanged(void* ptr);
char QCameraFocus_IsAvailable(void* ptr);
char QCameraFocus_IsFocusModeSupported(void* ptr, long long mode);
char QCameraFocus_IsFocusPointModeSupported(void* ptr, long long mode);
double QCameraFocus_MaximumDigitalZoom(void* ptr);
void QCameraFocus_ConnectMaximumDigitalZoomChanged(void* ptr, long long t);
void QCameraFocus_DisconnectMaximumDigitalZoomChanged(void* ptr);
void QCameraFocus_MaximumDigitalZoomChanged(void* ptr, double zoom);
double QCameraFocus_MaximumOpticalZoom(void* ptr);
void QCameraFocus_ConnectMaximumOpticalZoomChanged(void* ptr, long long t);
void QCameraFocus_DisconnectMaximumOpticalZoomChanged(void* ptr);
void QCameraFocus_MaximumOpticalZoomChanged(void* ptr, double zoom);
double QCameraFocus_OpticalZoom(void* ptr);
void QCameraFocus_ConnectOpticalZoomChanged(void* ptr, long long t);
void QCameraFocus_DisconnectOpticalZoomChanged(void* ptr);
void QCameraFocus_OpticalZoomChanged(void* ptr, double value);
void QCameraFocus_SetCustomFocusPoint(void* ptr, void* point);
void QCameraFocus_SetFocusMode(void* ptr, long long mode);
void QCameraFocus_SetFocusPointMode(void* ptr, long long mode);
void QCameraFocus_ZoomTo(void* ptr, double optical, double digital);
void QCameraFocus_DestroyQCameraFocus(void* ptr);
void QCameraFocus_DestroyQCameraFocusDefault(void* ptr);
void* QCameraFocus___children_atList(void* ptr, int i);
void QCameraFocus___children_setList(void* ptr, void* i);
void* QCameraFocus___children_newList(void* ptr);
void* QCameraFocus___dynamicPropertyNames_atList(void* ptr, int i);
void QCameraFocus___dynamicPropertyNames_setList(void* ptr, void* i);
void* QCameraFocus___dynamicPropertyNames_newList(void* ptr);
void* QCameraFocus___findChildren_atList(void* ptr, int i);
void QCameraFocus___findChildren_setList(void* ptr, void* i);
void* QCameraFocus___findChildren_newList(void* ptr);
void* QCameraFocus___findChildren_atList3(void* ptr, int i);
void QCameraFocus___findChildren_setList3(void* ptr, void* i);
void* QCameraFocus___findChildren_newList3(void* ptr);
void QCameraFocus_ChildEventDefault(void* ptr, void* event);
void QCameraFocus_ConnectNotifyDefault(void* ptr, void* sign);
void QCameraFocus_CustomEventDefault(void* ptr, void* event);
void QCameraFocus_DeleteLaterDefault(void* ptr);
void QCameraFocus_DisconnectNotifyDefault(void* ptr, void* sign);
char QCameraFocus_EventDefault(void* ptr, void* e);
char QCameraFocus_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCameraFocus_MetaObjectDefault(void* ptr);
void QCameraFocus_TimerEventDefault(void* ptr, void* event);
void* QCameraFocusControl_CustomFocusPoint(void* ptr);
void QCameraFocusControl_ConnectCustomFocusPointChanged(void* ptr, long long t);
void QCameraFocusControl_DisconnectCustomFocusPointChanged(void* ptr);
void QCameraFocusControl_CustomFocusPointChanged(void* ptr, void* point);
long long QCameraFocusControl_FocusMode(void* ptr);
void QCameraFocusControl_ConnectFocusModeChanged(void* ptr, long long t);
void QCameraFocusControl_DisconnectFocusModeChanged(void* ptr);
void QCameraFocusControl_FocusModeChanged(void* ptr, long long mode);
long long QCameraFocusControl_FocusPointMode(void* ptr);
void QCameraFocusControl_ConnectFocusPointModeChanged(void* ptr, long long t);
void QCameraFocusControl_DisconnectFocusPointModeChanged(void* ptr);
void QCameraFocusControl_FocusPointModeChanged(void* ptr, long long mode);
void QCameraFocusControl_ConnectFocusZonesChanged(void* ptr, long long t);
void QCameraFocusControl_DisconnectFocusZonesChanged(void* ptr);
void QCameraFocusControl_FocusZonesChanged(void* ptr);
char QCameraFocusControl_IsFocusModeSupported(void* ptr, long long mode);
char QCameraFocusControl_IsFocusPointModeSupported(void* ptr, long long mode);
void QCameraFocusControl_SetCustomFocusPoint(void* ptr, void* point);
void QCameraFocusControl_SetFocusMode(void* ptr, long long mode);
void QCameraFocusControl_SetFocusPointMode(void* ptr, long long mode);
void QCameraFocusControl_DestroyQCameraFocusControl(void* ptr);
void QCameraFocusControl_DestroyQCameraFocusControlDefault(void* ptr);
void* QCameraFocusZone_NewQCameraFocusZone(void* other);
void* QCameraFocusZone_Area(void* ptr);
char QCameraFocusZone_IsValid(void* ptr);
long long QCameraFocusZone_Status(void* ptr);
void QCameraFocusZone_DestroyQCameraFocusZone(void* ptr);
void* QCameraImageCapture_NewQCameraImageCapture(void* mediaObject, void* parent);
long long QCameraImageCapture_Availability(void* ptr);
long long QCameraImageCapture_BufferFormat(void* ptr);
void QCameraImageCapture_ConnectBufferFormatChanged(void* ptr, long long t);
void QCameraImageCapture_DisconnectBufferFormatChanged(void* ptr);
void QCameraImageCapture_BufferFormatChanged(void* ptr, long long format);
void QCameraImageCapture_CancelCapture(void* ptr);
void QCameraImageCapture_CancelCaptureDefault(void* ptr);
int QCameraImageCapture_Capture(void* ptr, struct QtMultimedia_PackedString file);
int QCameraImageCapture_CaptureDefault(void* ptr, struct QtMultimedia_PackedString file);
long long QCameraImageCapture_CaptureDestination(void* ptr);
void QCameraImageCapture_ConnectCaptureDestinationChanged(void* ptr, long long t);
void QCameraImageCapture_DisconnectCaptureDestinationChanged(void* ptr);
void QCameraImageCapture_CaptureDestinationChanged(void* ptr, long long destination);
void* QCameraImageCapture_EncodingSettings(void* ptr);
long long QCameraImageCapture_Error(void* ptr);
void QCameraImageCapture_ConnectError2(void* ptr, long long t);
void QCameraImageCapture_DisconnectError2(void* ptr);
void QCameraImageCapture_Error2(void* ptr, int id, long long error, struct QtMultimedia_PackedString errorString);
struct QtMultimedia_PackedString QCameraImageCapture_ErrorString(void* ptr);
void QCameraImageCapture_ConnectImageAvailable(void* ptr, long long t);
void QCameraImageCapture_DisconnectImageAvailable(void* ptr);
void QCameraImageCapture_ImageAvailable(void* ptr, int id, void* frame);
void QCameraImageCapture_ConnectImageCaptured(void* ptr, long long t);
void QCameraImageCapture_DisconnectImageCaptured(void* ptr);
void QCameraImageCapture_ImageCaptured(void* ptr, int id, void* preview);
struct QtMultimedia_PackedString QCameraImageCapture_ImageCodecDescription(void* ptr, struct QtMultimedia_PackedString codec);
void QCameraImageCapture_ConnectImageExposed(void* ptr, long long t);
void QCameraImageCapture_DisconnectImageExposed(void* ptr);
void QCameraImageCapture_ImageExposed(void* ptr, int id);
void QCameraImageCapture_ConnectImageMetadataAvailable(void* ptr, long long t);
void QCameraImageCapture_DisconnectImageMetadataAvailable(void* ptr);
void QCameraImageCapture_ImageMetadataAvailable(void* ptr, int id, struct QtMultimedia_PackedString key, void* value);
void QCameraImageCapture_ConnectImageSaved(void* ptr, long long t);
void QCameraImageCapture_DisconnectImageSaved(void* ptr);
void QCameraImageCapture_ImageSaved(void* ptr, int id, struct QtMultimedia_PackedString fileName);
char QCameraImageCapture_IsAvailable(void* ptr);
char QCameraImageCapture_IsCaptureDestinationSupported(void* ptr, long long destination);
char QCameraImageCapture_IsReadyForCapture(void* ptr);
void* QCameraImageCapture_MediaObject(void* ptr);
void* QCameraImageCapture_MediaObjectDefault(void* ptr);
void QCameraImageCapture_ConnectReadyForCaptureChanged(void* ptr, long long t);
void QCameraImageCapture_DisconnectReadyForCaptureChanged(void* ptr);
void QCameraImageCapture_ReadyForCaptureChanged(void* ptr, char ready);
void QCameraImageCapture_SetBufferFormat(void* ptr, long long format);
void QCameraImageCapture_SetCaptureDestination(void* ptr, long long destination);
void QCameraImageCapture_SetEncodingSettings(void* ptr, void* settings);
char QCameraImageCapture_SetMediaObject(void* ptr, void* mediaObject);
char QCameraImageCapture_SetMediaObjectDefault(void* ptr, void* mediaObject);
struct QtMultimedia_PackedList QCameraImageCapture_SupportedBufferFormats(void* ptr);
struct QtMultimedia_PackedString QCameraImageCapture_SupportedImageCodecs(void* ptr);
struct QtMultimedia_PackedList QCameraImageCapture_SupportedResolutions(void* ptr, void* settings, char* continuous);
void QCameraImageCapture_DestroyQCameraImageCapture(void* ptr);
void QCameraImageCapture_DestroyQCameraImageCaptureDefault(void* ptr);
long long QCameraImageCapture___supportedBufferFormats_atList(void* ptr, int i);
void QCameraImageCapture___supportedBufferFormats_setList(void* ptr, long long i);
void* QCameraImageCapture___supportedBufferFormats_newList(void* ptr);
void* QCameraImageCapture___supportedResolutions_atList(void* ptr, int i);
void QCameraImageCapture___supportedResolutions_setList(void* ptr, void* i);
void* QCameraImageCapture___supportedResolutions_newList(void* ptr);
void* QCameraImageCapture___children_atList(void* ptr, int i);
void QCameraImageCapture___children_setList(void* ptr, void* i);
void* QCameraImageCapture___children_newList(void* ptr);
void* QCameraImageCapture___dynamicPropertyNames_atList(void* ptr, int i);
void QCameraImageCapture___dynamicPropertyNames_setList(void* ptr, void* i);
void* QCameraImageCapture___dynamicPropertyNames_newList(void* ptr);
void* QCameraImageCapture___findChildren_atList(void* ptr, int i);
void QCameraImageCapture___findChildren_setList(void* ptr, void* i);
void* QCameraImageCapture___findChildren_newList(void* ptr);
void* QCameraImageCapture___findChildren_atList3(void* ptr, int i);
void QCameraImageCapture___findChildren_setList3(void* ptr, void* i);
void* QCameraImageCapture___findChildren_newList3(void* ptr);
void QCameraImageCapture_ChildEvent(void* ptr, void* event);
void QCameraImageCapture_ChildEventDefault(void* ptr, void* event);
void QCameraImageCapture_ConnectNotify(void* ptr, void* sign);
void QCameraImageCapture_ConnectNotifyDefault(void* ptr, void* sign);
void QCameraImageCapture_CustomEvent(void* ptr, void* event);
void QCameraImageCapture_CustomEventDefault(void* ptr, void* event);
void QCameraImageCapture_DeleteLater(void* ptr);
void QCameraImageCapture_DeleteLaterDefault(void* ptr);
void QCameraImageCapture_DisconnectNotify(void* ptr, void* sign);
void QCameraImageCapture_DisconnectNotifyDefault(void* ptr, void* sign);
char QCameraImageCapture_Event(void* ptr, void* e);
char QCameraImageCapture_EventDefault(void* ptr, void* e);
char QCameraImageCapture_EventFilter(void* ptr, void* watched, void* event);
char QCameraImageCapture_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCameraImageCapture_MetaObject(void* ptr);
void* QCameraImageCapture_MetaObjectDefault(void* ptr);
void QCameraImageCapture_TimerEvent(void* ptr, void* event);
void QCameraImageCapture_TimerEventDefault(void* ptr, void* event);
void* QCameraImageCaptureControl_NewQCameraImageCaptureControl(void* parent);
void QCameraImageCaptureControl_CancelCapture(void* ptr);
int QCameraImageCaptureControl_Capture(void* ptr, struct QtMultimedia_PackedString fileName);
long long QCameraImageCaptureControl_DriveMode(void* ptr);
void QCameraImageCaptureControl_ConnectError(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectError(void* ptr);
void QCameraImageCaptureControl_Error(void* ptr, int id, int error, struct QtMultimedia_PackedString errorString);
void QCameraImageCaptureControl_ConnectImageAvailable(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectImageAvailable(void* ptr);
void QCameraImageCaptureControl_ImageAvailable(void* ptr, int requestId, void* buffer);
void QCameraImageCaptureControl_ConnectImageCaptured(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectImageCaptured(void* ptr);
void QCameraImageCaptureControl_ImageCaptured(void* ptr, int requestId, void* preview);
void QCameraImageCaptureControl_ConnectImageExposed(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectImageExposed(void* ptr);
void QCameraImageCaptureControl_ImageExposed(void* ptr, int requestId);
void QCameraImageCaptureControl_ConnectImageMetadataAvailable(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectImageMetadataAvailable(void* ptr);
void QCameraImageCaptureControl_ImageMetadataAvailable(void* ptr, int id, struct QtMultimedia_PackedString key, void* value);
void QCameraImageCaptureControl_ConnectImageSaved(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectImageSaved(void* ptr);
void QCameraImageCaptureControl_ImageSaved(void* ptr, int requestId, struct QtMultimedia_PackedString fileName);
char QCameraImageCaptureControl_IsReadyForCapture(void* ptr);
void QCameraImageCaptureControl_ConnectReadyForCaptureChanged(void* ptr, long long t);
void QCameraImageCaptureControl_DisconnectReadyForCaptureChanged(void* ptr);
void QCameraImageCaptureControl_ReadyForCaptureChanged(void* ptr, char ready);
void QCameraImageCaptureControl_SetDriveMode(void* ptr, long long mode);
void QCameraImageCaptureControl_DestroyQCameraImageCaptureControl(void* ptr);
void QCameraImageCaptureControl_DestroyQCameraImageCaptureControlDefault(void* ptr);
double QCameraImageProcessing_Brightness(void* ptr);
long long QCameraImageProcessing_ColorFilter(void* ptr);
double QCameraImageProcessing_Contrast(void* ptr);
double QCameraImageProcessing_DenoisingLevel(void* ptr);
char QCameraImageProcessing_IsAvailable(void* ptr);
char QCameraImageProcessing_IsColorFilterSupported(void* ptr, long long filter);
char QCameraImageProcessing_IsWhiteBalanceModeSupported(void* ptr, long long mode);
double QCameraImageProcessing_ManualWhiteBalance(void* ptr);
double QCameraImageProcessing_Saturation(void* ptr);
void QCameraImageProcessing_SetBrightness(void* ptr, double value);
void QCameraImageProcessing_SetColorFilter(void* ptr, long long filter);
void QCameraImageProcessing_SetContrast(void* ptr, double value);
void QCameraImageProcessing_SetDenoisingLevel(void* ptr, double level);
void QCameraImageProcessing_SetManualWhiteBalance(void* ptr, double colorTemperature);
void QCameraImageProcessing_SetSaturation(void* ptr, double value);
void QCameraImageProcessing_SetSharpeningLevel(void* ptr, double level);
void QCameraImageProcessing_SetWhiteBalanceMode(void* ptr, long long mode);
double QCameraImageProcessing_SharpeningLevel(void* ptr);
long long QCameraImageProcessing_WhiteBalanceMode(void* ptr);
void QCameraImageProcessing_DestroyQCameraImageProcessing(void* ptr);
void QCameraImageProcessing_DestroyQCameraImageProcessingDefault(void* ptr);
void* QCameraImageProcessing___children_atList(void* ptr, int i);
void QCameraImageProcessing___children_setList(void* ptr, void* i);
void* QCameraImageProcessing___children_newList(void* ptr);
void* QCameraImageProcessing___dynamicPropertyNames_atList(void* ptr, int i);
void QCameraImageProcessing___dynamicPropertyNames_setList(void* ptr, void* i);
void* QCameraImageProcessing___dynamicPropertyNames_newList(void* ptr);
void* QCameraImageProcessing___findChildren_atList(void* ptr, int i);
void QCameraImageProcessing___findChildren_setList(void* ptr, void* i);
void* QCameraImageProcessing___findChildren_newList(void* ptr);
void* QCameraImageProcessing___findChildren_atList3(void* ptr, int i);
void QCameraImageProcessing___findChildren_setList3(void* ptr, void* i);
void* QCameraImageProcessing___findChildren_newList3(void* ptr);
void QCameraImageProcessing_ChildEventDefault(void* ptr, void* event);
void QCameraImageProcessing_ConnectNotifyDefault(void* ptr, void* sign);
void QCameraImageProcessing_CustomEventDefault(void* ptr, void* event);
void QCameraImageProcessing_DeleteLaterDefault(void* ptr);
void QCameraImageProcessing_DisconnectNotifyDefault(void* ptr, void* sign);
char QCameraImageProcessing_EventDefault(void* ptr, void* e);
char QCameraImageProcessing_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCameraImageProcessing_MetaObjectDefault(void* ptr);
void QCameraImageProcessing_TimerEventDefault(void* ptr, void* event);
void* QCameraImageProcessingControl_NewQCameraImageProcessingControl(void* parent);
char QCameraImageProcessingControl_IsParameterSupported(void* ptr, long long parameter);
char QCameraImageProcessingControl_IsParameterValueSupported(void* ptr, long long parameter, void* value);
void* QCameraImageProcessingControl_Parameter(void* ptr, long long parameter);
void QCameraImageProcessingControl_SetParameter(void* ptr, long long parameter, void* value);
void QCameraImageProcessingControl_DestroyQCameraImageProcessingControl(void* ptr);
void QCameraImageProcessingControl_DestroyQCameraImageProcessingControlDefault(void* ptr);
void* QCameraInfo_NewQCameraInfo(void* name);
void* QCameraInfo_NewQCameraInfo2(void* camera);
void* QCameraInfo_NewQCameraInfo3(void* other);
struct QtMultimedia_PackedList QCameraInfo_QCameraInfo_AvailableCameras(long long position);
void* QCameraInfo_QCameraInfo_DefaultCamera();
struct QtMultimedia_PackedString QCameraInfo_Description(void* ptr);
struct QtMultimedia_PackedString QCameraInfo_DeviceName(void* ptr);
char QCameraInfo_IsNull(void* ptr);
int QCameraInfo_Orientation(void* ptr);
long long QCameraInfo_Position(void* ptr);
void QCameraInfo_DestroyQCameraInfo(void* ptr);
void* QCameraInfo___availableCameras_atList(void* ptr, int i);
void QCameraInfo___availableCameras_setList(void* ptr, void* i);
void* QCameraInfo___availableCameras_newList(void* ptr);
void* QCameraInfoControl_NewQCameraInfoControl(void* parent);
int QCameraInfoControl_CameraOrientation(void* ptr, struct QtMultimedia_PackedString deviceName);
long long QCameraInfoControl_CameraPosition(void* ptr, struct QtMultimedia_PackedString deviceName);
void QCameraInfoControl_DestroyQCameraInfoControl(void* ptr);
void QCameraInfoControl_DestroyQCameraInfoControlDefault(void* ptr);
void* QCameraLocksControl_NewQCameraLocksControl(void* parent);
long long QCameraLocksControl_LockStatus(void* ptr, long long lock);
void QCameraLocksControl_ConnectLockStatusChanged(void* ptr, long long t);
void QCameraLocksControl_DisconnectLockStatusChanged(void* ptr);
void QCameraLocksControl_LockStatusChanged(void* ptr, long long ty, long long status, long long reason);
void QCameraLocksControl_SearchAndLock(void* ptr, long long locks);
long long QCameraLocksControl_SupportedLocks(void* ptr);
void QCameraLocksControl_Unlock(void* ptr, long long locks);
void QCameraLocksControl_DestroyQCameraLocksControl(void* ptr);
void QCameraLocksControl_DestroyQCameraLocksControlDefault(void* ptr);
void* QCameraViewfinder_NewQCameraViewfinder(void* parent);
char QCameraViewfinder_SetMediaObject(void* ptr, void* object);
char QCameraViewfinder_SetMediaObjectDefault(void* ptr, void* object);
void QCameraViewfinder_DestroyQCameraViewfinder(void* ptr);
void QCameraViewfinder_DestroyQCameraViewfinderDefault(void* ptr);
void* QCameraViewfinderSettings_NewQCameraViewfinderSettings();
void* QCameraViewfinderSettings_NewQCameraViewfinderSettings2(void* other);
char QCameraViewfinderSettings_IsNull(void* ptr);
double QCameraViewfinderSettings_MaximumFrameRate(void* ptr);
double QCameraViewfinderSettings_MinimumFrameRate(void* ptr);
void* QCameraViewfinderSettings_PixelAspectRatio(void* ptr);
long long QCameraViewfinderSettings_PixelFormat(void* ptr);
void* QCameraViewfinderSettings_Resolution(void* ptr);
void QCameraViewfinderSettings_SetMaximumFrameRate(void* ptr, double rate);
void QCameraViewfinderSettings_SetMinimumFrameRate(void* ptr, double rate);
void QCameraViewfinderSettings_SetPixelAspectRatio(void* ptr, void* ratio);
void QCameraViewfinderSettings_SetPixelAspectRatio2(void* ptr, int horizontal, int vertical);
void QCameraViewfinderSettings_SetPixelFormat(void* ptr, long long format);
void QCameraViewfinderSettings_SetResolution(void* ptr, void* resolution);
void QCameraViewfinderSettings_SetResolution2(void* ptr, int width, int height);
void QCameraViewfinderSettings_Swap(void* ptr, void* other);
void QCameraViewfinderSettings_DestroyQCameraViewfinderSettings(void* ptr);
void* QCameraViewfinderSettingsControl_NewQCameraViewfinderSettingsControl(void* parent);
char QCameraViewfinderSettingsControl_IsViewfinderParameterSupported(void* ptr, long long parameter);
void QCameraViewfinderSettingsControl_SetViewfinderParameter(void* ptr, long long parameter, void* value);
void* QCameraViewfinderSettingsControl_ViewfinderParameter(void* ptr, long long parameter);
void QCameraViewfinderSettingsControl_DestroyQCameraViewfinderSettingsControl(void* ptr);
void QCameraViewfinderSettingsControl_DestroyQCameraViewfinderSettingsControlDefault(void* ptr);
void* QCameraViewfinderSettingsControl2_NewQCameraViewfinderSettingsControl2(void* parent);
void QCameraViewfinderSettingsControl2_SetViewfinderSettings(void* ptr, void* settings);
struct QtMultimedia_PackedList QCameraViewfinderSettingsControl2_SupportedViewfinderSettings(void* ptr);
void* QCameraViewfinderSettingsControl2_ViewfinderSettings(void* ptr);
void QCameraViewfinderSettingsControl2_DestroyQCameraViewfinderSettingsControl2(void* ptr);
void QCameraViewfinderSettingsControl2_DestroyQCameraViewfinderSettingsControl2Default(void* ptr);
void* QCameraViewfinderSettingsControl2___supportedViewfinderSettings_atList(void* ptr, int i);
void QCameraViewfinderSettingsControl2___supportedViewfinderSettings_setList(void* ptr, void* i);
void* QCameraViewfinderSettingsControl2___supportedViewfinderSettings_newList(void* ptr);
void* QCameraZoomControl_NewQCameraZoomControl(void* parent);
double QCameraZoomControl_CurrentDigitalZoom(void* ptr);
void QCameraZoomControl_ConnectCurrentDigitalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectCurrentDigitalZoomChanged(void* ptr);
void QCameraZoomControl_CurrentDigitalZoomChanged(void* ptr, double zoom);
double QCameraZoomControl_CurrentOpticalZoom(void* ptr);
void QCameraZoomControl_ConnectCurrentOpticalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectCurrentOpticalZoomChanged(void* ptr);
void QCameraZoomControl_CurrentOpticalZoomChanged(void* ptr, double zoom);
double QCameraZoomControl_MaximumDigitalZoom(void* ptr);
void QCameraZoomControl_ConnectMaximumDigitalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectMaximumDigitalZoomChanged(void* ptr);
void QCameraZoomControl_MaximumDigitalZoomChanged(void* ptr, double zoom);
double QCameraZoomControl_MaximumOpticalZoom(void* ptr);
void QCameraZoomControl_ConnectMaximumOpticalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectMaximumOpticalZoomChanged(void* ptr);
void QCameraZoomControl_MaximumOpticalZoomChanged(void* ptr, double zoom);
double QCameraZoomControl_RequestedDigitalZoom(void* ptr);
void QCameraZoomControl_ConnectRequestedDigitalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectRequestedDigitalZoomChanged(void* ptr);
void QCameraZoomControl_RequestedDigitalZoomChanged(void* ptr, double zoom);
double QCameraZoomControl_RequestedOpticalZoom(void* ptr);
void QCameraZoomControl_ConnectRequestedOpticalZoomChanged(void* ptr, long long t);
void QCameraZoomControl_DisconnectRequestedOpticalZoomChanged(void* ptr);
void QCameraZoomControl_RequestedOpticalZoomChanged(void* ptr, double zoom);
void QCameraZoomControl_ZoomTo(void* ptr, double optical, double digital);
void QCameraZoomControl_DestroyQCameraZoomControl(void* ptr);
void QCameraZoomControl_DestroyQCameraZoomControlDefault(void* ptr);
void* QCustomAudioRoleControl_NewQCustomAudioRoleControl(void* parent);
struct QtMultimedia_PackedString QCustomAudioRoleControl_CustomAudioRole(void* ptr);
void QCustomAudioRoleControl_ConnectCustomAudioRoleChanged(void* ptr, long long t);
void QCustomAudioRoleControl_DisconnectCustomAudioRoleChanged(void* ptr);
void QCustomAudioRoleControl_CustomAudioRoleChanged(void* ptr, struct QtMultimedia_PackedString role);
void QCustomAudioRoleControl_SetCustomAudioRole(void* ptr, struct QtMultimedia_PackedString role);
struct QtMultimedia_PackedString QCustomAudioRoleControl_SupportedCustomAudioRoles(void* ptr);
void QCustomAudioRoleControl_DestroyQCustomAudioRoleControl(void* ptr);
void QCustomAudioRoleControl_DestroyQCustomAudioRoleControlDefault(void* ptr);
void* QGraphicsVideoItem_NewQGraphicsVideoItem(void* parent);
long long QGraphicsVideoItem_AspectRatioMode(void* ptr);
void* QGraphicsVideoItem_BoundingRect(void* ptr);
void* QGraphicsVideoItem_BoundingRectDefault(void* ptr);
void* QGraphicsVideoItem_MediaObject(void* ptr);
void* QGraphicsVideoItem_MediaObjectDefault(void* ptr);
void* QGraphicsVideoItem_NativeSize(void* ptr);
void QGraphicsVideoItem_ConnectNativeSizeChanged(void* ptr, long long t);
void QGraphicsVideoItem_DisconnectNativeSizeChanged(void* ptr);
void QGraphicsVideoItem_NativeSizeChanged(void* ptr, void* size);
void* QGraphicsVideoItem_Offset(void* ptr);
void QGraphicsVideoItem_Paint(void* ptr, void* painter, void* option, void* widget);
void QGraphicsVideoItem_PaintDefault(void* ptr, void* painter, void* option, void* widget);
void QGraphicsVideoItem_SetAspectRatioMode(void* ptr, long long mode);
void QGraphicsVideoItem_SetOffset(void* ptr, void* offset);
void QGraphicsVideoItem_SetSize(void* ptr, void* size);
void* QGraphicsVideoItem_Size(void* ptr);
void* QGraphicsVideoItem_VideoSurface(void* ptr);
void QGraphicsVideoItem_DestroyQGraphicsVideoItem(void* ptr);
void QGraphicsVideoItem_DestroyQGraphicsVideoItemDefault(void* ptr);
void* QGraphicsVideoItem___children_atList(void* ptr, int i);
void QGraphicsVideoItem___children_setList(void* ptr, void* i);
void* QGraphicsVideoItem___children_newList(void* ptr);
void* QGraphicsVideoItem___dynamicPropertyNames_atList(void* ptr, int i);
void QGraphicsVideoItem___dynamicPropertyNames_setList(void* ptr, void* i);
void* QGraphicsVideoItem___dynamicPropertyNames_newList(void* ptr);
void* QGraphicsVideoItem___findChildren_atList(void* ptr, int i);
void QGraphicsVideoItem___findChildren_setList(void* ptr, void* i);
void* QGraphicsVideoItem___findChildren_newList(void* ptr);
void* QGraphicsVideoItem___findChildren_atList3(void* ptr, int i);
void QGraphicsVideoItem___findChildren_setList3(void* ptr, void* i);
void* QGraphicsVideoItem___findChildren_newList3(void* ptr);
void* QGraphicsVideoItem___childItems_atList(void* ptr, int i);
void QGraphicsVideoItem___childItems_setList(void* ptr, void* i);
void* QGraphicsVideoItem___childItems_newList(void* ptr);
void* QGraphicsVideoItem___collidingItems_atList(void* ptr, int i);
void QGraphicsVideoItem___collidingItems_setList(void* ptr, void* i);
void* QGraphicsVideoItem___collidingItems_newList(void* ptr);
void* QGraphicsVideoItem___setTransformations_transformations_atList(void* ptr, int i);
void QGraphicsVideoItem___setTransformations_transformations_setList(void* ptr, void* i);
void* QGraphicsVideoItem___setTransformations_transformations_newList(void* ptr);
void* QGraphicsVideoItem___transformations_atList(void* ptr, int i);
void QGraphicsVideoItem___transformations_setList(void* ptr, void* i);
void* QGraphicsVideoItem___transformations_newList(void* ptr);
char QGraphicsVideoItem_Event(void* ptr, void* ev);
char QGraphicsVideoItem_EventDefault(void* ptr, void* ev);
void QGraphicsVideoItem_UpdateMicroFocus(void* ptr);
void QGraphicsVideoItem_UpdateMicroFocusDefault(void* ptr);
void QGraphicsVideoItem_ChildEvent(void* ptr, void* event);
void QGraphicsVideoItem_ChildEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_ConnectNotify(void* ptr, void* sign);
void QGraphicsVideoItem_ConnectNotifyDefault(void* ptr, void* sign);
void QGraphicsVideoItem_CustomEvent(void* ptr, void* event);
void QGraphicsVideoItem_CustomEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_DeleteLater(void* ptr);
void QGraphicsVideoItem_DeleteLaterDefault(void* ptr);
void QGraphicsVideoItem_DisconnectNotify(void* ptr, void* sign);
void QGraphicsVideoItem_DisconnectNotifyDefault(void* ptr, void* sign);
char QGraphicsVideoItem_EventFilter(void* ptr, void* watched, void* event);
char QGraphicsVideoItem_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGraphicsVideoItem_MetaObject(void* ptr);
void* QGraphicsVideoItem_MetaObjectDefault(void* ptr);
void QGraphicsVideoItem_TimerEvent(void* ptr, void* event);
void QGraphicsVideoItem_TimerEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_Advance(void* ptr, int phase);
void QGraphicsVideoItem_AdvanceDefault(void* ptr, int phase);
char QGraphicsVideoItem_CollidesWithItem(void* ptr, void* other, long long mode);
char QGraphicsVideoItem_CollidesWithItemDefault(void* ptr, void* other, long long mode);
char QGraphicsVideoItem_CollidesWithPath(void* ptr, void* path, long long mode);
char QGraphicsVideoItem_CollidesWithPathDefault(void* ptr, void* path, long long mode);
char QGraphicsVideoItem_Contains(void* ptr, void* point);
char QGraphicsVideoItem_ContainsDefault(void* ptr, void* point);
void QGraphicsVideoItem_ContextMenuEvent(void* ptr, void* event);
void QGraphicsVideoItem_ContextMenuEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_DragEnterEvent(void* ptr, void* event);
void QGraphicsVideoItem_DragEnterEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_DragLeaveEvent(void* ptr, void* event);
void QGraphicsVideoItem_DragLeaveEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_DragMoveEvent(void* ptr, void* event);
void QGraphicsVideoItem_DragMoveEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_DropEvent(void* ptr, void* event);
void QGraphicsVideoItem_DropEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_FocusInEvent(void* ptr, void* event);
void QGraphicsVideoItem_FocusInEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_FocusOutEvent(void* ptr, void* event);
void QGraphicsVideoItem_FocusOutEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_HoverEnterEvent(void* ptr, void* event);
void QGraphicsVideoItem_HoverEnterEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_HoverLeaveEvent(void* ptr, void* event);
void QGraphicsVideoItem_HoverLeaveEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_HoverMoveEvent(void* ptr, void* event);
void QGraphicsVideoItem_HoverMoveEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_InputMethodEvent(void* ptr, void* event);
void QGraphicsVideoItem_InputMethodEventDefault(void* ptr, void* event);
void* QGraphicsVideoItem_InputMethodQuery(void* ptr, long long query);
void* QGraphicsVideoItem_InputMethodQueryDefault(void* ptr, long long query);
char QGraphicsVideoItem_IsObscuredBy(void* ptr, void* item);
char QGraphicsVideoItem_IsObscuredByDefault(void* ptr, void* item);
void* QGraphicsVideoItem_ItemChange(void* ptr, long long change, void* value);
void* QGraphicsVideoItem_ItemChangeDefault(void* ptr, long long change, void* value);
void QGraphicsVideoItem_KeyPressEvent(void* ptr, void* event);
void QGraphicsVideoItem_KeyPressEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_KeyReleaseEvent(void* ptr, void* event);
void QGraphicsVideoItem_KeyReleaseEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_MouseDoubleClickEvent(void* ptr, void* event);
void QGraphicsVideoItem_MouseDoubleClickEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_MouseMoveEvent(void* ptr, void* event);
void QGraphicsVideoItem_MouseMoveEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_MousePressEvent(void* ptr, void* event);
void QGraphicsVideoItem_MousePressEventDefault(void* ptr, void* event);
void QGraphicsVideoItem_MouseReleaseEvent(void* ptr, void* event);
void QGraphicsVideoItem_MouseReleaseEventDefault(void* ptr, void* event);
void* QGraphicsVideoItem_OpaqueArea(void* ptr);
void* QGraphicsVideoItem_OpaqueAreaDefault(void* ptr);
char QGraphicsVideoItem_SceneEvent(void* ptr, void* event);
char QGraphicsVideoItem_SceneEventDefault(void* ptr, void* event);
char QGraphicsVideoItem_SceneEventFilter(void* ptr, void* watched, void* event);
char QGraphicsVideoItem_SceneEventFilterDefault(void* ptr, void* watched, void* event);
void* QGraphicsVideoItem_Shape(void* ptr);
void* QGraphicsVideoItem_ShapeDefault(void* ptr);
int QGraphicsVideoItem_Type(void* ptr);
int QGraphicsVideoItem_TypeDefault(void* ptr);
void QGraphicsVideoItem_WheelEvent(void* ptr, void* event);
void QGraphicsVideoItem_WheelEventDefault(void* ptr, void* event);
char QGraphicsVideoItem_SetMediaObject(void* ptr, void* object);
char QGraphicsVideoItem_SetMediaObjectDefault(void* ptr, void* object);
void* QImageEncoderControl_NewQImageEncoderControl(void* parent);
struct QtMultimedia_PackedString QImageEncoderControl_ImageCodecDescription(void* ptr, struct QtMultimedia_PackedString codec);
void* QImageEncoderControl_ImageSettings(void* ptr);
void QImageEncoderControl_SetImageSettings(void* ptr, void* settings);
struct QtMultimedia_PackedString QImageEncoderControl_SupportedImageCodecs(void* ptr);
struct QtMultimedia_PackedList QImageEncoderControl_SupportedResolutions(void* ptr, void* settings, char* continuous);
void QImageEncoderControl_DestroyQImageEncoderControl(void* ptr);
void QImageEncoderControl_DestroyQImageEncoderControlDefault(void* ptr);
void* QImageEncoderControl___supportedResolutions_atList(void* ptr, int i);
void QImageEncoderControl___supportedResolutions_setList(void* ptr, void* i);
void* QImageEncoderControl___supportedResolutions_newList(void* ptr);
void* QImageEncoderSettings_NewQImageEncoderSettings();
void* QImageEncoderSettings_NewQImageEncoderSettings2(void* other);
struct QtMultimedia_PackedString QImageEncoderSettings_Codec(void* ptr);
void* QImageEncoderSettings_EncodingOption(void* ptr, struct QtMultimedia_PackedString option);
struct QtMultimedia_PackedList QImageEncoderSettings_EncodingOptions(void* ptr);
char QImageEncoderSettings_IsNull(void* ptr);
long long QImageEncoderSettings_Quality(void* ptr);
void* QImageEncoderSettings_Resolution(void* ptr);
void QImageEncoderSettings_SetCodec(void* ptr, struct QtMultimedia_PackedString codec);
void QImageEncoderSettings_SetEncodingOption(void* ptr, struct QtMultimedia_PackedString option, void* value);
void QImageEncoderSettings_SetEncodingOptions(void* ptr, void* options);
void QImageEncoderSettings_SetQuality(void* ptr, long long quality);
void QImageEncoderSettings_SetResolution(void* ptr, void* resolution);
void QImageEncoderSettings_SetResolution2(void* ptr, int width, int height);
void QImageEncoderSettings_DestroyQImageEncoderSettings(void* ptr);
void* QImageEncoderSettings___encodingOptions_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QImageEncoderSettings___encodingOptions_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QImageEncoderSettings___encodingOptions_newList(void* ptr);
struct QtMultimedia_PackedList QImageEncoderSettings___encodingOptions_keyList(void* ptr);
void* QImageEncoderSettings___setEncodingOptions_options_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QImageEncoderSettings___setEncodingOptions_options_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QImageEncoderSettings___setEncodingOptions_options_newList(void* ptr);
struct QtMultimedia_PackedList QImageEncoderSettings___setEncodingOptions_options_keyList(void* ptr);
struct QtMultimedia_PackedString QImageEncoderSettings_____encodingOptions_keyList_atList(void* ptr, int i);
void QImageEncoderSettings_____encodingOptions_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QImageEncoderSettings_____encodingOptions_keyList_newList(void* ptr);
struct QtMultimedia_PackedString QImageEncoderSettings_____setEncodingOptions_options_keyList_atList(void* ptr, int i);
void QImageEncoderSettings_____setEncodingOptions_options_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QImageEncoderSettings_____setEncodingOptions_options_keyList_newList(void* ptr);
void* QMediaAudioProbeControl_NewQMediaAudioProbeControl(void* parent);
void QMediaAudioProbeControl_ConnectAudioBufferProbed(void* ptr, long long t);
void QMediaAudioProbeControl_DisconnectAudioBufferProbed(void* ptr);
void QMediaAudioProbeControl_AudioBufferProbed(void* ptr, void* buffer);
void QMediaAudioProbeControl_ConnectFlush(void* ptr, long long t);
void QMediaAudioProbeControl_DisconnectFlush(void* ptr);
void QMediaAudioProbeControl_Flush(void* ptr);
void QMediaAudioProbeControl_DestroyQMediaAudioProbeControl(void* ptr);
void QMediaAudioProbeControl_DestroyQMediaAudioProbeControlDefault(void* ptr);
void* QMediaAvailabilityControl_NewQMediaAvailabilityControl(void* parent);
long long QMediaAvailabilityControl_Availability(void* ptr);
void QMediaAvailabilityControl_ConnectAvailabilityChanged(void* ptr, long long t);
void QMediaAvailabilityControl_DisconnectAvailabilityChanged(void* ptr);
void QMediaAvailabilityControl_AvailabilityChanged(void* ptr, long long availability);
void QMediaAvailabilityControl_DestroyQMediaAvailabilityControl(void* ptr);
void QMediaAvailabilityControl_DestroyQMediaAvailabilityControlDefault(void* ptr);
void* QMediaBindableInterface_MediaObject(void* ptr);
char QMediaBindableInterface_SetMediaObject(void* ptr, void* object);
void QMediaBindableInterface_DestroyQMediaBindableInterface(void* ptr);
void QMediaBindableInterface_DestroyQMediaBindableInterfaceDefault(void* ptr);
void* QMediaContainerControl_NewQMediaContainerControl(void* parent);
struct QtMultimedia_PackedString QMediaContainerControl_ContainerDescription(void* ptr, struct QtMultimedia_PackedString formatMimeType);
struct QtMultimedia_PackedString QMediaContainerControl_ContainerFormat(void* ptr);
void QMediaContainerControl_SetContainerFormat(void* ptr, struct QtMultimedia_PackedString format);
struct QtMultimedia_PackedString QMediaContainerControl_SupportedContainers(void* ptr);
void QMediaContainerControl_DestroyQMediaContainerControl(void* ptr);
void QMediaContainerControl_DestroyQMediaContainerControlDefault(void* ptr);
void* QMediaContent_NewQMediaContent();
void* QMediaContent_NewQMediaContent2(void* url);
void* QMediaContent_NewQMediaContent3(void* request);
void* QMediaContent_NewQMediaContent6(void* other);
void* QMediaContent_NewQMediaContent7(void* playlist, void* contentUrl, char takeOwnership);
char QMediaContent_IsNull(void* ptr);
void* QMediaContent_Playlist(void* ptr);
void* QMediaContent_Request(void* ptr);
void QMediaContent_DestroyQMediaContent(void* ptr);
void* QMediaContent___QMediaContent_resources_atList4(void* ptr, int i);
void QMediaContent___QMediaContent_resources_setList4(void* ptr, void* i);
void* QMediaContent___QMediaContent_resources_newList4(void* ptr);
void* QMediaContent___resources_atList(void* ptr, int i);
void QMediaContent___resources_setList(void* ptr, void* i);
void* QMediaContent___resources_newList(void* ptr);
void* QMediaControl_NewQMediaControl(void* parent);
void QMediaControl_DestroyQMediaControl(void* ptr);
void QMediaControl_DestroyQMediaControlDefault(void* ptr);
void* QMediaControl___children_atList(void* ptr, int i);
void QMediaControl___children_setList(void* ptr, void* i);
void* QMediaControl___children_newList(void* ptr);
void* QMediaControl___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaControl___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaControl___dynamicPropertyNames_newList(void* ptr);
void* QMediaControl___findChildren_atList(void* ptr, int i);
void QMediaControl___findChildren_setList(void* ptr, void* i);
void* QMediaControl___findChildren_newList(void* ptr);
void* QMediaControl___findChildren_atList3(void* ptr, int i);
void QMediaControl___findChildren_setList3(void* ptr, void* i);
void* QMediaControl___findChildren_newList3(void* ptr);
void QMediaControl_ChildEventDefault(void* ptr, void* event);
void QMediaControl_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaControl_CustomEventDefault(void* ptr, void* event);
void QMediaControl_DeleteLaterDefault(void* ptr);
void QMediaControl_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaControl_EventDefault(void* ptr, void* e);
char QMediaControl_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaControl_MetaObjectDefault(void* ptr);
void QMediaControl_TimerEventDefault(void* ptr, void* event);
void* QMediaGaplessPlaybackControl_NewQMediaGaplessPlaybackControl(void* parent);
void QMediaGaplessPlaybackControl_ConnectAdvancedToNextMedia(void* ptr, long long t);
void QMediaGaplessPlaybackControl_DisconnectAdvancedToNextMedia(void* ptr);
void QMediaGaplessPlaybackControl_AdvancedToNextMedia(void* ptr);
double QMediaGaplessPlaybackControl_CrossfadeTime(void* ptr);
void QMediaGaplessPlaybackControl_ConnectCrossfadeTimeChanged(void* ptr, long long t);
void QMediaGaplessPlaybackControl_DisconnectCrossfadeTimeChanged(void* ptr);
void QMediaGaplessPlaybackControl_CrossfadeTimeChanged(void* ptr, double crossfadeTime);
char QMediaGaplessPlaybackControl_IsCrossfadeSupported(void* ptr);
void* QMediaGaplessPlaybackControl_NextMedia(void* ptr);
void QMediaGaplessPlaybackControl_ConnectNextMediaChanged(void* ptr, long long t);
void QMediaGaplessPlaybackControl_DisconnectNextMediaChanged(void* ptr);
void QMediaGaplessPlaybackControl_NextMediaChanged(void* ptr, void* media);
void QMediaGaplessPlaybackControl_SetCrossfadeTime(void* ptr, double crossfadeTime);
void QMediaGaplessPlaybackControl_SetNextMedia(void* ptr, void* media);
void QMediaGaplessPlaybackControl_DestroyQMediaGaplessPlaybackControl(void* ptr);
void QMediaGaplessPlaybackControl_DestroyQMediaGaplessPlaybackControlDefault(void* ptr);
void QMediaNetworkAccessControl_ConnectConfigurationChanged(void* ptr, long long t);
void QMediaNetworkAccessControl_DisconnectConfigurationChanged(void* ptr);
void QMediaNetworkAccessControl_ConfigurationChanged(void* ptr, void* configuration);
void* QMediaNetworkAccessControl_CurrentConfiguration(void* ptr);
void QMediaNetworkAccessControl_SetConfigurations(void* ptr, void* configurations);
void QMediaNetworkAccessControl_DestroyQMediaNetworkAccessControl(void* ptr);
void QMediaNetworkAccessControl_DestroyQMediaNetworkAccessControlDefault(void* ptr);
void* QMediaNetworkAccessControl___setConfigurations_configurations_atList(void* ptr, int i);
void QMediaNetworkAccessControl___setConfigurations_configurations_setList(void* ptr, void* i);
void* QMediaNetworkAccessControl___setConfigurations_configurations_newList(void* ptr);
void* QMediaObject_NewQMediaObject(void* parent, void* service);
void QMediaObject_AddPropertyWatch(void* ptr, void* name);
long long QMediaObject_Availability(void* ptr);
long long QMediaObject_AvailabilityDefault(void* ptr);
void QMediaObject_ConnectAvailabilityChanged(void* ptr, long long t);
void QMediaObject_DisconnectAvailabilityChanged(void* ptr);
void QMediaObject_AvailabilityChanged(void* ptr, char available);
void QMediaObject_ConnectAvailabilityChanged2(void* ptr, long long t);
void QMediaObject_DisconnectAvailabilityChanged2(void* ptr);
void QMediaObject_AvailabilityChanged2(void* ptr, long long availability);
struct QtMultimedia_PackedString QMediaObject_AvailableMetaData(void* ptr);
char QMediaObject_Bind(void* ptr, void* object);
char QMediaObject_BindDefault(void* ptr, void* object);
char QMediaObject_IsAvailable(void* ptr);
char QMediaObject_IsAvailableDefault(void* ptr);
char QMediaObject_IsMetaDataAvailable(void* ptr);
void* QMediaObject_MetaData(void* ptr, struct QtMultimedia_PackedString key);
void QMediaObject_ConnectMetaDataAvailableChanged(void* ptr, long long t);
void QMediaObject_DisconnectMetaDataAvailableChanged(void* ptr);
void QMediaObject_MetaDataAvailableChanged(void* ptr, char available);
void QMediaObject_ConnectMetaDataChanged(void* ptr, long long t);
void QMediaObject_DisconnectMetaDataChanged(void* ptr);
void QMediaObject_MetaDataChanged(void* ptr);
void QMediaObject_ConnectMetaDataChanged2(void* ptr, long long t);
void QMediaObject_DisconnectMetaDataChanged2(void* ptr);
void QMediaObject_MetaDataChanged2(void* ptr, struct QtMultimedia_PackedString key, void* value);
int QMediaObject_NotifyInterval(void* ptr);
void QMediaObject_ConnectNotifyIntervalChanged(void* ptr, long long t);
void QMediaObject_DisconnectNotifyIntervalChanged(void* ptr);
void QMediaObject_NotifyIntervalChanged(void* ptr, int milliseconds);
void QMediaObject_RemovePropertyWatch(void* ptr, void* name);
void* QMediaObject_Service(void* ptr);
void* QMediaObject_ServiceDefault(void* ptr);
void QMediaObject_SetNotifyInterval(void* ptr, int milliSeconds);
void QMediaObject_Unbind(void* ptr, void* object);
void QMediaObject_UnbindDefault(void* ptr, void* object);
void QMediaObject_DestroyQMediaObject(void* ptr);
void QMediaObject_DestroyQMediaObjectDefault(void* ptr);
void* QMediaObject___children_atList(void* ptr, int i);
void QMediaObject___children_setList(void* ptr, void* i);
void* QMediaObject___children_newList(void* ptr);
void* QMediaObject___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaObject___dynamicPropertyNames_newList(void* ptr);
void* QMediaObject___findChildren_atList(void* ptr, int i);
void QMediaObject___findChildren_setList(void* ptr, void* i);
void* QMediaObject___findChildren_newList(void* ptr);
void* QMediaObject___findChildren_atList3(void* ptr, int i);
void QMediaObject___findChildren_setList3(void* ptr, void* i);
void* QMediaObject___findChildren_newList3(void* ptr);
void QMediaObject_ChildEventDefault(void* ptr, void* event);
void QMediaObject_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaObject_CustomEventDefault(void* ptr, void* event);
void QMediaObject_DeleteLaterDefault(void* ptr);
void QMediaObject_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaObject_EventDefault(void* ptr, void* e);
char QMediaObject_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaObject_MetaObjectDefault(void* ptr);
void QMediaObject_TimerEventDefault(void* ptr, void* event);
void* QMediaPlayer_NewQMediaPlayer(void* parent, long long flags);
void QMediaPlayer_ConnectAudioAvailableChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectAudioAvailableChanged(void* ptr);
void QMediaPlayer_AudioAvailableChanged(void* ptr, char available);
long long QMediaPlayer_AudioRole(void* ptr);
void QMediaPlayer_ConnectAudioRoleChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectAudioRoleChanged(void* ptr);
void QMediaPlayer_AudioRoleChanged(void* ptr, long long role);
int QMediaPlayer_BufferStatus(void* ptr);
void QMediaPlayer_ConnectBufferStatusChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectBufferStatusChanged(void* ptr);
void QMediaPlayer_BufferStatusChanged(void* ptr, int percentFilled);
void* QMediaPlayer_CurrentMedia(void* ptr);
void QMediaPlayer_ConnectCurrentMediaChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectCurrentMediaChanged(void* ptr);
void QMediaPlayer_CurrentMediaChanged(void* ptr, void* media);
struct QtMultimedia_PackedString QMediaPlayer_CustomAudioRole(void* ptr);
void QMediaPlayer_ConnectCustomAudioRoleChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectCustomAudioRoleChanged(void* ptr);
void QMediaPlayer_CustomAudioRoleChanged(void* ptr, struct QtMultimedia_PackedString role);
long long QMediaPlayer_Duration(void* ptr);
void QMediaPlayer_ConnectDurationChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectDurationChanged(void* ptr);
void QMediaPlayer_DurationChanged(void* ptr, long long duration);
long long QMediaPlayer_Error(void* ptr);
void QMediaPlayer_ConnectError2(void* ptr, long long t);
void QMediaPlayer_DisconnectError2(void* ptr);
void QMediaPlayer_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QMediaPlayer_ErrorString(void* ptr);
long long QMediaPlayer_QMediaPlayer_HasSupport(struct QtMultimedia_PackedString mimeType, struct QtMultimedia_PackedString codecs, long long flags);
char QMediaPlayer_IsAudioAvailable(void* ptr);
char QMediaPlayer_IsMuted(void* ptr);
char QMediaPlayer_IsSeekable(void* ptr);
char QMediaPlayer_IsVideoAvailable(void* ptr);
void* QMediaPlayer_Media(void* ptr);
void QMediaPlayer_ConnectMediaChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectMediaChanged(void* ptr);
void QMediaPlayer_MediaChanged(void* ptr, void* media);
long long QMediaPlayer_MediaStatus(void* ptr);
void QMediaPlayer_ConnectMediaStatusChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectMediaStatusChanged(void* ptr);
void QMediaPlayer_MediaStatusChanged(void* ptr, long long status);
void* QMediaPlayer_MediaStream(void* ptr);
void QMediaPlayer_ConnectMutedChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectMutedChanged(void* ptr);
void QMediaPlayer_MutedChanged(void* ptr, char muted);
void QMediaPlayer_Pause(void* ptr);
void QMediaPlayer_PauseDefault(void* ptr);
void QMediaPlayer_Play(void* ptr);
void QMediaPlayer_PlayDefault(void* ptr);
double QMediaPlayer_PlaybackRate(void* ptr);
void QMediaPlayer_ConnectPlaybackRateChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectPlaybackRateChanged(void* ptr);
void QMediaPlayer_PlaybackRateChanged(void* ptr, double rate);
void* QMediaPlayer_Playlist(void* ptr);
long long QMediaPlayer_Position(void* ptr);
void QMediaPlayer_ConnectPositionChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectPositionChanged(void* ptr);
void QMediaPlayer_PositionChanged(void* ptr, long long position);
void QMediaPlayer_ConnectSeekableChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectSeekableChanged(void* ptr);
void QMediaPlayer_SeekableChanged(void* ptr, char seekable);
void QMediaPlayer_SetAudioRole(void* ptr, long long audioRole);
void QMediaPlayer_SetCustomAudioRole(void* ptr, struct QtMultimedia_PackedString audioRole);
void QMediaPlayer_SetMedia(void* ptr, void* media, void* stream);
void QMediaPlayer_SetMediaDefault(void* ptr, void* media, void* stream);
void QMediaPlayer_SetMuted(void* ptr, char muted);
void QMediaPlayer_SetMutedDefault(void* ptr, char muted);
void QMediaPlayer_SetPlaybackRate(void* ptr, double rate);
void QMediaPlayer_SetPlaybackRateDefault(void* ptr, double rate);
void QMediaPlayer_SetPlaylist(void* ptr, void* playlist);
void QMediaPlayer_SetPlaylistDefault(void* ptr, void* playlist);
void QMediaPlayer_SetPosition(void* ptr, long long position);
void QMediaPlayer_SetPositionDefault(void* ptr, long long position);
void QMediaPlayer_SetVideoOutput(void* ptr, void* output);
void QMediaPlayer_SetVideoOutput2(void* ptr, void* output);
void QMediaPlayer_SetVideoOutput3(void* ptr, void* surface);
void QMediaPlayer_SetVideoOutput4(void* ptr, void* surfaces);
void QMediaPlayer_SetVolume(void* ptr, int volume);
void QMediaPlayer_SetVolumeDefault(void* ptr, int volume);
long long QMediaPlayer_State(void* ptr);
void QMediaPlayer_ConnectStateChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectStateChanged(void* ptr);
void QMediaPlayer_StateChanged(void* ptr, long long state);
void QMediaPlayer_Stop(void* ptr);
void QMediaPlayer_StopDefault(void* ptr);
struct QtMultimedia_PackedList QMediaPlayer_SupportedAudioRoles(void* ptr);
struct QtMultimedia_PackedString QMediaPlayer_SupportedCustomAudioRoles(void* ptr);
void QMediaPlayer_ConnectVideoAvailableChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectVideoAvailableChanged(void* ptr);
void QMediaPlayer_VideoAvailableChanged(void* ptr, char videoAvailable);
int QMediaPlayer_Volume(void* ptr);
void QMediaPlayer_ConnectVolumeChanged(void* ptr, long long t);
void QMediaPlayer_DisconnectVolumeChanged(void* ptr);
void QMediaPlayer_VolumeChanged(void* ptr, int volume);
void QMediaPlayer_DestroyQMediaPlayer(void* ptr);
void QMediaPlayer_DestroyQMediaPlayerDefault(void* ptr);
void* QMediaPlayer___setNetworkConfigurations_configurations_atList(void* ptr, int i);
void QMediaPlayer___setNetworkConfigurations_configurations_setList(void* ptr, void* i);
void* QMediaPlayer___setNetworkConfigurations_configurations_newList(void* ptr);
void* QMediaPlayer___setVideoOutput_surfaces_atList4(void* ptr, int i);
void QMediaPlayer___setVideoOutput_surfaces_setList4(void* ptr, void* i);
void* QMediaPlayer___setVideoOutput_surfaces_newList4(void* ptr);
long long QMediaPlayer___supportedAudioRoles_atList(void* ptr, int i);
void QMediaPlayer___supportedAudioRoles_setList(void* ptr, long long i);
void* QMediaPlayer___supportedAudioRoles_newList(void* ptr);
void* QMediaPlayerControl_NewQMediaPlayerControl(void* parent);
void QMediaPlayerControl_ConnectAudioAvailableChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectAudioAvailableChanged(void* ptr);
void QMediaPlayerControl_AudioAvailableChanged(void* ptr, char audioAvailable);
void* QMediaPlayerControl_AvailablePlaybackRanges(void* ptr);
void QMediaPlayerControl_ConnectAvailablePlaybackRangesChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectAvailablePlaybackRangesChanged(void* ptr);
void QMediaPlayerControl_AvailablePlaybackRangesChanged(void* ptr, void* ranges);
int QMediaPlayerControl_BufferStatus(void* ptr);
void QMediaPlayerControl_ConnectBufferStatusChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectBufferStatusChanged(void* ptr);
void QMediaPlayerControl_BufferStatusChanged(void* ptr, int percentFilled);
long long QMediaPlayerControl_Duration(void* ptr);
void QMediaPlayerControl_ConnectDurationChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectDurationChanged(void* ptr);
void QMediaPlayerControl_DurationChanged(void* ptr, long long duration);
void QMediaPlayerControl_ConnectError(void* ptr, long long t);
void QMediaPlayerControl_DisconnectError(void* ptr);
void QMediaPlayerControl_Error(void* ptr, int error, struct QtMultimedia_PackedString errorString);
char QMediaPlayerControl_IsAudioAvailable(void* ptr);
char QMediaPlayerControl_IsMuted(void* ptr);
char QMediaPlayerControl_IsSeekable(void* ptr);
char QMediaPlayerControl_IsVideoAvailable(void* ptr);
void* QMediaPlayerControl_Media(void* ptr);
void QMediaPlayerControl_ConnectMediaChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectMediaChanged(void* ptr);
void QMediaPlayerControl_MediaChanged(void* ptr, void* content);
long long QMediaPlayerControl_MediaStatus(void* ptr);
void QMediaPlayerControl_ConnectMediaStatusChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectMediaStatusChanged(void* ptr);
void QMediaPlayerControl_MediaStatusChanged(void* ptr, long long status);
void* QMediaPlayerControl_MediaStream(void* ptr);
void QMediaPlayerControl_ConnectMutedChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectMutedChanged(void* ptr);
void QMediaPlayerControl_MutedChanged(void* ptr, char mute);
void QMediaPlayerControl_Pause(void* ptr);
void QMediaPlayerControl_Play(void* ptr);
double QMediaPlayerControl_PlaybackRate(void* ptr);
void QMediaPlayerControl_ConnectPlaybackRateChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectPlaybackRateChanged(void* ptr);
void QMediaPlayerControl_PlaybackRateChanged(void* ptr, double rate);
long long QMediaPlayerControl_Position(void* ptr);
void QMediaPlayerControl_ConnectPositionChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectPositionChanged(void* ptr);
void QMediaPlayerControl_PositionChanged(void* ptr, long long position);
void QMediaPlayerControl_ConnectSeekableChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectSeekableChanged(void* ptr);
void QMediaPlayerControl_SeekableChanged(void* ptr, char seekable);
void QMediaPlayerControl_SetMedia(void* ptr, void* media, void* stream);
void QMediaPlayerControl_SetMuted(void* ptr, char mute);
void QMediaPlayerControl_SetPlaybackRate(void* ptr, double rate);
void QMediaPlayerControl_SetPosition(void* ptr, long long position);
void QMediaPlayerControl_SetVolume(void* ptr, int volume);
long long QMediaPlayerControl_State(void* ptr);
void QMediaPlayerControl_ConnectStateChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectStateChanged(void* ptr);
void QMediaPlayerControl_StateChanged(void* ptr, long long newState);
void QMediaPlayerControl_Stop(void* ptr);
void QMediaPlayerControl_ConnectVideoAvailableChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectVideoAvailableChanged(void* ptr);
void QMediaPlayerControl_VideoAvailableChanged(void* ptr, char videoAvailable);
int QMediaPlayerControl_Volume(void* ptr);
void QMediaPlayerControl_ConnectVolumeChanged(void* ptr, long long t);
void QMediaPlayerControl_DisconnectVolumeChanged(void* ptr);
void QMediaPlayerControl_VolumeChanged(void* ptr, int volume);
void QMediaPlayerControl_DestroyQMediaPlayerControl(void* ptr);
void QMediaPlayerControl_DestroyQMediaPlayerControlDefault(void* ptr);
void* QMediaPlaylist_NewQMediaPlaylist(void* parent);
char QMediaPlaylist_AddMedia(void* ptr, void* content);
char QMediaPlaylist_AddMedia2(void* ptr, void* items);
char QMediaPlaylist_Clear(void* ptr);
int QMediaPlaylist_CurrentIndex(void* ptr);
void QMediaPlaylist_ConnectCurrentIndexChanged(void* ptr, long long t);
void QMediaPlaylist_DisconnectCurrentIndexChanged(void* ptr);
void QMediaPlaylist_CurrentIndexChanged(void* ptr, int position);
void* QMediaPlaylist_CurrentMedia(void* ptr);
void QMediaPlaylist_ConnectCurrentMediaChanged(void* ptr, long long t);
void QMediaPlaylist_DisconnectCurrentMediaChanged(void* ptr);
void QMediaPlaylist_CurrentMediaChanged(void* ptr, void* content);
long long QMediaPlaylist_Error(void* ptr);
struct QtMultimedia_PackedString QMediaPlaylist_ErrorString(void* ptr);
char QMediaPlaylist_InsertMedia(void* ptr, int pos, void* content);
char QMediaPlaylist_InsertMedia2(void* ptr, int pos, void* items);
char QMediaPlaylist_IsEmpty(void* ptr);
char QMediaPlaylist_IsReadOnly(void* ptr);
void QMediaPlaylist_Load(void* ptr, void* request, char* format);
void QMediaPlaylist_Load2(void* ptr, void* location, char* format);
void QMediaPlaylist_Load3(void* ptr, void* device, char* format);
void QMediaPlaylist_ConnectLoadFailed(void* ptr, long long t);
void QMediaPlaylist_DisconnectLoadFailed(void* ptr);
void QMediaPlaylist_LoadFailed(void* ptr);
void QMediaPlaylist_ConnectLoaded(void* ptr, long long t);
void QMediaPlaylist_DisconnectLoaded(void* ptr);
void QMediaPlaylist_Loaded(void* ptr);
void* QMediaPlaylist_Media(void* ptr, int index);
void QMediaPlaylist_ConnectMediaAboutToBeInserted(void* ptr, long long t);
void QMediaPlaylist_DisconnectMediaAboutToBeInserted(void* ptr);
void QMediaPlaylist_MediaAboutToBeInserted(void* ptr, int start, int end);
void QMediaPlaylist_ConnectMediaAboutToBeRemoved(void* ptr, long long t);
void QMediaPlaylist_DisconnectMediaAboutToBeRemoved(void* ptr);
void QMediaPlaylist_MediaAboutToBeRemoved(void* ptr, int start, int end);
void QMediaPlaylist_ConnectMediaChanged(void* ptr, long long t);
void QMediaPlaylist_DisconnectMediaChanged(void* ptr);
void QMediaPlaylist_MediaChanged(void* ptr, int start, int end);
int QMediaPlaylist_MediaCount(void* ptr);
void QMediaPlaylist_ConnectMediaInserted(void* ptr, long long t);
void QMediaPlaylist_DisconnectMediaInserted(void* ptr);
void QMediaPlaylist_MediaInserted(void* ptr, int start, int end);
void* QMediaPlaylist_MediaObject(void* ptr);
void* QMediaPlaylist_MediaObjectDefault(void* ptr);
void QMediaPlaylist_ConnectMediaRemoved(void* ptr, long long t);
void QMediaPlaylist_DisconnectMediaRemoved(void* ptr);
void QMediaPlaylist_MediaRemoved(void* ptr, int start, int end);
char QMediaPlaylist_MoveMedia(void* ptr, int from, int to);
void QMediaPlaylist_Next(void* ptr);
void QMediaPlaylist_NextDefault(void* ptr);
int QMediaPlaylist_NextIndex(void* ptr, int steps);
long long QMediaPlaylist_PlaybackMode(void* ptr);
void QMediaPlaylist_ConnectPlaybackModeChanged(void* ptr, long long t);
void QMediaPlaylist_DisconnectPlaybackModeChanged(void* ptr);
void QMediaPlaylist_PlaybackModeChanged(void* ptr, long long mode);
void QMediaPlaylist_Previous(void* ptr);
void QMediaPlaylist_PreviousDefault(void* ptr);
int QMediaPlaylist_PreviousIndex(void* ptr, int steps);
char QMediaPlaylist_RemoveMedia(void* ptr, int pos);
char QMediaPlaylist_RemoveMedia2(void* ptr, int start, int end);
char QMediaPlaylist_Save(void* ptr, void* location, char* format);
char QMediaPlaylist_Save2(void* ptr, void* device, char* format);
void QMediaPlaylist_SetCurrentIndex(void* ptr, int playlistPosition);
void QMediaPlaylist_SetCurrentIndexDefault(void* ptr, int playlistPosition);
void QMediaPlaylist_SetPlaybackMode(void* ptr, long long mode);
void QMediaPlaylist_Shuffle(void* ptr);
void QMediaPlaylist_ShuffleDefault(void* ptr);
void QMediaPlaylist_DestroyQMediaPlaylist(void* ptr);
void QMediaPlaylist_DestroyQMediaPlaylistDefault(void* ptr);
void* QMediaPlaylist___addMedia_items_atList2(void* ptr, int i);
void QMediaPlaylist___addMedia_items_setList2(void* ptr, void* i);
void* QMediaPlaylist___addMedia_items_newList2(void* ptr);
void* QMediaPlaylist___insertMedia_items_atList2(void* ptr, int i);
void QMediaPlaylist___insertMedia_items_setList2(void* ptr, void* i);
void* QMediaPlaylist___insertMedia_items_newList2(void* ptr);
void* QMediaPlaylist___children_atList(void* ptr, int i);
void QMediaPlaylist___children_setList(void* ptr, void* i);
void* QMediaPlaylist___children_newList(void* ptr);
void* QMediaPlaylist___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaPlaylist___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaPlaylist___dynamicPropertyNames_newList(void* ptr);
void* QMediaPlaylist___findChildren_atList(void* ptr, int i);
void QMediaPlaylist___findChildren_setList(void* ptr, void* i);
void* QMediaPlaylist___findChildren_newList(void* ptr);
void* QMediaPlaylist___findChildren_atList3(void* ptr, int i);
void QMediaPlaylist___findChildren_setList3(void* ptr, void* i);
void* QMediaPlaylist___findChildren_newList3(void* ptr);
void QMediaPlaylist_ChildEvent(void* ptr, void* event);
void QMediaPlaylist_ChildEventDefault(void* ptr, void* event);
void QMediaPlaylist_ConnectNotify(void* ptr, void* sign);
void QMediaPlaylist_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaPlaylist_CustomEvent(void* ptr, void* event);
void QMediaPlaylist_CustomEventDefault(void* ptr, void* event);
void QMediaPlaylist_DeleteLater(void* ptr);
void QMediaPlaylist_DeleteLaterDefault(void* ptr);
void QMediaPlaylist_DisconnectNotify(void* ptr, void* sign);
void QMediaPlaylist_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaPlaylist_Event(void* ptr, void* e);
char QMediaPlaylist_EventDefault(void* ptr, void* e);
char QMediaPlaylist_EventFilter(void* ptr, void* watched, void* event);
char QMediaPlaylist_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaPlaylist_MetaObject(void* ptr);
void* QMediaPlaylist_MetaObjectDefault(void* ptr);
void QMediaPlaylist_TimerEvent(void* ptr, void* event);
void QMediaPlaylist_TimerEventDefault(void* ptr, void* event);
char QMediaPlaylist_SetMediaObject(void* ptr, void* object);
char QMediaPlaylist_SetMediaObjectDefault(void* ptr, void* object);
void* QMediaRecorder_NewQMediaRecorder(void* mediaObject, void* parent);
void* QMediaRecorder_ActualLocation(void* ptr);
void QMediaRecorder_ConnectActualLocationChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectActualLocationChanged(void* ptr);
void QMediaRecorder_ActualLocationChanged(void* ptr, void* location);
struct QtMultimedia_PackedString QMediaRecorder_AudioCodecDescription(void* ptr, struct QtMultimedia_PackedString codec);
void* QMediaRecorder_AudioSettings(void* ptr);
long long QMediaRecorder_Availability(void* ptr);
void QMediaRecorder_ConnectAvailabilityChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectAvailabilityChanged(void* ptr);
void QMediaRecorder_AvailabilityChanged(void* ptr, char available);
void QMediaRecorder_ConnectAvailabilityChanged2(void* ptr, long long t);
void QMediaRecorder_DisconnectAvailabilityChanged2(void* ptr);
void QMediaRecorder_AvailabilityChanged2(void* ptr, long long availability);
struct QtMultimedia_PackedString QMediaRecorder_AvailableMetaData(void* ptr);
struct QtMultimedia_PackedString QMediaRecorder_ContainerDescription(void* ptr, struct QtMultimedia_PackedString format);
struct QtMultimedia_PackedString QMediaRecorder_ContainerFormat(void* ptr);
long long QMediaRecorder_Duration(void* ptr);
void QMediaRecorder_ConnectDurationChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectDurationChanged(void* ptr);
void QMediaRecorder_DurationChanged(void* ptr, long long duration);
long long QMediaRecorder_Error(void* ptr);
void QMediaRecorder_ConnectError2(void* ptr, long long t);
void QMediaRecorder_DisconnectError2(void* ptr);
void QMediaRecorder_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QMediaRecorder_ErrorString(void* ptr);
char QMediaRecorder_IsAvailable(void* ptr);
char QMediaRecorder_IsMetaDataAvailable(void* ptr);
char QMediaRecorder_IsMetaDataWritable(void* ptr);
char QMediaRecorder_IsMuted(void* ptr);
void* QMediaRecorder_MediaObject(void* ptr);
void* QMediaRecorder_MediaObjectDefault(void* ptr);
void* QMediaRecorder_MetaData(void* ptr, struct QtMultimedia_PackedString key);
void QMediaRecorder_ConnectMetaDataAvailableChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectMetaDataAvailableChanged(void* ptr);
void QMediaRecorder_MetaDataAvailableChanged(void* ptr, char available);
void QMediaRecorder_ConnectMetaDataChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectMetaDataChanged(void* ptr);
void QMediaRecorder_MetaDataChanged(void* ptr);
void QMediaRecorder_ConnectMetaDataChanged2(void* ptr, long long t);
void QMediaRecorder_DisconnectMetaDataChanged2(void* ptr);
void QMediaRecorder_MetaDataChanged2(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QMediaRecorder_ConnectMetaDataWritableChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectMetaDataWritableChanged(void* ptr);
void QMediaRecorder_MetaDataWritableChanged(void* ptr, char writable);
void QMediaRecorder_ConnectMutedChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectMutedChanged(void* ptr);
void QMediaRecorder_MutedChanged(void* ptr, char muted);
void* QMediaRecorder_OutputLocation(void* ptr);
void QMediaRecorder_Pause(void* ptr);
void QMediaRecorder_PauseDefault(void* ptr);
void QMediaRecorder_Record(void* ptr);
void QMediaRecorder_RecordDefault(void* ptr);
void QMediaRecorder_SetAudioSettings(void* ptr, void* settings);
void QMediaRecorder_SetContainerFormat(void* ptr, struct QtMultimedia_PackedString container);
void QMediaRecorder_SetEncodingSettings(void* ptr, void* audio, void* video, struct QtMultimedia_PackedString container);
void QMediaRecorder_SetMetaData(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QMediaRecorder_SetMuted(void* ptr, char muted);
void QMediaRecorder_SetMutedDefault(void* ptr, char muted);
char QMediaRecorder_SetOutputLocation(void* ptr, void* location);
void QMediaRecorder_SetVideoSettings(void* ptr, void* settings);
void QMediaRecorder_SetVolume(void* ptr, double volume);
void QMediaRecorder_SetVolumeDefault(void* ptr, double volume);
long long QMediaRecorder_State(void* ptr);
void QMediaRecorder_ConnectStateChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectStateChanged(void* ptr);
void QMediaRecorder_StateChanged(void* ptr, long long state);
long long QMediaRecorder_Status(void* ptr);
void QMediaRecorder_ConnectStatusChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectStatusChanged(void* ptr);
void QMediaRecorder_StatusChanged(void* ptr, long long status);
void QMediaRecorder_Stop(void* ptr);
void QMediaRecorder_StopDefault(void* ptr);
struct QtMultimedia_PackedString QMediaRecorder_SupportedAudioCodecs(void* ptr);
struct QtMultimedia_PackedList QMediaRecorder_SupportedAudioSampleRates(void* ptr, void* settings, char* continuous);
struct QtMultimedia_PackedString QMediaRecorder_SupportedContainers(void* ptr);
struct QtMultimedia_PackedList QMediaRecorder_SupportedFrameRates(void* ptr, void* settings, char* continuous);
struct QtMultimedia_PackedList QMediaRecorder_SupportedResolutions(void* ptr, void* settings, char* continuous);
struct QtMultimedia_PackedString QMediaRecorder_SupportedVideoCodecs(void* ptr);
struct QtMultimedia_PackedString QMediaRecorder_VideoCodecDescription(void* ptr, struct QtMultimedia_PackedString codec);
void* QMediaRecorder_VideoSettings(void* ptr);
double QMediaRecorder_Volume(void* ptr);
void QMediaRecorder_ConnectVolumeChanged(void* ptr, long long t);
void QMediaRecorder_DisconnectVolumeChanged(void* ptr);
void QMediaRecorder_VolumeChanged(void* ptr, double volume);
void QMediaRecorder_DestroyQMediaRecorder(void* ptr);
void QMediaRecorder_DestroyQMediaRecorderDefault(void* ptr);
int QMediaRecorder___supportedAudioSampleRates_atList(void* ptr, int i);
void QMediaRecorder___supportedAudioSampleRates_setList(void* ptr, int i);
void* QMediaRecorder___supportedAudioSampleRates_newList(void* ptr);
double QMediaRecorder___supportedFrameRates_atList(void* ptr, int i);
void QMediaRecorder___supportedFrameRates_setList(void* ptr, double i);
void* QMediaRecorder___supportedFrameRates_newList(void* ptr);
void* QMediaRecorder___supportedResolutions_atList(void* ptr, int i);
void QMediaRecorder___supportedResolutions_setList(void* ptr, void* i);
void* QMediaRecorder___supportedResolutions_newList(void* ptr);
void* QMediaRecorder___children_atList(void* ptr, int i);
void QMediaRecorder___children_setList(void* ptr, void* i);
void* QMediaRecorder___children_newList(void* ptr);
void* QMediaRecorder___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaRecorder___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaRecorder___dynamicPropertyNames_newList(void* ptr);
void* QMediaRecorder___findChildren_atList(void* ptr, int i);
void QMediaRecorder___findChildren_setList(void* ptr, void* i);
void* QMediaRecorder___findChildren_newList(void* ptr);
void* QMediaRecorder___findChildren_atList3(void* ptr, int i);
void QMediaRecorder___findChildren_setList3(void* ptr, void* i);
void* QMediaRecorder___findChildren_newList3(void* ptr);
void QMediaRecorder_ChildEvent(void* ptr, void* event);
void QMediaRecorder_ChildEventDefault(void* ptr, void* event);
void QMediaRecorder_ConnectNotify(void* ptr, void* sign);
void QMediaRecorder_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaRecorder_CustomEvent(void* ptr, void* event);
void QMediaRecorder_CustomEventDefault(void* ptr, void* event);
void QMediaRecorder_DeleteLater(void* ptr);
void QMediaRecorder_DeleteLaterDefault(void* ptr);
void QMediaRecorder_DisconnectNotify(void* ptr, void* sign);
void QMediaRecorder_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaRecorder_Event(void* ptr, void* e);
char QMediaRecorder_EventDefault(void* ptr, void* e);
char QMediaRecorder_EventFilter(void* ptr, void* watched, void* event);
char QMediaRecorder_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaRecorder_MetaObject(void* ptr);
void* QMediaRecorder_MetaObjectDefault(void* ptr);
void QMediaRecorder_TimerEvent(void* ptr, void* event);
void QMediaRecorder_TimerEventDefault(void* ptr, void* event);
char QMediaRecorder_SetMediaObject(void* ptr, void* object);
char QMediaRecorder_SetMediaObjectDefault(void* ptr, void* object);
void* QMediaRecorderControl_NewQMediaRecorderControl(void* parent);
void QMediaRecorderControl_ConnectActualLocationChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectActualLocationChanged(void* ptr);
void QMediaRecorderControl_ActualLocationChanged(void* ptr, void* location);
void QMediaRecorderControl_ApplySettings(void* ptr);
long long QMediaRecorderControl_Duration(void* ptr);
void QMediaRecorderControl_ConnectDurationChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectDurationChanged(void* ptr);
void QMediaRecorderControl_DurationChanged(void* ptr, long long duration);
void QMediaRecorderControl_ConnectError(void* ptr, long long t);
void QMediaRecorderControl_DisconnectError(void* ptr);
void QMediaRecorderControl_Error(void* ptr, int error, struct QtMultimedia_PackedString errorString);
char QMediaRecorderControl_IsMuted(void* ptr);
void QMediaRecorderControl_ConnectMutedChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectMutedChanged(void* ptr);
void QMediaRecorderControl_MutedChanged(void* ptr, char muted);
void* QMediaRecorderControl_OutputLocation(void* ptr);
void QMediaRecorderControl_SetMuted(void* ptr, char muted);
char QMediaRecorderControl_SetOutputLocation(void* ptr, void* location);
void QMediaRecorderControl_SetState(void* ptr, long long state);
void QMediaRecorderControl_SetVolume(void* ptr, double volume);
long long QMediaRecorderControl_State(void* ptr);
void QMediaRecorderControl_ConnectStateChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectStateChanged(void* ptr);
void QMediaRecorderControl_StateChanged(void* ptr, long long state);
long long QMediaRecorderControl_Status(void* ptr);
void QMediaRecorderControl_ConnectStatusChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectStatusChanged(void* ptr);
void QMediaRecorderControl_StatusChanged(void* ptr, long long status);
double QMediaRecorderControl_Volume(void* ptr);
void QMediaRecorderControl_ConnectVolumeChanged(void* ptr, long long t);
void QMediaRecorderControl_DisconnectVolumeChanged(void* ptr);
void QMediaRecorderControl_VolumeChanged(void* ptr, double gain);
void QMediaRecorderControl_DestroyQMediaRecorderControl(void* ptr);
void QMediaRecorderControl_DestroyQMediaRecorderControlDefault(void* ptr);
void* QMediaResource_NewQMediaResource();
void* QMediaResource_NewQMediaResource2(void* url, struct QtMultimedia_PackedString mimeType);
void* QMediaResource_NewQMediaResource3(void* request, struct QtMultimedia_PackedString mimeType);
void* QMediaResource_NewQMediaResource4(void* other);
int QMediaResource_AudioBitRate(void* ptr);
struct QtMultimedia_PackedString QMediaResource_AudioCodec(void* ptr);
int QMediaResource_ChannelCount(void* ptr);
long long QMediaResource_DataSize(void* ptr);
char QMediaResource_IsNull(void* ptr);
struct QtMultimedia_PackedString QMediaResource_Language(void* ptr);
struct QtMultimedia_PackedString QMediaResource_MimeType(void* ptr);
void* QMediaResource_Request(void* ptr);
void* QMediaResource_Resolution(void* ptr);
int QMediaResource_SampleRate(void* ptr);
void QMediaResource_SetAudioBitRate(void* ptr, int rate);
void QMediaResource_SetAudioCodec(void* ptr, struct QtMultimedia_PackedString codec);
void QMediaResource_SetChannelCount(void* ptr, int channels);
void QMediaResource_SetDataSize(void* ptr, long long size);
void QMediaResource_SetLanguage(void* ptr, struct QtMultimedia_PackedString language);
void QMediaResource_SetResolution(void* ptr, void* resolution);
void QMediaResource_SetResolution2(void* ptr, int width, int height);
void QMediaResource_SetSampleRate(void* ptr, int sampleRate);
void QMediaResource_SetVideoBitRate(void* ptr, int rate);
void QMediaResource_SetVideoCodec(void* ptr, struct QtMultimedia_PackedString codec);
void* QMediaResource_Url(void* ptr);
int QMediaResource_VideoBitRate(void* ptr);
struct QtMultimedia_PackedString QMediaResource_VideoCodec(void* ptr);
void QMediaResource_DestroyQMediaResource(void* ptr);
void* QMediaResource___values_atList(void* ptr, int v, int i);
void QMediaResource___values_setList(void* ptr, int key, void* i);
void* QMediaResource___values_newList(void* ptr);
struct QtMultimedia_PackedList QMediaResource___values_keyList(void* ptr);
void* QMediaResource___setValues__atList(void* ptr, int v, int i);
void QMediaResource___setValues__setList(void* ptr, int key, void* i);
void* QMediaResource___setValues__newList(void* ptr);
struct QtMultimedia_PackedList QMediaResource___setValues__keyList(void* ptr);
int QMediaResource_____values_keyList_atList(void* ptr, int i);
void QMediaResource_____values_keyList_setList(void* ptr, int i);
void* QMediaResource_____values_keyList_newList(void* ptr);
int QMediaResource_____setValues__keyList_atList(void* ptr, int i);
void QMediaResource_____setValues__keyList_setList(void* ptr, int i);
void* QMediaResource_____setValues__keyList_newList(void* ptr);
void* QMediaService_NewQMediaService(void* parent);
void QMediaService_ReleaseControl(void* ptr, void* control);
void* QMediaService_RequestControl(void* ptr, char* interfa);
void* QMediaService_RequestControl2(void* ptr);
void QMediaService_DestroyQMediaService(void* ptr);
void QMediaService_DestroyQMediaServiceDefault(void* ptr);
void* QMediaService___children_atList(void* ptr, int i);
void QMediaService___children_setList(void* ptr, void* i);
void* QMediaService___children_newList(void* ptr);
void* QMediaService___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaService___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaService___dynamicPropertyNames_newList(void* ptr);
void* QMediaService___findChildren_atList(void* ptr, int i);
void QMediaService___findChildren_setList(void* ptr, void* i);
void* QMediaService___findChildren_newList(void* ptr);
void* QMediaService___findChildren_atList3(void* ptr, int i);
void QMediaService___findChildren_setList3(void* ptr, void* i);
void* QMediaService___findChildren_newList3(void* ptr);
void QMediaService_ChildEventDefault(void* ptr, void* event);
void QMediaService_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaService_CustomEventDefault(void* ptr, void* event);
void QMediaService_DeleteLaterDefault(void* ptr);
void QMediaService_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaService_EventDefault(void* ptr, void* e);
char QMediaService_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaService_MetaObjectDefault(void* ptr);
void QMediaService_TimerEventDefault(void* ptr, void* event);
int QMediaServiceCameraInfoInterface_CameraOrientation(void* ptr, void* device);
long long QMediaServiceCameraInfoInterface_CameraPosition(void* ptr, void* device);
void QMediaServiceCameraInfoInterface_DestroyQMediaServiceCameraInfoInterface(void* ptr);
void QMediaServiceCameraInfoInterface_DestroyQMediaServiceCameraInfoInterfaceDefault(void* ptr);
void* QMediaServiceDefaultDeviceInterface_DefaultDevice(void* ptr, void* service);
void QMediaServiceDefaultDeviceInterface_DestroyQMediaServiceDefaultDeviceInterface(void* ptr);
void QMediaServiceDefaultDeviceInterface_DestroyQMediaServiceDefaultDeviceInterfaceDefault(void* ptr);
void QMediaServiceFeaturesInterface_DestroyQMediaServiceFeaturesInterface(void* ptr);
void QMediaServiceFeaturesInterface_DestroyQMediaServiceFeaturesInterfaceDefault(void* ptr);
void* QMediaServiceProviderPlugin_Create(void* ptr, struct QtMultimedia_PackedString key);
void QMediaServiceProviderPlugin_Release(void* ptr, void* service);
void* QMediaServiceProviderPlugin___children_atList(void* ptr, int i);
void QMediaServiceProviderPlugin___children_setList(void* ptr, void* i);
void* QMediaServiceProviderPlugin___children_newList(void* ptr);
void* QMediaServiceProviderPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QMediaServiceProviderPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMediaServiceProviderPlugin___dynamicPropertyNames_newList(void* ptr);
void* QMediaServiceProviderPlugin___findChildren_atList(void* ptr, int i);
void QMediaServiceProviderPlugin___findChildren_setList(void* ptr, void* i);
void* QMediaServiceProviderPlugin___findChildren_newList(void* ptr);
void* QMediaServiceProviderPlugin___findChildren_atList3(void* ptr, int i);
void QMediaServiceProviderPlugin___findChildren_setList3(void* ptr, void* i);
void* QMediaServiceProviderPlugin___findChildren_newList3(void* ptr);
void QMediaServiceProviderPlugin_ChildEventDefault(void* ptr, void* event);
void QMediaServiceProviderPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QMediaServiceProviderPlugin_CustomEventDefault(void* ptr, void* event);
void QMediaServiceProviderPlugin_DeleteLaterDefault(void* ptr);
void QMediaServiceProviderPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
char QMediaServiceProviderPlugin_EventDefault(void* ptr, void* e);
char QMediaServiceProviderPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMediaServiceProviderPlugin_MetaObjectDefault(void* ptr);
void QMediaServiceProviderPlugin_TimerEventDefault(void* ptr, void* event);
struct QtMultimedia_PackedString QMediaServiceSupportedDevicesInterface_DeviceDescription(void* ptr, void* service, void* device);
struct QtMultimedia_PackedList QMediaServiceSupportedDevicesInterface_Devices(void* ptr, void* service);
void QMediaServiceSupportedDevicesInterface_DestroyQMediaServiceSupportedDevicesInterface(void* ptr);
void QMediaServiceSupportedDevicesInterface_DestroyQMediaServiceSupportedDevicesInterfaceDefault(void* ptr);
void* QMediaServiceSupportedDevicesInterface___devices_atList(void* ptr, int i);
void QMediaServiceSupportedDevicesInterface___devices_setList(void* ptr, void* i);
void* QMediaServiceSupportedDevicesInterface___devices_newList(void* ptr);
long long QMediaServiceSupportedFormatsInterface_HasSupport(void* ptr, struct QtMultimedia_PackedString mimeType, struct QtMultimedia_PackedString codecs);
struct QtMultimedia_PackedString QMediaServiceSupportedFormatsInterface_SupportedMimeTypes(void* ptr);
void QMediaServiceSupportedFormatsInterface_DestroyQMediaServiceSupportedFormatsInterface(void* ptr);
void QMediaServiceSupportedFormatsInterface_DestroyQMediaServiceSupportedFormatsInterfaceDefault(void* ptr);
void* QMediaStreamsControl_NewQMediaStreamsControl(void* parent);
void QMediaStreamsControl_ConnectActiveStreamsChanged(void* ptr, long long t);
void QMediaStreamsControl_DisconnectActiveStreamsChanged(void* ptr);
void QMediaStreamsControl_ActiveStreamsChanged(void* ptr);
char QMediaStreamsControl_IsActive(void* ptr, int streamNumber);
void* QMediaStreamsControl_MetaData(void* ptr, int streamNumber, struct QtMultimedia_PackedString key);
void QMediaStreamsControl_SetActive(void* ptr, int streamNumber, char state);
int QMediaStreamsControl_StreamCount(void* ptr);
long long QMediaStreamsControl_StreamType(void* ptr, int streamNumber);
void QMediaStreamsControl_ConnectStreamsChanged(void* ptr, long long t);
void QMediaStreamsControl_DisconnectStreamsChanged(void* ptr);
void QMediaStreamsControl_StreamsChanged(void* ptr);
void QMediaStreamsControl_DestroyQMediaStreamsControl(void* ptr);
void QMediaStreamsControl_DestroyQMediaStreamsControlDefault(void* ptr);
void* QMediaTimeInterval_NewQMediaTimeInterval();
void* QMediaTimeInterval_NewQMediaTimeInterval2(long long start, long long end);
void* QMediaTimeInterval_NewQMediaTimeInterval3(void* other);
char QMediaTimeInterval_Contains(void* ptr, long long ti);
long long QMediaTimeInterval_End(void* ptr);
char QMediaTimeInterval_IsNormal(void* ptr);
void* QMediaTimeInterval_Normalized(void* ptr);
long long QMediaTimeInterval_Start(void* ptr);
void* QMediaTimeInterval_Translated(void* ptr, long long offset);
void* QMediaTimeRange_NewQMediaTimeRange();
void* QMediaTimeRange_NewQMediaTimeRange2(long long start, long long end);
void* QMediaTimeRange_NewQMediaTimeRange3(void* interval);
void* QMediaTimeRange_NewQMediaTimeRange4(void* ran);
void QMediaTimeRange_AddInterval(void* ptr, void* interval);
void QMediaTimeRange_AddInterval2(void* ptr, long long start, long long end);
void QMediaTimeRange_AddTimeRange(void* ptr, void* ran);
void QMediaTimeRange_Clear(void* ptr);
char QMediaTimeRange_Contains(void* ptr, long long ti);
long long QMediaTimeRange_EarliestTime(void* ptr);
struct QtMultimedia_PackedList QMediaTimeRange_Intervals(void* ptr);
char QMediaTimeRange_IsContinuous(void* ptr);
char QMediaTimeRange_IsEmpty(void* ptr);
long long QMediaTimeRange_LatestTime(void* ptr);
void QMediaTimeRange_RemoveInterval(void* ptr, void* interval);
void QMediaTimeRange_RemoveInterval2(void* ptr, long long start, long long end);
void QMediaTimeRange_RemoveTimeRange(void* ptr, void* ran);
void QMediaTimeRange_DestroyQMediaTimeRange(void* ptr);
void* QMediaTimeRange___intervals_atList(void* ptr, int i);
void QMediaTimeRange___intervals_setList(void* ptr, void* i);
void* QMediaTimeRange___intervals_newList(void* ptr);
void* QMediaVideoProbeControl_NewQMediaVideoProbeControl(void* parent);
void QMediaVideoProbeControl_ConnectFlush(void* ptr, long long t);
void QMediaVideoProbeControl_DisconnectFlush(void* ptr);
void QMediaVideoProbeControl_Flush(void* ptr);
void QMediaVideoProbeControl_ConnectVideoFrameProbed(void* ptr, long long t);
void QMediaVideoProbeControl_DisconnectVideoFrameProbed(void* ptr);
void QMediaVideoProbeControl_VideoFrameProbed(void* ptr, void* frame);
void QMediaVideoProbeControl_DestroyQMediaVideoProbeControl(void* ptr);
void QMediaVideoProbeControl_DestroyQMediaVideoProbeControlDefault(void* ptr);
void* QMetaDataReaderControl_NewQMetaDataReaderControl(void* parent);
struct QtMultimedia_PackedString QMetaDataReaderControl_AvailableMetaData(void* ptr);
char QMetaDataReaderControl_IsMetaDataAvailable(void* ptr);
void* QMetaDataReaderControl_MetaData(void* ptr, struct QtMultimedia_PackedString key);
void QMetaDataReaderControl_ConnectMetaDataAvailableChanged(void* ptr, long long t);
void QMetaDataReaderControl_DisconnectMetaDataAvailableChanged(void* ptr);
void QMetaDataReaderControl_MetaDataAvailableChanged(void* ptr, char available);
void QMetaDataReaderControl_ConnectMetaDataChanged(void* ptr, long long t);
void QMetaDataReaderControl_DisconnectMetaDataChanged(void* ptr);
void QMetaDataReaderControl_MetaDataChanged(void* ptr);
void QMetaDataReaderControl_ConnectMetaDataChanged2(void* ptr, long long t);
void QMetaDataReaderControl_DisconnectMetaDataChanged2(void* ptr);
void QMetaDataReaderControl_MetaDataChanged2(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QMetaDataReaderControl_DestroyQMetaDataReaderControl(void* ptr);
void QMetaDataReaderControl_DestroyQMetaDataReaderControlDefault(void* ptr);
void* QMetaDataWriterControl_NewQMetaDataWriterControl(void* parent);
struct QtMultimedia_PackedString QMetaDataWriterControl_AvailableMetaData(void* ptr);
char QMetaDataWriterControl_IsMetaDataAvailable(void* ptr);
char QMetaDataWriterControl_IsWritable(void* ptr);
void* QMetaDataWriterControl_MetaData(void* ptr, struct QtMultimedia_PackedString key);
void QMetaDataWriterControl_ConnectMetaDataAvailableChanged(void* ptr, long long t);
void QMetaDataWriterControl_DisconnectMetaDataAvailableChanged(void* ptr);
void QMetaDataWriterControl_MetaDataAvailableChanged(void* ptr, char available);
void QMetaDataWriterControl_ConnectMetaDataChanged(void* ptr, long long t);
void QMetaDataWriterControl_DisconnectMetaDataChanged(void* ptr);
void QMetaDataWriterControl_MetaDataChanged(void* ptr);
void QMetaDataWriterControl_ConnectMetaDataChanged2(void* ptr, long long t);
void QMetaDataWriterControl_DisconnectMetaDataChanged2(void* ptr);
void QMetaDataWriterControl_MetaDataChanged2(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QMetaDataWriterControl_SetMetaData(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QMetaDataWriterControl_ConnectWritableChanged(void* ptr, long long t);
void QMetaDataWriterControl_DisconnectWritableChanged(void* ptr);
void QMetaDataWriterControl_WritableChanged(void* ptr, char writable);
void QMetaDataWriterControl_DestroyQMetaDataWriterControl(void* ptr);
void QMetaDataWriterControl_DestroyQMetaDataWriterControlDefault(void* ptr);
void* QRadioData_NewQRadioData(void* mediaObject, void* parent);
void QRadioData_ConnectAlternativeFrequenciesEnabledChanged(void* ptr, long long t);
void QRadioData_DisconnectAlternativeFrequenciesEnabledChanged(void* ptr);
void QRadioData_AlternativeFrequenciesEnabledChanged(void* ptr, char enabled);
long long QRadioData_Availability(void* ptr);
long long QRadioData_Error(void* ptr);
void QRadioData_ConnectError2(void* ptr, long long t);
void QRadioData_DisconnectError2(void* ptr);
void QRadioData_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QRadioData_ErrorString(void* ptr);
char QRadioData_IsAlternativeFrequenciesEnabled(void* ptr);
void* QRadioData_MediaObject(void* ptr);
void* QRadioData_MediaObjectDefault(void* ptr);
long long QRadioData_ProgramType(void* ptr);
void QRadioData_ConnectProgramTypeChanged(void* ptr, long long t);
void QRadioData_DisconnectProgramTypeChanged(void* ptr);
void QRadioData_ProgramTypeChanged(void* ptr, long long programType);
struct QtMultimedia_PackedString QRadioData_ProgramTypeName(void* ptr);
void QRadioData_ConnectProgramTypeNameChanged(void* ptr, long long t);
void QRadioData_DisconnectProgramTypeNameChanged(void* ptr);
void QRadioData_ProgramTypeNameChanged(void* ptr, struct QtMultimedia_PackedString programTypeName);
struct QtMultimedia_PackedString QRadioData_RadioText(void* ptr);
void QRadioData_ConnectRadioTextChanged(void* ptr, long long t);
void QRadioData_DisconnectRadioTextChanged(void* ptr);
void QRadioData_RadioTextChanged(void* ptr, struct QtMultimedia_PackedString radioText);
void QRadioData_SetAlternativeFrequenciesEnabled(void* ptr, char enabled);
void QRadioData_SetAlternativeFrequenciesEnabledDefault(void* ptr, char enabled);
char QRadioData_SetMediaObject(void* ptr, void* mediaObject);
char QRadioData_SetMediaObjectDefault(void* ptr, void* mediaObject);
struct QtMultimedia_PackedString QRadioData_StationId(void* ptr);
void QRadioData_ConnectStationIdChanged(void* ptr, long long t);
void QRadioData_DisconnectStationIdChanged(void* ptr);
void QRadioData_StationIdChanged(void* ptr, struct QtMultimedia_PackedString stationId);
struct QtMultimedia_PackedString QRadioData_StationName(void* ptr);
void QRadioData_ConnectStationNameChanged(void* ptr, long long t);
void QRadioData_DisconnectStationNameChanged(void* ptr);
void QRadioData_StationNameChanged(void* ptr, struct QtMultimedia_PackedString stationName);
void QRadioData_DestroyQRadioData(void* ptr);
void QRadioData_DestroyQRadioDataDefault(void* ptr);
void* QRadioData___children_atList(void* ptr, int i);
void QRadioData___children_setList(void* ptr, void* i);
void* QRadioData___children_newList(void* ptr);
void* QRadioData___dynamicPropertyNames_atList(void* ptr, int i);
void QRadioData___dynamicPropertyNames_setList(void* ptr, void* i);
void* QRadioData___dynamicPropertyNames_newList(void* ptr);
void* QRadioData___findChildren_atList(void* ptr, int i);
void QRadioData___findChildren_setList(void* ptr, void* i);
void* QRadioData___findChildren_newList(void* ptr);
void* QRadioData___findChildren_atList3(void* ptr, int i);
void QRadioData___findChildren_setList3(void* ptr, void* i);
void* QRadioData___findChildren_newList3(void* ptr);
void QRadioData_ChildEvent(void* ptr, void* event);
void QRadioData_ChildEventDefault(void* ptr, void* event);
void QRadioData_ConnectNotify(void* ptr, void* sign);
void QRadioData_ConnectNotifyDefault(void* ptr, void* sign);
void QRadioData_CustomEvent(void* ptr, void* event);
void QRadioData_CustomEventDefault(void* ptr, void* event);
void QRadioData_DeleteLater(void* ptr);
void QRadioData_DeleteLaterDefault(void* ptr);
void QRadioData_DisconnectNotify(void* ptr, void* sign);
void QRadioData_DisconnectNotifyDefault(void* ptr, void* sign);
char QRadioData_Event(void* ptr, void* e);
char QRadioData_EventDefault(void* ptr, void* e);
char QRadioData_EventFilter(void* ptr, void* watched, void* event);
char QRadioData_EventFilterDefault(void* ptr, void* watched, void* event);
void* QRadioData_MetaObject(void* ptr);
void* QRadioData_MetaObjectDefault(void* ptr);
void QRadioData_TimerEvent(void* ptr, void* event);
void QRadioData_TimerEventDefault(void* ptr, void* event);
void* QRadioDataControl_NewQRadioDataControl(void* parent);
void QRadioDataControl_ConnectAlternativeFrequenciesEnabledChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectAlternativeFrequenciesEnabledChanged(void* ptr);
void QRadioDataControl_AlternativeFrequenciesEnabledChanged(void* ptr, char enabled);
long long QRadioDataControl_Error(void* ptr);
void QRadioDataControl_ConnectError2(void* ptr, long long t);
void QRadioDataControl_DisconnectError2(void* ptr);
void QRadioDataControl_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QRadioDataControl_ErrorString(void* ptr);
char QRadioDataControl_IsAlternativeFrequenciesEnabled(void* ptr);
long long QRadioDataControl_ProgramType(void* ptr);
void QRadioDataControl_ConnectProgramTypeChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectProgramTypeChanged(void* ptr);
void QRadioDataControl_ProgramTypeChanged(void* ptr, long long programType);
struct QtMultimedia_PackedString QRadioDataControl_ProgramTypeName(void* ptr);
void QRadioDataControl_ConnectProgramTypeNameChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectProgramTypeNameChanged(void* ptr);
void QRadioDataControl_ProgramTypeNameChanged(void* ptr, struct QtMultimedia_PackedString programTypeName);
struct QtMultimedia_PackedString QRadioDataControl_RadioText(void* ptr);
void QRadioDataControl_ConnectRadioTextChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectRadioTextChanged(void* ptr);
void QRadioDataControl_RadioTextChanged(void* ptr, struct QtMultimedia_PackedString radioText);
void QRadioDataControl_SetAlternativeFrequenciesEnabled(void* ptr, char enabled);
struct QtMultimedia_PackedString QRadioDataControl_StationId(void* ptr);
void QRadioDataControl_ConnectStationIdChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectStationIdChanged(void* ptr);
void QRadioDataControl_StationIdChanged(void* ptr, struct QtMultimedia_PackedString stationId);
struct QtMultimedia_PackedString QRadioDataControl_StationName(void* ptr);
void QRadioDataControl_ConnectStationNameChanged(void* ptr, long long t);
void QRadioDataControl_DisconnectStationNameChanged(void* ptr);
void QRadioDataControl_StationNameChanged(void* ptr, struct QtMultimedia_PackedString stationName);
void QRadioDataControl_DestroyQRadioDataControl(void* ptr);
void QRadioDataControl_DestroyQRadioDataControlDefault(void* ptr);
void* QRadioTuner_NewQRadioTuner(void* parent);
void QRadioTuner_ConnectAntennaConnectedChanged(void* ptr, long long t);
void QRadioTuner_DisconnectAntennaConnectedChanged(void* ptr);
void QRadioTuner_AntennaConnectedChanged(void* ptr, char connectionStatus);
long long QRadioTuner_Band(void* ptr);
void QRadioTuner_ConnectBandChanged(void* ptr, long long t);
void QRadioTuner_DisconnectBandChanged(void* ptr);
void QRadioTuner_BandChanged(void* ptr, long long band);
void QRadioTuner_CancelSearch(void* ptr);
void QRadioTuner_CancelSearchDefault(void* ptr);
long long QRadioTuner_Error(void* ptr);
void QRadioTuner_ConnectError2(void* ptr, long long t);
void QRadioTuner_DisconnectError2(void* ptr);
void QRadioTuner_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QRadioTuner_ErrorString(void* ptr);
int QRadioTuner_Frequency(void* ptr);
void QRadioTuner_ConnectFrequencyChanged(void* ptr, long long t);
void QRadioTuner_DisconnectFrequencyChanged(void* ptr);
void QRadioTuner_FrequencyChanged(void* ptr, int frequency);
int QRadioTuner_FrequencyStep(void* ptr, long long band);
char QRadioTuner_IsAntennaConnected(void* ptr);
char QRadioTuner_IsBandSupported(void* ptr, long long band);
char QRadioTuner_IsMuted(void* ptr);
char QRadioTuner_IsSearching(void* ptr);
char QRadioTuner_IsStereo(void* ptr);
void QRadioTuner_ConnectMutedChanged(void* ptr, long long t);
void QRadioTuner_DisconnectMutedChanged(void* ptr);
void QRadioTuner_MutedChanged(void* ptr, char muted);
void* QRadioTuner_RadioData(void* ptr);
void QRadioTuner_SearchAllStations(void* ptr, long long searchMode);
void QRadioTuner_SearchAllStationsDefault(void* ptr, long long searchMode);
void QRadioTuner_SearchBackward(void* ptr);
void QRadioTuner_SearchBackwardDefault(void* ptr);
void QRadioTuner_SearchForward(void* ptr);
void QRadioTuner_SearchForwardDefault(void* ptr);
void QRadioTuner_ConnectSearchingChanged(void* ptr, long long t);
void QRadioTuner_DisconnectSearchingChanged(void* ptr);
void QRadioTuner_SearchingChanged(void* ptr, char searching);
void QRadioTuner_SetBand(void* ptr, long long band);
void QRadioTuner_SetBandDefault(void* ptr, long long band);
void QRadioTuner_SetFrequency(void* ptr, int frequency);
void QRadioTuner_SetFrequencyDefault(void* ptr, int frequency);
void QRadioTuner_SetMuted(void* ptr, char muted);
void QRadioTuner_SetMutedDefault(void* ptr, char muted);
void QRadioTuner_SetStereoMode(void* ptr, long long mode);
void QRadioTuner_SetVolume(void* ptr, int volume);
void QRadioTuner_SetVolumeDefault(void* ptr, int volume);
int QRadioTuner_SignalStrength(void* ptr);
void QRadioTuner_ConnectSignalStrengthChanged(void* ptr, long long t);
void QRadioTuner_DisconnectSignalStrengthChanged(void* ptr);
void QRadioTuner_SignalStrengthChanged(void* ptr, int strength);
void QRadioTuner_Start(void* ptr);
void QRadioTuner_StartDefault(void* ptr);
long long QRadioTuner_State(void* ptr);
void QRadioTuner_ConnectStateChanged(void* ptr, long long t);
void QRadioTuner_DisconnectStateChanged(void* ptr);
void QRadioTuner_StateChanged(void* ptr, long long state);
void QRadioTuner_ConnectStationFound(void* ptr, long long t);
void QRadioTuner_DisconnectStationFound(void* ptr);
void QRadioTuner_StationFound(void* ptr, int frequency, struct QtMultimedia_PackedString stationId);
long long QRadioTuner_StereoMode(void* ptr);
void QRadioTuner_ConnectStereoStatusChanged(void* ptr, long long t);
void QRadioTuner_DisconnectStereoStatusChanged(void* ptr);
void QRadioTuner_StereoStatusChanged(void* ptr, char stereo);
void QRadioTuner_Stop(void* ptr);
void QRadioTuner_StopDefault(void* ptr);
int QRadioTuner_Volume(void* ptr);
void QRadioTuner_ConnectVolumeChanged(void* ptr, long long t);
void QRadioTuner_DisconnectVolumeChanged(void* ptr);
void QRadioTuner_VolumeChanged(void* ptr, int volume);
void QRadioTuner_DestroyQRadioTuner(void* ptr);
void QRadioTuner_DestroyQRadioTunerDefault(void* ptr);
void QRadioTunerControl_ConnectAntennaConnectedChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectAntennaConnectedChanged(void* ptr);
void QRadioTunerControl_AntennaConnectedChanged(void* ptr, char connectionStatus);
long long QRadioTunerControl_Band(void* ptr);
void QRadioTunerControl_ConnectBandChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectBandChanged(void* ptr);
void QRadioTunerControl_BandChanged(void* ptr, long long band);
void QRadioTunerControl_CancelSearch(void* ptr);
long long QRadioTunerControl_Error(void* ptr);
void QRadioTunerControl_ConnectError2(void* ptr, long long t);
void QRadioTunerControl_DisconnectError2(void* ptr);
void QRadioTunerControl_Error2(void* ptr, long long error);
struct QtMultimedia_PackedString QRadioTunerControl_ErrorString(void* ptr);
int QRadioTunerControl_Frequency(void* ptr);
void QRadioTunerControl_ConnectFrequencyChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectFrequencyChanged(void* ptr);
void QRadioTunerControl_FrequencyChanged(void* ptr, int frequency);
int QRadioTunerControl_FrequencyStep(void* ptr, long long band);
char QRadioTunerControl_IsAntennaConnected(void* ptr);
char QRadioTunerControl_IsAntennaConnectedDefault(void* ptr);
char QRadioTunerControl_IsBandSupported(void* ptr, long long band);
char QRadioTunerControl_IsMuted(void* ptr);
char QRadioTunerControl_IsSearching(void* ptr);
char QRadioTunerControl_IsStereo(void* ptr);
void QRadioTunerControl_ConnectMutedChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectMutedChanged(void* ptr);
void QRadioTunerControl_MutedChanged(void* ptr, char muted);
void QRadioTunerControl_SearchAllStations(void* ptr, long long searchMode);
void QRadioTunerControl_SearchBackward(void* ptr);
void QRadioTunerControl_SearchForward(void* ptr);
void QRadioTunerControl_ConnectSearchingChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectSearchingChanged(void* ptr);
void QRadioTunerControl_SearchingChanged(void* ptr, char searching);
void QRadioTunerControl_SetBand(void* ptr, long long band);
void QRadioTunerControl_SetFrequency(void* ptr, int frequency);
void QRadioTunerControl_SetMuted(void* ptr, char muted);
void QRadioTunerControl_SetStereoMode(void* ptr, long long mode);
void QRadioTunerControl_SetVolume(void* ptr, int volume);
int QRadioTunerControl_SignalStrength(void* ptr);
void QRadioTunerControl_ConnectSignalStrengthChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectSignalStrengthChanged(void* ptr);
void QRadioTunerControl_SignalStrengthChanged(void* ptr, int strength);
void QRadioTunerControl_Start(void* ptr);
long long QRadioTunerControl_State(void* ptr);
void QRadioTunerControl_ConnectStateChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectStateChanged(void* ptr);
void QRadioTunerControl_StateChanged(void* ptr, long long state);
void QRadioTunerControl_ConnectStationFound(void* ptr, long long t);
void QRadioTunerControl_DisconnectStationFound(void* ptr);
void QRadioTunerControl_StationFound(void* ptr, int frequency, struct QtMultimedia_PackedString stationId);
long long QRadioTunerControl_StereoMode(void* ptr);
void QRadioTunerControl_ConnectStereoStatusChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectStereoStatusChanged(void* ptr);
void QRadioTunerControl_StereoStatusChanged(void* ptr, char stereo);
void QRadioTunerControl_Stop(void* ptr);
int QRadioTunerControl_Volume(void* ptr);
void QRadioTunerControl_ConnectVolumeChanged(void* ptr, long long t);
void QRadioTunerControl_DisconnectVolumeChanged(void* ptr);
void QRadioTunerControl_VolumeChanged(void* ptr, int volume);
void QRadioTunerControl_DestroyQRadioTunerControl(void* ptr);
void QRadioTunerControl_DestroyQRadioTunerControlDefault(void* ptr);
void* QSound_NewQSound(struct QtMultimedia_PackedString filename, void* parent);
struct QtMultimedia_PackedString QSound_FileName(void* ptr);
char QSound_IsFinished(void* ptr);
int QSound_Loops(void* ptr);
int QSound_LoopsRemaining(void* ptr);
void QSound_QSound_Play(struct QtMultimedia_PackedString filename);
void QSound_Play2(void* ptr);
void QSound_Play2Default(void* ptr);
void QSound_SetLoops(void* ptr, int number);
void QSound_Stop(void* ptr);
void QSound_StopDefault(void* ptr);
void QSound_DestroyQSound(void* ptr);
void QSound_DestroyQSoundDefault(void* ptr);
void* QSound___children_atList(void* ptr, int i);
void QSound___children_setList(void* ptr, void* i);
void* QSound___children_newList(void* ptr);
void* QSound___dynamicPropertyNames_atList(void* ptr, int i);
void QSound___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSound___dynamicPropertyNames_newList(void* ptr);
void* QSound___findChildren_atList(void* ptr, int i);
void QSound___findChildren_setList(void* ptr, void* i);
void* QSound___findChildren_newList(void* ptr);
void* QSound___findChildren_atList3(void* ptr, int i);
void QSound___findChildren_setList3(void* ptr, void* i);
void* QSound___findChildren_newList3(void* ptr);
void QSound_ChildEventDefault(void* ptr, void* event);
void QSound_ConnectNotifyDefault(void* ptr, void* sign);
void QSound_CustomEventDefault(void* ptr, void* event);
void QSound_DeleteLaterDefault(void* ptr);
void QSound_DisconnectNotifyDefault(void* ptr, void* sign);
char QSound_EventDefault(void* ptr, void* e);
char QSound_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSound_MetaObjectDefault(void* ptr);
void QSound_TimerEventDefault(void* ptr, void* event);
void* QSoundEffect_NewQSoundEffect(void* parent);
void* QSoundEffect_NewQSoundEffect2(void* audioDevice, void* parent);
struct QtMultimedia_PackedString QSoundEffect_Category(void* ptr);
void QSoundEffect_ConnectCategoryChanged(void* ptr, long long t);
void QSoundEffect_DisconnectCategoryChanged(void* ptr);
void QSoundEffect_CategoryChanged(void* ptr);
char QSoundEffect_IsLoaded(void* ptr);
char QSoundEffect_IsMuted(void* ptr);
char QSoundEffect_IsPlaying(void* ptr);
void QSoundEffect_ConnectLoadedChanged(void* ptr, long long t);
void QSoundEffect_DisconnectLoadedChanged(void* ptr);
void QSoundEffect_LoadedChanged(void* ptr);
int QSoundEffect_LoopCount(void* ptr);
void QSoundEffect_ConnectLoopCountChanged(void* ptr, long long t);
void QSoundEffect_DisconnectLoopCountChanged(void* ptr);
void QSoundEffect_LoopCountChanged(void* ptr);
int QSoundEffect_LoopsRemaining(void* ptr);
void QSoundEffect_ConnectLoopsRemainingChanged(void* ptr, long long t);
void QSoundEffect_DisconnectLoopsRemainingChanged(void* ptr);
void QSoundEffect_LoopsRemainingChanged(void* ptr);
void QSoundEffect_ConnectMutedChanged(void* ptr, long long t);
void QSoundEffect_DisconnectMutedChanged(void* ptr);
void QSoundEffect_MutedChanged(void* ptr);
void QSoundEffect_Play(void* ptr);
void QSoundEffect_PlayDefault(void* ptr);
void QSoundEffect_ConnectPlayingChanged(void* ptr, long long t);
void QSoundEffect_DisconnectPlayingChanged(void* ptr);
void QSoundEffect_PlayingChanged(void* ptr);
void QSoundEffect_SetCategory(void* ptr, struct QtMultimedia_PackedString category);
void QSoundEffect_SetLoopCount(void* ptr, int loopCount);
void QSoundEffect_SetMuted(void* ptr, char muted);
void QSoundEffect_SetSource(void* ptr, void* url);
void QSoundEffect_SetVolume(void* ptr, double volume);
void* QSoundEffect_Source(void* ptr);
void QSoundEffect_ConnectSourceChanged(void* ptr, long long t);
void QSoundEffect_DisconnectSourceChanged(void* ptr);
void QSoundEffect_SourceChanged(void* ptr);
long long QSoundEffect_Status(void* ptr);
void QSoundEffect_ConnectStatusChanged(void* ptr, long long t);
void QSoundEffect_DisconnectStatusChanged(void* ptr);
void QSoundEffect_StatusChanged(void* ptr);
void QSoundEffect_Stop(void* ptr);
void QSoundEffect_StopDefault(void* ptr);
struct QtMultimedia_PackedString QSoundEffect_QSoundEffect_SupportedMimeTypes();
double QSoundEffect_Volume(void* ptr);
void QSoundEffect_ConnectVolumeChanged(void* ptr, long long t);
void QSoundEffect_DisconnectVolumeChanged(void* ptr);
void QSoundEffect_VolumeChanged(void* ptr);
void QSoundEffect_DestroyQSoundEffect(void* ptr);
void QSoundEffect_DestroyQSoundEffectDefault(void* ptr);
void* QSoundEffect___children_atList(void* ptr, int i);
void QSoundEffect___children_setList(void* ptr, void* i);
void* QSoundEffect___children_newList(void* ptr);
void* QSoundEffect___dynamicPropertyNames_atList(void* ptr, int i);
void QSoundEffect___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSoundEffect___dynamicPropertyNames_newList(void* ptr);
void* QSoundEffect___findChildren_atList(void* ptr, int i);
void QSoundEffect___findChildren_setList(void* ptr, void* i);
void* QSoundEffect___findChildren_newList(void* ptr);
void* QSoundEffect___findChildren_atList3(void* ptr, int i);
void QSoundEffect___findChildren_setList3(void* ptr, void* i);
void* QSoundEffect___findChildren_newList3(void* ptr);
void QSoundEffect_ChildEventDefault(void* ptr, void* event);
void QSoundEffect_ConnectNotifyDefault(void* ptr, void* sign);
void QSoundEffect_CustomEventDefault(void* ptr, void* event);
void QSoundEffect_DeleteLaterDefault(void* ptr);
void QSoundEffect_DisconnectNotifyDefault(void* ptr, void* sign);
char QSoundEffect_EventDefault(void* ptr, void* e);
char QSoundEffect_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSoundEffect_MetaObjectDefault(void* ptr);
void QSoundEffect_TimerEventDefault(void* ptr, void* event);
void* QVideoDeviceSelectorControl_NewQVideoDeviceSelectorControl(void* parent);
int QVideoDeviceSelectorControl_DefaultDevice(void* ptr);
int QVideoDeviceSelectorControl_DeviceCount(void* ptr);
struct QtMultimedia_PackedString QVideoDeviceSelectorControl_DeviceDescription(void* ptr, int index);
struct QtMultimedia_PackedString QVideoDeviceSelectorControl_DeviceName(void* ptr, int index);
void QVideoDeviceSelectorControl_ConnectDevicesChanged(void* ptr, long long t);
void QVideoDeviceSelectorControl_DisconnectDevicesChanged(void* ptr);
void QVideoDeviceSelectorControl_DevicesChanged(void* ptr);
int QVideoDeviceSelectorControl_SelectedDevice(void* ptr);
void QVideoDeviceSelectorControl_ConnectSelectedDeviceChanged(void* ptr, long long t);
void QVideoDeviceSelectorControl_DisconnectSelectedDeviceChanged(void* ptr);
void QVideoDeviceSelectorControl_SelectedDeviceChanged(void* ptr, int index);
void QVideoDeviceSelectorControl_ConnectSelectedDeviceChanged2(void* ptr, long long t);
void QVideoDeviceSelectorControl_DisconnectSelectedDeviceChanged2(void* ptr);
void QVideoDeviceSelectorControl_SelectedDeviceChanged2(void* ptr, struct QtMultimedia_PackedString name);
void QVideoDeviceSelectorControl_SetSelectedDevice(void* ptr, int index);
void QVideoDeviceSelectorControl_DestroyQVideoDeviceSelectorControl(void* ptr);
void QVideoDeviceSelectorControl_DestroyQVideoDeviceSelectorControlDefault(void* ptr);
void* QVideoEncoderSettings_NewQVideoEncoderSettings();
void* QVideoEncoderSettings_NewQVideoEncoderSettings2(void* other);
int QVideoEncoderSettings_BitRate(void* ptr);
struct QtMultimedia_PackedString QVideoEncoderSettings_Codec(void* ptr);
long long QVideoEncoderSettings_EncodingMode(void* ptr);
void* QVideoEncoderSettings_EncodingOption(void* ptr, struct QtMultimedia_PackedString option);
struct QtMultimedia_PackedList QVideoEncoderSettings_EncodingOptions(void* ptr);
double QVideoEncoderSettings_FrameRate(void* ptr);
char QVideoEncoderSettings_IsNull(void* ptr);
long long QVideoEncoderSettings_Quality(void* ptr);
void* QVideoEncoderSettings_Resolution(void* ptr);
void QVideoEncoderSettings_SetBitRate(void* ptr, int value);
void QVideoEncoderSettings_SetCodec(void* ptr, struct QtMultimedia_PackedString codec);
void QVideoEncoderSettings_SetEncodingMode(void* ptr, long long mode);
void QVideoEncoderSettings_SetEncodingOption(void* ptr, struct QtMultimedia_PackedString option, void* value);
void QVideoEncoderSettings_SetEncodingOptions(void* ptr, void* options);
void QVideoEncoderSettings_SetFrameRate(void* ptr, double rate);
void QVideoEncoderSettings_SetQuality(void* ptr, long long quality);
void QVideoEncoderSettings_SetResolution(void* ptr, void* resolution);
void QVideoEncoderSettings_SetResolution2(void* ptr, int width, int height);
void QVideoEncoderSettings_DestroyQVideoEncoderSettings(void* ptr);
void* QVideoEncoderSettings___encodingOptions_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QVideoEncoderSettings___encodingOptions_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QVideoEncoderSettings___encodingOptions_newList(void* ptr);
struct QtMultimedia_PackedList QVideoEncoderSettings___encodingOptions_keyList(void* ptr);
void* QVideoEncoderSettings___setEncodingOptions_options_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QVideoEncoderSettings___setEncodingOptions_options_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QVideoEncoderSettings___setEncodingOptions_options_newList(void* ptr);
struct QtMultimedia_PackedList QVideoEncoderSettings___setEncodingOptions_options_keyList(void* ptr);
struct QtMultimedia_PackedString QVideoEncoderSettings_____encodingOptions_keyList_atList(void* ptr, int i);
void QVideoEncoderSettings_____encodingOptions_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QVideoEncoderSettings_____encodingOptions_keyList_newList(void* ptr);
struct QtMultimedia_PackedString QVideoEncoderSettings_____setEncodingOptions_options_keyList_atList(void* ptr, int i);
void QVideoEncoderSettings_____setEncodingOptions_options_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QVideoEncoderSettings_____setEncodingOptions_options_keyList_newList(void* ptr);
void* QVideoEncoderSettingsControl_NewQVideoEncoderSettingsControl(void* parent);
void QVideoEncoderSettingsControl_SetVideoSettings(void* ptr, void* settings);
struct QtMultimedia_PackedList QVideoEncoderSettingsControl_SupportedFrameRates(void* ptr, void* settings, char* continuous);
struct QtMultimedia_PackedList QVideoEncoderSettingsControl_SupportedResolutions(void* ptr, void* settings, char* continuous);
struct QtMultimedia_PackedString QVideoEncoderSettingsControl_SupportedVideoCodecs(void* ptr);
struct QtMultimedia_PackedString QVideoEncoderSettingsControl_VideoCodecDescription(void* ptr, struct QtMultimedia_PackedString codec);
void* QVideoEncoderSettingsControl_VideoSettings(void* ptr);
void QVideoEncoderSettingsControl_DestroyQVideoEncoderSettingsControl(void* ptr);
void QVideoEncoderSettingsControl_DestroyQVideoEncoderSettingsControlDefault(void* ptr);
double QVideoEncoderSettingsControl___supportedFrameRates_atList(void* ptr, int i);
void QVideoEncoderSettingsControl___supportedFrameRates_setList(void* ptr, double i);
void* QVideoEncoderSettingsControl___supportedFrameRates_newList(void* ptr);
void* QVideoEncoderSettingsControl___supportedResolutions_atList(void* ptr, int i);
void QVideoEncoderSettingsControl___supportedResolutions_setList(void* ptr, void* i);
void* QVideoEncoderSettingsControl___supportedResolutions_newList(void* ptr);
void* QVideoFilterRunnable_Run(void* ptr, void* input, void* surfaceFormat, long long flags);
void* QVideoFrame_NewQVideoFrame();
void* QVideoFrame_NewQVideoFrame2(void* buffer, void* size, long long format);
void* QVideoFrame_NewQVideoFrame3(int bytes, void* size, int bytesPerLine, long long format);
void* QVideoFrame_NewQVideoFrame4(void* image);
void* QVideoFrame_NewQVideoFrame5(void* other);
struct QtMultimedia_PackedList QVideoFrame_AvailableMetaData(void* ptr);
struct QtMultimedia_PackedString QVideoFrame_Bits(void* ptr);
struct QtMultimedia_PackedString QVideoFrame_Bits2(void* ptr, int plane);
struct QtMultimedia_PackedString QVideoFrame_Bits3(void* ptr);
struct QtMultimedia_PackedString QVideoFrame_Bits4(void* ptr, int plane);
void* QVideoFrame_Buffer(void* ptr);
int QVideoFrame_BytesPerLine(void* ptr);
int QVideoFrame_BytesPerLine2(void* ptr, int plane);
long long QVideoFrame_EndTime(void* ptr);
long long QVideoFrame_FieldType(void* ptr);
void* QVideoFrame_Handle(void* ptr);
long long QVideoFrame_HandleType(void* ptr);
int QVideoFrame_Height(void* ptr);
void* QVideoFrame_Image(void* ptr);
long long QVideoFrame_QVideoFrame_ImageFormatFromPixelFormat(long long format);
char QVideoFrame_IsMapped(void* ptr);
char QVideoFrame_IsReadable(void* ptr);
char QVideoFrame_IsValid(void* ptr);
char QVideoFrame_IsWritable(void* ptr);
char QVideoFrame_Map(void* ptr, long long mode);
long long QVideoFrame_MapMode(void* ptr);
int QVideoFrame_MappedBytes(void* ptr);
void* QVideoFrame_MetaData(void* ptr, struct QtMultimedia_PackedString key);
long long QVideoFrame_PixelFormat(void* ptr);
long long QVideoFrame_QVideoFrame_PixelFormatFromImageFormat(long long format);
int QVideoFrame_PlaneCount(void* ptr);
void QVideoFrame_SetEndTime(void* ptr, long long ti);
void QVideoFrame_SetFieldType(void* ptr, long long field);
void QVideoFrame_SetMetaData(void* ptr, struct QtMultimedia_PackedString key, void* value);
void QVideoFrame_SetStartTime(void* ptr, long long ti);
void* QVideoFrame_Size(void* ptr);
long long QVideoFrame_StartTime(void* ptr);
void QVideoFrame_Unmap(void* ptr);
int QVideoFrame_Width(void* ptr);
void QVideoFrame_DestroyQVideoFrame(void* ptr);
void* QVideoFrame___availableMetaData_atList(void* ptr, struct QtMultimedia_PackedString v, int i);
void QVideoFrame___availableMetaData_setList(void* ptr, struct QtMultimedia_PackedString key, void* i);
void* QVideoFrame___availableMetaData_newList(void* ptr);
struct QtMultimedia_PackedList QVideoFrame___availableMetaData_keyList(void* ptr);
struct QtMultimedia_PackedString QVideoFrame_____availableMetaData_keyList_atList(void* ptr, int i);
void QVideoFrame_____availableMetaData_keyList_setList(void* ptr, struct QtMultimedia_PackedString i);
void* QVideoFrame_____availableMetaData_keyList_newList(void* ptr);
void* QVideoProbe_NewQVideoProbe(void* parent);
void QVideoProbe_ConnectFlush(void* ptr, long long t);
void QVideoProbe_DisconnectFlush(void* ptr);
void QVideoProbe_Flush(void* ptr);
char QVideoProbe_IsActive(void* ptr);
char QVideoProbe_SetSource(void* ptr, void* source);
char QVideoProbe_SetSource2(void* ptr, void* mediaRecorder);
void QVideoProbe_ConnectVideoFrameProbed(void* ptr, long long t);
void QVideoProbe_DisconnectVideoFrameProbed(void* ptr);
void QVideoProbe_VideoFrameProbed(void* ptr, void* frame);
void QVideoProbe_DestroyQVideoProbe(void* ptr);
void QVideoProbe_DestroyQVideoProbeDefault(void* ptr);
void* QVideoProbe___children_atList(void* ptr, int i);
void QVideoProbe___children_setList(void* ptr, void* i);
void* QVideoProbe___children_newList(void* ptr);
void* QVideoProbe___dynamicPropertyNames_atList(void* ptr, int i);
void QVideoProbe___dynamicPropertyNames_setList(void* ptr, void* i);
void* QVideoProbe___dynamicPropertyNames_newList(void* ptr);
void* QVideoProbe___findChildren_atList(void* ptr, int i);
void QVideoProbe___findChildren_setList(void* ptr, void* i);
void* QVideoProbe___findChildren_newList(void* ptr);
void* QVideoProbe___findChildren_atList3(void* ptr, int i);
void QVideoProbe___findChildren_setList3(void* ptr, void* i);
void* QVideoProbe___findChildren_newList3(void* ptr);
void QVideoProbe_ChildEventDefault(void* ptr, void* event);
void QVideoProbe_ConnectNotifyDefault(void* ptr, void* sign);
void QVideoProbe_CustomEventDefault(void* ptr, void* event);
void QVideoProbe_DeleteLaterDefault(void* ptr);
void QVideoProbe_DisconnectNotifyDefault(void* ptr, void* sign);
char QVideoProbe_EventDefault(void* ptr, void* e);
char QVideoProbe_EventFilterDefault(void* ptr, void* watched, void* event);
void* QVideoProbe_MetaObjectDefault(void* ptr);
void QVideoProbe_TimerEventDefault(void* ptr, void* event);
void* QVideoRendererControl_NewQVideoRendererControl(void* parent);
void QVideoRendererControl_SetSurface(void* ptr, void* surface);
void* QVideoRendererControl_Surface(void* ptr);
void QVideoRendererControl_DestroyQVideoRendererControl(void* ptr);
void QVideoRendererControl_DestroyQVideoRendererControlDefault(void* ptr);
void* QVideoSurfaceFormat_NewQVideoSurfaceFormat();
void* QVideoSurfaceFormat_NewQVideoSurfaceFormat2(void* size, long long format, long long ty);
void* QVideoSurfaceFormat_NewQVideoSurfaceFormat3(void* other);
int QVideoSurfaceFormat_FrameHeight(void* ptr);
double QVideoSurfaceFormat_FrameRate(void* ptr);
void* QVideoSurfaceFormat_FrameSize(void* ptr);
int QVideoSurfaceFormat_FrameWidth(void* ptr);
long long QVideoSurfaceFormat_HandleType(void* ptr);
char QVideoSurfaceFormat_IsMirrored(void* ptr);
char QVideoSurfaceFormat_IsValid(void* ptr);
void* QVideoSurfaceFormat_PixelAspectRatio(void* ptr);
long long QVideoSurfaceFormat_PixelFormat(void* ptr);
void* QVideoSurfaceFormat_Property(void* ptr, char* name);
struct QtMultimedia_PackedList QVideoSurfaceFormat_PropertyNames(void* ptr);
long long QVideoSurfaceFormat_ScanLineDirection(void* ptr);
void QVideoSurfaceFormat_SetFrameRate(void* ptr, double rate);
void QVideoSurfaceFormat_SetFrameSize(void* ptr, void* size);
void QVideoSurfaceFormat_SetFrameSize2(void* ptr, int width, int height);
void QVideoSurfaceFormat_SetMirrored(void* ptr, char mirrored);
void QVideoSurfaceFormat_SetPixelAspectRatio(void* ptr, void* ratio);
void QVideoSurfaceFormat_SetPixelAspectRatio2(void* ptr, int horizontal, int vertical);
void QVideoSurfaceFormat_SetProperty(void* ptr, char* name, void* value);
void QVideoSurfaceFormat_SetScanLineDirection(void* ptr, long long direction);
void QVideoSurfaceFormat_SetViewport(void* ptr, void* viewport);
void QVideoSurfaceFormat_SetYCbCrColorSpace(void* ptr, long long space);
void* QVideoSurfaceFormat_SizeHint(void* ptr);
void* QVideoSurfaceFormat_Viewport(void* ptr);
long long QVideoSurfaceFormat_YCbCrColorSpace(void* ptr);
void QVideoSurfaceFormat_DestroyQVideoSurfaceFormat(void* ptr);
void* QVideoSurfaceFormat___propertyNames_atList(void* ptr, int i);
void QVideoSurfaceFormat___propertyNames_setList(void* ptr, void* i);
void* QVideoSurfaceFormat___propertyNames_newList(void* ptr);
void* QVideoWidget_NewQVideoWidget(void* parent);
long long QVideoWidget_AspectRatioMode(void* ptr);
int QVideoWidget_Brightness(void* ptr);
void QVideoWidget_ConnectBrightnessChanged(void* ptr, long long t);
void QVideoWidget_DisconnectBrightnessChanged(void* ptr);
void QVideoWidget_BrightnessChanged(void* ptr, int brightness);
int QVideoWidget_Contrast(void* ptr);
void QVideoWidget_ConnectContrastChanged(void* ptr, long long t);
void QVideoWidget_DisconnectContrastChanged(void* ptr);
void QVideoWidget_ContrastChanged(void* ptr, int contrast);
char QVideoWidget_Event(void* ptr, void* event);
char QVideoWidget_EventDefault(void* ptr, void* event);
void QVideoWidget_ConnectFullScreenChanged(void* ptr, long long t);
void QVideoWidget_DisconnectFullScreenChanged(void* ptr);
void QVideoWidget_FullScreenChanged(void* ptr, char fullScreen);
void QVideoWidget_HideEvent(void* ptr, void* event);
void QVideoWidget_HideEventDefault(void* ptr, void* event);
int QVideoWidget_Hue(void* ptr);
void QVideoWidget_ConnectHueChanged(void* ptr, long long t);
void QVideoWidget_DisconnectHueChanged(void* ptr);
void QVideoWidget_HueChanged(void* ptr, int hue);
char QVideoWidget_IsFullScreen(void* ptr);
void* QVideoWidget_MediaObject(void* ptr);
void* QVideoWidget_MediaObjectDefault(void* ptr);
void QVideoWidget_MoveEvent(void* ptr, void* event);
void QVideoWidget_MoveEventDefault(void* ptr, void* event);
void QVideoWidget_PaintEvent(void* ptr, void* event);
void QVideoWidget_PaintEventDefault(void* ptr, void* event);
void QVideoWidget_ResizeEvent(void* ptr, void* event);
void QVideoWidget_ResizeEventDefault(void* ptr, void* event);
int QVideoWidget_Saturation(void* ptr);
void QVideoWidget_ConnectSaturationChanged(void* ptr, long long t);
void QVideoWidget_DisconnectSaturationChanged(void* ptr);
void QVideoWidget_SaturationChanged(void* ptr, int saturation);
void QVideoWidget_SetAspectRatioMode(void* ptr, long long mode);
void QVideoWidget_SetAspectRatioModeDefault(void* ptr, long long mode);
void QVideoWidget_SetBrightness(void* ptr, int brightness);
void QVideoWidget_SetBrightnessDefault(void* ptr, int brightness);
void QVideoWidget_SetContrast(void* ptr, int contrast);
void QVideoWidget_SetContrastDefault(void* ptr, int contrast);
void QVideoWidget_SetFullScreen(void* ptr, char fullScreen);
void QVideoWidget_SetFullScreenDefault(void* ptr, char fullScreen);
void QVideoWidget_SetHue(void* ptr, int hue);
void QVideoWidget_SetHueDefault(void* ptr, int hue);
void QVideoWidget_SetSaturation(void* ptr, int saturation);
void QVideoWidget_SetSaturationDefault(void* ptr, int saturation);
void QVideoWidget_ShowEvent(void* ptr, void* event);
void QVideoWidget_ShowEventDefault(void* ptr, void* event);
void* QVideoWidget_SizeHint(void* ptr);
void* QVideoWidget_SizeHintDefault(void* ptr);
void* QVideoWidget_VideoSurface(void* ptr);
void QVideoWidget_DestroyQVideoWidget(void* ptr);
void QVideoWidget_DestroyQVideoWidgetDefault(void* ptr);
void* QVideoWidget___actions_atList(void* ptr, int i);
void QVideoWidget___actions_setList(void* ptr, void* i);
void* QVideoWidget___actions_newList(void* ptr);
void* QVideoWidget___addActions_actions_atList(void* ptr, int i);
void QVideoWidget___addActions_actions_setList(void* ptr, void* i);
void* QVideoWidget___addActions_actions_newList(void* ptr);
void* QVideoWidget___insertActions_actions_atList(void* ptr, int i);
void QVideoWidget___insertActions_actions_setList(void* ptr, void* i);
void* QVideoWidget___insertActions_actions_newList(void* ptr);
void* QVideoWidget___children_atList(void* ptr, int i);
void QVideoWidget___children_setList(void* ptr, void* i);
void* QVideoWidget___children_newList(void* ptr);
void* QVideoWidget___dynamicPropertyNames_atList(void* ptr, int i);
void QVideoWidget___dynamicPropertyNames_setList(void* ptr, void* i);
void* QVideoWidget___dynamicPropertyNames_newList(void* ptr);
void* QVideoWidget___findChildren_atList(void* ptr, int i);
void QVideoWidget___findChildren_setList(void* ptr, void* i);
void* QVideoWidget___findChildren_newList(void* ptr);
void* QVideoWidget___findChildren_atList3(void* ptr, int i);
void QVideoWidget___findChildren_setList3(void* ptr, void* i);
void* QVideoWidget___findChildren_newList3(void* ptr);
void QVideoWidget_ActionEvent(void* ptr, void* event);
void QVideoWidget_ActionEventDefault(void* ptr, void* event);
void QVideoWidget_ChangeEvent(void* ptr, void* event);
void QVideoWidget_ChangeEventDefault(void* ptr, void* event);
char QVideoWidget_Close(void* ptr);
char QVideoWidget_CloseDefault(void* ptr);
void QVideoWidget_CloseEvent(void* ptr, void* event);
void QVideoWidget_CloseEventDefault(void* ptr, void* event);
void QVideoWidget_ContextMenuEvent(void* ptr, void* event);
void QVideoWidget_ContextMenuEventDefault(void* ptr, void* event);
void QVideoWidget_DragEnterEvent(void* ptr, void* event);
void QVideoWidget_DragEnterEventDefault(void* ptr, void* event);
void QVideoWidget_DragLeaveEvent(void* ptr, void* event);
void QVideoWidget_DragLeaveEventDefault(void* ptr, void* event);
void QVideoWidget_DragMoveEvent(void* ptr, void* event);
void QVideoWidget_DragMoveEventDefault(void* ptr, void* event);
void QVideoWidget_DropEvent(void* ptr, void* event);
void QVideoWidget_DropEventDefault(void* ptr, void* event);
void QVideoWidget_EnterEvent(void* ptr, void* event);
void QVideoWidget_EnterEventDefault(void* ptr, void* event);
void QVideoWidget_FocusInEvent(void* ptr, void* event);
void QVideoWidget_FocusInEventDefault(void* ptr, void* event);
char QVideoWidget_FocusNextPrevChild(void* ptr, char next);
char QVideoWidget_FocusNextPrevChildDefault(void* ptr, char next);
void QVideoWidget_FocusOutEvent(void* ptr, void* event);
void QVideoWidget_FocusOutEventDefault(void* ptr, void* event);
char QVideoWidget_HasHeightForWidth(void* ptr);
char QVideoWidget_HasHeightForWidthDefault(void* ptr);
int QVideoWidget_HeightForWidth(void* ptr, int w);
int QVideoWidget_HeightForWidthDefault(void* ptr, int w);
void QVideoWidget_Hide(void* ptr);
void QVideoWidget_HideDefault(void* ptr);
void QVideoWidget_InitPainter(void* ptr, void* painter);
void QVideoWidget_InitPainterDefault(void* ptr, void* painter);
void QVideoWidget_InputMethodEvent(void* ptr, void* event);
void QVideoWidget_InputMethodEventDefault(void* ptr, void* event);
void* QVideoWidget_InputMethodQuery(void* ptr, long long query);
void* QVideoWidget_InputMethodQueryDefault(void* ptr, long long query);
void QVideoWidget_KeyPressEvent(void* ptr, void* event);
void QVideoWidget_KeyPressEventDefault(void* ptr, void* event);
void QVideoWidget_KeyReleaseEvent(void* ptr, void* event);
void QVideoWidget_KeyReleaseEventDefault(void* ptr, void* event);
void QVideoWidget_LeaveEvent(void* ptr, void* event);
void QVideoWidget_LeaveEventDefault(void* ptr, void* event);
void QVideoWidget_Lower(void* ptr);
void QVideoWidget_LowerDefault(void* ptr);
int QVideoWidget_Metric(void* ptr, long long m);
int QVideoWidget_MetricDefault(void* ptr, long long m);
void* QVideoWidget_MinimumSizeHint(void* ptr);
void* QVideoWidget_MinimumSizeHintDefault(void* ptr);
void QVideoWidget_MouseDoubleClickEvent(void* ptr, void* event);
void QVideoWidget_MouseDoubleClickEventDefault(void* ptr, void* event);
void QVideoWidget_MouseMoveEvent(void* ptr, void* event);
void QVideoWidget_MouseMoveEventDefault(void* ptr, void* event);
void QVideoWidget_MousePressEvent(void* ptr, void* event);
void QVideoWidget_MousePressEventDefault(void* ptr, void* event);
void QVideoWidget_MouseReleaseEvent(void* ptr, void* event);
void QVideoWidget_MouseReleaseEventDefault(void* ptr, void* event);
char QVideoWidget_NativeEvent(void* ptr, void* eventType, void* message, long* result);
char QVideoWidget_NativeEventDefault(void* ptr, void* eventType, void* message, long* result);
void* QVideoWidget_PaintEngine(void* ptr);
void* QVideoWidget_PaintEngineDefault(void* ptr);
void QVideoWidget_Raise(void* ptr);
void QVideoWidget_RaiseDefault(void* ptr);
void QVideoWidget_Repaint(void* ptr);
void QVideoWidget_RepaintDefault(void* ptr);
void QVideoWidget_SetDisabled(void* ptr, char disable);
void QVideoWidget_SetDisabledDefault(void* ptr, char disable);
void QVideoWidget_SetEnabled(void* ptr, char vbo);
void QVideoWidget_SetEnabledDefault(void* ptr, char vbo);
void QVideoWidget_SetFocus2(void* ptr);
void QVideoWidget_SetFocus2Default(void* ptr);
void QVideoWidget_SetHidden(void* ptr, char hidden);
void QVideoWidget_SetHiddenDefault(void* ptr, char hidden);
void QVideoWidget_SetStyleSheet(void* ptr, struct QtMultimedia_PackedString styleSheet);
void QVideoWidget_SetStyleSheetDefault(void* ptr, struct QtMultimedia_PackedString styleSheet);
void QVideoWidget_SetVisible(void* ptr, char visible);
void QVideoWidget_SetVisibleDefault(void* ptr, char visible);
void QVideoWidget_SetWindowModified(void* ptr, char vbo);
void QVideoWidget_SetWindowModifiedDefault(void* ptr, char vbo);
void QVideoWidget_SetWindowTitle(void* ptr, struct QtMultimedia_PackedString vqs);
void QVideoWidget_SetWindowTitleDefault(void* ptr, struct QtMultimedia_PackedString vqs);
void QVideoWidget_Show(void* ptr);
void QVideoWidget_ShowDefault(void* ptr);
void QVideoWidget_ShowFullScreen(void* ptr);
void QVideoWidget_ShowFullScreenDefault(void* ptr);
void QVideoWidget_ShowMaximized(void* ptr);
void QVideoWidget_ShowMaximizedDefault(void* ptr);
void QVideoWidget_ShowMinimized(void* ptr);
void QVideoWidget_ShowMinimizedDefault(void* ptr);
void QVideoWidget_ShowNormal(void* ptr);
void QVideoWidget_ShowNormalDefault(void* ptr);
void QVideoWidget_TabletEvent(void* ptr, void* event);
void QVideoWidget_TabletEventDefault(void* ptr, void* event);
void QVideoWidget_Update(void* ptr);
void QVideoWidget_UpdateDefault(void* ptr);
void QVideoWidget_UpdateMicroFocus(void* ptr);
void QVideoWidget_UpdateMicroFocusDefault(void* ptr);
void QVideoWidget_WheelEvent(void* ptr, void* event);
void QVideoWidget_WheelEventDefault(void* ptr, void* event);
void QVideoWidget_ChildEvent(void* ptr, void* event);
void QVideoWidget_ChildEventDefault(void* ptr, void* event);
void QVideoWidget_ConnectNotify(void* ptr, void* sign);
void QVideoWidget_ConnectNotifyDefault(void* ptr, void* sign);
void QVideoWidget_CustomEvent(void* ptr, void* event);
void QVideoWidget_CustomEventDefault(void* ptr, void* event);
void QVideoWidget_DeleteLater(void* ptr);
void QVideoWidget_DeleteLaterDefault(void* ptr);
void QVideoWidget_DisconnectNotify(void* ptr, void* sign);
void QVideoWidget_DisconnectNotifyDefault(void* ptr, void* sign);
char QVideoWidget_EventFilter(void* ptr, void* watched, void* event);
char QVideoWidget_EventFilterDefault(void* ptr, void* watched, void* event);
void* QVideoWidget_MetaObject(void* ptr);
void* QVideoWidget_MetaObjectDefault(void* ptr);
void QVideoWidget_TimerEvent(void* ptr, void* event);
void QVideoWidget_TimerEventDefault(void* ptr, void* event);
char QVideoWidget_SetMediaObject(void* ptr, void* object);
char QVideoWidget_SetMediaObjectDefault(void* ptr, void* object);
void* QVideoWidgetControl_NewQVideoWidgetControl(void* parent);
long long QVideoWidgetControl_AspectRatioMode(void* ptr);
int QVideoWidgetControl_Brightness(void* ptr);
void QVideoWidgetControl_ConnectBrightnessChanged(void* ptr, long long t);
void QVideoWidgetControl_DisconnectBrightnessChanged(void* ptr);
void QVideoWidgetControl_BrightnessChanged(void* ptr, int brightness);
int QVideoWidgetControl_Contrast(void* ptr);
void QVideoWidgetControl_ConnectContrastChanged(void* ptr, long long t);
void QVideoWidgetControl_DisconnectContrastChanged(void* ptr);
void QVideoWidgetControl_ContrastChanged(void* ptr, int contrast);
void QVideoWidgetControl_ConnectFullScreenChanged(void* ptr, long long t);
void QVideoWidgetControl_DisconnectFullScreenChanged(void* ptr);
void QVideoWidgetControl_FullScreenChanged(void* ptr, char fullScreen);
int QVideoWidgetControl_Hue(void* ptr);
void QVideoWidgetControl_ConnectHueChanged(void* ptr, long long t);
void QVideoWidgetControl_DisconnectHueChanged(void* ptr);
void QVideoWidgetControl_HueChanged(void* ptr, int hue);
char QVideoWidgetControl_IsFullScreen(void* ptr);
int QVideoWidgetControl_Saturation(void* ptr);
void QVideoWidgetControl_ConnectSaturationChanged(void* ptr, long long t);
void QVideoWidgetControl_DisconnectSaturationChanged(void* ptr);
void QVideoWidgetControl_SaturationChanged(void* ptr, int saturation);
void QVideoWidgetControl_SetAspectRatioMode(void* ptr, long long mode);
void QVideoWidgetControl_SetBrightness(void* ptr, int brightness);
void QVideoWidgetControl_SetContrast(void* ptr, int contrast);
void QVideoWidgetControl_SetFullScreen(void* ptr, char fullScreen);
void QVideoWidgetControl_SetHue(void* ptr, int hue);
void QVideoWidgetControl_SetSaturation(void* ptr, int saturation);
void* QVideoWidgetControl_VideoWidget(void* ptr);
void QVideoWidgetControl_DestroyQVideoWidgetControl(void* ptr);
void QVideoWidgetControl_DestroyQVideoWidgetControlDefault(void* ptr);
void* QVideoWindowControl_NewQVideoWindowControl(void* parent);
long long QVideoWindowControl_AspectRatioMode(void* ptr);
int QVideoWindowControl_Brightness(void* ptr);
void QVideoWindowControl_ConnectBrightnessChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectBrightnessChanged(void* ptr);
void QVideoWindowControl_BrightnessChanged(void* ptr, int brightness);
int QVideoWindowControl_Contrast(void* ptr);
void QVideoWindowControl_ConnectContrastChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectContrastChanged(void* ptr);
void QVideoWindowControl_ContrastChanged(void* ptr, int contrast);
void* QVideoWindowControl_DisplayRect(void* ptr);
void QVideoWindowControl_ConnectFullScreenChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectFullScreenChanged(void* ptr);
void QVideoWindowControl_FullScreenChanged(void* ptr, char fullScreen);
int QVideoWindowControl_Hue(void* ptr);
void QVideoWindowControl_ConnectHueChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectHueChanged(void* ptr);
void QVideoWindowControl_HueChanged(void* ptr, int hue);
char QVideoWindowControl_IsFullScreen(void* ptr);
void* QVideoWindowControl_NativeSize(void* ptr);
void QVideoWindowControl_ConnectNativeSizeChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectNativeSizeChanged(void* ptr);
void QVideoWindowControl_NativeSizeChanged(void* ptr);
void QVideoWindowControl_Repaint(void* ptr);
int QVideoWindowControl_Saturation(void* ptr);
void QVideoWindowControl_ConnectSaturationChanged(void* ptr, long long t);
void QVideoWindowControl_DisconnectSaturationChanged(void* ptr);
void QVideoWindowControl_SaturationChanged(void* ptr, int saturation);
void QVideoWindowControl_SetAspectRatioMode(void* ptr, long long mode);
void QVideoWindowControl_SetBrightness(void* ptr, int brightness);
void QVideoWindowControl_SetContrast(void* ptr, int contrast);
void QVideoWindowControl_SetDisplayRect(void* ptr, void* rect);
void QVideoWindowControl_SetFullScreen(void* ptr, char fullScreen);
void QVideoWindowControl_SetHue(void* ptr, int hue);
void QVideoWindowControl_SetSaturation(void* ptr, int saturation);
void QVideoWindowControl_SetWinId(void* ptr, uintptr_t id);
uintptr_t QVideoWindowControl_WinId(void* ptr);
void QVideoWindowControl_DestroyQVideoWindowControl(void* ptr);
void QVideoWindowControl_DestroyQVideoWindowControlDefault(void* ptr);

#ifdef __cplusplus
}
#endif

#endif