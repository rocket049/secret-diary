// +build !minimal

#pragma once

#ifndef GO_QTNETWORK_H
#define GO_QTNETWORK_H

#include <stdint.h>

#ifdef __cplusplus
int QAbstractNetworkCache_QAbstractNetworkCache_QRegisterMetaType();
int QAbstractSocket_QAbstractSocket_QRegisterMetaType();
int QDnsLookup_QDnsLookup_QRegisterMetaType();
int QHttpMultiPart_QHttpMultiPart_QRegisterMetaType();
int QLocalServer_QLocalServer_QRegisterMetaType();
int QLocalSocket_QLocalSocket_QRegisterMetaType();
int QNetworkAccessManager_QNetworkAccessManager_QRegisterMetaType();
int QNetworkConfigurationManager_QNetworkConfigurationManager_QRegisterMetaType();
int QNetworkCookieJar_QNetworkCookieJar_QRegisterMetaType();
int QNetworkDiskCache_QNetworkDiskCache_QRegisterMetaType();
int QNetworkProxyFactory_QNetworkProxyFactory_QRegisterMetaType();
int QNetworkReply_QNetworkReply_QRegisterMetaType();
int QNetworkSession_QNetworkSession_QRegisterMetaType();
int QSslSocket_QSslSocket_QRegisterMetaType();
int QTcpServer_QTcpServer_QRegisterMetaType();
int QTcpSocket_QTcpSocket_QRegisterMetaType();
int QUdpSocket_QUdpSocket_QRegisterMetaType();
extern "C" {
#endif

struct QtNetwork_PackedString { char* data; long long len; void* ptr; };
struct QtNetwork_PackedList { void* data; long long len; };
void* QAbstractNetworkCache_NewQAbstractNetworkCache(void* parent);
long long QAbstractNetworkCache_CacheSize(void* ptr);
void QAbstractNetworkCache_Clear(void* ptr);
void* QAbstractNetworkCache_Data(void* ptr, void* url);
void QAbstractNetworkCache_Insert(void* ptr, void* device);
void* QAbstractNetworkCache_MetaData(void* ptr, void* url);
void* QAbstractNetworkCache_Prepare(void* ptr, void* metaData);
char QAbstractNetworkCache_Remove(void* ptr, void* url);
void QAbstractNetworkCache_UpdateMetaData(void* ptr, void* metaData);
void QAbstractNetworkCache_DestroyQAbstractNetworkCache(void* ptr);
void QAbstractNetworkCache_DestroyQAbstractNetworkCacheDefault(void* ptr);
void* QAbstractNetworkCache___children_atList(void* ptr, int i);
void QAbstractNetworkCache___children_setList(void* ptr, void* i);
void* QAbstractNetworkCache___children_newList(void* ptr);
void* QAbstractNetworkCache___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractNetworkCache___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractNetworkCache___dynamicPropertyNames_newList(void* ptr);
void* QAbstractNetworkCache___findChildren_atList(void* ptr, int i);
void QAbstractNetworkCache___findChildren_setList(void* ptr, void* i);
void* QAbstractNetworkCache___findChildren_newList(void* ptr);
void* QAbstractNetworkCache___findChildren_atList3(void* ptr, int i);
void QAbstractNetworkCache___findChildren_setList3(void* ptr, void* i);
void* QAbstractNetworkCache___findChildren_newList3(void* ptr);
void QAbstractNetworkCache_ChildEventDefault(void* ptr, void* event);
void QAbstractNetworkCache_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractNetworkCache_CustomEventDefault(void* ptr, void* event);
void QAbstractNetworkCache_DeleteLaterDefault(void* ptr);
void QAbstractNetworkCache_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractNetworkCache_EventDefault(void* ptr, void* e);
char QAbstractNetworkCache_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractNetworkCache_MetaObjectDefault(void* ptr);
void QAbstractNetworkCache_TimerEventDefault(void* ptr, void* event);
void* QAbstractSocket_NewQAbstractSocket(long long socketType, void* parent);
void QAbstractSocket_Abort(void* ptr);
char QAbstractSocket_AtEndDefault(void* ptr);
char QAbstractSocket_Bind(void* ptr, void* address, unsigned short port, long long mode);
char QAbstractSocket_Bind2(void* ptr, unsigned short port, long long mode);
long long QAbstractSocket_BytesAvailableDefault(void* ptr);
long long QAbstractSocket_BytesToWriteDefault(void* ptr);
char QAbstractSocket_CanReadLineDefault(void* ptr);
void QAbstractSocket_CloseDefault(void* ptr);
void QAbstractSocket_ConnectToHost(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, long long openMode, long long protoc);
void QAbstractSocket_ConnectToHostDefault(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, long long openMode, long long protoc);
void QAbstractSocket_ConnectToHost2(void* ptr, void* address, unsigned short port, long long openMode);
void QAbstractSocket_ConnectToHost2Default(void* ptr, void* address, unsigned short port, long long openMode);
void QAbstractSocket_ConnectConnected(void* ptr, long long t);
void QAbstractSocket_DisconnectConnected(void* ptr);
void QAbstractSocket_Connected(void* ptr);
void QAbstractSocket_DisconnectFromHost(void* ptr);
void QAbstractSocket_DisconnectFromHostDefault(void* ptr);
void QAbstractSocket_ConnectDisconnected(void* ptr, long long t);
void QAbstractSocket_DisconnectDisconnected(void* ptr);
void QAbstractSocket_Disconnected(void* ptr);
long long QAbstractSocket_Error(void* ptr);
void QAbstractSocket_ConnectErrorOccurred(void* ptr, long long t);
void QAbstractSocket_DisconnectErrorOccurred(void* ptr);
void QAbstractSocket_ErrorOccurred(void* ptr, long long socketError);
char QAbstractSocket_Flush(void* ptr);
void QAbstractSocket_ConnectHostFound(void* ptr, long long t);
void QAbstractSocket_DisconnectHostFound(void* ptr);
void QAbstractSocket_HostFound(void* ptr);
char QAbstractSocket_IsSequentialDefault(void* ptr);
char QAbstractSocket_IsValid(void* ptr);
void* QAbstractSocket_LocalAddress(void* ptr);
unsigned short QAbstractSocket_LocalPort(void* ptr);
long long QAbstractSocket_PauseMode(void* ptr);
void* QAbstractSocket_PeerAddress(void* ptr);
struct QtNetwork_PackedString QAbstractSocket_PeerName(void* ptr);
unsigned short QAbstractSocket_PeerPort(void* ptr);
struct QtNetwork_PackedString QAbstractSocket_ProtocolTag(void* ptr);
void* QAbstractSocket_Proxy(void* ptr);
void QAbstractSocket_ConnectProxyAuthenticationRequired(void* ptr, long long t);
void QAbstractSocket_DisconnectProxyAuthenticationRequired(void* ptr);
void QAbstractSocket_ProxyAuthenticationRequired(void* ptr, void* proxy, void* authenticator);
long long QAbstractSocket_ReadBufferSize(void* ptr);
long long QAbstractSocket_ReadData(void* ptr, char* data, long long maxSize);
long long QAbstractSocket_ReadDataDefault(void* ptr, char* data, long long maxSize);
long long QAbstractSocket_ReadLineDataDefault(void* ptr, char* data, long long maxlen);
void QAbstractSocket_Resume(void* ptr);
void QAbstractSocket_ResumeDefault(void* ptr);
void QAbstractSocket_SetLocalAddress(void* ptr, void* address);
void QAbstractSocket_SetLocalPort(void* ptr, unsigned short port);
void QAbstractSocket_SetPauseMode(void* ptr, long long pauseMode);
void QAbstractSocket_SetPeerAddress(void* ptr, void* address);
void QAbstractSocket_SetPeerName(void* ptr, struct QtNetwork_PackedString name);
void QAbstractSocket_SetPeerPort(void* ptr, unsigned short port);
void QAbstractSocket_SetProtocolTag(void* ptr, struct QtNetwork_PackedString tag);
void QAbstractSocket_SetProxy(void* ptr, void* networkProxy);
void QAbstractSocket_SetReadBufferSize(void* ptr, long long size);
void QAbstractSocket_SetReadBufferSizeDefault(void* ptr, long long size);
void QAbstractSocket_SetSocketError(void* ptr, long long socketError);
void QAbstractSocket_SetSocketOption(void* ptr, long long option, void* value);
void QAbstractSocket_SetSocketOptionDefault(void* ptr, long long option, void* value);
void QAbstractSocket_SetSocketState(void* ptr, long long state);
void* QAbstractSocket_SocketOption(void* ptr, long long option);
void* QAbstractSocket_SocketOptionDefault(void* ptr, long long option);
long long QAbstractSocket_SocketType(void* ptr);
long long QAbstractSocket_State(void* ptr);
void QAbstractSocket_ConnectStateChanged(void* ptr, long long t);
void QAbstractSocket_DisconnectStateChanged(void* ptr);
void QAbstractSocket_StateChanged(void* ptr, long long socketState);
char QAbstractSocket_WaitForBytesWrittenDefault(void* ptr, int msecs);
char QAbstractSocket_WaitForConnected(void* ptr, int msecs);
char QAbstractSocket_WaitForConnectedDefault(void* ptr, int msecs);
char QAbstractSocket_WaitForDisconnected(void* ptr, int msecs);
char QAbstractSocket_WaitForDisconnectedDefault(void* ptr, int msecs);
char QAbstractSocket_WaitForReadyReadDefault(void* ptr, int msecs);
long long QAbstractSocket_WriteData(void* ptr, char* data, long long size);
long long QAbstractSocket_WriteDataDefault(void* ptr, char* data, long long size);
void QAbstractSocket_DestroyQAbstractSocket(void* ptr);
void QAbstractSocket_DestroyQAbstractSocketDefault(void* ptr);
void* QAbstractSocket___children_atList(void* ptr, int i);
void QAbstractSocket___children_setList(void* ptr, void* i);
void* QAbstractSocket___children_newList(void* ptr);
void* QAbstractSocket___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractSocket___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractSocket___dynamicPropertyNames_newList(void* ptr);
void* QAbstractSocket___findChildren_atList(void* ptr, int i);
void QAbstractSocket___findChildren_setList(void* ptr, void* i);
void* QAbstractSocket___findChildren_newList(void* ptr);
void* QAbstractSocket___findChildren_atList3(void* ptr, int i);
void QAbstractSocket___findChildren_setList3(void* ptr, void* i);
void* QAbstractSocket___findChildren_newList3(void* ptr);
char QAbstractSocket_OpenDefault(void* ptr, long long mode);
long long QAbstractSocket_PosDefault(void* ptr);
char QAbstractSocket_ResetDefault(void* ptr);
char QAbstractSocket_SeekDefault(void* ptr, long long pos);
long long QAbstractSocket_SizeDefault(void* ptr);
void QAbstractSocket_ChildEventDefault(void* ptr, void* event);
void QAbstractSocket_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractSocket_CustomEventDefault(void* ptr, void* event);
void QAbstractSocket_DeleteLaterDefault(void* ptr);
void QAbstractSocket_DisconnectNotifyDefault(void* ptr, void* sign);
char QAbstractSocket_EventDefault(void* ptr, void* e);
char QAbstractSocket_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAbstractSocket_MetaObjectDefault(void* ptr);
void QAbstractSocket_TimerEventDefault(void* ptr, void* event);
void* QAuthenticator_NewQAuthenticator();
void* QAuthenticator_NewQAuthenticator2(void* other);
char QAuthenticator_IsNull(void* ptr);
void* QAuthenticator_Option(void* ptr, struct QtNetwork_PackedString opt);
struct QtNetwork_PackedList QAuthenticator_Options(void* ptr);
struct QtNetwork_PackedString QAuthenticator_Password(void* ptr);
struct QtNetwork_PackedString QAuthenticator_Realm(void* ptr);
void QAuthenticator_SetOption(void* ptr, struct QtNetwork_PackedString opt, void* value);
void QAuthenticator_SetPassword(void* ptr, struct QtNetwork_PackedString password);
void QAuthenticator_SetUser(void* ptr, struct QtNetwork_PackedString user);
struct QtNetwork_PackedString QAuthenticator_User(void* ptr);
void QAuthenticator_DestroyQAuthenticator(void* ptr);
void* QAuthenticator___options_atList(void* ptr, struct QtNetwork_PackedString v, int i);
void QAuthenticator___options_setList(void* ptr, struct QtNetwork_PackedString key, void* i);
void* QAuthenticator___options_newList(void* ptr);
struct QtNetwork_PackedList QAuthenticator___options_keyList(void* ptr);
struct QtNetwork_PackedString QAuthenticator_____options_keyList_atList(void* ptr, int i);
void QAuthenticator_____options_keyList_setList(void* ptr, struct QtNetwork_PackedString i);
void* QAuthenticator_____options_keyList_newList(void* ptr);
void* QDnsDomainNameRecord_NewQDnsDomainNameRecord();
void* QDnsDomainNameRecord_NewQDnsDomainNameRecord2(void* other);
struct QtNetwork_PackedString QDnsDomainNameRecord_Name(void* ptr);
void QDnsDomainNameRecord_Swap(void* ptr, void* other);
unsigned int QDnsDomainNameRecord_TimeToLive(void* ptr);
struct QtNetwork_PackedString QDnsDomainNameRecord_Value(void* ptr);
void QDnsDomainNameRecord_DestroyQDnsDomainNameRecord(void* ptr);
void* QDnsHostAddressRecord_NewQDnsHostAddressRecord();
void* QDnsHostAddressRecord_NewQDnsHostAddressRecord2(void* other);
struct QtNetwork_PackedString QDnsHostAddressRecord_Name(void* ptr);
void QDnsHostAddressRecord_Swap(void* ptr, void* other);
unsigned int QDnsHostAddressRecord_TimeToLive(void* ptr);
void* QDnsHostAddressRecord_Value(void* ptr);
void QDnsHostAddressRecord_DestroyQDnsHostAddressRecord(void* ptr);
void* QDnsLookup_NewQDnsLookup(void* parent);
void* QDnsLookup_NewQDnsLookup2(long long ty, struct QtNetwork_PackedString name, void* parent);
void* QDnsLookup_NewQDnsLookup3(long long ty, struct QtNetwork_PackedString name, void* nameserver, void* parent);
void QDnsLookup_Abort(void* ptr);
void QDnsLookup_AbortDefault(void* ptr);
struct QtNetwork_PackedList QDnsLookup_CanonicalNameRecords(void* ptr);
long long QDnsLookup_Error(void* ptr);
struct QtNetwork_PackedString QDnsLookup_ErrorString(void* ptr);
void QDnsLookup_ConnectFinished(void* ptr, long long t);
void QDnsLookup_DisconnectFinished(void* ptr);
void QDnsLookup_Finished(void* ptr);
struct QtNetwork_PackedList QDnsLookup_HostAddressRecords(void* ptr);
char QDnsLookup_IsFinished(void* ptr);
void QDnsLookup_Lookup(void* ptr);
void QDnsLookup_LookupDefault(void* ptr);
struct QtNetwork_PackedList QDnsLookup_MailExchangeRecords(void* ptr);
struct QtNetwork_PackedString QDnsLookup_Name(void* ptr);
void QDnsLookup_ConnectNameChanged(void* ptr, long long t);
void QDnsLookup_DisconnectNameChanged(void* ptr);
void QDnsLookup_NameChanged(void* ptr, struct QtNetwork_PackedString name);
struct QtNetwork_PackedList QDnsLookup_NameServerRecords(void* ptr);
void* QDnsLookup_Nameserver(void* ptr);
void QDnsLookup_ConnectNameserverChanged(void* ptr, long long t);
void QDnsLookup_DisconnectNameserverChanged(void* ptr);
void QDnsLookup_NameserverChanged(void* ptr, void* nameserver);
struct QtNetwork_PackedList QDnsLookup_PointerRecords(void* ptr);
struct QtNetwork_PackedList QDnsLookup_ServiceRecords(void* ptr);
void QDnsLookup_SetName(void* ptr, struct QtNetwork_PackedString name);
void QDnsLookup_SetNameserver(void* ptr, void* nameserver);
void QDnsLookup_SetType(void* ptr, long long vqd);
struct QtNetwork_PackedList QDnsLookup_TextRecords(void* ptr);
long long QDnsLookup_Type(void* ptr);
void QDnsLookup_ConnectTypeChanged(void* ptr, long long t);
void QDnsLookup_DisconnectTypeChanged(void* ptr);
void QDnsLookup_TypeChanged(void* ptr, long long ty);
void QDnsLookup_DestroyQDnsLookup(void* ptr);
void QDnsLookup_DestroyQDnsLookupDefault(void* ptr);
void* QDnsLookup___canonicalNameRecords_atList(void* ptr, int i);
void QDnsLookup___canonicalNameRecords_setList(void* ptr, void* i);
void* QDnsLookup___canonicalNameRecords_newList(void* ptr);
void* QDnsLookup___hostAddressRecords_atList(void* ptr, int i);
void QDnsLookup___hostAddressRecords_setList(void* ptr, void* i);
void* QDnsLookup___hostAddressRecords_newList(void* ptr);
void* QDnsLookup___mailExchangeRecords_atList(void* ptr, int i);
void QDnsLookup___mailExchangeRecords_setList(void* ptr, void* i);
void* QDnsLookup___mailExchangeRecords_newList(void* ptr);
void* QDnsLookup___nameServerRecords_atList(void* ptr, int i);
void QDnsLookup___nameServerRecords_setList(void* ptr, void* i);
void* QDnsLookup___nameServerRecords_newList(void* ptr);
void* QDnsLookup___pointerRecords_atList(void* ptr, int i);
void QDnsLookup___pointerRecords_setList(void* ptr, void* i);
void* QDnsLookup___pointerRecords_newList(void* ptr);
void* QDnsLookup___serviceRecords_atList(void* ptr, int i);
void QDnsLookup___serviceRecords_setList(void* ptr, void* i);
void* QDnsLookup___serviceRecords_newList(void* ptr);
void* QDnsLookup___textRecords_atList(void* ptr, int i);
void QDnsLookup___textRecords_setList(void* ptr, void* i);
void* QDnsLookup___textRecords_newList(void* ptr);
void* QDnsLookup___children_atList(void* ptr, int i);
void QDnsLookup___children_setList(void* ptr, void* i);
void* QDnsLookup___children_newList(void* ptr);
void* QDnsLookup___dynamicPropertyNames_atList(void* ptr, int i);
void QDnsLookup___dynamicPropertyNames_setList(void* ptr, void* i);
void* QDnsLookup___dynamicPropertyNames_newList(void* ptr);
void* QDnsLookup___findChildren_atList(void* ptr, int i);
void QDnsLookup___findChildren_setList(void* ptr, void* i);
void* QDnsLookup___findChildren_newList(void* ptr);
void* QDnsLookup___findChildren_atList3(void* ptr, int i);
void QDnsLookup___findChildren_setList3(void* ptr, void* i);
void* QDnsLookup___findChildren_newList3(void* ptr);
void QDnsLookup_ChildEventDefault(void* ptr, void* event);
void QDnsLookup_ConnectNotifyDefault(void* ptr, void* sign);
void QDnsLookup_CustomEventDefault(void* ptr, void* event);
void QDnsLookup_DeleteLaterDefault(void* ptr);
void QDnsLookup_DisconnectNotifyDefault(void* ptr, void* sign);
char QDnsLookup_EventDefault(void* ptr, void* e);
char QDnsLookup_EventFilterDefault(void* ptr, void* watched, void* event);
void* QDnsLookup_MetaObjectDefault(void* ptr);
void QDnsLookup_TimerEventDefault(void* ptr, void* event);
void* QDnsMailExchangeRecord_NewQDnsMailExchangeRecord();
void* QDnsMailExchangeRecord_NewQDnsMailExchangeRecord2(void* other);
struct QtNetwork_PackedString QDnsMailExchangeRecord_Exchange(void* ptr);
struct QtNetwork_PackedString QDnsMailExchangeRecord_Name(void* ptr);
unsigned short QDnsMailExchangeRecord_Preference(void* ptr);
void QDnsMailExchangeRecord_Swap(void* ptr, void* other);
unsigned int QDnsMailExchangeRecord_TimeToLive(void* ptr);
void QDnsMailExchangeRecord_DestroyQDnsMailExchangeRecord(void* ptr);
void* QDnsServiceRecord_NewQDnsServiceRecord();
void* QDnsServiceRecord_NewQDnsServiceRecord2(void* other);
struct QtNetwork_PackedString QDnsServiceRecord_Name(void* ptr);
unsigned short QDnsServiceRecord_Port(void* ptr);
unsigned short QDnsServiceRecord_Priority(void* ptr);
void QDnsServiceRecord_Swap(void* ptr, void* other);
struct QtNetwork_PackedString QDnsServiceRecord_Target(void* ptr);
unsigned int QDnsServiceRecord_TimeToLive(void* ptr);
unsigned short QDnsServiceRecord_Weight(void* ptr);
void QDnsServiceRecord_DestroyQDnsServiceRecord(void* ptr);
void* QDnsTextRecord_NewQDnsTextRecord();
void* QDnsTextRecord_NewQDnsTextRecord2(void* other);
struct QtNetwork_PackedString QDnsTextRecord_Name(void* ptr);
void QDnsTextRecord_Swap(void* ptr, void* other);
unsigned int QDnsTextRecord_TimeToLive(void* ptr);
struct QtNetwork_PackedList QDnsTextRecord_Values(void* ptr);
void QDnsTextRecord_DestroyQDnsTextRecord(void* ptr);
void* QDnsTextRecord___values_atList(void* ptr, int i);
void QDnsTextRecord___values_setList(void* ptr, void* i);
void* QDnsTextRecord___values_newList(void* ptr);
void* QHostAddress_NewQHostAddress();
void* QHostAddress_NewQHostAddress2(unsigned int ip4Addr);
void* QHostAddress_NewQHostAddress3(char* ip6Addr);
void* QHostAddress_NewQHostAddress4(char* ip6Addr);
void* QHostAddress_NewQHostAddress7(struct QtNetwork_PackedString address);
void* QHostAddress_NewQHostAddress8(void* address);
void* QHostAddress_NewQHostAddress9(long long address);
void QHostAddress_Clear(void* ptr);
char QHostAddress_IsBroadcast(void* ptr);
char QHostAddress_IsEqual(void* ptr, void* other, long long mode);
char QHostAddress_IsGlobal(void* ptr);
char QHostAddress_IsInSubnet(void* ptr, void* subnet, int netmask);
char QHostAddress_IsLinkLocal(void* ptr);
char QHostAddress_IsLoopback(void* ptr);
char QHostAddress_IsMulticast(void* ptr);
char QHostAddress_IsNull(void* ptr);
char QHostAddress_IsSiteLocal(void* ptr);
char QHostAddress_IsUniqueLocalUnicast(void* ptr);
long long QHostAddress_Protocol(void* ptr);
struct QtNetwork_PackedString QHostAddress_ScopeId(void* ptr);
void QHostAddress_SetAddress(void* ptr, unsigned int ip4Addr);
void QHostAddress_SetAddress2(void* ptr, char* ip6Addr);
void QHostAddress_SetAddress3(void* ptr, char* ip6Addr);
char QHostAddress_SetAddress6(void* ptr, struct QtNetwork_PackedString address);
void QHostAddress_SetAddress7(void* ptr, long long address);
void QHostAddress_SetScopeId(void* ptr, struct QtNetwork_PackedString id);
void QHostAddress_Swap(void* ptr, void* other);
unsigned int QHostAddress_ToIPv4Address(void* ptr);
unsigned int QHostAddress_ToIPv4Address2(void* ptr, char* ok);
struct QtNetwork_PackedString QHostAddress_ToString(void* ptr);
void QHostAddress_DestroyQHostAddress(void* ptr);
void* QHostInfo_NewQHostInfo(int id);
void* QHostInfo_NewQHostInfo2(void* other);
void* QHostInfo_NewQHostInfo3(void* other);
void QHostInfo_QHostInfo_AbortHostLookup(int id);
struct QtNetwork_PackedList QHostInfo_Addresses(void* ptr);
long long QHostInfo_Error(void* ptr);
struct QtNetwork_PackedString QHostInfo_ErrorString(void* ptr);
void* QHostInfo_QHostInfo_FromName(struct QtNetwork_PackedString name);
struct QtNetwork_PackedString QHostInfo_HostName(void* ptr);
struct QtNetwork_PackedString QHostInfo_QHostInfo_LocalDomainName();
struct QtNetwork_PackedString QHostInfo_QHostInfo_LocalHostName();
int QHostInfo_QHostInfo_LookupHost(struct QtNetwork_PackedString name, void* receiver, char* member);
int QHostInfo_LookupId(void* ptr);
void QHostInfo_SetAddresses(void* ptr, void* addresses);
void QHostInfo_SetError(void* ptr, long long error);
void QHostInfo_SetErrorString(void* ptr, struct QtNetwork_PackedString str);
void QHostInfo_SetHostName(void* ptr, struct QtNetwork_PackedString hostName);
void QHostInfo_SetLookupId(void* ptr, int id);
void QHostInfo_Swap(void* ptr, void* other);
void QHostInfo_DestroyQHostInfo(void* ptr);
void* QHostInfo___addresses_atList(void* ptr, int i);
void QHostInfo___addresses_setList(void* ptr, void* i);
void* QHostInfo___addresses_newList(void* ptr);
void* QHostInfo___setAddresses_addresses_atList(void* ptr, int i);
void QHostInfo___setAddresses_addresses_setList(void* ptr, void* i);
void* QHostInfo___setAddresses_addresses_newList(void* ptr);
void* QHstsPolicy_NewQHstsPolicy();
void* QHstsPolicy_NewQHstsPolicy2(void* expiry, long long flags, struct QtNetwork_PackedString host, long long mode);
void* QHstsPolicy_NewQHstsPolicy3(void* other);
void* QHstsPolicy_Expiry(void* ptr);
struct QtNetwork_PackedString QHstsPolicy_Host(void* ptr, long long options);
char QHstsPolicy_IncludesSubDomains(void* ptr);
char QHstsPolicy_IsExpired(void* ptr);
void QHstsPolicy_SetExpiry(void* ptr, void* expiry);
void QHstsPolicy_SetHost(void* ptr, struct QtNetwork_PackedString host, long long mode);
void QHstsPolicy_SetIncludesSubDomains(void* ptr, char include);
void QHstsPolicy_Swap(void* ptr, void* other);
void QHstsPolicy_DestroyQHstsPolicy(void* ptr);
void* QHttp2Configuration_NewQHttp2Configuration();
void* QHttp2Configuration_NewQHttp2Configuration2(void* other);
void* QHttp2Configuration_NewQHttp2Configuration3(void* other);
char QHttp2Configuration_HuffmanCompressionEnabled(void* ptr);
unsigned int QHttp2Configuration_MaxFrameSize(void* ptr);
char QHttp2Configuration_ServerPushEnabled(void* ptr);
unsigned int QHttp2Configuration_SessionReceiveWindowSize(void* ptr);
void QHttp2Configuration_SetHuffmanCompressionEnabled(void* ptr, char enable);
char QHttp2Configuration_SetMaxFrameSize(void* ptr, unsigned int size);
void QHttp2Configuration_SetServerPushEnabled(void* ptr, char enable);
char QHttp2Configuration_SetSessionReceiveWindowSize(void* ptr, unsigned int size);
char QHttp2Configuration_SetStreamReceiveWindowSize(void* ptr, unsigned int size);
unsigned int QHttp2Configuration_StreamReceiveWindowSize(void* ptr);
void QHttp2Configuration_Swap(void* ptr, void* other);
void QHttp2Configuration_DestroyQHttp2Configuration(void* ptr);
void* QHttpMultiPart_NewQHttpMultiPart(void* parent);
void* QHttpMultiPart_NewQHttpMultiPart2(long long contentType, void* parent);
void QHttpMultiPart_Append(void* ptr, void* httpPart);
void* QHttpMultiPart_Boundary(void* ptr);
void QHttpMultiPart_SetBoundary(void* ptr, void* boundary);
void QHttpMultiPart_SetContentType(void* ptr, long long contentType);
void QHttpMultiPart_DestroyQHttpMultiPart(void* ptr);
void QHttpMultiPart_DestroyQHttpMultiPartDefault(void* ptr);
void* QHttpMultiPart___children_atList(void* ptr, int i);
void QHttpMultiPart___children_setList(void* ptr, void* i);
void* QHttpMultiPart___children_newList(void* ptr);
void* QHttpMultiPart___dynamicPropertyNames_atList(void* ptr, int i);
void QHttpMultiPart___dynamicPropertyNames_setList(void* ptr, void* i);
void* QHttpMultiPart___dynamicPropertyNames_newList(void* ptr);
void* QHttpMultiPart___findChildren_atList(void* ptr, int i);
void QHttpMultiPart___findChildren_setList(void* ptr, void* i);
void* QHttpMultiPart___findChildren_newList(void* ptr);
void* QHttpMultiPart___findChildren_atList3(void* ptr, int i);
void QHttpMultiPart___findChildren_setList3(void* ptr, void* i);
void* QHttpMultiPart___findChildren_newList3(void* ptr);
void QHttpMultiPart_ChildEventDefault(void* ptr, void* event);
void QHttpMultiPart_ConnectNotifyDefault(void* ptr, void* sign);
void QHttpMultiPart_CustomEventDefault(void* ptr, void* event);
void QHttpMultiPart_DeleteLaterDefault(void* ptr);
void QHttpMultiPart_DisconnectNotifyDefault(void* ptr, void* sign);
char QHttpMultiPart_EventDefault(void* ptr, void* e);
char QHttpMultiPart_EventFilterDefault(void* ptr, void* watched, void* event);
void* QHttpMultiPart_MetaObjectDefault(void* ptr);
void QHttpMultiPart_TimerEventDefault(void* ptr, void* event);
void* QHttpPart_NewQHttpPart();
void* QHttpPart_NewQHttpPart2(void* other);
void QHttpPart_SetBody(void* ptr, void* body);
void QHttpPart_SetBodyDevice(void* ptr, void* device);
void QHttpPart_SetHeader(void* ptr, long long header, void* value);
void QHttpPart_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QHttpPart_Swap(void* ptr, void* other);
void QHttpPart_DestroyQHttpPart(void* ptr);
void* QLocalServer_NewQLocalServer(void* parent);
void QLocalServer_Close(void* ptr);
struct QtNetwork_PackedString QLocalServer_ErrorString(void* ptr);
struct QtNetwork_PackedString QLocalServer_FullServerName(void* ptr);
char QLocalServer_HasPendingConnections(void* ptr);
char QLocalServer_HasPendingConnectionsDefault(void* ptr);
void QLocalServer_IncomingConnection(void* ptr, uintptr_t socketDescriptor);
void QLocalServer_IncomingConnectionDefault(void* ptr, uintptr_t socketDescriptor);
char QLocalServer_IsListening(void* ptr);
char QLocalServer_Listen(void* ptr, struct QtNetwork_PackedString name);
int QLocalServer_MaxPendingConnections(void* ptr);
void QLocalServer_ConnectNewConnection(void* ptr, long long t);
void QLocalServer_DisconnectNewConnection(void* ptr);
void QLocalServer_NewConnection(void* ptr);
void* QLocalServer_NextPendingConnection(void* ptr);
void* QLocalServer_NextPendingConnectionDefault(void* ptr);
char QLocalServer_QLocalServer_RemoveServer(struct QtNetwork_PackedString name);
long long QLocalServer_ServerError(void* ptr);
struct QtNetwork_PackedString QLocalServer_ServerName(void* ptr);
void QLocalServer_SetMaxPendingConnections(void* ptr, int numConnections);
void QLocalServer_SetSocketOptions(void* ptr, long long options);
long long QLocalServer_SocketOptions(void* ptr);
char QLocalServer_WaitForNewConnection(void* ptr, int msec, char* timedOut);
void QLocalServer_DestroyQLocalServer(void* ptr);
void QLocalServer_DestroyQLocalServerDefault(void* ptr);
void* QLocalServer___children_atList(void* ptr, int i);
void QLocalServer___children_setList(void* ptr, void* i);
void* QLocalServer___children_newList(void* ptr);
void* QLocalServer___dynamicPropertyNames_atList(void* ptr, int i);
void QLocalServer___dynamicPropertyNames_setList(void* ptr, void* i);
void* QLocalServer___dynamicPropertyNames_newList(void* ptr);
void* QLocalServer___findChildren_atList(void* ptr, int i);
void QLocalServer___findChildren_setList(void* ptr, void* i);
void* QLocalServer___findChildren_newList(void* ptr);
void* QLocalServer___findChildren_atList3(void* ptr, int i);
void QLocalServer___findChildren_setList3(void* ptr, void* i);
void* QLocalServer___findChildren_newList3(void* ptr);
void QLocalServer_ChildEventDefault(void* ptr, void* event);
void QLocalServer_ConnectNotifyDefault(void* ptr, void* sign);
void QLocalServer_CustomEventDefault(void* ptr, void* event);
void QLocalServer_DeleteLaterDefault(void* ptr);
void QLocalServer_DisconnectNotifyDefault(void* ptr, void* sign);
char QLocalServer_EventDefault(void* ptr, void* e);
char QLocalServer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QLocalServer_MetaObjectDefault(void* ptr);
void QLocalServer_TimerEventDefault(void* ptr, void* event);
void* QLocalSocket_NewQLocalSocket(void* parent);
void QLocalSocket_Abort(void* ptr);
long long QLocalSocket_BytesAvailableDefault(void* ptr);
long long QLocalSocket_BytesToWriteDefault(void* ptr);
char QLocalSocket_CanReadLineDefault(void* ptr);
void QLocalSocket_CloseDefault(void* ptr);
void QLocalSocket_ConnectToServer(void* ptr, long long openMode);
void QLocalSocket_ConnectToServer2(void* ptr, struct QtNetwork_PackedString name, long long openMode);
void QLocalSocket_ConnectConnected(void* ptr, long long t);
void QLocalSocket_DisconnectConnected(void* ptr);
void QLocalSocket_Connected(void* ptr);
void QLocalSocket_DisconnectFromServer(void* ptr);
void QLocalSocket_ConnectDisconnected(void* ptr, long long t);
void QLocalSocket_DisconnectDisconnected(void* ptr);
void QLocalSocket_Disconnected(void* ptr);
long long QLocalSocket_Error(void* ptr);
void QLocalSocket_ConnectErrorOccurred(void* ptr, long long t);
void QLocalSocket_DisconnectErrorOccurred(void* ptr);
void QLocalSocket_ErrorOccurred(void* ptr, long long socketError);
char QLocalSocket_Flush(void* ptr);
struct QtNetwork_PackedString QLocalSocket_FullServerName(void* ptr);
char QLocalSocket_IsSequentialDefault(void* ptr);
char QLocalSocket_IsValid(void* ptr);
char QLocalSocket_OpenDefault(void* ptr, long long openMode);
long long QLocalSocket_ReadBufferSize(void* ptr);
long long QLocalSocket_ReadData(void* ptr, char* data, long long c);
long long QLocalSocket_ReadDataDefault(void* ptr, char* data, long long c);
struct QtNetwork_PackedString QLocalSocket_ServerName(void* ptr);
void QLocalSocket_SetReadBufferSize(void* ptr, long long size);
void QLocalSocket_SetServerName(void* ptr, struct QtNetwork_PackedString name);
long long QLocalSocket_State(void* ptr);
void QLocalSocket_ConnectStateChanged(void* ptr, long long t);
void QLocalSocket_DisconnectStateChanged(void* ptr);
void QLocalSocket_StateChanged(void* ptr, long long socketState);
char QLocalSocket_WaitForBytesWrittenDefault(void* ptr, int msecs);
char QLocalSocket_WaitForConnected(void* ptr, int msecs);
char QLocalSocket_WaitForDisconnected(void* ptr, int msecs);
char QLocalSocket_WaitForReadyReadDefault(void* ptr, int msecs);
long long QLocalSocket_WriteData(void* ptr, char* data, long long c);
long long QLocalSocket_WriteDataDefault(void* ptr, char* data, long long c);
void QLocalSocket_DestroyQLocalSocket(void* ptr);
void QLocalSocket_DestroyQLocalSocketDefault(void* ptr);
void* QLocalSocket___children_atList(void* ptr, int i);
void QLocalSocket___children_setList(void* ptr, void* i);
void* QLocalSocket___children_newList(void* ptr);
void* QLocalSocket___dynamicPropertyNames_atList(void* ptr, int i);
void QLocalSocket___dynamicPropertyNames_setList(void* ptr, void* i);
void* QLocalSocket___dynamicPropertyNames_newList(void* ptr);
void* QLocalSocket___findChildren_atList(void* ptr, int i);
void QLocalSocket___findChildren_setList(void* ptr, void* i);
void* QLocalSocket___findChildren_newList(void* ptr);
void* QLocalSocket___findChildren_atList3(void* ptr, int i);
void QLocalSocket___findChildren_setList3(void* ptr, void* i);
void* QLocalSocket___findChildren_newList3(void* ptr);
char QLocalSocket_AtEndDefault(void* ptr);
long long QLocalSocket_PosDefault(void* ptr);
long long QLocalSocket_ReadLineDataDefault(void* ptr, char* data, long long maxSize);
char QLocalSocket_ResetDefault(void* ptr);
char QLocalSocket_SeekDefault(void* ptr, long long pos);
long long QLocalSocket_SizeDefault(void* ptr);
void QLocalSocket_ChildEventDefault(void* ptr, void* event);
void QLocalSocket_ConnectNotifyDefault(void* ptr, void* sign);
void QLocalSocket_CustomEventDefault(void* ptr, void* event);
void QLocalSocket_DeleteLaterDefault(void* ptr);
void QLocalSocket_DisconnectNotifyDefault(void* ptr, void* sign);
char QLocalSocket_EventDefault(void* ptr, void* e);
char QLocalSocket_EventFilterDefault(void* ptr, void* watched, void* event);
void* QLocalSocket_MetaObjectDefault(void* ptr);
void QLocalSocket_TimerEventDefault(void* ptr, void* event);
void* QNetworkAccessManager_NewQNetworkAccessManager(void* parent);
void QNetworkAccessManager_AddStrictTransportSecurityHosts(void* ptr, void* knownHosts);
void QNetworkAccessManager_ConnectAuthenticationRequired(void* ptr, long long t);
void QNetworkAccessManager_DisconnectAuthenticationRequired(void* ptr);
void QNetworkAccessManager_AuthenticationRequired(void* ptr, void* reply, void* authenticator);
char QNetworkAccessManager_AutoDeleteReplies(void* ptr);
void* QNetworkAccessManager_Cache(void* ptr);
void QNetworkAccessManager_ClearAccessCache(void* ptr);
void QNetworkAccessManager_ClearConnectionCache(void* ptr);
void QNetworkAccessManager_ConnectToHost(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port);
void QNetworkAccessManager_ConnectToHostEncrypted(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, void* sslConfiguration);
void QNetworkAccessManager_ConnectToHostEncrypted2(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, void* sslConfiguration, struct QtNetwork_PackedString peerName);
void* QNetworkAccessManager_CookieJar(void* ptr);
void* QNetworkAccessManager_CreateRequest(void* ptr, long long op, void* originalReq, void* outgoingData);
void* QNetworkAccessManager_CreateRequestDefault(void* ptr, long long op, void* originalReq, void* outgoingData);
void* QNetworkAccessManager_DeleteResource(void* ptr, void* request);
void QNetworkAccessManager_EnableStrictTransportSecurityStore(void* ptr, char enabled, struct QtNetwork_PackedString storeDir);
void QNetworkAccessManager_ConnectEncrypted(void* ptr, long long t);
void QNetworkAccessManager_DisconnectEncrypted(void* ptr);
void QNetworkAccessManager_Encrypted(void* ptr, void* reply);
void QNetworkAccessManager_ConnectFinished(void* ptr, long long t);
void QNetworkAccessManager_DisconnectFinished(void* ptr);
void QNetworkAccessManager_Finished(void* ptr, void* reply);
void* QNetworkAccessManager_Get(void* ptr, void* request);
void* QNetworkAccessManager_Head(void* ptr, void* request);
char QNetworkAccessManager_IsStrictTransportSecurityEnabled(void* ptr);
char QNetworkAccessManager_IsStrictTransportSecurityStoreEnabled(void* ptr);
void* QNetworkAccessManager_Post(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Post2(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Post3(void* ptr, void* request, void* multiPart);
void QNetworkAccessManager_ConnectPreSharedKeyAuthenticationRequired(void* ptr, long long t);
void QNetworkAccessManager_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void QNetworkAccessManager_PreSharedKeyAuthenticationRequired(void* ptr, void* reply, void* authenticator);
void* QNetworkAccessManager_Proxy(void* ptr);
void QNetworkAccessManager_ConnectProxyAuthenticationRequired(void* ptr, long long t);
void QNetworkAccessManager_DisconnectProxyAuthenticationRequired(void* ptr);
void QNetworkAccessManager_ProxyAuthenticationRequired(void* ptr, void* proxy, void* authenticator);
void* QNetworkAccessManager_ProxyFactory(void* ptr);
void* QNetworkAccessManager_Put(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Put2(void* ptr, void* request, void* data);
void* QNetworkAccessManager_Put3(void* ptr, void* request, void* multiPart);
long long QNetworkAccessManager_RedirectPolicy(void* ptr);
void* QNetworkAccessManager_SendCustomRequest(void* ptr, void* request, void* verb, void* data);
void* QNetworkAccessManager_SendCustomRequest2(void* ptr, void* request, void* verb, void* data);
void* QNetworkAccessManager_SendCustomRequest3(void* ptr, void* request, void* verb, void* multiPart);
void QNetworkAccessManager_SetAutoDeleteReplies(void* ptr, char shouldAutoDelete);
void QNetworkAccessManager_SetCache(void* ptr, void* cache);
void QNetworkAccessManager_SetCookieJar(void* ptr, void* cookieJar);
void QNetworkAccessManager_SetProxy(void* ptr, void* proxy);
void QNetworkAccessManager_SetProxyFactory(void* ptr, void* factory);
void QNetworkAccessManager_SetRedirectPolicy(void* ptr, long long policy);
void QNetworkAccessManager_SetStrictTransportSecurityEnabled(void* ptr, char enabled);
void QNetworkAccessManager_SetTransferTimeout(void* ptr, int timeout);
void QNetworkAccessManager_ConnectSslErrors(void* ptr, long long t);
void QNetworkAccessManager_DisconnectSslErrors(void* ptr);
void QNetworkAccessManager_SslErrors(void* ptr, void* reply, void* errors);
struct QtNetwork_PackedList QNetworkAccessManager_StrictTransportSecurityHosts(void* ptr);
struct QtNetwork_PackedString QNetworkAccessManager_SupportedSchemes(void* ptr);
struct QtNetwork_PackedString QNetworkAccessManager_SupportedSchemesImplementation(void* ptr);
struct QtNetwork_PackedString QNetworkAccessManager_SupportedSchemesImplementationDefault(void* ptr);
int QNetworkAccessManager_TransferTimeout(void* ptr);
void QNetworkAccessManager_DestroyQNetworkAccessManager(void* ptr);
void QNetworkAccessManager_DestroyQNetworkAccessManagerDefault(void* ptr);
void* QNetworkAccessManager___addStrictTransportSecurityHosts_knownHosts_atList(void* ptr, int i);
void QNetworkAccessManager___addStrictTransportSecurityHosts_knownHosts_setList(void* ptr, void* i);
void* QNetworkAccessManager___addStrictTransportSecurityHosts_knownHosts_newList(void* ptr);
void* QNetworkAccessManager___sslErrors_errors_atList(void* ptr, int i);
void QNetworkAccessManager___sslErrors_errors_setList(void* ptr, void* i);
void* QNetworkAccessManager___sslErrors_errors_newList(void* ptr);
void* QNetworkAccessManager___strictTransportSecurityHosts_atList(void* ptr, int i);
void QNetworkAccessManager___strictTransportSecurityHosts_setList(void* ptr, void* i);
void* QNetworkAccessManager___strictTransportSecurityHosts_newList(void* ptr);
void* QNetworkAccessManager___children_atList(void* ptr, int i);
void QNetworkAccessManager___children_setList(void* ptr, void* i);
void* QNetworkAccessManager___children_newList(void* ptr);
void* QNetworkAccessManager___dynamicPropertyNames_atList(void* ptr, int i);
void QNetworkAccessManager___dynamicPropertyNames_setList(void* ptr, void* i);
void* QNetworkAccessManager___dynamicPropertyNames_newList(void* ptr);
void* QNetworkAccessManager___findChildren_atList(void* ptr, int i);
void QNetworkAccessManager___findChildren_setList(void* ptr, void* i);
void* QNetworkAccessManager___findChildren_newList(void* ptr);
void* QNetworkAccessManager___findChildren_atList3(void* ptr, int i);
void QNetworkAccessManager___findChildren_setList3(void* ptr, void* i);
void* QNetworkAccessManager___findChildren_newList3(void* ptr);
void QNetworkAccessManager_ChildEventDefault(void* ptr, void* event);
void QNetworkAccessManager_ConnectNotifyDefault(void* ptr, void* sign);
void QNetworkAccessManager_CustomEventDefault(void* ptr, void* event);
void QNetworkAccessManager_DeleteLaterDefault(void* ptr);
void QNetworkAccessManager_DisconnectNotifyDefault(void* ptr, void* sign);
char QNetworkAccessManager_EventDefault(void* ptr, void* e);
char QNetworkAccessManager_EventFilterDefault(void* ptr, void* watched, void* event);
void* QNetworkAccessManager_MetaObjectDefault(void* ptr);
void QNetworkAccessManager_TimerEventDefault(void* ptr, void* event);
void* QNetworkAddressEntry_NewQNetworkAddressEntry();
void* QNetworkAddressEntry_NewQNetworkAddressEntry2(void* other);
void* QNetworkAddressEntry_Broadcast(void* ptr);
void QNetworkAddressEntry_ClearAddressLifetime(void* ptr);
long long QNetworkAddressEntry_DnsEligibility(void* ptr);
void* QNetworkAddressEntry_Ip(void* ptr);
char QNetworkAddressEntry_IsLifetimeKnown(void* ptr);
char QNetworkAddressEntry_IsPermanent(void* ptr);
char QNetworkAddressEntry_IsTemporary(void* ptr);
void* QNetworkAddressEntry_Netmask(void* ptr);
int QNetworkAddressEntry_PrefixLength(void* ptr);
void QNetworkAddressEntry_SetAddressLifetime(void* ptr, void* preferred, void* validity);
void QNetworkAddressEntry_SetBroadcast(void* ptr, void* newBroadcast);
void QNetworkAddressEntry_SetDnsEligibility(void* ptr, long long status);
void QNetworkAddressEntry_SetIp(void* ptr, void* newIp);
void QNetworkAddressEntry_SetNetmask(void* ptr, void* newNetmask);
void QNetworkAddressEntry_SetPrefixLength(void* ptr, int length);
void QNetworkAddressEntry_Swap(void* ptr, void* other);
void QNetworkAddressEntry_DestroyQNetworkAddressEntry(void* ptr);
void* QNetworkCacheMetaData_NewQNetworkCacheMetaData();
void* QNetworkCacheMetaData_NewQNetworkCacheMetaData2(void* other);
void* QNetworkCacheMetaData_ExpirationDate(void* ptr);
char QNetworkCacheMetaData_IsValid(void* ptr);
void* QNetworkCacheMetaData_LastModified(void* ptr);
struct QtNetwork_PackedList QNetworkCacheMetaData_RawHeaders(void* ptr);
char QNetworkCacheMetaData_SaveToDisk(void* ptr);
void QNetworkCacheMetaData_SetExpirationDate(void* ptr, void* dateTime);
void QNetworkCacheMetaData_SetLastModified(void* ptr, void* dateTime);
void QNetworkCacheMetaData_SetRawHeaders(void* ptr, void* list);
void QNetworkCacheMetaData_SetSaveToDisk(void* ptr, char allow);
void QNetworkCacheMetaData_SetUrl(void* ptr, void* url);
void QNetworkCacheMetaData_Swap(void* ptr, void* other);
void* QNetworkCacheMetaData_Url(void* ptr);
void QNetworkCacheMetaData_DestroyQNetworkCacheMetaData(void* ptr);
void* QNetworkCacheMetaData___rawHeaders_atList(void* ptr, int i);
void QNetworkCacheMetaData___rawHeaders_setList(void* ptr, void* i);
void* QNetworkCacheMetaData___rawHeaders_newList(void* ptr);
void* QNetworkCacheMetaData___setRawHeaders_list_atList(void* ptr, int i);
void QNetworkCacheMetaData___setRawHeaders_list_setList(void* ptr, void* i);
void* QNetworkCacheMetaData___setRawHeaders_list_newList(void* ptr);
void* QNetworkConfiguration_NewQNetworkConfiguration();
void* QNetworkConfiguration_NewQNetworkConfiguration2(void* other);
long long QNetworkConfiguration_BearerType(void* ptr);
long long QNetworkConfiguration_BearerTypeFamily(void* ptr);
struct QtNetwork_PackedString QNetworkConfiguration_BearerTypeName(void* ptr);
struct QtNetwork_PackedList QNetworkConfiguration_Children(void* ptr);
int QNetworkConfiguration_ConnectTimeout(void* ptr);
struct QtNetwork_PackedString QNetworkConfiguration_Identifier(void* ptr);
char QNetworkConfiguration_IsRoamingAvailable(void* ptr);
char QNetworkConfiguration_IsValid(void* ptr);
struct QtNetwork_PackedString QNetworkConfiguration_Name(void* ptr);
long long QNetworkConfiguration_Purpose(void* ptr);
char QNetworkConfiguration_SetConnectTimeout(void* ptr, int timeout);
long long QNetworkConfiguration_State(void* ptr);
void QNetworkConfiguration_Swap(void* ptr, void* other);
long long QNetworkConfiguration_Type(void* ptr);
void QNetworkConfiguration_DestroyQNetworkConfiguration(void* ptr);
void* QNetworkConfiguration___children_atList(void* ptr, int i);
void QNetworkConfiguration___children_setList(void* ptr, void* i);
void* QNetworkConfiguration___children_newList(void* ptr);
void* QNetworkConfigurationManager_NewQNetworkConfigurationManager(void* parent);
struct QtNetwork_PackedList QNetworkConfigurationManager_AllConfigurations(void* ptr, long long filter);
long long QNetworkConfigurationManager_Capabilities(void* ptr);
void QNetworkConfigurationManager_ConnectConfigurationAdded(void* ptr, long long t);
void QNetworkConfigurationManager_DisconnectConfigurationAdded(void* ptr);
void QNetworkConfigurationManager_ConfigurationAdded(void* ptr, void* config);
void QNetworkConfigurationManager_ConnectConfigurationChanged(void* ptr, long long t);
void QNetworkConfigurationManager_DisconnectConfigurationChanged(void* ptr);
void QNetworkConfigurationManager_ConfigurationChanged(void* ptr, void* config);
void* QNetworkConfigurationManager_ConfigurationFromIdentifier(void* ptr, struct QtNetwork_PackedString identifier);
void QNetworkConfigurationManager_ConnectConfigurationRemoved(void* ptr, long long t);
void QNetworkConfigurationManager_DisconnectConfigurationRemoved(void* ptr);
void QNetworkConfigurationManager_ConfigurationRemoved(void* ptr, void* config);
void* QNetworkConfigurationManager_DefaultConfiguration(void* ptr);
char QNetworkConfigurationManager_IsOnline(void* ptr);
void QNetworkConfigurationManager_ConnectOnlineStateChanged(void* ptr, long long t);
void QNetworkConfigurationManager_DisconnectOnlineStateChanged(void* ptr);
void QNetworkConfigurationManager_OnlineStateChanged(void* ptr, char isOnline);
void QNetworkConfigurationManager_ConnectUpdateCompleted(void* ptr, long long t);
void QNetworkConfigurationManager_DisconnectUpdateCompleted(void* ptr);
void QNetworkConfigurationManager_UpdateCompleted(void* ptr);
void QNetworkConfigurationManager_UpdateConfigurations(void* ptr);
void QNetworkConfigurationManager_UpdateConfigurationsDefault(void* ptr);
void QNetworkConfigurationManager_DestroyQNetworkConfigurationManager(void* ptr);
void QNetworkConfigurationManager_DestroyQNetworkConfigurationManagerDefault(void* ptr);
void* QNetworkConfigurationManager___allConfigurations_atList(void* ptr, int i);
void QNetworkConfigurationManager___allConfigurations_setList(void* ptr, void* i);
void* QNetworkConfigurationManager___allConfigurations_newList(void* ptr);
void* QNetworkCookie_NewQNetworkCookie(void* name, void* value);
void* QNetworkCookie_NewQNetworkCookie2(void* other);
struct QtNetwork_PackedString QNetworkCookie_Domain(void* ptr);
void* QNetworkCookie_ExpirationDate(void* ptr);
char QNetworkCookie_HasSameIdentifier(void* ptr, void* other);
char QNetworkCookie_IsHttpOnly(void* ptr);
char QNetworkCookie_IsSecure(void* ptr);
char QNetworkCookie_IsSessionCookie(void* ptr);
void* QNetworkCookie_Name(void* ptr);
void QNetworkCookie_Normalize(void* ptr, void* url);
struct QtNetwork_PackedList QNetworkCookie_QNetworkCookie_ParseCookies(void* cookieString);
struct QtNetwork_PackedString QNetworkCookie_Path(void* ptr);
void QNetworkCookie_SetDomain(void* ptr, struct QtNetwork_PackedString domain);
void QNetworkCookie_SetExpirationDate(void* ptr, void* date);
void QNetworkCookie_SetHttpOnly(void* ptr, char enable);
void QNetworkCookie_SetName(void* ptr, void* cookieName);
void QNetworkCookie_SetPath(void* ptr, struct QtNetwork_PackedString path);
void QNetworkCookie_SetSecure(void* ptr, char enable);
void QNetworkCookie_SetValue(void* ptr, void* value);
void QNetworkCookie_Swap(void* ptr, void* other);
void* QNetworkCookie_ToRawForm(void* ptr, long long form);
void* QNetworkCookie_Value(void* ptr);
void QNetworkCookie_DestroyQNetworkCookie(void* ptr);
void* QNetworkCookie___parseCookies_atList(void* ptr, int i);
void QNetworkCookie___parseCookies_setList(void* ptr, void* i);
void* QNetworkCookie___parseCookies_newList(void* ptr);
void* QNetworkCookieJar_NewQNetworkCookieJar(void* parent);
struct QtNetwork_PackedList QNetworkCookieJar_AllCookies(void* ptr);
struct QtNetwork_PackedList QNetworkCookieJar_CookiesForUrl(void* ptr, void* url);
struct QtNetwork_PackedList QNetworkCookieJar_CookiesForUrlDefault(void* ptr, void* url);
char QNetworkCookieJar_DeleteCookie(void* ptr, void* cookie);
char QNetworkCookieJar_DeleteCookieDefault(void* ptr, void* cookie);
char QNetworkCookieJar_InsertCookie(void* ptr, void* cookie);
char QNetworkCookieJar_InsertCookieDefault(void* ptr, void* cookie);
void QNetworkCookieJar_SetAllCookies(void* ptr, void* cookieList);
char QNetworkCookieJar_SetCookiesFromUrl(void* ptr, void* cookieList, void* url);
char QNetworkCookieJar_SetCookiesFromUrlDefault(void* ptr, void* cookieList, void* url);
char QNetworkCookieJar_UpdateCookie(void* ptr, void* cookie);
char QNetworkCookieJar_UpdateCookieDefault(void* ptr, void* cookie);
char QNetworkCookieJar_ValidateCookie(void* ptr, void* cookie, void* url);
char QNetworkCookieJar_ValidateCookieDefault(void* ptr, void* cookie, void* url);
void QNetworkCookieJar_DestroyQNetworkCookieJar(void* ptr);
void QNetworkCookieJar_DestroyQNetworkCookieJarDefault(void* ptr);
void* QNetworkCookieJar___allCookies_atList(void* ptr, int i);
void QNetworkCookieJar___allCookies_setList(void* ptr, void* i);
void* QNetworkCookieJar___allCookies_newList(void* ptr);
void* QNetworkCookieJar___cookiesForUrl_atList(void* ptr, int i);
void QNetworkCookieJar___cookiesForUrl_setList(void* ptr, void* i);
void* QNetworkCookieJar___cookiesForUrl_newList(void* ptr);
void* QNetworkCookieJar___setAllCookies_cookieList_atList(void* ptr, int i);
void QNetworkCookieJar___setAllCookies_cookieList_setList(void* ptr, void* i);
void* QNetworkCookieJar___setAllCookies_cookieList_newList(void* ptr);
void* QNetworkCookieJar___setCookiesFromUrl_cookieList_atList(void* ptr, int i);
void QNetworkCookieJar___setCookiesFromUrl_cookieList_setList(void* ptr, void* i);
void* QNetworkCookieJar___setCookiesFromUrl_cookieList_newList(void* ptr);
void* QNetworkCookieJar___children_atList(void* ptr, int i);
void QNetworkCookieJar___children_setList(void* ptr, void* i);
void* QNetworkCookieJar___children_newList(void* ptr);
void* QNetworkCookieJar___dynamicPropertyNames_atList(void* ptr, int i);
void QNetworkCookieJar___dynamicPropertyNames_setList(void* ptr, void* i);
void* QNetworkCookieJar___dynamicPropertyNames_newList(void* ptr);
void* QNetworkCookieJar___findChildren_atList(void* ptr, int i);
void QNetworkCookieJar___findChildren_setList(void* ptr, void* i);
void* QNetworkCookieJar___findChildren_newList(void* ptr);
void* QNetworkCookieJar___findChildren_atList3(void* ptr, int i);
void QNetworkCookieJar___findChildren_setList3(void* ptr, void* i);
void* QNetworkCookieJar___findChildren_newList3(void* ptr);
void QNetworkCookieJar_ChildEventDefault(void* ptr, void* event);
void QNetworkCookieJar_ConnectNotifyDefault(void* ptr, void* sign);
void QNetworkCookieJar_CustomEventDefault(void* ptr, void* event);
void QNetworkCookieJar_DeleteLaterDefault(void* ptr);
void QNetworkCookieJar_DisconnectNotifyDefault(void* ptr, void* sign);
char QNetworkCookieJar_EventDefault(void* ptr, void* e);
char QNetworkCookieJar_EventFilterDefault(void* ptr, void* watched, void* event);
void* QNetworkCookieJar_MetaObjectDefault(void* ptr);
void QNetworkCookieJar_TimerEventDefault(void* ptr, void* event);
void* QNetworkDatagram_NewQNetworkDatagram();
void* QNetworkDatagram_NewQNetworkDatagram2(void* data, void* destinationAddress, unsigned short port);
void* QNetworkDatagram_NewQNetworkDatagram3(void* other);
void QNetworkDatagram_Clear(void* ptr);
void* QNetworkDatagram_Data(void* ptr);
void* QNetworkDatagram_DestinationAddress(void* ptr);
int QNetworkDatagram_DestinationPort(void* ptr);
int QNetworkDatagram_HopLimit(void* ptr);
unsigned int QNetworkDatagram_InterfaceIndex(void* ptr);
char QNetworkDatagram_IsNull(void* ptr);
char QNetworkDatagram_IsValid(void* ptr);
void* QNetworkDatagram_MakeReply(void* ptr, void* payload);
void* QNetworkDatagram_MakeReply2(void* ptr, void* payload);
void* QNetworkDatagram_SenderAddress(void* ptr);
int QNetworkDatagram_SenderPort(void* ptr);
void QNetworkDatagram_SetData(void* ptr, void* data);
void QNetworkDatagram_SetDestination(void* ptr, void* address, unsigned short port);
void QNetworkDatagram_SetHopLimit(void* ptr, int count);
void QNetworkDatagram_SetInterfaceIndex(void* ptr, unsigned int index);
void QNetworkDatagram_SetSender(void* ptr, void* address, unsigned short port);
void QNetworkDatagram_Swap(void* ptr, void* other);
void* QNetworkDiskCache_NewQNetworkDiskCache(void* parent);
struct QtNetwork_PackedString QNetworkDiskCache_CacheDirectory(void* ptr);
long long QNetworkDiskCache_CacheSize(void* ptr);
long long QNetworkDiskCache_CacheSizeDefault(void* ptr);
void QNetworkDiskCache_Clear(void* ptr);
void QNetworkDiskCache_ClearDefault(void* ptr);
void* QNetworkDiskCache_Data(void* ptr, void* url);
void* QNetworkDiskCache_DataDefault(void* ptr, void* url);
long long QNetworkDiskCache_Expire(void* ptr);
long long QNetworkDiskCache_ExpireDefault(void* ptr);
void* QNetworkDiskCache_FileMetaData(void* ptr, struct QtNetwork_PackedString fileName);
void QNetworkDiskCache_Insert(void* ptr, void* device);
void QNetworkDiskCache_InsertDefault(void* ptr, void* device);
long long QNetworkDiskCache_MaximumCacheSize(void* ptr);
void* QNetworkDiskCache_MetaData(void* ptr, void* url);
void* QNetworkDiskCache_MetaDataDefault(void* ptr, void* url);
void* QNetworkDiskCache_Prepare(void* ptr, void* metaData);
void* QNetworkDiskCache_PrepareDefault(void* ptr, void* metaData);
char QNetworkDiskCache_Remove(void* ptr, void* url);
char QNetworkDiskCache_RemoveDefault(void* ptr, void* url);
void QNetworkDiskCache_SetCacheDirectory(void* ptr, struct QtNetwork_PackedString cacheDir);
void QNetworkDiskCache_SetMaximumCacheSize(void* ptr, long long size);
void QNetworkDiskCache_UpdateMetaData(void* ptr, void* metaData);
void QNetworkDiskCache_UpdateMetaDataDefault(void* ptr, void* metaData);
void QNetworkDiskCache_DestroyQNetworkDiskCache(void* ptr);
void QNetworkDiskCache_DestroyQNetworkDiskCacheDefault(void* ptr);
void* QNetworkInterface_NewQNetworkInterface();
void* QNetworkInterface_NewQNetworkInterface2(void* other);
struct QtNetwork_PackedList QNetworkInterface_AddressEntries(void* ptr);
struct QtNetwork_PackedList QNetworkInterface_QNetworkInterface_AllAddresses();
struct QtNetwork_PackedList QNetworkInterface_QNetworkInterface_AllInterfaces();
long long QNetworkInterface_Flags(void* ptr);
struct QtNetwork_PackedString QNetworkInterface_HardwareAddress(void* ptr);
struct QtNetwork_PackedString QNetworkInterface_HumanReadableName(void* ptr);
int QNetworkInterface_Index(void* ptr);
void* QNetworkInterface_QNetworkInterface_InterfaceFromIndex(int index);
void* QNetworkInterface_QNetworkInterface_InterfaceFromName(struct QtNetwork_PackedString name);
int QNetworkInterface_QNetworkInterface_InterfaceIndexFromName(struct QtNetwork_PackedString name);
struct QtNetwork_PackedString QNetworkInterface_QNetworkInterface_InterfaceNameFromIndex(int index);
char QNetworkInterface_IsValid(void* ptr);
int QNetworkInterface_MaximumTransmissionUnit(void* ptr);
struct QtNetwork_PackedString QNetworkInterface_Name(void* ptr);
void QNetworkInterface_Swap(void* ptr, void* other);
long long QNetworkInterface_Type(void* ptr);
void QNetworkInterface_DestroyQNetworkInterface(void* ptr);
void* QNetworkInterface___addressEntries_atList(void* ptr, int i);
void QNetworkInterface___addressEntries_setList(void* ptr, void* i);
void* QNetworkInterface___addressEntries_newList(void* ptr);
void* QNetworkInterface___allAddresses_atList(void* ptr, int i);
void QNetworkInterface___allAddresses_setList(void* ptr, void* i);
void* QNetworkInterface___allAddresses_newList(void* ptr);
void* QNetworkInterface___allInterfaces_atList(void* ptr, int i);
void QNetworkInterface___allInterfaces_setList(void* ptr, void* i);
void* QNetworkInterface___allInterfaces_newList(void* ptr);
void* QNetworkProxy_NewQNetworkProxy();
void* QNetworkProxy_NewQNetworkProxy2(long long ty, struct QtNetwork_PackedString hostName, unsigned short port, struct QtNetwork_PackedString user, struct QtNetwork_PackedString password);
void* QNetworkProxy_NewQNetworkProxy3(void* other);
void* QNetworkProxy_QNetworkProxy_ApplicationProxy();
long long QNetworkProxy_Capabilities(void* ptr);
char QNetworkProxy_HasRawHeader(void* ptr, void* headerName);
void* QNetworkProxy_Header(void* ptr, long long header);
struct QtNetwork_PackedString QNetworkProxy_HostName(void* ptr);
char QNetworkProxy_IsCachingProxy(void* ptr);
char QNetworkProxy_IsTransparentProxy(void* ptr);
struct QtNetwork_PackedString QNetworkProxy_Password(void* ptr);
unsigned short QNetworkProxy_Port(void* ptr);
void* QNetworkProxy_RawHeader(void* ptr, void* headerName);
struct QtNetwork_PackedList QNetworkProxy_RawHeaderList(void* ptr);
void QNetworkProxy_QNetworkProxy_SetApplicationProxy(void* networkProxy);
void QNetworkProxy_SetCapabilities(void* ptr, long long capabilities);
void QNetworkProxy_SetHeader(void* ptr, long long header, void* value);
void QNetworkProxy_SetHostName(void* ptr, struct QtNetwork_PackedString hostName);
void QNetworkProxy_SetPassword(void* ptr, struct QtNetwork_PackedString password);
void QNetworkProxy_SetPort(void* ptr, unsigned short port);
void QNetworkProxy_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QNetworkProxy_SetType(void* ptr, long long ty);
void QNetworkProxy_SetUser(void* ptr, struct QtNetwork_PackedString user);
void QNetworkProxy_Swap(void* ptr, void* other);
long long QNetworkProxy_Type(void* ptr);
struct QtNetwork_PackedString QNetworkProxy_User(void* ptr);
void QNetworkProxy_DestroyQNetworkProxy(void* ptr);
void* QNetworkProxy___rawHeaderList_atList(void* ptr, int i);
void QNetworkProxy___rawHeaderList_setList(void* ptr, void* i);
void* QNetworkProxy___rawHeaderList_newList(void* ptr);
void* QNetworkProxyFactory_NewQNetworkProxyFactory();
struct QtNetwork_PackedList QNetworkProxyFactory_QNetworkProxyFactory_ProxyForQuery(void* query);
struct QtNetwork_PackedList QNetworkProxyFactory_QueryProxy(void* ptr, void* query);
void QNetworkProxyFactory_QNetworkProxyFactory_SetApplicationProxyFactory(void* factory);
void QNetworkProxyFactory_QNetworkProxyFactory_SetUseSystemConfiguration(char enable);
struct QtNetwork_PackedList QNetworkProxyFactory_QNetworkProxyFactory_SystemProxyForQuery(void* query);
char QNetworkProxyFactory_QNetworkProxyFactory_UsesSystemConfiguration();
void QNetworkProxyFactory_DestroyQNetworkProxyFactory(void* ptr);
void QNetworkProxyFactory_DestroyQNetworkProxyFactoryDefault(void* ptr);
void* QNetworkProxyFactory___proxyForQuery_atList(void* ptr, int i);
void QNetworkProxyFactory___proxyForQuery_setList(void* ptr, void* i);
void* QNetworkProxyFactory___proxyForQuery_newList(void* ptr);
void* QNetworkProxyFactory___queryProxy_atList(void* ptr, int i);
void QNetworkProxyFactory___queryProxy_setList(void* ptr, void* i);
void* QNetworkProxyFactory___queryProxy_newList(void* ptr);
void* QNetworkProxyFactory___systemProxyForQuery_atList(void* ptr, int i);
void QNetworkProxyFactory___systemProxyForQuery_setList(void* ptr, void* i);
void* QNetworkProxyFactory___systemProxyForQuery_newList(void* ptr);
void* QNetworkProxyQuery_NewQNetworkProxyQuery();
void* QNetworkProxyQuery_NewQNetworkProxyQuery2(void* requestUrl, long long queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery3(struct QtNetwork_PackedString hostname, int port, struct QtNetwork_PackedString protocolTag, long long queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery4(unsigned short bindPort, struct QtNetwork_PackedString protocolTag, long long queryType);
void* QNetworkProxyQuery_NewQNetworkProxyQuery8(void* other);
int QNetworkProxyQuery_LocalPort(void* ptr);
struct QtNetwork_PackedString QNetworkProxyQuery_PeerHostName(void* ptr);
int QNetworkProxyQuery_PeerPort(void* ptr);
struct QtNetwork_PackedString QNetworkProxyQuery_ProtocolTag(void* ptr);
long long QNetworkProxyQuery_QueryType(void* ptr);
void QNetworkProxyQuery_SetLocalPort(void* ptr, int port);
void QNetworkProxyQuery_SetPeerHostName(void* ptr, struct QtNetwork_PackedString hostname);
void QNetworkProxyQuery_SetPeerPort(void* ptr, int port);
void QNetworkProxyQuery_SetProtocolTag(void* ptr, struct QtNetwork_PackedString protocolTag);
void QNetworkProxyQuery_SetQueryType(void* ptr, long long ty);
void QNetworkProxyQuery_SetUrl(void* ptr, void* url);
void QNetworkProxyQuery_Swap(void* ptr, void* other);
void* QNetworkProxyQuery_Url(void* ptr);
void QNetworkProxyQuery_DestroyQNetworkProxyQuery(void* ptr);
void* QNetworkReply_NewQNetworkReply(void* parent);
void QNetworkReply_Abort(void* ptr);
void* QNetworkReply_Attribute(void* ptr, long long code);
void QNetworkReply_CloseDefault(void* ptr);
void QNetworkReply_ConnectDownloadProgress(void* ptr, long long t);
void QNetworkReply_DisconnectDownloadProgress(void* ptr);
void QNetworkReply_DownloadProgress(void* ptr, long long bytesReceived, long long bytesTotal);
void QNetworkReply_ConnectEncrypted(void* ptr, long long t);
void QNetworkReply_DisconnectEncrypted(void* ptr);
void QNetworkReply_Encrypted(void* ptr);
long long QNetworkReply_Error(void* ptr);
void QNetworkReply_ConnectErrorOccurred(void* ptr, long long t);
void QNetworkReply_DisconnectErrorOccurred(void* ptr);
void QNetworkReply_ErrorOccurred(void* ptr, long long code);
void QNetworkReply_ConnectFinished(void* ptr, long long t);
void QNetworkReply_DisconnectFinished(void* ptr);
void QNetworkReply_Finished(void* ptr);
char QNetworkReply_HasRawHeader(void* ptr, void* headerName);
void* QNetworkReply_Header(void* ptr, long long header);
void QNetworkReply_IgnoreSslErrors(void* ptr);
void QNetworkReply_IgnoreSslErrorsDefault(void* ptr);
void QNetworkReply_IgnoreSslErrors2(void* ptr, void* errors);
void QNetworkReply_IgnoreSslErrorsImplementation(void* ptr, void* errors);
void QNetworkReply_IgnoreSslErrorsImplementationDefault(void* ptr, void* errors);
char QNetworkReply_IsFinished(void* ptr);
char QNetworkReply_IsRunning(void* ptr);
void* QNetworkReply_Manager(void* ptr);
void QNetworkReply_ConnectMetaDataChanged(void* ptr, long long t);
void QNetworkReply_DisconnectMetaDataChanged(void* ptr);
void QNetworkReply_MetaDataChanged(void* ptr);
long long QNetworkReply_Operation(void* ptr);
void QNetworkReply_ConnectPreSharedKeyAuthenticationRequired(void* ptr, long long t);
void QNetworkReply_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void QNetworkReply_PreSharedKeyAuthenticationRequired(void* ptr, void* authenticator);
void* QNetworkReply_RawHeader(void* ptr, void* headerName);
struct QtNetwork_PackedList QNetworkReply_RawHeaderList(void* ptr);
long long QNetworkReply_ReadBufferSize(void* ptr);
void QNetworkReply_ConnectRedirectAllowed(void* ptr, long long t);
void QNetworkReply_DisconnectRedirectAllowed(void* ptr);
void QNetworkReply_RedirectAllowed(void* ptr);
void QNetworkReply_ConnectRedirected(void* ptr, long long t);
void QNetworkReply_DisconnectRedirected(void* ptr);
void QNetworkReply_Redirected(void* ptr, void* url);
void* QNetworkReply_Request(void* ptr);
void QNetworkReply_SetAttribute(void* ptr, long long code, void* value);
void QNetworkReply_SetError(void* ptr, long long errorCode, struct QtNetwork_PackedString errorString);
void QNetworkReply_SetFinished(void* ptr, char finished);
void QNetworkReply_SetHeader(void* ptr, long long header, void* value);
void QNetworkReply_SetOperation(void* ptr, long long operation);
void QNetworkReply_SetRawHeader(void* ptr, void* headerName, void* value);
void QNetworkReply_SetReadBufferSize(void* ptr, long long size);
void QNetworkReply_SetReadBufferSizeDefault(void* ptr, long long size);
void QNetworkReply_SetRequest(void* ptr, void* request);
void QNetworkReply_SetSslConfiguration(void* ptr, void* config);
void QNetworkReply_SetSslConfigurationImplementation(void* ptr, void* configuration);
void QNetworkReply_SetSslConfigurationImplementationDefault(void* ptr, void* configuration);
void QNetworkReply_SetUrl(void* ptr, void* url);
void* QNetworkReply_SslConfiguration(void* ptr);
void QNetworkReply_SslConfigurationImplementation(void* ptr, void* configuration);
void QNetworkReply_SslConfigurationImplementationDefault(void* ptr, void* configuration);
void QNetworkReply_ConnectSslErrors(void* ptr, long long t);
void QNetworkReply_DisconnectSslErrors(void* ptr);
void QNetworkReply_SslErrors(void* ptr, void* errors);
void QNetworkReply_ConnectUploadProgress(void* ptr, long long t);
void QNetworkReply_DisconnectUploadProgress(void* ptr);
void QNetworkReply_UploadProgress(void* ptr, long long bytesSent, long long bytesTotal);
void* QNetworkReply_Url(void* ptr);
void QNetworkReply_DestroyQNetworkReply(void* ptr);
void QNetworkReply_DestroyQNetworkReplyDefault(void* ptr);
void* QNetworkReply___ignoreSslErrors_errors_atList2(void* ptr, int i);
void QNetworkReply___ignoreSslErrors_errors_setList2(void* ptr, void* i);
void* QNetworkReply___ignoreSslErrors_errors_newList2(void* ptr);
void* QNetworkReply___ignoreSslErrorsImplementation_errors_atList(void* ptr, int i);
void QNetworkReply___ignoreSslErrorsImplementation_errors_setList(void* ptr, void* i);
void* QNetworkReply___ignoreSslErrorsImplementation_errors_newList(void* ptr);
void* QNetworkReply___rawHeaderList_atList(void* ptr, int i);
void QNetworkReply___rawHeaderList_setList(void* ptr, void* i);
void* QNetworkReply___rawHeaderList_newList(void* ptr);
void* QNetworkReply___sslErrors_errors_atList(void* ptr, int i);
void QNetworkReply___sslErrors_errors_setList(void* ptr, void* i);
void* QNetworkReply___sslErrors_errors_newList(void* ptr);
void* QNetworkReply___children_atList(void* ptr, int i);
void QNetworkReply___children_setList(void* ptr, void* i);
void* QNetworkReply___children_newList(void* ptr);
void* QNetworkReply___dynamicPropertyNames_atList(void* ptr, int i);
void QNetworkReply___dynamicPropertyNames_setList(void* ptr, void* i);
void* QNetworkReply___dynamicPropertyNames_newList(void* ptr);
void* QNetworkReply___findChildren_atList(void* ptr, int i);
void QNetworkReply___findChildren_setList(void* ptr, void* i);
void* QNetworkReply___findChildren_newList(void* ptr);
void* QNetworkReply___findChildren_atList3(void* ptr, int i);
void QNetworkReply___findChildren_setList3(void* ptr, void* i);
void* QNetworkReply___findChildren_newList3(void* ptr);
char QNetworkReply_AtEndDefault(void* ptr);
long long QNetworkReply_BytesAvailableDefault(void* ptr);
long long QNetworkReply_BytesToWriteDefault(void* ptr);
char QNetworkReply_CanReadLineDefault(void* ptr);
char QNetworkReply_IsSequentialDefault(void* ptr);
char QNetworkReply_OpenDefault(void* ptr, long long mode);
long long QNetworkReply_PosDefault(void* ptr);
long long QNetworkReply_ReadData(void* ptr, char* data, long long maxSize);
long long QNetworkReply_ReadDataDefault(void* ptr, char* data, long long maxSize);
long long QNetworkReply_ReadLineDataDefault(void* ptr, char* data, long long maxSize);
char QNetworkReply_ResetDefault(void* ptr);
char QNetworkReply_SeekDefault(void* ptr, long long pos);
long long QNetworkReply_SizeDefault(void* ptr);
char QNetworkReply_WaitForBytesWrittenDefault(void* ptr, int msecs);
char QNetworkReply_WaitForReadyReadDefault(void* ptr, int msecs);
long long QNetworkReply_WriteData(void* ptr, char* data, long long maxSize);
long long QNetworkReply_WriteDataDefault(void* ptr, char* data, long long maxSize);
void QNetworkReply_ChildEventDefault(void* ptr, void* event);
void QNetworkReply_ConnectNotifyDefault(void* ptr, void* sign);
void QNetworkReply_CustomEventDefault(void* ptr, void* event);
void QNetworkReply_DeleteLaterDefault(void* ptr);
void QNetworkReply_DisconnectNotifyDefault(void* ptr, void* sign);
char QNetworkReply_EventDefault(void* ptr, void* e);
char QNetworkReply_EventFilterDefault(void* ptr, void* watched, void* event);
void* QNetworkReply_MetaObjectDefault(void* ptr);
void QNetworkReply_TimerEventDefault(void* ptr, void* event);
int QNetworkRequest_EmitAllUploadProgressSignalsAttribute_Type();
void* QNetworkRequest_NewQNetworkRequest();
void* QNetworkRequest_NewQNetworkRequest2(void* url);
void* QNetworkRequest_NewQNetworkRequest3(void* other);
void* QNetworkRequest_Attribute(void* ptr, long long code, void* defaultValue);
char QNetworkRequest_HasRawHeader(void* ptr, void* headerName);
void* QNetworkRequest_Header(void* ptr, long long header);
void* QNetworkRequest_Http2Configuration(void* ptr);
int QNetworkRequest_MaximumRedirectsAllowed(void* ptr);
void* QNetworkRequest_OriginatingObject(void* ptr);
struct QtNetwork_PackedString QNetworkRequest_PeerVerifyName(void* ptr);
long long QNetworkRequest_Priority(void* ptr);
void* QNetworkRequest_RawHeader(void* ptr, void* headerName);
struct QtNetwork_PackedList QNetworkRequest_RawHeaderList(void* ptr);
void QNetworkRequest_SetAttribute(void* ptr, long long code, void* value);
void QNetworkRequest_SetHeader(void* ptr, long long header, void* value);
void QNetworkRequest_SetHttp2Configuration(void* ptr, void* configuration);
void QNetworkRequest_SetMaximumRedirectsAllowed(void* ptr, int maxRedirectsAllowed);
void QNetworkRequest_SetOriginatingObject(void* ptr, void* object);
void QNetworkRequest_SetPeerVerifyName(void* ptr, struct QtNetwork_PackedString peerName);
void QNetworkRequest_SetPriority(void* ptr, long long priority);
void QNetworkRequest_SetRawHeader(void* ptr, void* headerName, void* headerValue);
void QNetworkRequest_SetSslConfiguration(void* ptr, void* config);
void QNetworkRequest_SetTransferTimeout(void* ptr, int timeout);
void QNetworkRequest_SetUrl(void* ptr, void* url);
void* QNetworkRequest_SslConfiguration(void* ptr);
void QNetworkRequest_Swap(void* ptr, void* other);
int QNetworkRequest_TransferTimeout(void* ptr);
void* QNetworkRequest_Url(void* ptr);
void QNetworkRequest_DestroyQNetworkRequest(void* ptr);
void* QNetworkRequest___rawHeaderList_atList(void* ptr, int i);
void QNetworkRequest___rawHeaderList_setList(void* ptr, void* i);
void* QNetworkRequest___rawHeaderList_newList(void* ptr);
void* QNetworkSession_NewQNetworkSession(void* connectionConfig, void* parent);
void QNetworkSession_Accept(void* ptr);
void QNetworkSession_AcceptDefault(void* ptr);
unsigned long long QNetworkSession_ActiveTime(void* ptr);
unsigned long long QNetworkSession_BytesReceived(void* ptr);
unsigned long long QNetworkSession_BytesWritten(void* ptr);
void QNetworkSession_Close(void* ptr);
void QNetworkSession_CloseDefault(void* ptr);
void QNetworkSession_ConnectClosed(void* ptr, long long t);
void QNetworkSession_DisconnectClosed(void* ptr);
void QNetworkSession_Closed(void* ptr);
void* QNetworkSession_Configuration(void* ptr);
long long QNetworkSession_Error(void* ptr);
void QNetworkSession_ConnectError2(void* ptr, long long t);
void QNetworkSession_DisconnectError2(void* ptr);
void QNetworkSession_Error2(void* ptr, long long error);
struct QtNetwork_PackedString QNetworkSession_ErrorString(void* ptr);
void QNetworkSession_Ignore(void* ptr);
void QNetworkSession_IgnoreDefault(void* ptr);
void* QNetworkSession_Interface(void* ptr);
char QNetworkSession_IsOpen(void* ptr);
void QNetworkSession_Migrate(void* ptr);
void QNetworkSession_MigrateDefault(void* ptr);
void QNetworkSession_ConnectNewConfigurationActivated(void* ptr, long long t);
void QNetworkSession_DisconnectNewConfigurationActivated(void* ptr);
void QNetworkSession_NewConfigurationActivated(void* ptr);
void QNetworkSession_Open(void* ptr);
void QNetworkSession_OpenDefault(void* ptr);
void QNetworkSession_ConnectOpened(void* ptr, long long t);
void QNetworkSession_DisconnectOpened(void* ptr);
void QNetworkSession_Opened(void* ptr);
void QNetworkSession_ConnectPreferredConfigurationChanged(void* ptr, long long t);
void QNetworkSession_DisconnectPreferredConfigurationChanged(void* ptr);
void QNetworkSession_PreferredConfigurationChanged(void* ptr, void* config, char isSeamless);
void QNetworkSession_Reject(void* ptr);
void QNetworkSession_RejectDefault(void* ptr);
void* QNetworkSession_SessionProperty(void* ptr, struct QtNetwork_PackedString key);
void QNetworkSession_SetSessionProperty(void* ptr, struct QtNetwork_PackedString key, void* value);
long long QNetworkSession_State(void* ptr);
void QNetworkSession_ConnectStateChanged(void* ptr, long long t);
void QNetworkSession_DisconnectStateChanged(void* ptr);
void QNetworkSession_StateChanged(void* ptr, long long state);
void QNetworkSession_Stop(void* ptr);
void QNetworkSession_StopDefault(void* ptr);
long long QNetworkSession_UsagePolicies(void* ptr);
void QNetworkSession_ConnectUsagePoliciesChanged(void* ptr, long long t);
void QNetworkSession_DisconnectUsagePoliciesChanged(void* ptr);
void QNetworkSession_UsagePoliciesChanged(void* ptr, long long usagePolicies);
char QNetworkSession_WaitForOpened(void* ptr, int msecs);
void QNetworkSession_DestroyQNetworkSession(void* ptr);
void QNetworkSession_DestroyQNetworkSessionDefault(void* ptr);
void* QOcspResponse_NewQOcspResponse();
void* QOcspResponse_NewQOcspResponse2(void* other);
void* QOcspResponse_NewQOcspResponse3(void* other);
void* QOcspResponse_Subject(void* ptr);
void QOcspResponse_Swap(void* ptr, void* other);
void QOcspResponse_DestroyQOcspResponse(void* ptr);
int QSsl_SecureProtocols_Type();
void* QSslCertificate_NewQSslCertificate(void* device, long long format);
void* QSslCertificate_NewQSslCertificate2(void* data, long long format);
void* QSslCertificate_NewQSslCertificate3(void* other);
void QSslCertificate_Clear(void* ptr);
void* QSslCertificate_Digest(void* ptr, long long algorithm);
void* QSslCertificate_EffectiveDate(void* ptr);
void* QSslCertificate_ExpiryDate(void* ptr);
struct QtNetwork_PackedList QSslCertificate_Extensions(void* ptr);
struct QtNetwork_PackedList QSslCertificate_QSslCertificate_FromData(void* data, long long format);
struct QtNetwork_PackedList QSslCertificate_QSslCertificate_FromDevice(void* device, long long format);
struct QtNetwork_PackedList QSslCertificate_QSslCertificate_FromPath2(struct QtNetwork_PackedString path, long long format, long long syntax);
char QSslCertificate_QSslCertificate_ImportPkcs12(void* device, void* key, void* certificate, void* caCertificates, void* passPhrase);
char QSslCertificate_IsBlacklisted(void* ptr);
char QSslCertificate_IsNull(void* ptr);
char QSslCertificate_IsSelfSigned(void* ptr);
struct QtNetwork_PackedString QSslCertificate_IssuerDisplayName(void* ptr);
struct QtNetwork_PackedString QSslCertificate_IssuerInfo(void* ptr, long long subject);
struct QtNetwork_PackedString QSslCertificate_IssuerInfo2(void* ptr, void* attribute);
struct QtNetwork_PackedList QSslCertificate_IssuerInfoAttributes(void* ptr);
void* QSslCertificate_PublicKey(void* ptr);
void* QSslCertificate_SerialNumber(void* ptr);
struct QtNetwork_PackedList QSslCertificate_SubjectAlternativeNames(void* ptr);
struct QtNetwork_PackedString QSslCertificate_SubjectDisplayName(void* ptr);
struct QtNetwork_PackedString QSslCertificate_SubjectInfo(void* ptr, long long subject);
struct QtNetwork_PackedString QSslCertificate_SubjectInfo2(void* ptr, void* attribute);
struct QtNetwork_PackedList QSslCertificate_SubjectInfoAttributes(void* ptr);
void QSslCertificate_Swap(void* ptr, void* other);
void* QSslCertificate_ToDer(void* ptr);
void* QSslCertificate_ToPem(void* ptr);
struct QtNetwork_PackedString QSslCertificate_ToText(void* ptr);
struct QtNetwork_PackedList QSslCertificate_QSslCertificate_Verify(void* certificateChain, struct QtNetwork_PackedString hostName);
void* QSslCertificate_Version(void* ptr);
void QSslCertificate_DestroyQSslCertificate(void* ptr);
void* QSslCertificate___extensions_atList(void* ptr, int i);
void QSslCertificate___extensions_setList(void* ptr, void* i);
void* QSslCertificate___extensions_newList(void* ptr);
void* QSslCertificate___fromData_atList(void* ptr, int i);
void QSslCertificate___fromData_setList(void* ptr, void* i);
void* QSslCertificate___fromData_newList(void* ptr);
void* QSslCertificate___fromDevice_atList(void* ptr, int i);
void QSslCertificate___fromDevice_setList(void* ptr, void* i);
void* QSslCertificate___fromDevice_newList(void* ptr);
void* QSslCertificate___fromPath_atList(void* ptr, int i);
void QSslCertificate___fromPath_setList(void* ptr, void* i);
void* QSslCertificate___fromPath_newList(void* ptr);
void* QSslCertificate___fromPath_atList2(void* ptr, int i);
void QSslCertificate___fromPath_setList2(void* ptr, void* i);
void* QSslCertificate___fromPath_newList2(void* ptr);
void* QSslCertificate___importPkcs12_caCertificates_atList(void* ptr, int i);
void QSslCertificate___importPkcs12_caCertificates_setList(void* ptr, void* i);
void* QSslCertificate___importPkcs12_caCertificates_newList(void* ptr);
void* QSslCertificate___issuerInfoAttributes_atList(void* ptr, int i);
void QSslCertificate___issuerInfoAttributes_setList(void* ptr, void* i);
void* QSslCertificate___issuerInfoAttributes_newList(void* ptr);
struct QtNetwork_PackedString QSslCertificate___subjectAlternativeNames_atList(void* ptr, long long v, int i);
void QSslCertificate___subjectAlternativeNames_setList(void* ptr, long long key, struct QtNetwork_PackedString i);
void* QSslCertificate___subjectAlternativeNames_newList(void* ptr);
struct QtNetwork_PackedList QSslCertificate___subjectAlternativeNames_keyList(void* ptr);
void* QSslCertificate___subjectInfoAttributes_atList(void* ptr, int i);
void QSslCertificate___subjectInfoAttributes_setList(void* ptr, void* i);
void* QSslCertificate___subjectInfoAttributes_newList(void* ptr);
void* QSslCertificate___verify_atList(void* ptr, int i);
void QSslCertificate___verify_setList(void* ptr, void* i);
void* QSslCertificate___verify_newList(void* ptr);
void* QSslCertificate___verify_certificateChain_atList(void* ptr, int i);
void QSslCertificate___verify_certificateChain_setList(void* ptr, void* i);
void* QSslCertificate___verify_certificateChain_newList(void* ptr);
long long QSslCertificate_____subjectAlternativeNames_keyList_atList(void* ptr, int i);
void QSslCertificate_____subjectAlternativeNames_keyList_setList(void* ptr, long long i);
void* QSslCertificate_____subjectAlternativeNames_keyList_newList(void* ptr);
void* QSslCertificateExtension_NewQSslCertificateExtension();
void* QSslCertificateExtension_NewQSslCertificateExtension2(void* other);
char QSslCertificateExtension_IsCritical(void* ptr);
char QSslCertificateExtension_IsSupported(void* ptr);
struct QtNetwork_PackedString QSslCertificateExtension_Name(void* ptr);
struct QtNetwork_PackedString QSslCertificateExtension_Oid(void* ptr);
void QSslCertificateExtension_Swap(void* ptr, void* other);
void* QSslCertificateExtension_Value(void* ptr);
void QSslCertificateExtension_DestroyQSslCertificateExtension(void* ptr);
void* QSslCipher_NewQSslCipher();
void* QSslCipher_NewQSslCipher2(struct QtNetwork_PackedString name);
void* QSslCipher_NewQSslCipher3(struct QtNetwork_PackedString name, long long protoc);
void* QSslCipher_NewQSslCipher4(void* other);
struct QtNetwork_PackedString QSslCipher_AuthenticationMethod(void* ptr);
struct QtNetwork_PackedString QSslCipher_EncryptionMethod(void* ptr);
char QSslCipher_IsNull(void* ptr);
struct QtNetwork_PackedString QSslCipher_KeyExchangeMethod(void* ptr);
struct QtNetwork_PackedString QSslCipher_Name(void* ptr);
long long QSslCipher_Protocol(void* ptr);
struct QtNetwork_PackedString QSslCipher_ProtocolString(void* ptr);
int QSslCipher_SupportedBits(void* ptr);
void QSslCipher_Swap(void* ptr, void* other);
int QSslCipher_UsedBits(void* ptr);
void QSslCipher_DestroyQSslCipher(void* ptr);
void* QSslConfiguration_NewQSslConfiguration();
void* QSslConfiguration_NewQSslConfiguration2(void* other);
void QSslConfiguration_AddCaCertificate(void* ptr, void* certificate);
char QSslConfiguration_AddCaCertificates(void* ptr, struct QtNetwork_PackedString path, long long format, long long syntax);
void QSslConfiguration_AddCaCertificates2(void* ptr, void* certificates);
struct QtNetwork_PackedList QSslConfiguration_AllowedNextProtocols(void* ptr);
struct QtNetwork_PackedList QSslConfiguration_BackendConfiguration(void* ptr);
struct QtNetwork_PackedList QSslConfiguration_CaCertificates(void* ptr);
struct QtNetwork_PackedList QSslConfiguration_Ciphers(void* ptr);
void* QSslConfiguration_QSslConfiguration_DefaultConfiguration();
void* QSslConfiguration_DiffieHellmanParameters(void* ptr);
void* QSslConfiguration_EphemeralServerKey(void* ptr);
char QSslConfiguration_IsNull(void* ptr);
void* QSslConfiguration_LocalCertificate(void* ptr);
struct QtNetwork_PackedList QSslConfiguration_LocalCertificateChain(void* ptr);
void* QSslConfiguration_NextNegotiatedProtocol(void* ptr);
long long QSslConfiguration_NextProtocolNegotiationStatus(void* ptr);
char QSslConfiguration_OcspStaplingEnabled(void* ptr);
void* QSslConfiguration_PeerCertificate(void* ptr);
struct QtNetwork_PackedList QSslConfiguration_PeerCertificateChain(void* ptr);
int QSslConfiguration_PeerVerifyDepth(void* ptr);
long long QSslConfiguration_PeerVerifyMode(void* ptr);
void* QSslConfiguration_PreSharedKeyIdentityHint(void* ptr);
void* QSslConfiguration_PrivateKey(void* ptr);
long long QSslConfiguration_Protocol(void* ptr);
void* QSslConfiguration_SessionCipher(void* ptr);
long long QSslConfiguration_SessionProtocol(void* ptr);
void* QSslConfiguration_SessionTicket(void* ptr);
int QSslConfiguration_SessionTicketLifeTimeHint(void* ptr);
void QSslConfiguration_SetAllowedNextProtocols(void* ptr, void* protocols);
void QSslConfiguration_SetBackendConfiguration(void* ptr, void* backendConfiguration);
void QSslConfiguration_SetBackendConfigurationOption(void* ptr, void* name, void* value);
void QSslConfiguration_SetCaCertificates(void* ptr, void* certificates);
void QSslConfiguration_SetCiphers(void* ptr, void* ciphers);
void QSslConfiguration_QSslConfiguration_SetDefaultConfiguration(void* configuration);
void QSslConfiguration_SetDiffieHellmanParameters(void* ptr, void* dhparams);
void QSslConfiguration_SetEllipticCurves(void* ptr, void* curves);
void QSslConfiguration_SetLocalCertificate(void* ptr, void* certificate);
void QSslConfiguration_SetLocalCertificateChain(void* ptr, void* localChain);
void QSslConfiguration_SetOcspStaplingEnabled(void* ptr, char enabled);
void QSslConfiguration_SetPeerVerifyDepth(void* ptr, int depth);
void QSslConfiguration_SetPeerVerifyMode(void* ptr, long long mode);
void QSslConfiguration_SetPreSharedKeyIdentityHint(void* ptr, void* hint);
void QSslConfiguration_SetPrivateKey(void* ptr, void* key);
void QSslConfiguration_SetProtocol(void* ptr, long long protoc);
void QSslConfiguration_SetSessionTicket(void* ptr, void* sessionTicket);
void QSslConfiguration_SetSslOption(void* ptr, long long option, char on);
struct QtNetwork_PackedList QSslConfiguration_QSslConfiguration_SupportedCiphers();
void QSslConfiguration_Swap(void* ptr, void* other);
struct QtNetwork_PackedList QSslConfiguration_QSslConfiguration_SystemCaCertificates();
char QSslConfiguration_TestSslOption(void* ptr, long long option);
void QSslConfiguration_DestroyQSslConfiguration(void* ptr);
void* QSslConfiguration___addCaCertificates_certificates_atList2(void* ptr, int i);
void QSslConfiguration___addCaCertificates_certificates_setList2(void* ptr, void* i);
void* QSslConfiguration___addCaCertificates_certificates_newList2(void* ptr);
void* QSslConfiguration___allowedNextProtocols_atList(void* ptr, int i);
void QSslConfiguration___allowedNextProtocols_setList(void* ptr, void* i);
void* QSslConfiguration___allowedNextProtocols_newList(void* ptr);
void* QSslConfiguration___backendConfiguration_atList(void* ptr, void* v, int i);
void QSslConfiguration___backendConfiguration_setList(void* ptr, void* key, void* i);
void* QSslConfiguration___backendConfiguration_newList(void* ptr);
struct QtNetwork_PackedList QSslConfiguration___backendConfiguration_keyList(void* ptr);
void* QSslConfiguration___caCertificates_atList(void* ptr, int i);
void QSslConfiguration___caCertificates_setList(void* ptr, void* i);
void* QSslConfiguration___caCertificates_newList(void* ptr);
void* QSslConfiguration___ciphers_atList(void* ptr, int i);
void QSslConfiguration___ciphers_setList(void* ptr, void* i);
void* QSslConfiguration___ciphers_newList(void* ptr);
void* QSslConfiguration___ellipticCurves_atList(void* ptr, int i);
void QSslConfiguration___ellipticCurves_setList(void* ptr, void* i);
void* QSslConfiguration___ellipticCurves_newList(void* ptr);
void* QSslConfiguration___localCertificateChain_atList(void* ptr, int i);
void QSslConfiguration___localCertificateChain_setList(void* ptr, void* i);
void* QSslConfiguration___localCertificateChain_newList(void* ptr);
void* QSslConfiguration___peerCertificateChain_atList(void* ptr, int i);
void QSslConfiguration___peerCertificateChain_setList(void* ptr, void* i);
void* QSslConfiguration___peerCertificateChain_newList(void* ptr);
void* QSslConfiguration___setAllowedNextProtocols_protocols_atList(void* ptr, int i);
void QSslConfiguration___setAllowedNextProtocols_protocols_setList(void* ptr, void* i);
void* QSslConfiguration___setAllowedNextProtocols_protocols_newList(void* ptr);
void* QSslConfiguration___setBackendConfiguration_backendConfiguration_atList(void* ptr, void* v, int i);
void QSslConfiguration___setBackendConfiguration_backendConfiguration_setList(void* ptr, void* key, void* i);
void* QSslConfiguration___setBackendConfiguration_backendConfiguration_newList(void* ptr);
struct QtNetwork_PackedList QSslConfiguration___setBackendConfiguration_backendConfiguration_keyList(void* ptr);
void* QSslConfiguration___setCaCertificates_certificates_atList(void* ptr, int i);
void QSslConfiguration___setCaCertificates_certificates_setList(void* ptr, void* i);
void* QSslConfiguration___setCaCertificates_certificates_newList(void* ptr);
void* QSslConfiguration___setCiphers_ciphers_atList(void* ptr, int i);
void QSslConfiguration___setCiphers_ciphers_setList(void* ptr, void* i);
void* QSslConfiguration___setCiphers_ciphers_newList(void* ptr);
void* QSslConfiguration___setEllipticCurves_curves_atList(void* ptr, int i);
void QSslConfiguration___setEllipticCurves_curves_setList(void* ptr, void* i);
void* QSslConfiguration___setEllipticCurves_curves_newList(void* ptr);
void* QSslConfiguration___setLocalCertificateChain_localChain_atList(void* ptr, int i);
void QSslConfiguration___setLocalCertificateChain_localChain_setList(void* ptr, void* i);
void* QSslConfiguration___setLocalCertificateChain_localChain_newList(void* ptr);
void* QSslConfiguration___supportedCiphers_atList(void* ptr, int i);
void QSslConfiguration___supportedCiphers_setList(void* ptr, void* i);
void* QSslConfiguration___supportedCiphers_newList(void* ptr);
void* QSslConfiguration___supportedEllipticCurves_atList(void* ptr, int i);
void QSslConfiguration___supportedEllipticCurves_setList(void* ptr, void* i);
void* QSslConfiguration___supportedEllipticCurves_newList(void* ptr);
void* QSslConfiguration___systemCaCertificates_atList(void* ptr, int i);
void QSslConfiguration___systemCaCertificates_setList(void* ptr, void* i);
void* QSslConfiguration___systemCaCertificates_newList(void* ptr);
void* QSslConfiguration_____backendConfiguration_keyList_atList(void* ptr, int i);
void QSslConfiguration_____backendConfiguration_keyList_setList(void* ptr, void* i);
void* QSslConfiguration_____backendConfiguration_keyList_newList(void* ptr);
void* QSslConfiguration_____setBackendConfiguration_backendConfiguration_keyList_atList(void* ptr, int i);
void QSslConfiguration_____setBackendConfiguration_backendConfiguration_keyList_setList(void* ptr, void* i);
void* QSslConfiguration_____setBackendConfiguration_backendConfiguration_keyList_newList(void* ptr);
void* QSslDiffieHellmanParameters_NewQSslDiffieHellmanParameters();
void* QSslDiffieHellmanParameters_NewQSslDiffieHellmanParameters2(void* other);
void* QSslDiffieHellmanParameters_NewQSslDiffieHellmanParameters3(void* other);
void* QSslDiffieHellmanParameters_QSslDiffieHellmanParameters_DefaultParameters();
long long QSslDiffieHellmanParameters_Error(void* ptr);
struct QtNetwork_PackedString QSslDiffieHellmanParameters_ErrorString(void* ptr);
void* QSslDiffieHellmanParameters_QSslDiffieHellmanParameters_FromEncoded(void* encoded, long long encoding);
void* QSslDiffieHellmanParameters_QSslDiffieHellmanParameters_FromEncoded2(void* device, long long encoding);
char QSslDiffieHellmanParameters_IsEmpty(void* ptr);
char QSslDiffieHellmanParameters_IsValid(void* ptr);
void QSslDiffieHellmanParameters_Swap(void* ptr, void* other);
void QSslDiffieHellmanParameters_DestroyQSslDiffieHellmanParameters(void* ptr);
void* QSslEllipticCurve_NewQSslEllipticCurve();
void* QSslEllipticCurve_QSslEllipticCurve_FromLongName(struct QtNetwork_PackedString name);
void* QSslEllipticCurve_QSslEllipticCurve_FromShortName(struct QtNetwork_PackedString name);
char QSslEllipticCurve_IsTlsNamedCurve(void* ptr);
char QSslEllipticCurve_IsValid(void* ptr);
struct QtNetwork_PackedString QSslEllipticCurve_LongName(void* ptr);
struct QtNetwork_PackedString QSslEllipticCurve_ShortName(void* ptr);
void* QSslError_NewQSslError();
void* QSslError_NewQSslError2(long long error);
void* QSslError_NewQSslError3(long long error, void* certificate);
void* QSslError_NewQSslError4(void* other);
void* QSslError_Certificate(void* ptr);
long long QSslError_Error(void* ptr);
struct QtNetwork_PackedString QSslError_ErrorString(void* ptr);
void QSslError_Swap(void* ptr, void* other);
void QSslError_DestroyQSslError(void* ptr);
void* QSslKey_NewQSslKey();
void* QSslKey_NewQSslKey2(void* encoded, long long algorithm, long long encoding, long long ty, void* passPhrase);
void* QSslKey_NewQSslKey3(void* device, long long algorithm, long long encoding, long long ty, void* passPhrase);
void* QSslKey_NewQSslKey5(void* other);
long long QSslKey_Algorithm(void* ptr);
void QSslKey_Clear(void* ptr);
char QSslKey_IsNull(void* ptr);
int QSslKey_Length(void* ptr);
void QSslKey_Swap(void* ptr, void* other);
void* QSslKey_ToDer(void* ptr, void* passPhrase);
void* QSslKey_ToPem(void* ptr, void* passPhrase);
long long QSslKey_Type(void* ptr);
void QSslKey_DestroyQSslKey(void* ptr);
void* QSslPreSharedKeyAuthenticator_NewQSslPreSharedKeyAuthenticator();
void* QSslPreSharedKeyAuthenticator_NewQSslPreSharedKeyAuthenticator2(void* authenticator);
void* QSslPreSharedKeyAuthenticator_Identity(void* ptr);
void* QSslPreSharedKeyAuthenticator_IdentityHint(void* ptr);
int QSslPreSharedKeyAuthenticator_MaximumIdentityLength(void* ptr);
int QSslPreSharedKeyAuthenticator_MaximumPreSharedKeyLength(void* ptr);
void* QSslPreSharedKeyAuthenticator_PreSharedKey(void* ptr);
void QSslPreSharedKeyAuthenticator_SetIdentity(void* ptr, void* identity);
void QSslPreSharedKeyAuthenticator_SetPreSharedKey(void* ptr, void* preSharedKey);
void QSslPreSharedKeyAuthenticator_Swap(void* ptr, void* authenticator);
void QSslPreSharedKeyAuthenticator_DestroyQSslPreSharedKeyAuthenticator(void* ptr);
void* QSslSocket_NewQSslSocket(void* parent);
void QSslSocket_ConnectToHostEncrypted(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, long long mode, long long protoc);
void QSslSocket_ConnectToHostEncrypted2(void* ptr, struct QtNetwork_PackedString hostName, unsigned short port, struct QtNetwork_PackedString sslPeerName, long long mode, long long protoc);
void QSslSocket_ConnectEncrypted(void* ptr, long long t);
void QSslSocket_DisconnectEncrypted(void* ptr);
void QSslSocket_Encrypted(void* ptr);
long long QSslSocket_EncryptedBytesAvailable(void* ptr);
long long QSslSocket_EncryptedBytesToWrite(void* ptr);
void QSslSocket_ConnectEncryptedBytesWritten(void* ptr, long long t);
void QSslSocket_DisconnectEncryptedBytesWritten(void* ptr);
void QSslSocket_EncryptedBytesWritten(void* ptr, long long written);
void QSslSocket_IgnoreSslErrors(void* ptr);
void QSslSocket_IgnoreSslErrorsDefault(void* ptr);
void QSslSocket_IgnoreSslErrors2(void* ptr, void* errors);
char QSslSocket_IsEncrypted(void* ptr);
void* QSslSocket_LocalCertificate(void* ptr);
struct QtNetwork_PackedList QSslSocket_LocalCertificateChain(void* ptr);
long long QSslSocket_Mode(void* ptr);
void QSslSocket_ConnectModeChanged(void* ptr, long long t);
void QSslSocket_DisconnectModeChanged(void* ptr);
void QSslSocket_ModeChanged(void* ptr, long long mode);
void QSslSocket_ConnectNewSessionTicketReceived(void* ptr, long long t);
void QSslSocket_DisconnectNewSessionTicketReceived(void* ptr);
void QSslSocket_NewSessionTicketReceived(void* ptr);
struct QtNetwork_PackedList QSslSocket_OcspResponses(void* ptr);
void* QSslSocket_PeerCertificate(void* ptr);
struct QtNetwork_PackedList QSslSocket_PeerCertificateChain(void* ptr);
int QSslSocket_PeerVerifyDepth(void* ptr);
void QSslSocket_ConnectPeerVerifyError(void* ptr, long long t);
void QSslSocket_DisconnectPeerVerifyError(void* ptr);
void QSslSocket_PeerVerifyError(void* ptr, void* error);
long long QSslSocket_PeerVerifyMode(void* ptr);
struct QtNetwork_PackedString QSslSocket_PeerVerifyName(void* ptr);
void QSslSocket_ConnectPreSharedKeyAuthenticationRequired(void* ptr, long long t);
void QSslSocket_DisconnectPreSharedKeyAuthenticationRequired(void* ptr);
void QSslSocket_PreSharedKeyAuthenticationRequired(void* ptr, void* authenticator);
void* QSslSocket_PrivateKey(void* ptr);
long long QSslSocket_Protocol(void* ptr);
void* QSslSocket_SessionCipher(void* ptr);
long long QSslSocket_SessionProtocol(void* ptr);
void QSslSocket_SetLocalCertificate(void* ptr, void* certificate);
void QSslSocket_SetLocalCertificate2(void* ptr, struct QtNetwork_PackedString path, long long format);
void QSslSocket_SetLocalCertificateChain(void* ptr, void* localChain);
void QSslSocket_SetPeerVerifyDepth(void* ptr, int depth);
void QSslSocket_SetPeerVerifyMode(void* ptr, long long mode);
void QSslSocket_SetPeerVerifyName(void* ptr, struct QtNetwork_PackedString hostName);
void QSslSocket_SetPrivateKey(void* ptr, void* key);
void QSslSocket_SetPrivateKey2(void* ptr, struct QtNetwork_PackedString fileName, long long algorithm, long long format, void* passPhrase);
void QSslSocket_SetProtocol(void* ptr, long long protoc);
void QSslSocket_SetSslConfiguration(void* ptr, void* configuration);
void* QSslSocket_SslConfiguration(void* ptr);
void QSslSocket_ConnectSslErrors2(void* ptr, long long t);
void QSslSocket_DisconnectSslErrors2(void* ptr);
void QSslSocket_SslErrors2(void* ptr, void* errors);
struct QtNetwork_PackedList QSslSocket_SslHandshakeErrors(void* ptr);
long QSslSocket_QSslSocket_SslLibraryBuildVersionNumber();
struct QtNetwork_PackedString QSslSocket_QSslSocket_SslLibraryBuildVersionString();
long QSslSocket_QSslSocket_SslLibraryVersionNumber();
struct QtNetwork_PackedString QSslSocket_QSslSocket_SslLibraryVersionString();
void QSslSocket_StartClientEncryption(void* ptr);
void QSslSocket_StartClientEncryptionDefault(void* ptr);
void QSslSocket_StartServerEncryption(void* ptr);
void QSslSocket_StartServerEncryptionDefault(void* ptr);
char QSslSocket_QSslSocket_SupportsSsl();
char QSslSocket_WaitForEncrypted(void* ptr, int msecs);
void QSslSocket_DestroyQSslSocket(void* ptr);
void QSslSocket_DestroyQSslSocketDefault(void* ptr);
void* QSslSocket___addCaCertificates_certificates_atList2(void* ptr, int i);
void QSslSocket___addCaCertificates_certificates_setList2(void* ptr, void* i);
void* QSslSocket___addCaCertificates_certificates_newList2(void* ptr);
void* QSslSocket___addDefaultCaCertificates_certificates_atList2(void* ptr, int i);
void QSslSocket___addDefaultCaCertificates_certificates_setList2(void* ptr, void* i);
void* QSslSocket___addDefaultCaCertificates_certificates_newList2(void* ptr);
void* QSslSocket___caCertificates_atList(void* ptr, int i);
void QSslSocket___caCertificates_setList(void* ptr, void* i);
void* QSslSocket___caCertificates_newList(void* ptr);
void* QSslSocket___ciphers_atList(void* ptr, int i);
void QSslSocket___ciphers_setList(void* ptr, void* i);
void* QSslSocket___ciphers_newList(void* ptr);
void* QSslSocket___defaultCaCertificates_atList(void* ptr, int i);
void QSslSocket___defaultCaCertificates_setList(void* ptr, void* i);
void* QSslSocket___defaultCaCertificates_newList(void* ptr);
void* QSslSocket___defaultCiphers_atList(void* ptr, int i);
void QSslSocket___defaultCiphers_setList(void* ptr, void* i);
void* QSslSocket___defaultCiphers_newList(void* ptr);
void* QSslSocket___ignoreSslErrors_errors_atList2(void* ptr, int i);
void QSslSocket___ignoreSslErrors_errors_setList2(void* ptr, void* i);
void* QSslSocket___ignoreSslErrors_errors_newList2(void* ptr);
void* QSslSocket___localCertificateChain_atList(void* ptr, int i);
void QSslSocket___localCertificateChain_setList(void* ptr, void* i);
void* QSslSocket___localCertificateChain_newList(void* ptr);
void* QSslSocket___ocspResponses_atList(void* ptr, int i);
void QSslSocket___ocspResponses_setList(void* ptr, void* i);
void* QSslSocket___ocspResponses_newList(void* ptr);
void* QSslSocket___peerCertificateChain_atList(void* ptr, int i);
void QSslSocket___peerCertificateChain_setList(void* ptr, void* i);
void* QSslSocket___peerCertificateChain_newList(void* ptr);
void* QSslSocket___setCaCertificates_certificates_atList(void* ptr, int i);
void QSslSocket___setCaCertificates_certificates_setList(void* ptr, void* i);
void* QSslSocket___setCaCertificates_certificates_newList(void* ptr);
void* QSslSocket___setCiphers_ciphers_atList(void* ptr, int i);
void QSslSocket___setCiphers_ciphers_setList(void* ptr, void* i);
void* QSslSocket___setCiphers_ciphers_newList(void* ptr);
void* QSslSocket___setDefaultCaCertificates_certificates_atList(void* ptr, int i);
void QSslSocket___setDefaultCaCertificates_certificates_setList(void* ptr, void* i);
void* QSslSocket___setDefaultCaCertificates_certificates_newList(void* ptr);
void* QSslSocket___setDefaultCiphers_ciphers_atList(void* ptr, int i);
void QSslSocket___setDefaultCiphers_ciphers_setList(void* ptr, void* i);
void* QSslSocket___setDefaultCiphers_ciphers_newList(void* ptr);
void* QSslSocket___setLocalCertificateChain_localChain_atList(void* ptr, int i);
void QSslSocket___setLocalCertificateChain_localChain_setList(void* ptr, void* i);
void* QSslSocket___setLocalCertificateChain_localChain_newList(void* ptr);
void* QSslSocket___sslErrors_atList(void* ptr, int i);
void QSslSocket___sslErrors_setList(void* ptr, void* i);
void* QSslSocket___sslErrors_newList(void* ptr);
void* QSslSocket___sslErrors_errors_atList2(void* ptr, int i);
void QSslSocket___sslErrors_errors_setList2(void* ptr, void* i);
void* QSslSocket___sslErrors_errors_newList2(void* ptr);
void* QSslSocket___sslHandshakeErrors_atList(void* ptr, int i);
void QSslSocket___sslHandshakeErrors_setList(void* ptr, void* i);
void* QSslSocket___sslHandshakeErrors_newList(void* ptr);
void* QSslSocket___supportedCiphers_atList(void* ptr, int i);
void QSslSocket___supportedCiphers_setList(void* ptr, void* i);
void* QSslSocket___supportedCiphers_newList(void* ptr);
void* QSslSocket___systemCaCertificates_atList(void* ptr, int i);
void QSslSocket___systemCaCertificates_setList(void* ptr, void* i);
void* QSslSocket___systemCaCertificates_newList(void* ptr);
void* QTcpServer_NewQTcpServer(void* parent);
void QTcpServer_ConnectAcceptError(void* ptr, long long t);
void QTcpServer_DisconnectAcceptError(void* ptr);
void QTcpServer_AcceptError(void* ptr, long long socketError);
void QTcpServer_AddPendingConnection(void* ptr, void* socket);
void QTcpServer_Close(void* ptr);
struct QtNetwork_PackedString QTcpServer_ErrorString(void* ptr);
char QTcpServer_HasPendingConnections(void* ptr);
char QTcpServer_HasPendingConnectionsDefault(void* ptr);
char QTcpServer_IsListening(void* ptr);
char QTcpServer_Listen(void* ptr, void* address, unsigned short port);
int QTcpServer_MaxPendingConnections(void* ptr);
void QTcpServer_ConnectNewConnection(void* ptr, long long t);
void QTcpServer_DisconnectNewConnection(void* ptr);
void QTcpServer_NewConnection(void* ptr);
void* QTcpServer_NextPendingConnection(void* ptr);
void* QTcpServer_NextPendingConnectionDefault(void* ptr);
void QTcpServer_PauseAccepting(void* ptr);
void* QTcpServer_Proxy(void* ptr);
void QTcpServer_ResumeAccepting(void* ptr);
void* QTcpServer_ServerAddress(void* ptr);
long long QTcpServer_ServerError(void* ptr);
unsigned short QTcpServer_ServerPort(void* ptr);
void QTcpServer_SetMaxPendingConnections(void* ptr, int numConnections);
void QTcpServer_SetProxy(void* ptr, void* networkProxy);
char QTcpServer_WaitForNewConnection(void* ptr, int msec, char* timedOut);
void QTcpServer_DestroyQTcpServer(void* ptr);
void QTcpServer_DestroyQTcpServerDefault(void* ptr);
void* QTcpServer___children_atList(void* ptr, int i);
void QTcpServer___children_setList(void* ptr, void* i);
void* QTcpServer___children_newList(void* ptr);
void* QTcpServer___dynamicPropertyNames_atList(void* ptr, int i);
void QTcpServer___dynamicPropertyNames_setList(void* ptr, void* i);
void* QTcpServer___dynamicPropertyNames_newList(void* ptr);
void* QTcpServer___findChildren_atList(void* ptr, int i);
void QTcpServer___findChildren_setList(void* ptr, void* i);
void* QTcpServer___findChildren_newList(void* ptr);
void* QTcpServer___findChildren_atList3(void* ptr, int i);
void QTcpServer___findChildren_setList3(void* ptr, void* i);
void* QTcpServer___findChildren_newList3(void* ptr);
void QTcpServer_ChildEventDefault(void* ptr, void* event);
void QTcpServer_ConnectNotifyDefault(void* ptr, void* sign);
void QTcpServer_CustomEventDefault(void* ptr, void* event);
void QTcpServer_DeleteLaterDefault(void* ptr);
void QTcpServer_DisconnectNotifyDefault(void* ptr, void* sign);
char QTcpServer_EventDefault(void* ptr, void* e);
char QTcpServer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTcpServer_MetaObjectDefault(void* ptr);
void QTcpServer_TimerEventDefault(void* ptr, void* event);
void* QTcpSocket_NewQTcpSocket(void* parent);
void QTcpSocket_DestroyQTcpSocket(void* ptr);
void QTcpSocket_DestroyQTcpSocketDefault(void* ptr);
void* QUdpSocket_NewQUdpSocket(void* parent);
char QUdpSocket_HasPendingDatagrams(void* ptr);
char QUdpSocket_JoinMulticastGroup(void* ptr, void* groupAddress);
char QUdpSocket_JoinMulticastGroup2(void* ptr, void* groupAddress, void* iface);
char QUdpSocket_LeaveMulticastGroup(void* ptr, void* groupAddress);
char QUdpSocket_LeaveMulticastGroup2(void* ptr, void* groupAddress, void* iface);
void* QUdpSocket_MulticastInterface(void* ptr);
long long QUdpSocket_PendingDatagramSize(void* ptr);
long long QUdpSocket_ReadDatagram(void* ptr, char* data, long long maxSize, void* address, unsigned short port);
void* QUdpSocket_ReceiveDatagram(void* ptr, long long maxSize);
void QUdpSocket_SetMulticastInterface(void* ptr, void* iface);
long long QUdpSocket_WriteDatagram(void* ptr, char* data, long long size, void* address, unsigned short port);
long long QUdpSocket_WriteDatagram2(void* ptr, void* datagram);
long long QUdpSocket_WriteDatagram3(void* ptr, void* datagram, void* host, unsigned short port);
void QUdpSocket_DestroyQUdpSocket(void* ptr);
void QUdpSocket_DestroyQUdpSocketDefault(void* ptr);
void* RawHeader_NewRawHeader();
void* RawHeader_NewRawHeader2(void* first, void* second);
void* RawHeader_First(void* ptr);
void RawHeader_SetFirst(void* ptr, void* vqb);
void* RawHeader_Second(void* ptr);
void RawHeader_SetSecond(void* ptr, void* vqb);

#ifdef __cplusplus
}
#endif

#endif